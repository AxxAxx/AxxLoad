
STM32G431_AxxLOAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8f0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f4  0800bad0  0800bad0  0001bad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3c4  0800c3c4  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3c4  0800c3c4  0001c3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3cc  0800c3cc  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3cc  0800c3cc  0001c3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3d0  0800c3d0  0001c3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800c3d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000200  0800c5d4  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000694  0800c5d4  00020694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a990  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c23  00000000  00000000  0003abc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b8  00000000  00000000  0003d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001660  00000000  00000000  0003efa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020f65  00000000  00000000  00040600  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001251f  00000000  00000000  00061565  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de398  00000000  00000000  00073a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151e1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072dc  00000000  00000000  00151e98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bab8 	.word	0x0800bab8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	0800bab8 	.word	0x0800bab8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <debugPrintln>:
	uint32_t   measuredPower;
	float   amperehours;
	float   watthours;
};

void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
    txDone = false;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <debugPrintln+0x68>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) _out, strlen(_out));
 8000fe8:	6838      	ldr	r0, [r7, #0]
 8000fea:	f7ff f919 	bl	8000220 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	6839      	ldr	r1, [r7, #0]
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f006 fef6 	bl	8007de8 <HAL_UART_Transmit_IT>
	while(!txDone);
 8000ffc:	bf00      	nop
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <debugPrintln+0x68>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f083 0301 	eor.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f8      	bne.n	8000ffe <debugPrintln+0x26>
	char newline[2] = "\r\n";
 800100c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001010:	81bb      	strh	r3, [r7, #12]
    txDone = false;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <debugPrintln+0x68>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) newline, 2);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2202      	movs	r2, #2
 800101e:	4619      	mov	r1, r3
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f006 fee1 	bl	8007de8 <HAL_UART_Transmit_IT>
	while(!txDone);
 8001026:	bf00      	nop
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <debugPrintln+0x68>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f083 0301 	eor.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f8      	bne.n	8001028 <debugPrintln+0x50>

}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000004 	.word	0x20000004
 8001044:	00000000 	.word	0x00000000

08001048 <adc2Temperature>:

uint16_t adc2Temperature(uint16_t adcValue, uint16_t adcResolution){
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	80fb      	strh	r3, [r7, #6]
 8001054:	4613      	mov	r3, r2
 8001056:	80bb      	strh	r3, [r7, #4]

	temperatureC = (float)adcResolution / adcValue - 1;
 8001058:	88bb      	ldrh	r3, [r7, #4]
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001078:	4b41      	ldr	r3, [pc, #260]	; (8001180 <adc2Temperature+0x138>)
 800107a:	edc3 7a00 	vstr	s15, [r3]
	temperatureC = SERIESRESISTOR / temperatureC;
 800107e:	4b40      	ldr	r3, [pc, #256]	; (8001180 <adc2Temperature+0x138>)
 8001080:	ed93 7a00 	vldr	s14, [r3]
 8001084:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001184 <adc2Temperature+0x13c>
 8001088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800108c:	4b3c      	ldr	r3, [pc, #240]	; (8001180 <adc2Temperature+0x138>)
 800108e:	edc3 7a00 	vstr	s15, [r3]

  temperatureC = temperatureC / THERMISTORNOMINAL;     // (R/Ro)
 8001092:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <adc2Temperature+0x138>)
 8001094:	ed93 7a00 	vldr	s14, [r3]
 8001098:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001184 <adc2Temperature+0x13c>
 800109c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a0:	4b37      	ldr	r3, [pc, #220]	; (8001180 <adc2Temperature+0x138>)
 80010a2:	edc3 7a00 	vstr	s15, [r3]
  temperatureC = log(temperatureC);                  // ln(R/Ro)
 80010a6:	4b36      	ldr	r3, [pc, #216]	; (8001180 <adc2Temperature+0x138>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa74 	bl	8000598 <__aeabi_f2d>
 80010b0:	4603      	mov	r3, r0
 80010b2:	460c      	mov	r4, r1
 80010b4:	ec44 3b10 	vmov	d0, r3, r4
 80010b8:	f00a fac0 	bl	800b63c <log>
 80010bc:	ec54 3b10 	vmov	r3, r4, d0
 80010c0:	4618      	mov	r0, r3
 80010c2:	4621      	mov	r1, r4
 80010c4:	f7ff fdb8 	bl	8000c38 <__aeabi_d2f>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <adc2Temperature+0x138>)
 80010cc:	601a      	str	r2, [r3, #0]
  temperatureC /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <adc2Temperature+0x138>)
 80010d0:	ed93 7a00 	vldr	s14, [r3]
 80010d4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001188 <adc2Temperature+0x140>
 80010d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010dc:	4b28      	ldr	r3, [pc, #160]	; (8001180 <adc2Temperature+0x138>)
 80010de:	edc3 7a00 	vstr	s15, [r3]
  temperatureC += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
 80010e2:	4b27      	ldr	r3, [pc, #156]	; (8001180 <adc2Temperature+0x138>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa56 	bl	8000598 <__aeabi_f2d>
 80010ec:	a320      	add	r3, pc, #128	; (adr r3, 8001170 <adc2Temperature+0x128>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff f8f3 	bl	80002dc <__adddf3>
 80010f6:	4603      	mov	r3, r0
 80010f8:	460c      	mov	r4, r1
 80010fa:	4618      	mov	r0, r3
 80010fc:	4621      	mov	r1, r4
 80010fe:	f7ff fd9b 	bl	8000c38 <__aeabi_d2f>
 8001102:	4602      	mov	r2, r0
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <adc2Temperature+0x138>)
 8001106:	601a      	str	r2, [r3, #0]
  temperatureC = 1.0 / temperatureC;                 // Invert
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <adc2Temperature+0x138>)
 800110a:	ed93 7a00 	vldr	s14, [r3]
 800110e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <adc2Temperature+0x138>)
 8001118:	edc3 7a00 	vstr	s15, [r3]
  temperatureC -= 273.15;                         // convert to C
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <adc2Temperature+0x138>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fa39 	bl	8000598 <__aeabi_f2d>
 8001126:	a314      	add	r3, pc, #80	; (adr r3, 8001178 <adc2Temperature+0x130>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff f8d4 	bl	80002d8 <__aeabi_dsub>
 8001130:	4603      	mov	r3, r0
 8001132:	460c      	mov	r4, r1
 8001134:	4618      	mov	r0, r3
 8001136:	4621      	mov	r1, r4
 8001138:	f7ff fd7e 	bl	8000c38 <__aeabi_d2f>
 800113c:	4602      	mov	r2, r0
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <adc2Temperature+0x138>)
 8001140:	601a      	str	r2, [r3, #0]
  temperatureC *= 10;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <adc2Temperature+0x138>)
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800114c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <adc2Temperature+0x138>)
 8001152:	edc3 7a00 	vstr	s15, [r3]
  return temperatureC;
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <adc2Temperature+0x138>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001160:	ee17 3a90 	vmov	r3, s15
 8001164:	b29b      	uxth	r3, r3
	}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bd90      	pop	{r4, r7, pc}
 800116e:	bf00      	nop
 8001170:	dcb5db83 	.word	0xdcb5db83
 8001174:	3f6b79e1 	.word	0x3f6b79e1
 8001178:	66666666 	.word	0x66666666
 800117c:	40711266 	.word	0x40711266
 8001180:	2000027c 	.word	0x2000027c
 8001184:	461c4000 	.word	0x461c4000
 8001188:	45734000 	.word	0x45734000

0800118c <debugPrint>:


void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
    txDone = false;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <debugPrint+0x3c>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) _out, strlen(_out));
 800119c:	6838      	ldr	r0, [r7, #0]
 800119e:	f7ff f83f 	bl	8000220 <strlen>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	461a      	mov	r2, r3
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f006 fe1c 	bl	8007de8 <HAL_UART_Transmit_IT>
	while(!txDone);
 80011b0:	bf00      	nop
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <debugPrint+0x3c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f083 0301 	eor.w	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f8      	bne.n	80011b2 <debugPrint+0x26>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000004 	.word	0x20000004

080011cc <printHELP>:

void printHELP(UART_HandleTypeDef *huart, struct statusValues statusValues_1){
 80011cc:	b084      	sub	sp, #16
 80011ce:	b590      	push	{r4, r7, lr}
 80011d0:	b089      	sub	sp, #36	; 0x24
 80011d2:	af06      	add	r7, sp, #24
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	f107 001c 	add.w	r0, r7, #28
 80011da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	  debugPrintln(huart, "|------------------------------------------|");
 80011de:	4932      	ldr	r1, [pc, #200]	; (80012a8 <printHELP+0xdc>)
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fef9 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "|      Axel Johansson's Electronic load    |");
 80011e6:	4931      	ldr	r1, [pc, #196]	; (80012ac <printHELP+0xe0>)
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff fef5 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "|      Version 2.2 2020                    |");
 80011ee:	4930      	ldr	r1, [pc, #192]	; (80012b0 <printHELP+0xe4>)
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff fef1 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "|---------- Availible Commands ------------|");
 80011f6:	492f      	ldr	r1, [pc, #188]	; (80012b4 <printHELP+0xe8>)
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff feed 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "      cc <mA> - Constant current");
 80011fe:	492e      	ldr	r1, [pc, #184]	; (80012b8 <printHELP+0xec>)
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff fee9 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "      cp <mW> - Constant power(To be implemented..)");
 8001206:	492d      	ldr	r1, [pc, #180]	; (80012bc <printHELP+0xf0>)
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff fee5 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "    cr <mOhm> - Constant resistance(To be implemented..)");
 800120e:	492c      	ldr	r1, [pc, #176]	; (80012c0 <printHELP+0xf4>)
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff fee1 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, " pm <ms> <mA> - PulseMode, Set PULSE length and amplitude");
 8001216:	492b      	ldr	r1, [pc, #172]	; (80012c4 <printHELP+0xf8>)
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fedd 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "     fs <%/A> - Fanspeed, (0-100% OR \"A\" for Automatic) - Default: A");
 800121e:	492a      	ldr	r1, [pc, #168]	; (80012c8 <printHELP+0xfc>)
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fed9 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "      mv <mV> - Set MIN voltage - Default: 0 mV");
 8001226:	4929      	ldr	r1, [pc, #164]	; (80012cc <printHELP+0x100>)
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fed5 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "     log <ms> - Interval of printing status");
 800122e:	4928      	ldr	r1, [pc, #160]	; (80012d0 <printHELP+0x104>)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff fed1 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "         stop - Turn current off");
 8001236:	4927      	ldr	r1, [pc, #156]	; (80012d4 <printHELP+0x108>)
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff fecd 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "        reset - Reset charge/energy counters");
 800123e:	4926      	ldr	r1, [pc, #152]	; (80012d8 <printHELP+0x10c>)
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff fec9 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "       status - Print status");
 8001246:	4925      	ldr	r1, [pc, #148]	; (80012dc <printHELP+0x110>)
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fec5 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "         help - Show this help");
 800124e:	4924      	ldr	r1, [pc, #144]	; (80012e0 <printHELP+0x114>)
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff fec1 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, " ");
 8001256:	4923      	ldr	r1, [pc, #140]	; (80012e4 <printHELP+0x118>)
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff febd 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Status is printed out as:");
 800125e:	4922      	ldr	r1, [pc, #136]	; (80012e8 <printHELP+0x11c>)
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff feb9 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Timestamp[ms]; Temperature - Heatsink[deg C]; Temperature - MosFET1[deg C]; Temperature - MosFET2[deg C]; Temperature - PCB[deg C]; Set current[mA]; Measured current[mA]; Measured Voltage[mV]; Measured Power[mW]; Amperehours[mAh]; Watthours[mWh]");
 8001266:	4921      	ldr	r1, [pc, #132]	; (80012ec <printHELP+0x120>)
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff feb5 	bl	8000fd8 <debugPrintln>
	  printStatus(statusValues_1, huart);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	9304      	str	r3, [sp, #16]
 8001272:	466c      	mov	r4, sp
 8001274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001278:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001284:	f000 f92c 	bl	80014e0 <printStatus>
	  debugPrintln(huart, "|------------------------------------------|");
 8001288:	4907      	ldr	r1, [pc, #28]	; (80012a8 <printHELP+0xdc>)
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fea4 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, " ");
 8001290:	4914      	ldr	r1, [pc, #80]	; (80012e4 <printHELP+0x118>)
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fea0 	bl	8000fd8 <debugPrintln>
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80012a2:	b004      	add	sp, #16
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	0800bad0 	.word	0x0800bad0
 80012ac:	0800bb00 	.word	0x0800bb00
 80012b0:	0800bb30 	.word	0x0800bb30
 80012b4:	0800bb60 	.word	0x0800bb60
 80012b8:	0800bb90 	.word	0x0800bb90
 80012bc:	0800bbb4 	.word	0x0800bbb4
 80012c0:	0800bbe8 	.word	0x0800bbe8
 80012c4:	0800bc24 	.word	0x0800bc24
 80012c8:	0800bc60 	.word	0x0800bc60
 80012cc:	0800bca8 	.word	0x0800bca8
 80012d0:	0800bcd8 	.word	0x0800bcd8
 80012d4:	0800bd04 	.word	0x0800bd04
 80012d8:	0800bd28 	.word	0x0800bd28
 80012dc:	0800bd58 	.word	0x0800bd58
 80012e0:	0800bd78 	.word	0x0800bd78
 80012e4:	0800bd98 	.word	0x0800bd98
 80012e8:	0800bd9c 	.word	0x0800bd9c
 80012ec:	0800bdb8 	.word	0x0800bdb8

080012f0 <BEEP>:

void BEEP(TIM_HandleTypeDef *htim){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SetCompare(htim, TIM_CHANNEL_3, 5); //update pwm value
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2205      	movs	r2, #5
 80012fe:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(20);
 8001300:	2014      	movs	r0, #20
 8001302:	f001 ff8b 	bl	800321c <HAL_Delay>
	__HAL_TIM_SetCompare(htim, TIM_CHANNEL_3, 0); //update pwm value
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	63da      	str	r2, [r3, #60]	; 0x3c


}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <MCP4725_write>:
void MCP4725_write(I2C_HandleTypeDef *hi2c, uint16_t outputVoltage){
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af02      	add	r7, sp, #8
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]

	mcp4725Voltage = outputVoltage*outputVoltageCompensationConstant;
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MCP4725_write+0x6c>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133c:	ee17 3a90 	vmov	r3, s15
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MCP4725_write+0x70>)
 8001344:	801a      	strh	r2, [r3, #0]
	ADSwrite[0] = 0b01000000;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MCP4725_write+0x74>)
 8001348:	2240      	movs	r2, #64	; 0x40
 800134a:	701a      	strb	r2, [r3, #0]
	ADSwrite[1] = mcp4725Voltage >> 4;
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MCP4725_write+0x70>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	b29b      	uxth	r3, r3
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4b0d      	ldr	r3, [pc, #52]	; (800138c <MCP4725_write+0x74>)
 8001358:	705a      	strb	r2, [r3, #1]
	ADSwrite[2] = (mcp4725Voltage & 15) << 4;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MCP4725_write+0x70>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <MCP4725_write+0x74>)
 8001364:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(hi2c, MCP4725_ADDRESS << 1, ADSwrite, 3, 100);
 8001366:	2364      	movs	r3, #100	; 0x64
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2303      	movs	r3, #3
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <MCP4725_write+0x74>)
 800136e:	21c0      	movs	r1, #192	; 0xc0
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f003 ff47 	bl	8005204 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001376:	200a      	movs	r0, #10
 8001378:	f001 ff50 	bl	800321c <HAL_Delay>

}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	2000021c 	.word	0x2000021c
 800138c:	20000294 	.word	0x20000294

08001390 <stringToInt>:


uint16_t stringToInt(char *string){
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	uint16_t command_value = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	81fb      	strh	r3, [r7, #14]
	uint8_t x=0;
 800139c:	2300      	movs	r3, #0
 800139e:	737b      	strb	r3, [r7, #13]
	while( string[x] >= '0' && string[x] <= '9' && x < 7 ){	//check how many numbers after '$' and get message ID from that
 80013a0:	e012      	b.n	80013c8 <stringToInt+0x38>
		command_value *= 10;
 80013a2:	89fb      	ldrh	r3, [r7, #14]
 80013a4:	461a      	mov	r2, r3
 80013a6:	0092      	lsls	r2, r2, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	81fb      	strh	r3, [r7, #14]
		command_value += string[x] - '0';
 80013ae:	7b7b      	ldrb	r3, [r7, #13]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	4413      	add	r3, r2
 80013bc:	b29b      	uxth	r3, r3
 80013be:	3b30      	subs	r3, #48	; 0x30
 80013c0:	81fb      	strh	r3, [r7, #14]
		x++;
 80013c2:	7b7b      	ldrb	r3, [r7, #13]
 80013c4:	3301      	adds	r3, #1
 80013c6:	737b      	strb	r3, [r7, #13]
	while( string[x] >= '0' && string[x] <= '9' && x < 7 ){	//check how many numbers after '$' and get message ID from that
 80013c8:	7b7b      	ldrb	r3, [r7, #13]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b2f      	cmp	r3, #47	; 0x2f
 80013d2:	d908      	bls.n	80013e6 <stringToInt+0x56>
 80013d4:	7b7b      	ldrb	r3, [r7, #13]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b39      	cmp	r3, #57	; 0x39
 80013de:	d802      	bhi.n	80013e6 <stringToInt+0x56>
 80013e0:	7b7b      	ldrb	r3, [r7, #13]
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d9dd      	bls.n	80013a2 <stringToInt+0x12>
	}
	return command_value;
 80013e6:	89fb      	ldrh	r3, [r7, #14]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <setFanSpeed>:


void setFanSpeed(UART_HandleTypeDef *huart, TIM_HandleTypeDef *htim, uint16_t fanspeed){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	4613      	mov	r3, r2
 8001400:	80fb      	strh	r3, [r7, #6]
	debugPrint(huart, "Setting Fan speed to: ");
 8001402:	490d      	ldr	r1, [pc, #52]	; (8001438 <setFanSpeed+0x44>)
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f7ff fec1 	bl	800118c <debugPrint>
	sprintf(buffer, "%hu", fanspeed);
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	461a      	mov	r2, r3
 800140e:	490b      	ldr	r1, [pc, #44]	; (800143c <setFanSpeed+0x48>)
 8001410:	480b      	ldr	r0, [pc, #44]	; (8001440 <setFanSpeed+0x4c>)
 8001412:	f008 fcd5 	bl	8009dc0 <siprintf>
	debugPrint(huart, buffer);
 8001416:	490a      	ldr	r1, [pc, #40]	; (8001440 <setFanSpeed+0x4c>)
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f7ff feb7 	bl	800118c <debugPrint>
	debugPrintln(huart, "%");
 800141e:	4909      	ldr	r1, [pc, #36]	; (8001444 <setFanSpeed+0x50>)
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f7ff fdd9 	bl	8000fd8 <debugPrintln>
	__HAL_TIM_SetCompare(htim, TIM_CHANNEL_1, fanspeed); //update pwm value //TIM2->CCR2 = pwm;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	88fa      	ldrh	r2, [r7, #6]
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	0800beb0 	.word	0x0800beb0
 800143c:	0800bec8 	.word	0x0800bec8
 8001440:	20000288 	.word	0x20000288
 8001444:	0800becc 	.word	0x0800becc

08001448 <autoFanSpeed>:

void autoFanSpeed(TIM_HandleTypeDef *htim, uint16_t temp){
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]
	temp = temp/10.0;
 8001454:	887b      	ldrh	r3, [r7, #2]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f88c 	bl	8000574 <__aeabi_i2d>
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <autoFanSpeed+0x90>)
 8001462:	f7ff fa1b 	bl	800089c <__aeabi_ddiv>
 8001466:	4603      	mov	r3, r0
 8001468:	460c      	mov	r4, r1
 800146a:	4618      	mov	r0, r3
 800146c:	4621      	mov	r1, r4
 800146e:	f7ff fbc3 	bl	8000bf8 <__aeabi_d2uiz>
 8001472:	4603      	mov	r3, r0
 8001474:	807b      	strh	r3, [r7, #2]

	int set_speed = 1.4*temp-12;
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f87b 	bl	8000574 <__aeabi_i2d>
 800147e:	a314      	add	r3, pc, #80	; (adr r3, 80014d0 <autoFanSpeed+0x88>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7ff f8e0 	bl	8000648 <__aeabi_dmul>
 8001488:	4603      	mov	r3, r0
 800148a:	460c      	mov	r4, r1
 800148c:	4618      	mov	r0, r3
 800148e:	4621      	mov	r1, r4
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <autoFanSpeed+0x94>)
 8001496:	f7fe ff1f 	bl	80002d8 <__aeabi_dsub>
 800149a:	4603      	mov	r3, r0
 800149c:	460c      	mov	r4, r1
 800149e:	4618      	mov	r0, r3
 80014a0:	4621      	mov	r1, r4
 80014a2:	f7ff fb81 	bl	8000ba8 <__aeabi_d2iz>
 80014a6:	4603      	mov	r3, r0
 80014a8:	60fb      	str	r3, [r7, #12]

	if (set_speed <= 0){
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	dc01      	bgt.n	80014b4 <autoFanSpeed+0x6c>
		set_speed = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
	}

	if (set_speed >= 100){
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b63      	cmp	r3, #99	; 0x63
 80014b8:	dd01      	ble.n	80014be <autoFanSpeed+0x76>
		set_speed = 100;
 80014ba:	2364      	movs	r3, #100	; 0x64
 80014bc:	60fb      	str	r3, [r7, #12]
	}

	__HAL_TIM_SetCompare(htim, TIM_CHANNEL_1, set_speed);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34

}
 80014c6:	bf00      	nop
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	66666666 	.word	0x66666666
 80014d4:	3ff66666 	.word	0x3ff66666
 80014d8:	40240000 	.word	0x40240000
 80014dc:	40280000 	.word	0x40280000

080014e0 <printStatus>:


void printStatus(struct statusValues statusValues_1, UART_HandleTypeDef *huart){
 80014e0:	b084      	sub	sp, #16
 80014e2:	b590      	push	{r4, r7, lr}
 80014e4:	b085      	sub	sp, #20
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	f107 0420 	add.w	r4, r7, #32
 80014ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	debugPrint(huart, ">>");
 80014f0:	49b3      	ldr	r1, [pc, #716]	; (80017c0 <printStatus+0x2e0>)
 80014f2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80014f4:	f7ff fe4a 	bl	800118c <debugPrint>
	char buffer[15];
  		memset(&buffer, '\0', sizeof(buffer));
 80014f8:	463b      	mov	r3, r7
 80014fa:	220f      	movs	r2, #15
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f007 fff9 	bl	80094f6 <memset>

		//Timestamp[ms]
	  	//sprintf(buffer, "%hu", statusValues_1.timestamp);
  		sprintf(buffer, "%8.2f", statusValues_1.timestamp/1000.0);
 8001504:	6a3b      	ldr	r3, [r7, #32]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f824 	bl	8000554 <__aeabi_ui2d>
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	4bac      	ldr	r3, [pc, #688]	; (80017c4 <printStatus+0x2e4>)
 8001512:	f7ff f9c3 	bl	800089c <__aeabi_ddiv>
 8001516:	4603      	mov	r3, r0
 8001518:	460c      	mov	r4, r1
 800151a:	4638      	mov	r0, r7
 800151c:	461a      	mov	r2, r3
 800151e:	4623      	mov	r3, r4
 8001520:	49a9      	ldr	r1, [pc, #676]	; (80017c8 <printStatus+0x2e8>)
 8001522:	f008 fc4d 	bl	8009dc0 <siprintf>
	  	//gcvt((statusValues_1.timestamp/1000.0), 6, buffer);
		debugPrint(huart, buffer);
 8001526:	463b      	mov	r3, r7
 8001528:	4619      	mov	r1, r3
 800152a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800152c:	f7ff fe2e 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 8001530:	463b      	mov	r3, r7
 8001532:	220f      	movs	r2, #15
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f007 ffdd 	bl	80094f6 <memset>
		debugPrint(huart, "   ");
 800153c:	49a3      	ldr	r1, [pc, #652]	; (80017cc <printStatus+0x2ec>)
 800153e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001540:	f7ff fe24 	bl	800118c <debugPrint>

		//Temperature - Heatsink[deg C]
	  	//gcvt((statusValues_1.temperature/10.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.temperature/10.0);
 8001544:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f814 	bl	8000574 <__aeabi_i2d>
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b9f      	ldr	r3, [pc, #636]	; (80017d0 <printStatus+0x2f0>)
 8001552:	f7ff f9a3 	bl	800089c <__aeabi_ddiv>
 8001556:	4603      	mov	r3, r0
 8001558:	460c      	mov	r4, r1
 800155a:	4638      	mov	r0, r7
 800155c:	461a      	mov	r2, r3
 800155e:	4623      	mov	r3, r4
 8001560:	499c      	ldr	r1, [pc, #624]	; (80017d4 <printStatus+0x2f4>)
 8001562:	f008 fc2d 	bl	8009dc0 <siprintf>
	  	debugPrint(huart, buffer);
 8001566:	463b      	mov	r3, r7
 8001568:	4619      	mov	r1, r3
 800156a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800156c:	f7ff fe0e 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 8001570:	463b      	mov	r3, r7
 8001572:	220f      	movs	r2, #15
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f007 ffbd 	bl	80094f6 <memset>
		debugPrint(huart, "   ");
 800157c:	4993      	ldr	r1, [pc, #588]	; (80017cc <printStatus+0x2ec>)
 800157e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001580:	f7ff fe04 	bl	800118c <debugPrint>

		//Temperature - MosFET1[deg C]
	  	//gcvt((statusValues_1.temperature/10.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.MOSFET1_Temp/10.0);
 8001584:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff4 	bl	8000574 <__aeabi_i2d>
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	4b8f      	ldr	r3, [pc, #572]	; (80017d0 <printStatus+0x2f0>)
 8001592:	f7ff f983 	bl	800089c <__aeabi_ddiv>
 8001596:	4603      	mov	r3, r0
 8001598:	460c      	mov	r4, r1
 800159a:	4638      	mov	r0, r7
 800159c:	461a      	mov	r2, r3
 800159e:	4623      	mov	r3, r4
 80015a0:	498c      	ldr	r1, [pc, #560]	; (80017d4 <printStatus+0x2f4>)
 80015a2:	f008 fc0d 	bl	8009dc0 <siprintf>
	  	debugPrint(huart, buffer);
 80015a6:	463b      	mov	r3, r7
 80015a8:	4619      	mov	r1, r3
 80015aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80015ac:	f7ff fdee 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 80015b0:	463b      	mov	r3, r7
 80015b2:	220f      	movs	r2, #15
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f007 ff9d 	bl	80094f6 <memset>
		debugPrint(huart, "   ");
 80015bc:	4983      	ldr	r1, [pc, #524]	; (80017cc <printStatus+0x2ec>)
 80015be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80015c0:	f7ff fde4 	bl	800118c <debugPrint>

		//Temperature - MosFET2[deg C]
	  	//gcvt((statusValues_1.temperature/10.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.MOSFET2_Temp/10.0);
 80015c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffd4 	bl	8000574 <__aeabi_i2d>
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	4b7f      	ldr	r3, [pc, #508]	; (80017d0 <printStatus+0x2f0>)
 80015d2:	f7ff f963 	bl	800089c <__aeabi_ddiv>
 80015d6:	4603      	mov	r3, r0
 80015d8:	460c      	mov	r4, r1
 80015da:	4638      	mov	r0, r7
 80015dc:	461a      	mov	r2, r3
 80015de:	4623      	mov	r3, r4
 80015e0:	497c      	ldr	r1, [pc, #496]	; (80017d4 <printStatus+0x2f4>)
 80015e2:	f008 fbed 	bl	8009dc0 <siprintf>
	  	debugPrint(huart, buffer);
 80015e6:	463b      	mov	r3, r7
 80015e8:	4619      	mov	r1, r3
 80015ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80015ec:	f7ff fdce 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 80015f0:	463b      	mov	r3, r7
 80015f2:	220f      	movs	r2, #15
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f007 ff7d 	bl	80094f6 <memset>
		debugPrint(huart, "   ");
 80015fc:	4973      	ldr	r1, [pc, #460]	; (80017cc <printStatus+0x2ec>)
 80015fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001600:	f7ff fdc4 	bl	800118c <debugPrint>

		//Temperature - PCB[deg C]
	  	//gcvt((statusValues_1.temperature/10.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.PCB_Temp/10.0);
 8001604:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ffb4 	bl	8000574 <__aeabi_i2d>
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	4b6f      	ldr	r3, [pc, #444]	; (80017d0 <printStatus+0x2f0>)
 8001612:	f7ff f943 	bl	800089c <__aeabi_ddiv>
 8001616:	4603      	mov	r3, r0
 8001618:	460c      	mov	r4, r1
 800161a:	4638      	mov	r0, r7
 800161c:	461a      	mov	r2, r3
 800161e:	4623      	mov	r3, r4
 8001620:	496c      	ldr	r1, [pc, #432]	; (80017d4 <printStatus+0x2f4>)
 8001622:	f008 fbcd 	bl	8009dc0 <siprintf>
	  	debugPrint(huart, buffer);
 8001626:	463b      	mov	r3, r7
 8001628:	4619      	mov	r1, r3
 800162a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800162c:	f7ff fdae 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 8001630:	463b      	mov	r3, r7
 8001632:	220f      	movs	r2, #15
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f007 ff5d 	bl	80094f6 <memset>
		debugPrint(huart, "   ");
 800163c:	4963      	ldr	r1, [pc, #396]	; (80017cc <printStatus+0x2ec>)
 800163e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001640:	f7ff fda4 	bl	800118c <debugPrint>

		//Set current[mA]
	  	//sprintf(buffer, "%hu", statusValues_1.setCurrent);
	  	//gcvt((statusValues_1.setCurrent/1000.0), 6, buffer);
  		sprintf(buffer, "%7.2f", statusValues_1.setCurrent/1000.0);
 8001644:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff94 	bl	8000574 <__aeabi_i2d>
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <printStatus+0x2e4>)
 8001652:	f7ff f923 	bl	800089c <__aeabi_ddiv>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	4638      	mov	r0, r7
 800165c:	461a      	mov	r2, r3
 800165e:	4623      	mov	r3, r4
 8001660:	495d      	ldr	r1, [pc, #372]	; (80017d8 <printStatus+0x2f8>)
 8001662:	f008 fbad 	bl	8009dc0 <siprintf>
	  	debugPrint(huart, buffer);
 8001666:	463b      	mov	r3, r7
 8001668:	4619      	mov	r1, r3
 800166a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800166c:	f7ff fd8e 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 8001670:	463b      	mov	r3, r7
 8001672:	220f      	movs	r2, #15
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f007 ff3d 	bl	80094f6 <memset>
		debugPrint(huart, "   ");
 800167c:	4953      	ldr	r1, [pc, #332]	; (80017cc <printStatus+0x2ec>)
 800167e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001680:	f7ff fd84 	bl	800118c <debugPrint>

		//Measured current[mA]
	  	//sprintf(buffer, "%hu", statusValues_1.measuredCurrent);
	  	//gcvt((statusValues_1.measuredCurrent/1000.0), 6, buffer);
  		sprintf(buffer, "%7.2f", statusValues_1.measuredCurrent/1000.0);
 8001684:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff74 	bl	8000574 <__aeabi_i2d>
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <printStatus+0x2e4>)
 8001692:	f7ff f903 	bl	800089c <__aeabi_ddiv>
 8001696:	4603      	mov	r3, r0
 8001698:	460c      	mov	r4, r1
 800169a:	4638      	mov	r0, r7
 800169c:	461a      	mov	r2, r3
 800169e:	4623      	mov	r3, r4
 80016a0:	494d      	ldr	r1, [pc, #308]	; (80017d8 <printStatus+0x2f8>)
 80016a2:	f008 fb8d 	bl	8009dc0 <siprintf>
  		debugPrint(huart, buffer);
 80016a6:	463b      	mov	r3, r7
 80016a8:	4619      	mov	r1, r3
 80016aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80016ac:	f7ff fd6e 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 80016b0:	463b      	mov	r3, r7
 80016b2:	220f      	movs	r2, #15
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f007 ff1d 	bl	80094f6 <memset>
		debugPrint(huart, "   ");
 80016bc:	4943      	ldr	r1, [pc, #268]	; (80017cc <printStatus+0x2ec>)
 80016be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80016c0:	f7ff fd64 	bl	800118c <debugPrint>


		//Measured Voltage[mV]
	  	//sprintf(buffer, "%hu", statusValues_1.measuredVoltage);
	  	//gcvt((statusValues_1.measuredVoltage/1000.0), 6, buffer);
  		sprintf(buffer, "%4.2f", statusValues_1.measuredVoltage/1000.0);
 80016c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff54 	bl	8000574 <__aeabi_i2d>
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b3c      	ldr	r3, [pc, #240]	; (80017c4 <printStatus+0x2e4>)
 80016d2:	f7ff f8e3 	bl	800089c <__aeabi_ddiv>
 80016d6:	4603      	mov	r3, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	4638      	mov	r0, r7
 80016dc:	461a      	mov	r2, r3
 80016de:	4623      	mov	r3, r4
 80016e0:	493e      	ldr	r1, [pc, #248]	; (80017dc <printStatus+0x2fc>)
 80016e2:	f008 fb6d 	bl	8009dc0 <siprintf>
	  	debugPrint(huart, buffer);
 80016e6:	463b      	mov	r3, r7
 80016e8:	4619      	mov	r1, r3
 80016ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80016ec:	f7ff fd4e 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 80016f0:	463b      	mov	r3, r7
 80016f2:	220f      	movs	r2, #15
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f007 fefd 	bl	80094f6 <memset>
		debugPrint(huart, "   ");
 80016fc:	4933      	ldr	r1, [pc, #204]	; (80017cc <printStatus+0x2ec>)
 80016fe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001700:	f7ff fd44 	bl	800118c <debugPrint>

		//Measured Power[mW]
		//sprintf(buffer, "%hu", statusValues_1.measuredPower);
	  	//gcvt((statusValues_1.measuredPower/1.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.measuredPower/1000.0);
 8001704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff24 	bl	8000554 <__aeabi_ui2d>
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b2c      	ldr	r3, [pc, #176]	; (80017c4 <printStatus+0x2e4>)
 8001712:	f7ff f8c3 	bl	800089c <__aeabi_ddiv>
 8001716:	4603      	mov	r3, r0
 8001718:	460c      	mov	r4, r1
 800171a:	4638      	mov	r0, r7
 800171c:	461a      	mov	r2, r3
 800171e:	4623      	mov	r3, r4
 8001720:	492c      	ldr	r1, [pc, #176]	; (80017d4 <printStatus+0x2f4>)
 8001722:	f008 fb4d 	bl	8009dc0 <siprintf>
  		debugPrint(huart, buffer);
 8001726:	463b      	mov	r3, r7
 8001728:	4619      	mov	r1, r3
 800172a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800172c:	f7ff fd2e 	bl	800118c <debugPrint>
		memset(&buffer, '\0', sizeof(buffer));
 8001730:	463b      	mov	r3, r7
 8001732:	220f      	movs	r2, #15
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f007 fedd 	bl	80094f6 <memset>
		debugPrint(huart, "   ");
 800173c:	4923      	ldr	r1, [pc, #140]	; (80017cc <printStatus+0x2ec>)
 800173e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001740:	f7ff fd24 	bl	800118c <debugPrint>

		//Amperehours[mAh]
		//sprintf(buffer, "%hu", statusValues_1.amperehours);
	  	//gcvt((statusValues_1.amperehours/1000000000.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.amperehours);
 8001744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe ff26 	bl	8000598 <__aeabi_f2d>
 800174c:	4603      	mov	r3, r0
 800174e:	460c      	mov	r4, r1
 8001750:	4638      	mov	r0, r7
 8001752:	461a      	mov	r2, r3
 8001754:	4623      	mov	r3, r4
 8001756:	491f      	ldr	r1, [pc, #124]	; (80017d4 <printStatus+0x2f4>)
 8001758:	f008 fb32 	bl	8009dc0 <siprintf>
  		debugPrint(huart, buffer);
 800175c:	463b      	mov	r3, r7
 800175e:	4619      	mov	r1, r3
 8001760:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001762:	f7ff fd13 	bl	800118c <debugPrint>
		memset(&buffer, '\0', sizeof(buffer));
 8001766:	463b      	mov	r3, r7
 8001768:	220f      	movs	r2, #15
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f007 fec2 	bl	80094f6 <memset>
		debugPrint(huart, "   ");
 8001772:	4916      	ldr	r1, [pc, #88]	; (80017cc <printStatus+0x2ec>)
 8001774:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001776:	f7ff fd09 	bl	800118c <debugPrint>

		//Watthours[mWh]
		//sprintf(buffer, "%hu", statusValues_1.watthours);
	  	//gcvt((statusValues_1.watthours/1000000000.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.watthours);
 800177a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe ff0b 	bl	8000598 <__aeabi_f2d>
 8001782:	4603      	mov	r3, r0
 8001784:	460c      	mov	r4, r1
 8001786:	4638      	mov	r0, r7
 8001788:	461a      	mov	r2, r3
 800178a:	4623      	mov	r3, r4
 800178c:	4911      	ldr	r1, [pc, #68]	; (80017d4 <printStatus+0x2f4>)
 800178e:	f008 fb17 	bl	8009dc0 <siprintf>
  		debugPrint(huart, buffer);
 8001792:	463b      	mov	r3, r7
 8001794:	4619      	mov	r1, r3
 8001796:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001798:	f7ff fcf8 	bl	800118c <debugPrint>
		memset(&buffer, '\0', sizeof(buffer));
 800179c:	463b      	mov	r3, r7
 800179e:	220f      	movs	r2, #15
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f007 fea7 	bl	80094f6 <memset>
		debugPrintln(huart, "   ");
 80017a8:	4908      	ldr	r1, [pc, #32]	; (80017cc <printStatus+0x2ec>)
 80017aa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80017ac:	f7ff fc14 	bl	8000fd8 <debugPrintln>

}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80017ba:	b004      	add	sp, #16
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	0800bed0 	.word	0x0800bed0
 80017c4:	408f4000 	.word	0x408f4000
 80017c8:	0800bed4 	.word	0x0800bed4
 80017cc:	0800bedc 	.word	0x0800bedc
 80017d0:	40240000 	.word	0x40240000
 80017d4:	0800bee0 	.word	0x0800bee0
 80017d8:	0800bee8 	.word	0x0800bee8
 80017dc:	0800bef0 	.word	0x0800bef0

080017e0 <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)

{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]

 /* Set transmission flag: transfer complete */

txDone = true;
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_UART_TxCpltCallback+0x1c>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]

}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000004 	.word	0x20000004

08001800 <HAL_UART_RxCpltCallback>:

// This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, &byte, 1);//Restart the interrupt reception mode
 8001808:	2201      	movs	r2, #1
 800180a:	4923      	ldr	r1, [pc, #140]	; (8001898 <HAL_UART_RxCpltCallback+0x98>)
 800180c:	4823      	ldr	r0, [pc, #140]	; (800189c <HAL_UART_RxCpltCallback+0x9c>)
 800180e:	f006 fb6f 	bl	8007ef0 <HAL_UART_Receive_IT>
	static int rx_index = 0;
	//if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) // Received character?
	if (huart->Instance == USART2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a22      	ldr	r2, [pc, #136]	; (80018a0 <HAL_UART_RxCpltCallback+0xa0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d138      	bne.n	800188e <HAL_UART_RxCpltCallback+0x8e>
	{
		//char rx = HAL_UART_Receive_IT(&huart2, &byte, 1);
		//HAL_UART_Transmit(&huart2, &byte, 1, 10);
		rx = byte;
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_UART_RxCpltCallback+0x98>)
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <HAL_UART_RxCpltCallback+0xa4>)
 8001822:	701a      	strb	r2, [r3, #0]
		if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_UART_RxCpltCallback+0xa4>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b0d      	cmp	r3, #13
 800182a:	d003      	beq.n	8001834 <HAL_UART_RxCpltCallback+0x34>
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <HAL_UART_RxCpltCallback+0xa4>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b0a      	cmp	r3, #10
 8001832:	d11b      	bne.n	800186c <HAL_UART_RxCpltCallback+0x6c>
		{
			if (rx_index != 0) // Line has some content?
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HAL_UART_RxCpltCallback+0xa8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d028      	beq.n	800188e <HAL_UART_RxCpltCallback+0x8e>
			{
				memcpy((void *)line_buffer, rx_buffer, rx_index); // Copy to static line buffer from dynamic receive buffer
 800183c:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <HAL_UART_RxCpltCallback+0xa8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	491a      	ldr	r1, [pc, #104]	; (80018ac <HAL_UART_RxCpltCallback+0xac>)
 8001844:	481a      	ldr	r0, [pc, #104]	; (80018b0 <HAL_UART_RxCpltCallback+0xb0>)
 8001846:	f007 fe4b 	bl	80094e0 <memcpy>
				line_buffer[rx_index] = 0; // Add terminating NUL
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_UART_RxCpltCallback+0xa8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <HAL_UART_RxCpltCallback+0xb0>)
 8001850:	2100      	movs	r1, #0
 8001852:	54d1      	strb	r1, [r2, r3]
				line_valid = 1; // flag new line valid for processing
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_UART_RxCpltCallback+0xb4>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]
				rx_index = 0; // Reset content pointer
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_UART_RxCpltCallback+0xa8>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
				memset(&rx_buffer, '\0', sizeof(rx_buffer));
 8001860:	2210      	movs	r2, #16
 8001862:	2100      	movs	r1, #0
 8001864:	4811      	ldr	r0, [pc, #68]	; (80018ac <HAL_UART_RxCpltCallback+0xac>)
 8001866:	f007 fe46 	bl	80094f6 <memset>
			if (rx_index != 0) // Line has some content?
 800186a:	e010      	b.n	800188e <HAL_UART_RxCpltCallback+0x8e>
			}
		}
		else
		{
			if (rx_index == LINEMAX) // If overflows pull back to start
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_UART_RxCpltCallback+0xa8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b10      	cmp	r3, #16
 8001872:	d102      	bne.n	800187a <HAL_UART_RxCpltCallback+0x7a>
				rx_index = 0;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_UART_RxCpltCallback+0xa8>)
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
			rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_UART_RxCpltCallback+0xa8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	4909      	ldr	r1, [pc, #36]	; (80018a8 <HAL_UART_RxCpltCallback+0xa8>)
 8001882:	600a      	str	r2, [r1, #0]
 8001884:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_UART_RxCpltCallback+0xa4>)
 8001886:	7811      	ldrb	r1, [r2, #0]
 8001888:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_UART_RxCpltCallback+0xac>)
 800188a:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 800188c:	e7ff      	b.n	800188e <HAL_UART_RxCpltCallback+0x8e>
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000566 	.word	0x20000566
 800189c:	20000600 	.word	0x20000600
 80018a0:	40004400 	.word	0x40004400
 80018a4:	2000041c 	.word	0x2000041c
 80018a8:	20000268 	.word	0x20000268
 80018ac:	20000234 	.word	0x20000234
 80018b0:	20000224 	.word	0x20000224
 80018b4:	20000220 	.word	0x20000220

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018bc:	b09a      	sub	sp, #104	; 0x68
 80018be:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	//Connect ADDR pin to GND and I2C slave adress will be 0X48 .
	unsigned char ADSwrite[6];
	int16_t voltage[3];
	struct statusValues my_statusValues;        /* Declare Book1 of type Book */
	my_statusValues.amperehours=0;
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	my_statusValues.watthours=0;
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
	my_statusValues.setCurrent=0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	837b      	strh	r3, [r7, #26]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d0:	f001 fc33 	bl	800313a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d4:	f000 fca6 	bl	8002224 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d8:	f001 f8a4 	bl	8002a24 <MX_GPIO_Init>
  MX_DMA_Init();
 80018dc:	f001 f878 	bl	80029d0 <MX_DMA_Init>
  MX_I2C1_Init();
 80018e0:	f000 fdda 	bl	8002498 <MX_I2C1_Init>
  MX_TIM1_Init();
 80018e4:	f000 fe18 	bl	8002518 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80018e8:	f001 f826 	bl	8002938 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80018ec:	f000 ff8a 	bl	8002804 <MX_TIM4_Init>
  MX_TIM2_Init();
 80018f0:	f000 fec2 	bl	8002678 <MX_TIM2_Init>
  MX_ADC1_Init();
 80018f4:	f000 fcf2 	bl	80022dc <MX_ADC1_Init>
  MX_ADC2_Init();
 80018f8:	f000 fd68 	bl	80023cc <MX_ADC2_Init>
  MX_TIM3_Init();
 80018fc:	f000 ff0a 	bl	8002714 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001900:	f000 ffce 	bl	80028a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001904:	48ba      	ldr	r0, [pc, #744]	; (8001bf0 <main+0x338>)
 8001906:	f005 f90f 	bl	8006b28 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1); //Start Pwm signal on PB-6 Pin
 800190a:	2100      	movs	r1, #0
 800190c:	48b8      	ldr	r0, [pc, #736]	; (8001bf0 <main+0x338>)
 800190e:	f005 f9cf 	bl	8006cb0 <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(&htim3);
 8001912:	48b8      	ldr	r0, [pc, #736]	; (8001bf4 <main+0x33c>)
 8001914:	f005 f908 	bl	8006b28 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3); //Start Pwm signal on PB-6 Pin
 8001918:	2108      	movs	r1, #8
 800191a:	48b6      	ldr	r0, [pc, #728]	; (8001bf4 <main+0x33c>)
 800191c:	f005 f9c8 	bl	8006cb0 <HAL_TIM_PWM_Start>

	HAL_UART_Receive_IT(&huart2, &byte, 1);//Start the interrupt reception mode
 8001920:	2201      	movs	r2, #1
 8001922:	49b5      	ldr	r1, [pc, #724]	; (8001bf8 <main+0x340>)
 8001924:	48b5      	ldr	r0, [pc, #724]	; (8001bfc <main+0x344>)
 8001926:	f006 fae3 	bl	8007ef0 <HAL_UART_Receive_IT>

    /* USER CODE BEGIN 3 */



	    for(int i=0; i< 3; i++){
 800192a:	2300      	movs	r3, #0
 800192c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800192e:	e059      	b.n	80019e4 <main+0x12c>

	    	ADSwrite[0] = 0x01;
 8001930:	2301      	movs	r3, #1
 8001932:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	    				switch(i){
 8001936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001938:	2b01      	cmp	r3, #1
 800193a:	d007      	beq.n	800194c <main+0x94>
 800193c:	2b02      	cmp	r3, #2
 800193e:	d009      	beq.n	8001954 <main+0x9c>
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10b      	bne.n	800195c <main+0xa4>
	    					case(0):
	    						ADSwrite[1] = 0xC1; //11000001
 8001944:	23c1      	movs	r3, #193	; 0xc1
 8001946:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	    					break;
 800194a:	e007      	b.n	800195c <main+0xa4>
	    					case(1):
	    						ADSwrite[1] = 0xD1; //11010001
 800194c:	23d1      	movs	r3, #209	; 0xd1
 800194e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	    					break;
 8001952:	e003      	b.n	800195c <main+0xa4>
	    					case(2):
								ADSwrite[1] = 0xF1;//ADSwrite[1] = 0xE1;
 8001954:	23f1      	movs	r3, #241	; 0xf1
 8001956:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	    					break;
 800195a:	bf00      	nop
	    					case(3):
	    						ADSwrite[1] = 0xF1;
	    					break;*/
	    				}

	    				ADSwrite[2] = 0x83; //10000011 LSB
 800195c:	2383      	movs	r3, #131	; 0x83
 800195e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	    				HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 8001962:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001966:	2364      	movs	r3, #100	; 0x64
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2303      	movs	r3, #3
 800196c:	2190      	movs	r1, #144	; 0x90
 800196e:	48a4      	ldr	r0, [pc, #656]	; (8001c00 <main+0x348>)
 8001970:	f003 fc48 	bl	8005204 <HAL_I2C_Master_Transmit>
	    				ADSwrite[0] = 0x00;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	    				HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 800197a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800197e:	2364      	movs	r3, #100	; 0x64
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2301      	movs	r3, #1
 8001984:	2190      	movs	r1, #144	; 0x90
 8001986:	489e      	ldr	r0, [pc, #632]	; (8001c00 <main+0x348>)
 8001988:	f003 fc3c 	bl	8005204 <HAL_I2C_Master_Transmit>
	    				HAL_Delay(10);//20
 800198c:	200a      	movs	r0, #10
 800198e:	f001 fc45 	bl	800321c <HAL_Delay>

	    				HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 8001992:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001996:	2364      	movs	r3, #100	; 0x64
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2302      	movs	r3, #2
 800199c:	2190      	movs	r1, #144	; 0x90
 800199e:	4898      	ldr	r0, [pc, #608]	; (8001c00 <main+0x348>)
 80019a0:	f003 fd24 	bl	80053ec <HAL_I2C_Master_Receive>
	    				reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 80019a4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	b21a      	sxth	r2, r3
 80019b6:	4b93      	ldr	r3, [pc, #588]	; (8001c04 <main+0x34c>)
 80019b8:	801a      	strh	r2, [r3, #0]
	    				if(reading < 0) {
 80019ba:	4b92      	ldr	r3, [pc, #584]	; (8001c04 <main+0x34c>)
 80019bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	da02      	bge.n	80019ca <main+0x112>
	    					reading = 0;
 80019c4:	4b8f      	ldr	r3, [pc, #572]	; (8001c04 <main+0x34c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	801a      	strh	r2, [r3, #0]
	    				}

	    				voltage[i] = reading;
 80019ca:	4b8e      	ldr	r3, [pc, #568]	; (8001c04 <main+0x34c>)
 80019cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80019d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80019d8:	440b      	add	r3, r1
 80019da:	f823 2c1c 	strh.w	r2, [r3, #-28]
	    for(int i=0; i< 3; i++){
 80019de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e0:	3301      	adds	r3, #1
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	dda2      	ble.n	8001930 <main+0x78>
	    		}


	    // Get ADC value
	    HAL_ADC_Start(&hadc1);
 80019ea:	4887      	ldr	r0, [pc, #540]	; (8001c08 <main+0x350>)
 80019ec:	f001 ffec 	bl	80039c8 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	4884      	ldr	r0, [pc, #528]	; (8001c08 <main+0x350>)
 80019f6:	f002 f8a3 	bl	8003b40 <HAL_ADC_PollForConversion>
	    my_statusValues.MOSFET1_Temp = adc2Temperature(HAL_ADC_GetValue(&hadc1),3500);
 80019fa:	4883      	ldr	r0, [pc, #524]	; (8001c08 <main+0x350>)
 80019fc:	f002 f970 	bl	8003ce0 <HAL_ADC_GetValue>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fb1e 	bl	8001048 <adc2Temperature>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	847b      	strh	r3, [r7, #34]	; 0x22

	    HAL_ADC_Start(&hadc2);
 8001a12:	487e      	ldr	r0, [pc, #504]	; (8001c0c <main+0x354>)
 8001a14:	f001 ffd8 	bl	80039c8 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001a18:	f04f 31ff 	mov.w	r1, #4294967295
 8001a1c:	487b      	ldr	r0, [pc, #492]	; (8001c0c <main+0x354>)
 8001a1e:	f002 f88f 	bl	8003b40 <HAL_ADC_PollForConversion>
	    my_statusValues.MOSFET2_Temp = adc2Temperature(HAL_ADC_GetValue(&hadc2),3500);
 8001a22:	487a      	ldr	r0, [pc, #488]	; (8001c0c <main+0x354>)
 8001a24:	f002 f95c 	bl	8003ce0 <HAL_ADC_GetValue>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fb0a 	bl	8001048 <adc2Temperature>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	84bb      	strh	r3, [r7, #36]	; 0x24

	    HAL_ADC_Start(&hadc2);
 8001a3a:	4874      	ldr	r0, [pc, #464]	; (8001c0c <main+0x354>)
 8001a3c:	f001 ffc4 	bl	80039c8 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	4871      	ldr	r0, [pc, #452]	; (8001c0c <main+0x354>)
 8001a46:	f002 f87b 	bl	8003b40 <HAL_ADC_PollForConversion>
	    my_statusValues.PCB_Temp = adc2Temperature(HAL_ADC_GetValue(&hadc2),3500);
 8001a4a:	4870      	ldr	r0, [pc, #448]	; (8001c0c <main+0x354>)
 8001a4c:	f002 f948 	bl	8003ce0 <HAL_ADC_GetValue>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff faf6 	bl	8001048 <adc2Temperature>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	84fb      	strh	r3, [r7, #38]	; 0x26



	my_statusValues.measuredVoltage = voltage[0] * voltageCompensationConstant;
 8001a62:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6e:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <main+0x358>)
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a7c:	ee17 3a90 	vmov	r3, s15
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	843b      	strh	r3, [r7, #32]
	my_statusValues.measuredCurrent = voltage[1] * currentCompensationConstant;
 8001a84:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a90:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <main+0x35c>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a9e:	ee17 3a90 	vmov	r3, s15
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	83fb      	strh	r3, [r7, #30]
	my_statusValues.temperature = adc2Temperature(voltage[2],16628);
 8001aa6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001aaa:	f244 01f4 	movw	r1, #16628	; 0x40f4
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff faca 	bl	8001048 <adc2Temperature>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	833b      	strh	r3, [r7, #24]

	my_statusValues.measuredPower = (my_statusValues.measuredVoltage*my_statusValues.measuredCurrent)/1000;
 8001aba:	8c3b      	ldrh	r3, [r7, #32]
 8001abc:	8bfa      	ldrh	r2, [r7, #30]
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	4a55      	ldr	r2, [pc, #340]	; (8001c18 <main+0x360>)
 8001ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac8:	1192      	asrs	r2, r2, #6
 8001aca:	17db      	asrs	r3, r3, #31
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
	my_statusValues.timestamp = (HAL_GetTick()-zeroTimeValue);
 8001ad0:	f001 fb98 	bl	8003204 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b51      	ldr	r3, [pc, #324]	; (8001c1c <main+0x364>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	617b      	str	r3, [r7, #20]

	integrationTime = HAL_GetTick()-previousMillis_INTEGRATION;
 8001ade:	f001 fb91 	bl	8003204 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	4b4e      	ldr	r3, [pc, #312]	; (8001c20 <main+0x368>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	4a4e      	ldr	r2, [pc, #312]	; (8001c24 <main+0x36c>)
 8001aec:	6013      	str	r3, [r2, #0]
	my_statusValues.amperehours = my_statusValues.amperehours + integrationTime * my_statusValues.measuredCurrent/3600000.0;
 8001aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd51 	bl	8000598 <__aeabi_f2d>
 8001af6:	4604      	mov	r4, r0
 8001af8:	460d      	mov	r5, r1
 8001afa:	8bfb      	ldrh	r3, [r7, #30]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b49      	ldr	r3, [pc, #292]	; (8001c24 <main+0x36c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	fb03 f302 	mul.w	r3, r3, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fd24 	bl	8000554 <__aeabi_ui2d>
 8001b0c:	a336      	add	r3, pc, #216	; (adr r3, 8001be8 <main+0x330>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fec3 	bl	800089c <__aeabi_ddiv>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fbdd 	bl	80002dc <__adddf3>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4618      	mov	r0, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f7ff f885 	bl	8000c38 <__aeabi_d2f>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
	my_statusValues.watthours = my_statusValues.watthours + (integrationTime * my_statusValues.measuredCurrent/3600000.0) * (my_statusValues.measuredVoltage /1000.0);
 8001b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fd2f 	bl	8000598 <__aeabi_f2d>
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	460d      	mov	r5, r1
 8001b3e:	8bfb      	ldrh	r3, [r7, #30]
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <main+0x36c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fb03 f302 	mul.w	r3, r3, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd02 	bl	8000554 <__aeabi_ui2d>
 8001b50:	a325      	add	r3, pc, #148	; (adr r3, 8001be8 <main+0x330>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	f7fe fea1 	bl	800089c <__aeabi_ddiv>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4699      	mov	r9, r3
 8001b62:	8c3b      	ldrh	r3, [r7, #32]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fd05 	bl	8000574 <__aeabi_i2d>
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <main+0x370>)
 8001b70:	f7fe fe94 	bl	800089c <__aeabi_ddiv>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4640      	mov	r0, r8
 8001b7a:	4649      	mov	r1, r9
 8001b7c:	f7fe fd64 	bl	8000648 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4620      	mov	r0, r4
 8001b86:	4629      	mov	r1, r5
 8001b88:	f7fe fba8 	bl	80002dc <__adddf3>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	460c      	mov	r4, r1
 8001b90:	4618      	mov	r0, r3
 8001b92:	4621      	mov	r1, r4
 8001b94:	f7ff f850 	bl	8000c38 <__aeabi_d2f>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
	previousMillis_INTEGRATION = HAL_GetTick();
 8001b9c:	f001 fb32 	bl	8003204 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <main+0x368>)
 8001ba4:	601a      	str	r2, [r3, #0]



	//Set current by setting voltage drop over shunt
	MCP4725_write(&hi2c1, my_statusValues.setCurrent);
 8001ba6:	8b7b      	ldrh	r3, [r7, #26]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4815      	ldr	r0, [pc, #84]	; (8001c00 <main+0x348>)
 8001bac:	f7ff fbb4 	bl	8001318 <MCP4725_write>

if (line_valid==1){ // A new line has arrived
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <main+0x374>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	f040 8234 	bne.w	8002022 <main+0x76a>
	BEEP(&htim3);
 8001bba:	480e      	ldr	r0, [pc, #56]	; (8001bf4 <main+0x33c>)
 8001bbc:	f7ff fb98 	bl	80012f0 <BEEP>
	line_valid = 0; // clear pending flag
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <main+0x374>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
	debugPrint(&huart2, "Sent command: ");
 8001bc6:	491a      	ldr	r1, [pc, #104]	; (8001c30 <main+0x378>)
 8001bc8:	480c      	ldr	r0, [pc, #48]	; (8001bfc <main+0x344>)
 8001bca:	f7ff fadf 	bl	800118c <debugPrint>
	debugPrintln(&huart2, line_buffer);
 8001bce:	4919      	ldr	r1, [pc, #100]	; (8001c34 <main+0x37c>)
 8001bd0:	480a      	ldr	r0, [pc, #40]	; (8001bfc <main+0x344>)
 8001bd2:	f7ff fa01 	bl	8000fd8 <debugPrintln>
	int i = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	64bb      	str	r3, [r7, #72]	; 0x48
	char *p = strtok (line_buffer, " ");
 8001bda:	4917      	ldr	r1, [pc, #92]	; (8001c38 <main+0x380>)
 8001bdc:	4815      	ldr	r0, [pc, #84]	; (8001c34 <main+0x37c>)
 8001bde:	f008 f921 	bl	8009e24 <strtok>
 8001be2:	6478      	str	r0, [r7, #68]	; 0x44
	char *array[4];

	while (p != NULL){
 8001be4:	e039      	b.n	8001c5a <main+0x3a2>
 8001be6:	bf00      	nop
 8001be8:	00000000 	.word	0x00000000
 8001bec:	414b7740 	.word	0x414b7740
 8001bf0:	20000568 	.word	0x20000568
 8001bf4:	20000420 	.word	0x20000420
 8001bf8:	20000566 	.word	0x20000566
 8001bfc:	20000600 	.word	0x20000600
 8001c00:	200003d0 	.word	0x200003d0
 8001c04:	20000564 	.word	0x20000564
 8001c08:	2000046c 	.word	0x2000046c
 8001c0c:	20000364 	.word	0x20000364
 8001c10:	20000010 	.word	0x20000010
 8001c14:	20000014 	.word	0x20000014
 8001c18:	10624dd3 	.word	0x10624dd3
 8001c1c:	20000258 	.word	0x20000258
 8001c20:	20000250 	.word	0x20000250
 8001c24:	2000025c 	.word	0x2000025c
 8001c28:	408f4000 	.word	0x408f4000
 8001c2c:	20000220 	.word	0x20000220
 8001c30:	0800bef8 	.word	0x0800bef8
 8001c34:	20000224 	.word	0x20000224
 8001c38:	0800bf08 	.word	0x0800bf08
		array[i++] = p;
 8001c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	64ba      	str	r2, [r7, #72]	; 0x48
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001c48:	4413      	add	r3, r2
 8001c4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c4c:	f843 2c4c 	str.w	r2, [r3, #-76]
		p = strtok (NULL, " ");}
 8001c50:	49a3      	ldr	r1, [pc, #652]	; (8001ee0 <main+0x628>)
 8001c52:	2000      	movs	r0, #0
 8001c54:	f008 f8e6 	bl	8009e24 <strtok>
 8001c58:	6478      	str	r0, [r7, #68]	; 0x44
	while (p != NULL){
 8001c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1ed      	bne.n	8001c3c <main+0x384>

	if((strncmp(array[0], "??" ,10) == 0) ||  (strncmp(array[0], "help" ,10) == 0) || (strncmp(array[0], "h" ,10) == 0)){
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	220a      	movs	r2, #10
 8001c64:	499f      	ldr	r1, [pc, #636]	; (8001ee4 <main+0x62c>)
 8001c66:	4618      	mov	r0, r3
 8001c68:	f008 f8ca 	bl	8009e00 <strncmp>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d011      	beq.n	8001c96 <main+0x3de>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	220a      	movs	r2, #10
 8001c76:	499c      	ldr	r1, [pc, #624]	; (8001ee8 <main+0x630>)
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f008 f8c1 	bl	8009e00 <strncmp>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <main+0x3de>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	220a      	movs	r2, #10
 8001c88:	4998      	ldr	r1, [pc, #608]	; (8001eec <main+0x634>)
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f008 f8b8 	bl	8009e00 <strncmp>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10d      	bne.n	8001cb2 <main+0x3fa>
		printHELP(&huart2,my_statusValues);}
 8001c96:	466d      	mov	r5, sp
 8001c98:	f107 0420 	add.w	r4, r7, #32
 8001c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	602b      	str	r3, [r5, #0]
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001caa:	4891      	ldr	r0, [pc, #580]	; (8001ef0 <main+0x638>)
 8001cac:	f7ff fa8e 	bl	80011cc <printHELP>
	if((strncmp(array[0], "??" ,10) == 0) ||  (strncmp(array[0], "help" ,10) == 0) || (strncmp(array[0], "h" ,10) == 0)){
 8001cb0:	e1b2      	b.n	8002018 <main+0x760>

	else if(strncmp(array[0], "fs" ,10) == 0){
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	220a      	movs	r2, #10
 8001cb6:	498f      	ldr	r1, [pc, #572]	; (8001ef4 <main+0x63c>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f008 f8a1 	bl	8009e00 <strncmp>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d12c      	bne.n	8001d1e <main+0x466>
		if ((strncmp(array[1], "A" ,10) == 0) || (strncmp(array[1], "a" ,10) == 0)){
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	220a      	movs	r2, #10
 8001cc8:	498b      	ldr	r1, [pc, #556]	; (8001ef8 <main+0x640>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f008 f898 	bl	8009e00 <strncmp>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d008      	beq.n	8001ce8 <main+0x430>
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	220a      	movs	r2, #10
 8001cda:	4988      	ldr	r1, [pc, #544]	; (8001efc <main+0x644>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f008 f88f 	bl	8009e00 <strncmp>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d107      	bne.n	8001cf8 <main+0x440>
			autoFanSpeedMode=true;
 8001ce8:	4b85      	ldr	r3, [pc, #532]	; (8001f00 <main+0x648>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
			debugPrintln(&huart2, "Setting fan speed to Auto");}
 8001cee:	4985      	ldr	r1, [pc, #532]	; (8001f04 <main+0x64c>)
 8001cf0:	487f      	ldr	r0, [pc, #508]	; (8001ef0 <main+0x638>)
 8001cf2:	f7ff f971 	bl	8000fd8 <debugPrintln>
 8001cf6:	e18f      	b.n	8002018 <main+0x760>
		else{command_value = stringToInt(array[1]);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fb48 	bl	8001390 <stringToInt>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	4b80      	ldr	r3, [pc, #512]	; (8001f08 <main+0x650>)
 8001d06:	801a      	strh	r2, [r3, #0]
			setFanSpeed(&huart2, &htim1, command_value);
 8001d08:	4b7f      	ldr	r3, [pc, #508]	; (8001f08 <main+0x650>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	497f      	ldr	r1, [pc, #508]	; (8001f0c <main+0x654>)
 8001d10:	4877      	ldr	r0, [pc, #476]	; (8001ef0 <main+0x638>)
 8001d12:	f7ff fb6f 	bl	80013f4 <setFanSpeed>
			autoFanSpeedMode=false;
 8001d16:	4b7a      	ldr	r3, [pc, #488]	; (8001f00 <main+0x648>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	e17c      	b.n	8002018 <main+0x760>
		}
	}

	else if(strncmp(array[0], "mv" ,10) == 0){
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	220a      	movs	r2, #10
 8001d22:	497b      	ldr	r1, [pc, #492]	; (8001f10 <main+0x658>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f008 f86b 	bl	8009e00 <strncmp>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d119      	bne.n	8001d64 <main+0x4ac>
		command_value = stringToInt(array[1]);
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fb2c 	bl	8001390 <stringToInt>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	4b72      	ldr	r3, [pc, #456]	; (8001f08 <main+0x650>)
 8001d3e:	801a      	strh	r2, [r3, #0]
		minVolt = command_value;
 8001d40:	4b71      	ldr	r3, [pc, #452]	; (8001f08 <main+0x650>)
 8001d42:	881a      	ldrh	r2, [r3, #0]
 8001d44:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <main+0x65c>)
 8001d46:	801a      	strh	r2, [r3, #0]
	  	debugPrint(&huart2, "Setting min voltage to: ");
 8001d48:	4973      	ldr	r1, [pc, #460]	; (8001f18 <main+0x660>)
 8001d4a:	4869      	ldr	r0, [pc, #420]	; (8001ef0 <main+0x638>)
 8001d4c:	f7ff fa1e 	bl	800118c <debugPrint>
	  	debugPrint(&huart2, array[1]);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	4619      	mov	r1, r3
 8001d54:	4866      	ldr	r0, [pc, #408]	; (8001ef0 <main+0x638>)
 8001d56:	f7ff fa19 	bl	800118c <debugPrint>

	  	debugPrintln(&huart2, "mV");
 8001d5a:	4970      	ldr	r1, [pc, #448]	; (8001f1c <main+0x664>)
 8001d5c:	4864      	ldr	r0, [pc, #400]	; (8001ef0 <main+0x638>)
 8001d5e:	f7ff f93b 	bl	8000fd8 <debugPrintln>
 8001d62:	e159      	b.n	8002018 <main+0x760>

		}

	else if(strncmp(array[0], "pm" ,10) == 0){
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	220a      	movs	r2, #10
 8001d68:	496d      	ldr	r1, [pc, #436]	; (8001f20 <main+0x668>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f008 f848 	bl	8009e00 <strncmp>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d138      	bne.n	8001de8 <main+0x530>
		command_value = stringToInt(array[1]);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fb09 	bl	8001390 <stringToInt>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	4b61      	ldr	r3, [pc, #388]	; (8001f08 <main+0x650>)
 8001d84:	801a      	strh	r2, [r3, #0]
		pulseLength = command_value;
 8001d86:	4b60      	ldr	r3, [pc, #384]	; (8001f08 <main+0x650>)
 8001d88:	881a      	ldrh	r2, [r3, #0]
 8001d8a:	4b66      	ldr	r3, [pc, #408]	; (8001f24 <main+0x66c>)
 8001d8c:	801a      	strh	r2, [r3, #0]
		command_value = stringToInt(array[2]);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fafd 	bl	8001390 <stringToInt>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b5b      	ldr	r3, [pc, #364]	; (8001f08 <main+0x650>)
 8001d9c:	801a      	strh	r2, [r3, #0]
		pulseCurrent = command_value;
 8001d9e:	4b5a      	ldr	r3, [pc, #360]	; (8001f08 <main+0x650>)
 8001da0:	881a      	ldrh	r2, [r3, #0]
 8001da2:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <main+0x670>)
 8001da4:	801a      	strh	r2, [r3, #0]

	  	debugPrint(&huart2, "Setting Pulse Length to: ");
 8001da6:	4961      	ldr	r1, [pc, #388]	; (8001f2c <main+0x674>)
 8001da8:	4851      	ldr	r0, [pc, #324]	; (8001ef0 <main+0x638>)
 8001daa:	f7ff f9ef 	bl	800118c <debugPrint>
	  	debugPrint(&huart2, array[1]);
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	4619      	mov	r1, r3
 8001db2:	484f      	ldr	r0, [pc, #316]	; (8001ef0 <main+0x638>)
 8001db4:	f7ff f9ea 	bl	800118c <debugPrint>
	  	debugPrintln(&huart2, " ms");
 8001db8:	495d      	ldr	r1, [pc, #372]	; (8001f30 <main+0x678>)
 8001dba:	484d      	ldr	r0, [pc, #308]	; (8001ef0 <main+0x638>)
 8001dbc:	f7ff f90c 	bl	8000fd8 <debugPrintln>


	  	debugPrint(&huart2, "Setting Pulse Current to: ");
 8001dc0:	495c      	ldr	r1, [pc, #368]	; (8001f34 <main+0x67c>)
 8001dc2:	484b      	ldr	r0, [pc, #300]	; (8001ef0 <main+0x638>)
 8001dc4:	f7ff f9e2 	bl	800118c <debugPrint>
	  	debugPrint(&huart2, array[2]);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4848      	ldr	r0, [pc, #288]	; (8001ef0 <main+0x638>)
 8001dce:	f7ff f9dd 	bl	800118c <debugPrint>
	  	debugPrintln(&huart2, " mA");
 8001dd2:	4959      	ldr	r1, [pc, #356]	; (8001f38 <main+0x680>)
 8001dd4:	4846      	ldr	r0, [pc, #280]	; (8001ef0 <main+0x638>)
 8001dd6:	f7ff f8ff 	bl	8000fd8 <debugPrintln>

		PULSE_MODE = true;
 8001dda:	4b58      	ldr	r3, [pc, #352]	; (8001f3c <main+0x684>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
		reportStatus = true;
 8001de0:	4b57      	ldr	r3, [pc, #348]	; (8001f40 <main+0x688>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	e117      	b.n	8002018 <main+0x760>

		}


	else if(strncmp(array[0], "cc" ,10) == 0){
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	220a      	movs	r2, #10
 8001dec:	4955      	ldr	r1, [pc, #340]	; (8001f44 <main+0x68c>)
 8001dee:	4618      	mov	r0, r3
 8001df0:	f008 f806 	bl	8009e00 <strncmp>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d118      	bne.n	8001e2c <main+0x574>
		if (stringToInt(array[1]) <= 20000){
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fac7 	bl	8001390 <stringToInt>
 8001e02:	4602      	mov	r2, r0
 8001e04:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dc0a      	bgt.n	8001e22 <main+0x56a>
			my_statusValues.setCurrent = stringToInt(array[1]);
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fabe 	bl	8001390 <stringToInt>
 8001e14:	4603      	mov	r3, r0
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	837b      	strh	r3, [r7, #26]
			reportStatus = true;
 8001e1a:	4b49      	ldr	r3, [pc, #292]	; (8001f40 <main+0x688>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	e0fa      	b.n	8002018 <main+0x760>
		}

		else{
			debugPrintln(&huart2, "Requested current is too high... Max current is 20 A");}
 8001e22:	4949      	ldr	r1, [pc, #292]	; (8001f48 <main+0x690>)
 8001e24:	4832      	ldr	r0, [pc, #200]	; (8001ef0 <main+0x638>)
 8001e26:	f7ff f8d7 	bl	8000fd8 <debugPrintln>
 8001e2a:	e0f5      	b.n	8002018 <main+0x760>
		}

	else if(strncmp(array[0], "cp" ,10) == 0){
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	220a      	movs	r2, #10
 8001e30:	4946      	ldr	r1, [pc, #280]	; (8001f4c <main+0x694>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	f007 ffe4 	bl	8009e00 <strncmp>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d135      	bne.n	8001eaa <main+0x5f2>
		my_statusValues.setPower = stringToInt(array[1]);
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff faa5 	bl	8001390 <stringToInt>
 8001e46:	4603      	mov	r3, r0
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	83bb      	strh	r3, [r7, #28]
		if (my_statusValues.setPower <= 250){
 8001e4c:	8bbb      	ldrh	r3, [r7, #28]
 8001e4e:	2bfa      	cmp	r3, #250	; 0xfa
 8001e50:	d826      	bhi.n	8001ea0 <main+0x5e8>
			my_statusValues.setCurrent = 1000000.0*my_statusValues.setPower/my_statusValues.measuredVoltage;
 8001e52:	8bbb      	ldrh	r3, [r7, #28]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb8d 	bl	8000574 <__aeabi_i2d>
 8001e5a:	a31f      	add	r3, pc, #124	; (adr r3, 8001ed8 <main+0x620>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fbf2 	bl	8000648 <__aeabi_dmul>
 8001e64:	4603      	mov	r3, r0
 8001e66:	460c      	mov	r4, r1
 8001e68:	4625      	mov	r5, r4
 8001e6a:	461c      	mov	r4, r3
 8001e6c:	8c3b      	ldrh	r3, [r7, #32]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb80 	bl	8000574 <__aeabi_i2d>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4620      	mov	r0, r4
 8001e7a:	4629      	mov	r1, r5
 8001e7c:	f7fe fd0e 	bl	800089c <__aeabi_ddiv>
 8001e80:	4603      	mov	r3, r0
 8001e82:	460c      	mov	r4, r1
 8001e84:	4618      	mov	r0, r3
 8001e86:	4621      	mov	r1, r4
 8001e88:	f7fe feb6 	bl	8000bf8 <__aeabi_d2uiz>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	837b      	strh	r3, [r7, #26]
			reportStatus = true;
 8001e92:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <main+0x688>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
			CW_MODE = true;
 8001e98:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <main+0x698>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
 8001e9e:	e0bb      	b.n	8002018 <main+0x760>
		}

		else{
			debugPrintln(&huart2, "Requested power is too high... Max power is 250 W");}
 8001ea0:	492c      	ldr	r1, [pc, #176]	; (8001f54 <main+0x69c>)
 8001ea2:	4813      	ldr	r0, [pc, #76]	; (8001ef0 <main+0x638>)
 8001ea4:	f7ff f898 	bl	8000fd8 <debugPrintln>
 8001ea8:	e0b6      	b.n	8002018 <main+0x760>
		}



	else if(strncmp(array[0], "status" ,10) == 0){
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	220a      	movs	r2, #10
 8001eae:	492a      	ldr	r1, [pc, #168]	; (8001f58 <main+0x6a0>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f007 ffa5 	bl	8009e00 <strncmp>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d14f      	bne.n	8001f5c <main+0x6a4>
		printStatus(my_statusValues, &huart2);}
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <main+0x638>)
 8001ebe:	9304      	str	r3, [sp, #16]
 8001ec0:	466c      	mov	r4, sp
 8001ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ec8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed2:	f7ff fb05 	bl	80014e0 <printStatus>
 8001ed6:	e09f      	b.n	8002018 <main+0x760>
 8001ed8:	00000000 	.word	0x00000000
 8001edc:	412e8480 	.word	0x412e8480
 8001ee0:	0800bf08 	.word	0x0800bf08
 8001ee4:	0800bf0c 	.word	0x0800bf0c
 8001ee8:	0800bf10 	.word	0x0800bf10
 8001eec:	0800bf18 	.word	0x0800bf18
 8001ef0:	20000600 	.word	0x20000600
 8001ef4:	0800bf1c 	.word	0x0800bf1c
 8001ef8:	0800bf20 	.word	0x0800bf20
 8001efc:	0800bf24 	.word	0x0800bf24
 8001f00:	20000008 	.word	0x20000008
 8001f04:	0800bf28 	.word	0x0800bf28
 8001f08:	20000244 	.word	0x20000244
 8001f0c:	20000568 	.word	0x20000568
 8001f10:	0800bf44 	.word	0x0800bf44
 8001f14:	20000260 	.word	0x20000260
 8001f18:	0800bf48 	.word	0x0800bf48
 8001f1c:	0800bf64 	.word	0x0800bf64
 8001f20:	0800bf68 	.word	0x0800bf68
 8001f24:	20000262 	.word	0x20000262
 8001f28:	20000264 	.word	0x20000264
 8001f2c:	0800bf6c 	.word	0x0800bf6c
 8001f30:	0800bf88 	.word	0x0800bf88
 8001f34:	0800bf8c 	.word	0x0800bf8c
 8001f38:	0800bfa8 	.word	0x0800bfa8
 8001f3c:	20000248 	.word	0x20000248
 8001f40:	20000246 	.word	0x20000246
 8001f44:	0800bfac 	.word	0x0800bfac
 8001f48:	0800bfb0 	.word	0x0800bfb0
 8001f4c:	0800bfe8 	.word	0x0800bfe8
 8001f50:	20000247 	.word	0x20000247
 8001f54:	0800bfec 	.word	0x0800bfec
 8001f58:	0800c020 	.word	0x0800c020

	else if((strncmp(array[0], "stop" ,10) == 0) || strncmp(array[0], "s" ,10) == 0){
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	220a      	movs	r2, #10
 8001f60:	4990      	ldr	r1, [pc, #576]	; (80021a4 <main+0x8ec>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f007 ff4c 	bl	8009e00 <strncmp>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <main+0x6c8>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	220a      	movs	r2, #10
 8001f72:	498d      	ldr	r1, [pc, #564]	; (80021a8 <main+0x8f0>)
 8001f74:	4618      	mov	r0, r3
 8001f76:	f007 ff43 	bl	8009e00 <strncmp>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10f      	bne.n	8001fa0 <main+0x6e8>
		reportStatus = false;
 8001f80:	4b8a      	ldr	r3, [pc, #552]	; (80021ac <main+0x8f4>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
		my_statusValues.setCurrent = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	837b      	strh	r3, [r7, #26]
		CW_MODE = false;
 8001f8a:	4b89      	ldr	r3, [pc, #548]	; (80021b0 <main+0x8f8>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
		PULSE_MODE = false;
 8001f90:	4b88      	ldr	r3, [pc, #544]	; (80021b4 <main+0x8fc>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
		debugPrintln(&huart2, "Received STOP, STOPPING.....");
 8001f96:	4988      	ldr	r1, [pc, #544]	; (80021b8 <main+0x900>)
 8001f98:	4888      	ldr	r0, [pc, #544]	; (80021bc <main+0x904>)
 8001f9a:	f7ff f81d 	bl	8000fd8 <debugPrintln>
 8001f9e:	e03b      	b.n	8002018 <main+0x760>

	}

	else if(strncmp(array[0], "reset" ,10) == 0){
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	220a      	movs	r2, #10
 8001fa4:	4986      	ldr	r1, [pc, #536]	; (80021c0 <main+0x908>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f007 ff2a 	bl	8009e00 <strncmp>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10f      	bne.n	8001fd2 <main+0x71a>
		debugPrintln(&huart2, "Resetting mAh, mWh and time");
 8001fb2:	4984      	ldr	r1, [pc, #528]	; (80021c4 <main+0x90c>)
 8001fb4:	4881      	ldr	r0, [pc, #516]	; (80021bc <main+0x904>)
 8001fb6:	f7ff f80f 	bl	8000fd8 <debugPrintln>
		my_statusValues.amperehours=0;
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
		my_statusValues.watthours=0;
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	633b      	str	r3, [r7, #48]	; 0x30
		zeroTimeValue = HAL_GetTick();
 8001fc6:	f001 f91d 	bl	8003204 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	4b7e      	ldr	r3, [pc, #504]	; (80021c8 <main+0x910>)
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e022      	b.n	8002018 <main+0x760>
	}

	else if(strncmp(array[0], "log" ,10) == 0){
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	220a      	movs	r2, #10
 8001fd6:	497d      	ldr	r1, [pc, #500]	; (80021cc <main+0x914>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f007 ff11 	bl	8009e00 <strncmp>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d108      	bne.n	8001ff6 <main+0x73e>
		statusInterval=stringToInt(array[1]);}
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f9d2 	bl	8001390 <stringToInt>
 8001fec:	4603      	mov	r3, r0
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4b77      	ldr	r3, [pc, #476]	; (80021d0 <main+0x918>)
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	e010      	b.n	8002018 <main+0x760>

	else{
		debugPrintln(&huart2, "Unknown command..., showing HELP");
 8001ff6:	4977      	ldr	r1, [pc, #476]	; (80021d4 <main+0x91c>)
 8001ff8:	4870      	ldr	r0, [pc, #448]	; (80021bc <main+0x904>)
 8001ffa:	f7fe ffed 	bl	8000fd8 <debugPrintln>
		printHELP(&huart2,my_statusValues);}
 8001ffe:	466d      	mov	r5, sp
 8002000:	f107 0420 	add.w	r4, r7, #32
 8002004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002006:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	602b      	str	r3, [r5, #0]
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002012:	486a      	ldr	r0, [pc, #424]	; (80021bc <main+0x904>)
 8002014:	f7ff f8da 	bl	80011cc <printHELP>
	memset(&line_buffer, '\0', sizeof(line_buffer));
 8002018:	2210      	movs	r2, #16
 800201a:	2100      	movs	r1, #0
 800201c:	486e      	ldr	r0, [pc, #440]	; (80021d8 <main+0x920>)
 800201e:	f007 fa6a 	bl	80094f6 <memset>
}



	  HAL_GPIO_TogglePin(GPIOB, LED_Pin); //Toggle LED
 8002022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002026:	486d      	ldr	r0, [pc, #436]	; (80021dc <main+0x924>)
 8002028:	f003 f842 	bl	80050b0 <HAL_GPIO_TogglePin>

	  HAL_GPIO_TogglePin(GPIOA,  DISCHARGE_LED_Pin); //Toggle LED
 800202c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002034:	f003 f83c 	bl	80050b0 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB,  OVERTEMP_Pin);
 8002038:	2110      	movs	r1, #16
 800203a:	4868      	ldr	r0, [pc, #416]	; (80021dc <main+0x924>)
 800203c:	f003 f838 	bl	80050b0 <HAL_GPIO_TogglePin>



	  if(PULSE_MODE){
 8002040:	4b5c      	ldr	r3, [pc, #368]	; (80021b4 <main+0x8fc>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d02a      	beq.n	800209e <main+0x7e6>

		  if(HAL_GetTick() - previousMillis_PULSE >= pulseLength){
 8002048:	f001 f8dc 	bl	8003204 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	4b64      	ldr	r3, [pc, #400]	; (80021e0 <main+0x928>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	4a63      	ldr	r2, [pc, #396]	; (80021e4 <main+0x92c>)
 8002056:	8812      	ldrh	r2, [r2, #0]
 8002058:	4293      	cmp	r3, r2
 800205a:	d320      	bcc.n	800209e <main+0x7e6>


			  if (PULSE_TOGGLE){
 800205c:	4b62      	ldr	r3, [pc, #392]	; (80021e8 <main+0x930>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00c      	beq.n	800207e <main+0x7c6>
				  PULSE_TOGGLE = false;
 8002064:	4b60      	ldr	r3, [pc, #384]	; (80021e8 <main+0x930>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
				  my_statusValues.setCurrent = pulseCurrent;
 800206a:	4b60      	ldr	r3, [pc, #384]	; (80021ec <main+0x934>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	837b      	strh	r3, [r7, #26]
				  HAL_GPIO_TogglePin(GPIOA, BILED_1_Pin); //Toggle LED
 8002070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002078:	f003 f81a 	bl	80050b0 <HAL_GPIO_TogglePin>
 800207c:	e00a      	b.n	8002094 <main+0x7dc>

			  }
			  else{
				  PULSE_TOGGLE = true;
 800207e:	4b5a      	ldr	r3, [pc, #360]	; (80021e8 <main+0x930>)
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(GPIOA, BILED_1_Pin); //Toggle LED
 8002084:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800208c:	f003 f810 	bl	80050b0 <HAL_GPIO_TogglePin>
				  my_statusValues.setCurrent = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	837b      	strh	r3, [r7, #26]
			  }

			  previousMillis_PULSE = HAL_GetTick();
 8002094:	f001 f8b6 	bl	8003204 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	4b51      	ldr	r3, [pc, #324]	; (80021e0 <main+0x928>)
 800209c:	601a      	str	r2, [r3, #0]
		  }
	  }


	  if(reportStatus){
 800209e:	4b43      	ldr	r3, [pc, #268]	; (80021ac <main+0x8f4>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01b      	beq.n	80020de <main+0x826>
		  if(HAL_GetTick() - previousMillis >= statusInterval){
 80020a6:	f001 f8ad 	bl	8003204 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <main+0x938>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	1ad2      	subs	r2, r2, r3
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <main+0x918>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d311      	bcc.n	80020de <main+0x826>
			  printStatus(my_statusValues, &huart2);
 80020ba:	4b40      	ldr	r3, [pc, #256]	; (80021bc <main+0x904>)
 80020bc:	9304      	str	r3, [sp, #16]
 80020be:	466c      	mov	r4, sp
 80020c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d0:	f7ff fa06 	bl	80014e0 <printStatus>
				previousMillis = HAL_GetTick();
 80020d4:	f001 f896 	bl	8003204 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b45      	ldr	r3, [pc, #276]	; (80021f0 <main+0x938>)
 80020dc:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if (autoFanSpeedMode){
 80020de:	4b45      	ldr	r3, [pc, #276]	; (80021f4 <main+0x93c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <main+0x838>
		  autoFanSpeed(&htim1, my_statusValues.temperature);
 80020e6:	8b3b      	ldrh	r3, [r7, #24]
 80020e8:	4619      	mov	r1, r3
 80020ea:	4843      	ldr	r0, [pc, #268]	; (80021f8 <main+0x940>)
 80020ec:	f7ff f9ac 	bl	8001448 <autoFanSpeed>
	  }

	  if(my_statusValues.measuredVoltage<minVolt){
 80020f0:	8c3a      	ldrh	r2, [r7, #32]
 80020f2:	4b42      	ldr	r3, [pc, #264]	; (80021fc <main+0x944>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d20b      	bcs.n	8002112 <main+0x85a>
			my_statusValues.setCurrent = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	837b      	strh	r3, [r7, #26]
			reportStatus = false;
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <main+0x8f4>)
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
			BEEP(&htim3);
 8002104:	483e      	ldr	r0, [pc, #248]	; (8002200 <main+0x948>)
 8002106:	f7ff f8f3 	bl	80012f0 <BEEP>
		  	debugPrintln(&huart2, "Min voltage reached. Stopped discharge");
 800210a:	493e      	ldr	r1, [pc, #248]	; (8002204 <main+0x94c>)
 800210c:	482b      	ldr	r0, [pc, #172]	; (80021bc <main+0x904>)
 800210e:	f7fe ff63 	bl	8000fd8 <debugPrintln>
	  }


	  if(my_statusValues.measuredPower/1000>maxWatt){
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002114:	4a3c      	ldr	r2, [pc, #240]	; (8002208 <main+0x950>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	099b      	lsrs	r3, r3, #6
 800211c:	4a3b      	ldr	r2, [pc, #236]	; (800220c <main+0x954>)
 800211e:	8812      	ldrh	r2, [r2, #0]
 8002120:	4293      	cmp	r3, r2
 8002122:	d90b      	bls.n	800213c <main+0x884>
			my_statusValues.setCurrent = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	837b      	strh	r3, [r7, #26]
			reportStatus = false;
 8002128:	4b20      	ldr	r3, [pc, #128]	; (80021ac <main+0x8f4>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
			BEEP(&htim3);
 800212e:	4834      	ldr	r0, [pc, #208]	; (8002200 <main+0x948>)
 8002130:	f7ff f8de 	bl	80012f0 <BEEP>
			debugPrintln(&huart2, "OVERPOWER, Stopped discharge");
 8002134:	4936      	ldr	r1, [pc, #216]	; (8002210 <main+0x958>)
 8002136:	4821      	ldr	r0, [pc, #132]	; (80021bc <main+0x904>)
 8002138:	f7fe ff4e 	bl	8000fd8 <debugPrintln>
	  }

	  if(my_statusValues.measuredCurrent/1000>maxCurrent){
 800213c:	8bfb      	ldrh	r3, [r7, #30]
 800213e:	4a32      	ldr	r2, [pc, #200]	; (8002208 <main+0x950>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	099b      	lsrs	r3, r3, #6
 8002146:	b29a      	uxth	r2, r3
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <main+0x95c>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d90b      	bls.n	8002168 <main+0x8b0>
			my_statusValues.setCurrent = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	837b      	strh	r3, [r7, #26]
			reportStatus = false;
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <main+0x8f4>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
			BEEP(&htim3);
 800215a:	4829      	ldr	r0, [pc, #164]	; (8002200 <main+0x948>)
 800215c:	f7ff f8c8 	bl	80012f0 <BEEP>
			debugPrintln(&huart2, "OVERCURRENT, Stopped discharge");
 8002160:	492d      	ldr	r1, [pc, #180]	; (8002218 <main+0x960>)
 8002162:	4816      	ldr	r0, [pc, #88]	; (80021bc <main+0x904>)
 8002164:	f7fe ff38 	bl	8000fd8 <debugPrintln>
	  }


	  if(my_statusValues.temperature>maxTemp*10){
 8002168:	8b3b      	ldrh	r3, [r7, #24]
 800216a:	4619      	mov	r1, r3
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <main+0x964>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4299      	cmp	r1, r3
 800217c:	f77f abd5 	ble.w	800192a <main+0x72>
			my_statusValues.setCurrent = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	837b      	strh	r3, [r7, #26]
			reportStatus = false;
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <main+0x8f4>)
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
			BEEP(&htim3);
 800218a:	481d      	ldr	r0, [pc, #116]	; (8002200 <main+0x948>)
 800218c:	f7ff f8b0 	bl	80012f0 <BEEP>
			HAL_Delay(50);
 8002190:	2032      	movs	r0, #50	; 0x32
 8002192:	f001 f843 	bl	800321c <HAL_Delay>

			debugPrintln(&huart2, "OVERTEMP, Stopped discharge");
 8002196:	4922      	ldr	r1, [pc, #136]	; (8002220 <main+0x968>)
 8002198:	4808      	ldr	r0, [pc, #32]	; (80021bc <main+0x904>)
 800219a:	f7fe ff1d 	bl	8000fd8 <debugPrintln>
  {
 800219e:	f7ff bbc4 	b.w	800192a <main+0x72>
 80021a2:	bf00      	nop
 80021a4:	0800c028 	.word	0x0800c028
 80021a8:	0800c030 	.word	0x0800c030
 80021ac:	20000246 	.word	0x20000246
 80021b0:	20000247 	.word	0x20000247
 80021b4:	20000248 	.word	0x20000248
 80021b8:	0800c034 	.word	0x0800c034
 80021bc:	20000600 	.word	0x20000600
 80021c0:	0800c054 	.word	0x0800c054
 80021c4:	0800c05c 	.word	0x0800c05c
 80021c8:	20000258 	.word	0x20000258
 80021cc:	0800c078 	.word	0x0800c078
 80021d0:	2000000c 	.word	0x2000000c
 80021d4:	0800c07c 	.word	0x0800c07c
 80021d8:	20000224 	.word	0x20000224
 80021dc:	48000400 	.word	0x48000400
 80021e0:	20000254 	.word	0x20000254
 80021e4:	20000262 	.word	0x20000262
 80021e8:	20000249 	.word	0x20000249
 80021ec:	20000264 	.word	0x20000264
 80021f0:	2000024c 	.word	0x2000024c
 80021f4:	20000008 	.word	0x20000008
 80021f8:	20000568 	.word	0x20000568
 80021fc:	20000260 	.word	0x20000260
 8002200:	20000420 	.word	0x20000420
 8002204:	0800c0a0 	.word	0x0800c0a0
 8002208:	10624dd3 	.word	0x10624dd3
 800220c:	2000001a 	.word	0x2000001a
 8002210:	0800c0c8 	.word	0x0800c0c8
 8002214:	2000001c 	.word	0x2000001c
 8002218:	0800c0e8 	.word	0x0800c0e8
 800221c:	20000018 	.word	0x20000018
 8002220:	0800c108 	.word	0x0800c108

08002224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0a4      	sub	sp, #144	; 0x90
 8002228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800222a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800222e:	2238      	movs	r2, #56	; 0x38
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f007 f95f 	bl	80094f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002238:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002248:	463b      	mov	r3, r7
 800224a:	2244      	movs	r2, #68	; 0x44
 800224c:	2100      	movs	r1, #0
 800224e:	4618      	mov	r0, r3
 8002250:	f007 f951 	bl	80094f6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002254:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002258:	f003 fc36 	bl	8005ac8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800225c:	2301      	movs	r3, #1
 800225e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002264:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002266:	2300      	movs	r3, #0
 8002268:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800226a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800226e:	4618      	mov	r0, r3
 8002270:	f003 fcde 	bl	8005c30 <HAL_RCC_OscConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800227a:	f000 fc43 	bl	8002b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800227e:	230f      	movs	r3, #15
 8002280:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002282:	2302      	movs	r3, #2
 8002284:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002286:	2300      	movs	r3, #0
 8002288:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800228a:	2300      	movs	r3, #0
 800228c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800228e:	2300      	movs	r3, #0
 8002290:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002292:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f003 ffe1 	bl	8006260 <HAL_RCC_ClockConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80022a4:	f000 fc2e 	bl	8002b04 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80022a8:	f248 0343 	movw	r3, #32835	; 0x8043
 80022ac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80022ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c0:	463b      	mov	r3, r7
 80022c2:	4618      	mov	r0, r3
 80022c4:	f004 f9e8 	bl	8006698 <HAL_RCCEx_PeriphCLKConfig>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80022ce:	f000 fc19 	bl	8002b04 <Error_Handler>
  }
}
 80022d2:	bf00      	nop
 80022d4:	3790      	adds	r7, #144	; 0x90
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80022e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80022ee:	1d3b      	adds	r3, r7, #4
 80022f0:	2220      	movs	r2, #32
 80022f2:	2100      	movs	r1, #0
 80022f4:	4618      	mov	r0, r3
 80022f6:	f007 f8fe 	bl	80094f6 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80022fa:	4b32      	ldr	r3, [pc, #200]	; (80023c4 <MX_ADC1_Init+0xe8>)
 80022fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002300:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002302:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <MX_ADC1_Init+0xe8>)
 8002304:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002308:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <MX_ADC1_Init+0xe8>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002310:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <MX_ADC1_Init+0xe8>)
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002316:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <MX_ADC1_Init+0xe8>)
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <MX_ADC1_Init+0xe8>)
 800231e:	2200      	movs	r2, #0
 8002320:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <MX_ADC1_Init+0xe8>)
 8002324:	2204      	movs	r2, #4
 8002326:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002328:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <MX_ADC1_Init+0xe8>)
 800232a:	2200      	movs	r2, #0
 800232c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800232e:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <MX_ADC1_Init+0xe8>)
 8002330:	2200      	movs	r2, #0
 8002332:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <MX_ADC1_Init+0xe8>)
 8002336:	2201      	movs	r2, #1
 8002338:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <MX_ADC1_Init+0xe8>)
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <MX_ADC1_Init+0xe8>)
 8002344:	2200      	movs	r2, #0
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002348:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <MX_ADC1_Init+0xe8>)
 800234a:	2200      	movs	r2, #0
 800234c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <MX_ADC1_Init+0xe8>)
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <MX_ADC1_Init+0xe8>)
 8002358:	2200      	movs	r2, #0
 800235a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <MX_ADC1_Init+0xe8>)
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002364:	4817      	ldr	r0, [pc, #92]	; (80023c4 <MX_ADC1_Init+0xe8>)
 8002366:	f001 f9a7 	bl	80036b8 <HAL_ADC_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002370:	f000 fbc8 	bl	8002b04 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800237c:	4619      	mov	r1, r3
 800237e:	4811      	ldr	r0, [pc, #68]	; (80023c4 <MX_ADC1_Init+0xe8>)
 8002380:	f002 f92c 	bl	80045dc <HAL_ADCEx_MultiModeConfigChannel>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800238a:	f000 fbbb 	bl	8002b04 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <MX_ADC1_Init+0xec>)
 8002390:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002392:	2306      	movs	r3, #6
 8002394:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800239a:	237f      	movs	r3, #127	; 0x7f
 800239c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800239e:	2304      	movs	r3, #4
 80023a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	4619      	mov	r1, r3
 80023aa:	4806      	ldr	r0, [pc, #24]	; (80023c4 <MX_ADC1_Init+0xe8>)
 80023ac:	f001 fca6 	bl	8003cfc <HAL_ADC_ConfigChannel>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80023b6:	f000 fba5 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023ba:	bf00      	nop
 80023bc:	3730      	adds	r7, #48	; 0x30
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000046c 	.word	0x2000046c
 80023c8:	08600004 	.word	0x08600004

080023cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023d2:	463b      	mov	r3, r7
 80023d4:	2220      	movs	r2, #32
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f007 f88c 	bl	80094f6 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80023de:	4b2b      	ldr	r3, [pc, #172]	; (800248c <MX_ADC2_Init+0xc0>)
 80023e0:	4a2b      	ldr	r2, [pc, #172]	; (8002490 <MX_ADC2_Init+0xc4>)
 80023e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023e4:	4b29      	ldr	r3, [pc, #164]	; (800248c <MX_ADC2_Init+0xc0>)
 80023e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <MX_ADC2_Init+0xc0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023f2:	4b26      	ldr	r3, [pc, #152]	; (800248c <MX_ADC2_Init+0xc0>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80023f8:	4b24      	ldr	r3, [pc, #144]	; (800248c <MX_ADC2_Init+0xc0>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <MX_ADC2_Init+0xc0>)
 8002400:	2200      	movs	r2, #0
 8002402:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002404:	4b21      	ldr	r3, [pc, #132]	; (800248c <MX_ADC2_Init+0xc0>)
 8002406:	2204      	movs	r2, #4
 8002408:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <MX_ADC2_Init+0xc0>)
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <MX_ADC2_Init+0xc0>)
 8002412:	2200      	movs	r2, #0
 8002414:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <MX_ADC2_Init+0xc0>)
 8002418:	2201      	movs	r2, #1
 800241a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <MX_ADC2_Init+0xc0>)
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <MX_ADC2_Init+0xc0>)
 8002426:	2200      	movs	r2, #0
 8002428:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <MX_ADC2_Init+0xc0>)
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <MX_ADC2_Init+0xc0>)
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <MX_ADC2_Init+0xc0>)
 800243a:	2200      	movs	r2, #0
 800243c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <MX_ADC2_Init+0xc0>)
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002446:	4811      	ldr	r0, [pc, #68]	; (800248c <MX_ADC2_Init+0xc0>)
 8002448:	f001 f936 	bl	80036b8 <HAL_ADC_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8002452:	f000 fb57 	bl	8002b04 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8002456:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <MX_ADC2_Init+0xc8>)
 8002458:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800245a:	2306      	movs	r3, #6
 800245c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002462:	237f      	movs	r3, #127	; 0x7f
 8002464:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002466:	2304      	movs	r3, #4
 8002468:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800246e:	463b      	mov	r3, r7
 8002470:	4619      	mov	r1, r3
 8002472:	4806      	ldr	r0, [pc, #24]	; (800248c <MX_ADC2_Init+0xc0>)
 8002474:	f001 fc42 	bl	8003cfc <HAL_ADC_ConfigChannel>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800247e:	f000 fb41 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000364 	.word	0x20000364
 8002490:	50000100 	.word	0x50000100
 8002494:	47520000 	.word	0x47520000

08002498 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <MX_I2C1_Init+0x74>)
 800249e:	4a1c      	ldr	r2, [pc, #112]	; (8002510 <MX_I2C1_Init+0x78>)
 80024a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <MX_I2C1_Init+0x74>)
 80024a4:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <MX_I2C1_Init+0x7c>)
 80024a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <MX_I2C1_Init+0x74>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <MX_I2C1_Init+0x74>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <MX_I2C1_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <MX_I2C1_Init+0x74>)
 80024bc:	2200      	movs	r2, #0
 80024be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <MX_I2C1_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_I2C1_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <MX_I2C1_Init+0x74>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024d2:	480e      	ldr	r0, [pc, #56]	; (800250c <MX_I2C1_Init+0x74>)
 80024d4:	f002 fe06 	bl	80050e4 <HAL_I2C_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80024de:	f000 fb11 	bl	8002b04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024e2:	2100      	movs	r1, #0
 80024e4:	4809      	ldr	r0, [pc, #36]	; (800250c <MX_I2C1_Init+0x74>)
 80024e6:	f003 fa57 	bl	8005998 <HAL_I2CEx_ConfigAnalogFilter>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80024f0:	f000 fb08 	bl	8002b04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80024f4:	2100      	movs	r1, #0
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_I2C1_Init+0x74>)
 80024f8:	f003 fa99 	bl	8005a2e <HAL_I2CEx_ConfigDigitalFilter>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002502:	f000 faff 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200003d0 	.word	0x200003d0
 8002510:	40005400 	.word	0x40005400
 8002514:	00506682 	.word	0x00506682

08002518 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b09c      	sub	sp, #112	; 0x70
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002538:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
 8002546:	611a      	str	r2, [r3, #16]
 8002548:	615a      	str	r2, [r3, #20]
 800254a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800254c:	1d3b      	adds	r3, r7, #4
 800254e:	2234      	movs	r2, #52	; 0x34
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f006 ffcf 	bl	80094f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002558:	4b45      	ldr	r3, [pc, #276]	; (8002670 <MX_TIM1_Init+0x158>)
 800255a:	4a46      	ldr	r2, [pc, #280]	; (8002674 <MX_TIM1_Init+0x15c>)
 800255c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 800255e:	4b44      	ldr	r3, [pc, #272]	; (8002670 <MX_TIM1_Init+0x158>)
 8002560:	220f      	movs	r2, #15
 8002562:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002564:	4b42      	ldr	r3, [pc, #264]	; (8002670 <MX_TIM1_Init+0x158>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800256a:	4b41      	ldr	r3, [pc, #260]	; (8002670 <MX_TIM1_Init+0x158>)
 800256c:	2264      	movs	r2, #100	; 0x64
 800256e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002570:	4b3f      	ldr	r3, [pc, #252]	; (8002670 <MX_TIM1_Init+0x158>)
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002576:	4b3e      	ldr	r3, [pc, #248]	; (8002670 <MX_TIM1_Init+0x158>)
 8002578:	2200      	movs	r2, #0
 800257a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800257c:	4b3c      	ldr	r3, [pc, #240]	; (8002670 <MX_TIM1_Init+0x158>)
 800257e:	2280      	movs	r2, #128	; 0x80
 8002580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002582:	483b      	ldr	r0, [pc, #236]	; (8002670 <MX_TIM1_Init+0x158>)
 8002584:	f004 fa78 	bl	8006a78 <HAL_TIM_Base_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800258e:	f000 fab9 	bl	8002b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002596:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002598:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800259c:	4619      	mov	r1, r3
 800259e:	4834      	ldr	r0, [pc, #208]	; (8002670 <MX_TIM1_Init+0x158>)
 80025a0:	f004 fd96 	bl	80070d0 <HAL_TIM_ConfigClockSource>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80025aa:	f000 faab 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80025ae:	4830      	ldr	r0, [pc, #192]	; (8002670 <MX_TIM1_Init+0x158>)
 80025b0:	f004 fb1c 	bl	8006bec <HAL_TIM_PWM_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80025ba:	f000 faa3 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025ce:	4619      	mov	r1, r3
 80025d0:	4827      	ldr	r0, [pc, #156]	; (8002670 <MX_TIM1_Init+0x158>)
 80025d2:	f005 fa97 	bl	8007b04 <HAL_TIMEx_MasterConfigSynchronization>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80025dc:	f000 fa92 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025e0:	2360      	movs	r3, #96	; 0x60
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80025e4:	2300      	movs	r3, #0
 80025e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025e8:	2300      	movs	r3, #0
 80025ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025ec:	2300      	movs	r3, #0
 80025ee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025f4:	2300      	movs	r3, #0
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025f8:	2300      	movs	r3, #0
 80025fa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002600:	2200      	movs	r2, #0
 8002602:	4619      	mov	r1, r3
 8002604:	481a      	ldr	r0, [pc, #104]	; (8002670 <MX_TIM1_Init+0x158>)
 8002606:	f004 fc53 	bl	8006eb0 <HAL_TIM_PWM_ConfigChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002610:	f000 fa78 	bl	8002b04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800262c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800263a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800263e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002640:	2300      	movs	r3, #0
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002644:	2300      	movs	r3, #0
 8002646:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800264c:	1d3b      	adds	r3, r7, #4
 800264e:	4619      	mov	r1, r3
 8002650:	4807      	ldr	r0, [pc, #28]	; (8002670 <MX_TIM1_Init+0x158>)
 8002652:	f005 fad9 	bl	8007c08 <HAL_TIMEx_ConfigBreakDeadTime>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 800265c:	f000 fa52 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002660:	4803      	ldr	r0, [pc, #12]	; (8002670 <MX_TIM1_Init+0x158>)
 8002662:	f000 fbb5 	bl	8002dd0 <HAL_TIM_MspPostInit>

}
 8002666:	bf00      	nop
 8002668:	3770      	adds	r7, #112	; 0x70
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000568 	.word	0x20000568
 8002674:	40012c00 	.word	0x40012c00

08002678 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800267e:	f107 0310 	add.w	r3, r7, #16
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <MX_TIM2_Init+0x98>)
 8002698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800269c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 610;
 800269e:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <MX_TIM2_Init+0x98>)
 80026a0:	f240 2262 	movw	r2, #610	; 0x262
 80026a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <MX_TIM2_Init+0x98>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <MX_TIM2_Init+0x98>)
 80026ae:	220a      	movs	r2, #10
 80026b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b2:	4b17      	ldr	r3, [pc, #92]	; (8002710 <MX_TIM2_Init+0x98>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026b8:	4b15      	ldr	r3, [pc, #84]	; (8002710 <MX_TIM2_Init+0x98>)
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026be:	4814      	ldr	r0, [pc, #80]	; (8002710 <MX_TIM2_Init+0x98>)
 80026c0:	f004 f9da 	bl	8006a78 <HAL_TIM_Base_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80026ca:	f000 fa1b 	bl	8002b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026d4:	f107 0310 	add.w	r3, r7, #16
 80026d8:	4619      	mov	r1, r3
 80026da:	480d      	ldr	r0, [pc, #52]	; (8002710 <MX_TIM2_Init+0x98>)
 80026dc:	f004 fcf8 	bl	80070d0 <HAL_TIM_ConfigClockSource>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80026e6:	f000 fa0d 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026f2:	1d3b      	adds	r3, r7, #4
 80026f4:	4619      	mov	r1, r3
 80026f6:	4806      	ldr	r0, [pc, #24]	; (8002710 <MX_TIM2_Init+0x98>)
 80026f8:	f005 fa04 	bl	8007b04 <HAL_TIMEx_MasterConfigSynchronization>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002702:	f000 f9ff 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200005b4 	.word	0x200005b4

08002714 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08e      	sub	sp, #56	; 0x38
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002728:	f107 031c 	add.w	r3, r7, #28
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002734:	463b      	mov	r3, r7
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	60da      	str	r2, [r3, #12]
 8002740:	611a      	str	r2, [r3, #16]
 8002742:	615a      	str	r2, [r3, #20]
 8002744:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002746:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <MX_TIM3_Init+0xe8>)
 8002748:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <MX_TIM3_Init+0xec>)
 800274a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500;
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <MX_TIM3_Init+0xe8>)
 800274e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002752:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002754:	4b29      	ldr	r3, [pc, #164]	; (80027fc <MX_TIM3_Init+0xe8>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <MX_TIM3_Init+0xe8>)
 800275c:	2264      	movs	r2, #100	; 0x64
 800275e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002760:	4b26      	ldr	r3, [pc, #152]	; (80027fc <MX_TIM3_Init+0xe8>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002766:	4b25      	ldr	r3, [pc, #148]	; (80027fc <MX_TIM3_Init+0xe8>)
 8002768:	2280      	movs	r2, #128	; 0x80
 800276a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800276c:	4823      	ldr	r0, [pc, #140]	; (80027fc <MX_TIM3_Init+0xe8>)
 800276e:	f004 f983 	bl	8006a78 <HAL_TIM_Base_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002778:	f000 f9c4 	bl	8002b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800277c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002786:	4619      	mov	r1, r3
 8002788:	481c      	ldr	r0, [pc, #112]	; (80027fc <MX_TIM3_Init+0xe8>)
 800278a:	f004 fca1 	bl	80070d0 <HAL_TIM_ConfigClockSource>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002794:	f000 f9b6 	bl	8002b04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002798:	4818      	ldr	r0, [pc, #96]	; (80027fc <MX_TIM3_Init+0xe8>)
 800279a:	f004 fa27 	bl	8006bec <HAL_TIM_PWM_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80027a4:	f000 f9ae 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4619      	mov	r1, r3
 80027b6:	4811      	ldr	r0, [pc, #68]	; (80027fc <MX_TIM3_Init+0xe8>)
 80027b8:	f005 f9a4 	bl	8007b04 <HAL_TIMEx_MasterConfigSynchronization>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80027c2:	f000 f99f 	bl	8002b04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027c6:	2360      	movs	r3, #96	; 0x60
 80027c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027d6:	463b      	mov	r3, r7
 80027d8:	2208      	movs	r2, #8
 80027da:	4619      	mov	r1, r3
 80027dc:	4807      	ldr	r0, [pc, #28]	; (80027fc <MX_TIM3_Init+0xe8>)
 80027de:	f004 fb67 	bl	8006eb0 <HAL_TIM_PWM_ConfigChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80027e8:	f000 f98c 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027ec:	4803      	ldr	r0, [pc, #12]	; (80027fc <MX_TIM3_Init+0xe8>)
 80027ee:	f000 faef 	bl	8002dd0 <HAL_TIM_MspPostInit>

}
 80027f2:	bf00      	nop
 80027f4:	3738      	adds	r7, #56	; 0x38
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000420 	.word	0x20000420
 8002800:	40000400 	.word	0x40000400

08002804 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800280a:	f107 0310 	add.w	r3, r7, #16
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002818:	1d3b      	adds	r3, r7, #4
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <MX_TIM4_Init+0x94>)
 8002824:	4a1d      	ldr	r2, [pc, #116]	; (800289c <MX_TIM4_Init+0x98>)
 8002826:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24;
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <MX_TIM4_Init+0x94>)
 800282a:	2218      	movs	r2, #24
 800282c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <MX_TIM4_Init+0x94>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002834:	4b18      	ldr	r3, [pc, #96]	; (8002898 <MX_TIM4_Init+0x94>)
 8002836:	2263      	movs	r2, #99	; 0x63
 8002838:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <MX_TIM4_Init+0x94>)
 800283c:	2200      	movs	r2, #0
 800283e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <MX_TIM4_Init+0x94>)
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002846:	4814      	ldr	r0, [pc, #80]	; (8002898 <MX_TIM4_Init+0x94>)
 8002848:	f004 f916 	bl	8006a78 <HAL_TIM_Base_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002852:	f000 f957 	bl	8002b04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800285c:	f107 0310 	add.w	r3, r7, #16
 8002860:	4619      	mov	r1, r3
 8002862:	480d      	ldr	r0, [pc, #52]	; (8002898 <MX_TIM4_Init+0x94>)
 8002864:	f004 fc34 	bl	80070d0 <HAL_TIM_ConfigClockSource>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800286e:	f000 f949 	bl	8002b04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	4619      	mov	r1, r3
 800287e:	4806      	ldr	r0, [pc, #24]	; (8002898 <MX_TIM4_Init+0x94>)
 8002880:	f005 f940 	bl	8007b04 <HAL_TIMEx_MasterConfigSynchronization>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800288a:	f000 f93b 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800288e:	bf00      	nop
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000308 	.word	0x20000308
 800289c:	40000800 	.word	0x40000800

080028a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028a4:	4b22      	ldr	r3, [pc, #136]	; (8002930 <MX_USART1_UART_Init+0x90>)
 80028a6:	4a23      	ldr	r2, [pc, #140]	; (8002934 <MX_USART1_UART_Init+0x94>)
 80028a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028aa:	4b21      	ldr	r3, [pc, #132]	; (8002930 <MX_USART1_UART_Init+0x90>)
 80028ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028b2:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <MX_USART1_UART_Init+0x90>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <MX_USART1_UART_Init+0x90>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028be:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <MX_USART1_UART_Init+0x90>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028c4:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <MX_USART1_UART_Init+0x90>)
 80028c6:	220c      	movs	r2, #12
 80028c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ca:	4b19      	ldr	r3, [pc, #100]	; (8002930 <MX_USART1_UART_Init+0x90>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d0:	4b17      	ldr	r3, [pc, #92]	; (8002930 <MX_USART1_UART_Init+0x90>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028d6:	4b16      	ldr	r3, [pc, #88]	; (8002930 <MX_USART1_UART_Init+0x90>)
 80028d8:	2200      	movs	r2, #0
 80028da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <MX_USART1_UART_Init+0x90>)
 80028de:	2200      	movs	r2, #0
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028e2:	4b13      	ldr	r3, [pc, #76]	; (8002930 <MX_USART1_UART_Init+0x90>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028e8:	4811      	ldr	r0, [pc, #68]	; (8002930 <MX_USART1_UART_Init+0x90>)
 80028ea:	f005 fa2d 	bl	8007d48 <HAL_UART_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80028f4:	f000 f906 	bl	8002b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028f8:	2100      	movs	r1, #0
 80028fa:	480d      	ldr	r0, [pc, #52]	; (8002930 <MX_USART1_UART_Init+0x90>)
 80028fc:	f006 fce1 	bl	80092c2 <HAL_UARTEx_SetTxFifoThreshold>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002906:	f000 f8fd 	bl	8002b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800290a:	2100      	movs	r1, #0
 800290c:	4808      	ldr	r0, [pc, #32]	; (8002930 <MX_USART1_UART_Init+0x90>)
 800290e:	f006 fd16 	bl	800933e <HAL_UARTEx_SetRxFifoThreshold>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002918:	f000 f8f4 	bl	8002b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800291c:	4804      	ldr	r0, [pc, #16]	; (8002930 <MX_USART1_UART_Init+0x90>)
 800291e:	f006 fc97 	bl	8009250 <HAL_UARTEx_DisableFifoMode>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002928:	f000 f8ec 	bl	8002b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}
 8002930:	200004d8 	.word	0x200004d8
 8002934:	40013800 	.word	0x40013800

08002938 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800293c:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 800293e:	4a23      	ldr	r2, [pc, #140]	; (80029cc <MX_USART2_UART_Init+0x94>)
 8002940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002942:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 8002944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800294a:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 8002952:	2200      	movs	r2, #0
 8002954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 8002958:	2200      	movs	r2, #0
 800295a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 800295e:	220c      	movs	r2, #12
 8002960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002962:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002968:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 800296a:	2200      	movs	r2, #0
 800296c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 8002970:	2200      	movs	r2, #0
 8002972:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 8002976:	2200      	movs	r2, #0
 8002978:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 800297c:	2200      	movs	r2, #0
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002980:	4811      	ldr	r0, [pc, #68]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 8002982:	f005 f9e1 	bl	8007d48 <HAL_UART_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800298c:	f000 f8ba 	bl	8002b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002990:	2100      	movs	r1, #0
 8002992:	480d      	ldr	r0, [pc, #52]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 8002994:	f006 fc95 	bl	80092c2 <HAL_UARTEx_SetTxFifoThreshold>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800299e:	f000 f8b1 	bl	8002b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029a2:	2100      	movs	r1, #0
 80029a4:	4808      	ldr	r0, [pc, #32]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 80029a6:	f006 fcca 	bl	800933e <HAL_UARTEx_SetRxFifoThreshold>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80029b0:	f000 f8a8 	bl	8002b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80029b4:	4804      	ldr	r0, [pc, #16]	; (80029c8 <MX_USART2_UART_Init+0x90>)
 80029b6:	f006 fc4b 	bl	8009250 <HAL_UARTEx_DisableFifoMode>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80029c0:	f000 f8a0 	bl	8002b04 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */
  //__HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);

  /* USER CODE END USART2_Init 2 */

}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000600 	.word	0x20000600
 80029cc:	40004400 	.word	0x40004400

080029d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <MX_DMA_Init+0x50>)
 80029d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029da:	4a11      	ldr	r2, [pc, #68]	; (8002a20 <MX_DMA_Init+0x50>)
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	6493      	str	r3, [r2, #72]	; 0x48
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <MX_DMA_Init+0x50>)
 80029e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <MX_DMA_Init+0x50>)
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	4a0b      	ldr	r2, [pc, #44]	; (8002a20 <MX_DMA_Init+0x50>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6493      	str	r3, [r2, #72]	; 0x48
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <MX_DMA_Init+0x50>)
 80029fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	200b      	movs	r0, #11
 8002a0c:	f001 ff61 	bl	80048d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a10:	200b      	movs	r0, #11
 8002a12:	f001 ff78 	bl	8004906 <HAL_NVIC_EnableIRQ>

}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000

08002a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	60da      	str	r2, [r3, #12]
 8002a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a3a:	4b30      	ldr	r3, [pc, #192]	; (8002afc <MX_GPIO_Init+0xd8>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	4a2f      	ldr	r2, [pc, #188]	; (8002afc <MX_GPIO_Init+0xd8>)
 8002a40:	f043 0320 	orr.w	r3, r3, #32
 8002a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a46:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <MX_GPIO_Init+0xd8>)
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a52:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <MX_GPIO_Init+0xd8>)
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	4a29      	ldr	r2, [pc, #164]	; (8002afc <MX_GPIO_Init+0xd8>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a5e:	4b27      	ldr	r3, [pc, #156]	; (8002afc <MX_GPIO_Init+0xd8>)
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6a:	4b24      	ldr	r3, [pc, #144]	; (8002afc <MX_GPIO_Init+0xd8>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	4a23      	ldr	r2, [pc, #140]	; (8002afc <MX_GPIO_Init+0xd8>)
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a76:	4b21      	ldr	r3, [pc, #132]	; (8002afc <MX_GPIO_Init+0xd8>)
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BILED_1_Pin|DISCHARGE_LED_Pin, GPIO_PIN_RESET);
 8002a82:	2200      	movs	r2, #0
 8002a84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a8c:	f002 faf8 	bl	8005080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OVERTEMP_Pin|BILED_2_Pin|LED_Pin, GPIO_PIN_RESET);
 8002a90:	2200      	movs	r2, #0
 8002a92:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002a96:	481a      	ldr	r0, [pc, #104]	; (8002b00 <MX_GPIO_Init+0xdc>)
 8002a98:	f002 faf2 	bl	8005080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FANIN_Pin */
  GPIO_InitStruct.Pin = FANIN_Pin;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FANIN_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	4619      	mov	r1, r3
 8002aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ab2:	f002 f963 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BILED_1_Pin DISCHARGE_LED_Pin */
  GPIO_InitStruct.Pin = BILED_1_Pin|DISCHARGE_LED_Pin;
 8002ab6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002abc:	2301      	movs	r3, #1
 8002abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac8:	f107 030c 	add.w	r3, r7, #12
 8002acc:	4619      	mov	r1, r3
 8002ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad2:	f002 f953 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OVERTEMP_Pin BILED_2_Pin LED_Pin */
  GPIO_InitStruct.Pin = OVERTEMP_Pin|BILED_2_Pin|LED_Pin;
 8002ad6:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002adc:	2301      	movs	r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae8:	f107 030c 	add.w	r3, r7, #12
 8002aec:	4619      	mov	r1, r3
 8002aee:	4804      	ldr	r0, [pc, #16]	; (8002b00 <MX_GPIO_Init+0xdc>)
 8002af0:	f002 f944 	bl	8004d7c <HAL_GPIO_Init>

}
 8002af4:	bf00      	nop
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	48000400 	.word	0x48000400

08002b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_MspInit+0x44>)
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1e:	4a0e      	ldr	r2, [pc, #56]	; (8002b58 <HAL_MspInit+0x44>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6613      	str	r3, [r2, #96]	; 0x60
 8002b26:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <HAL_MspInit+0x44>)
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_MspInit+0x44>)
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <HAL_MspInit+0x44>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_MspInit+0x44>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002b4a:	f003 f861 	bl	8005c10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000

08002b5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08c      	sub	sp, #48	; 0x30
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b64:	f107 031c 	add.w	r3, r7, #28
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b7c:	d12e      	bne.n	8002bdc <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002b7e:	4b33      	ldr	r3, [pc, #204]	; (8002c4c <HAL_ADC_MspInit+0xf0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3301      	adds	r3, #1
 8002b84:	4a31      	ldr	r2, [pc, #196]	; (8002c4c <HAL_ADC_MspInit+0xf0>)
 8002b86:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002b88:	4b30      	ldr	r3, [pc, #192]	; (8002c4c <HAL_ADC_MspInit+0xf0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002b90:	4b2f      	ldr	r3, [pc, #188]	; (8002c50 <HAL_ADC_MspInit+0xf4>)
 8002b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b94:	4a2e      	ldr	r2, [pc, #184]	; (8002c50 <HAL_ADC_MspInit+0xf4>)
 8002b96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b9c:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <HAL_ADC_MspInit+0xf4>)
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba8:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <HAL_ADC_MspInit+0xf4>)
 8002baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bac:	4a28      	ldr	r2, [pc, #160]	; (8002c50 <HAL_ADC_MspInit+0xf4>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bb4:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <HAL_ADC_MspInit+0xf4>)
 8002bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = FET1_TEMP_Pin;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FET1_TEMP_GPIO_Port, &GPIO_InitStruct);
 8002bcc:	f107 031c 	add.w	r3, r7, #28
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bd6:	f002 f8d1 	bl	8004d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002bda:	e032      	b.n	8002c42 <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1c      	ldr	r2, [pc, #112]	; (8002c54 <HAL_ADC_MspInit+0xf8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d12d      	bne.n	8002c42 <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002be6:	4b19      	ldr	r3, [pc, #100]	; (8002c4c <HAL_ADC_MspInit+0xf0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	3301      	adds	r3, #1
 8002bec:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <HAL_ADC_MspInit+0xf0>)
 8002bee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002bf0:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <HAL_ADC_MspInit+0xf0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10b      	bne.n	8002c10 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002bf8:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_ADC_MspInit+0xf4>)
 8002bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <HAL_ADC_MspInit+0xf4>)
 8002bfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_ADC_MspInit+0xf4>)
 8002c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <HAL_ADC_MspInit+0xf4>)
 8002c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c14:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <HAL_ADC_MspInit+0xf4>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_ADC_MspInit+0xf4>)
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FET2_TEMP_Pin|PCB_TEMP_Pin;
 8002c28:	2390      	movs	r3, #144	; 0x90
 8002c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c3e:	f002 f89d 	bl	8004d7c <HAL_GPIO_Init>
}
 8002c42:	bf00      	nop
 8002c44:	3730      	adds	r7, #48	; 0x30
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	2000026c 	.word	0x2000026c
 8002c50:	40021000 	.word	0x40021000
 8002c54:	50000100 	.word	0x50000100

08002c58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <HAL_I2C_MspInit+0xb8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d145      	bne.n	8002d06 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <HAL_I2C_MspInit+0xbc>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	4a25      	ldr	r2, [pc, #148]	; (8002d14 <HAL_I2C_MspInit+0xbc>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c86:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <HAL_I2C_MspInit+0xbc>)
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c92:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <HAL_I2C_MspInit+0xbc>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c96:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <HAL_I2C_MspInit+0xbc>)
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c9e:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <HAL_I2C_MspInit+0xbc>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cb0:	2312      	movs	r3, #18
 8002cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cca:	f002 f857 	bl	8004d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cd2:	2312      	movs	r3, #18
 8002cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cde:	2304      	movs	r3, #4
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	480b      	ldr	r0, [pc, #44]	; (8002d18 <HAL_I2C_MspInit+0xc0>)
 8002cea:	f002 f847 	bl	8004d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_I2C_MspInit+0xbc>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <HAL_I2C_MspInit+0xbc>)
 8002cf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_I2C_MspInit+0xbc>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d02:	60bb      	str	r3, [r7, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d06:	bf00      	nop
 8002d08:	3728      	adds	r7, #40	; 0x28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40005400 	.word	0x40005400
 8002d14:	40021000 	.word	0x40021000
 8002d18:	48000400 	.word	0x48000400

08002d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a25      	ldr	r2, [pc, #148]	; (8002dc0 <HAL_TIM_Base_MspInit+0xa4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d10c      	bne.n	8002d48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d2e:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d32:	4a24      	ldr	r2, [pc, #144]	; (8002dc4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d38:	6613      	str	r3, [r2, #96]	; 0x60
 8002d3a:	4b22      	ldr	r3, [pc, #136]	; (8002dc4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d46:	e034      	b.n	8002db2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d50:	d10c      	bne.n	8002d6c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d52:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d56:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
}
 8002d6a:	e022      	b.n	8002db2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <HAL_TIM_Base_MspInit+0xac>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10c      	bne.n	8002d90 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d76:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	4a12      	ldr	r2, [pc, #72]	; (8002dc4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	6593      	str	r3, [r2, #88]	; 0x58
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
}
 8002d8e:	e010      	b.n	8002db2 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <HAL_TIM_Base_MspInit+0xb0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d10b      	bne.n	8002db2 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <HAL_TIM_Base_MspInit+0xa8>)
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	6593      	str	r3, [r2, #88]	; 0x58
 8002da6:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_TIM_Base_MspInit+0xa8>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
}
 8002db2:	bf00      	nop
 8002db4:	371c      	adds	r7, #28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40000800 	.word	0x40000800

08002dd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	; 0x28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <HAL_TIM_MspPostInit+0xac>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d11e      	bne.n	8002e30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df2:	4b23      	ldr	r3, [pc, #140]	; (8002e80 <HAL_TIM_MspPostInit+0xb0>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <HAL_TIM_MspPostInit+0xb0>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_TIM_MspPostInit+0xb0>)
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8002e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002e1c:	2306      	movs	r3, #6
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4619      	mov	r1, r3
 8002e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e2a:	f001 ffa7 	bl	8004d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e2e:	e020      	b.n	8002e72 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <HAL_TIM_MspPostInit+0xb4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d11b      	bne.n	8002e72 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3a:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <HAL_TIM_MspPostInit+0xb0>)
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3e:	4a10      	ldr	r2, [pc, #64]	; (8002e80 <HAL_TIM_MspPostInit+0xb0>)
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <HAL_TIM_MspPostInit+0xb0>)
 8002e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8002e52:	2301      	movs	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e56:	2302      	movs	r3, #2
 8002e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e62:	2302      	movs	r3, #2
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4806      	ldr	r0, [pc, #24]	; (8002e88 <HAL_TIM_MspPostInit+0xb8>)
 8002e6e:	f001 ff85 	bl	8004d7c <HAL_GPIO_Init>
}
 8002e72:	bf00      	nop
 8002e74:	3728      	adds	r7, #40	; 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40012c00 	.word	0x40012c00
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40000400 	.word	0x40000400
 8002e88:	48000400 	.word	0x48000400

08002e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08c      	sub	sp, #48	; 0x30
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 031c 	add.w	r3, r7, #28
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a48      	ldr	r2, [pc, #288]	; (8002fcc <HAL_UART_MspInit+0x140>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d12a      	bne.n	8002f04 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eae:	4b48      	ldr	r3, [pc, #288]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb2:	4a47      	ldr	r2, [pc, #284]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb8:	6613      	str	r3, [r2, #96]	; 0x60
 8002eba:	4b45      	ldr	r3, [pc, #276]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec2:	61bb      	str	r3, [r7, #24]
 8002ec4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	4b42      	ldr	r3, [pc, #264]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	4a41      	ldr	r2, [pc, #260]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ed2:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ede:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ef0:	2307      	movs	r3, #7
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef4:	f107 031c 	add.w	r3, r7, #28
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002efe:	f001 ff3d 	bl	8004d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f02:	e05e      	b.n	8002fc2 <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART2)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a32      	ldr	r2, [pc, #200]	; (8002fd4 <HAL_UART_MspInit+0x148>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d159      	bne.n	8002fc2 <HAL_UART_MspInit+0x136>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f0e:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	4a2f      	ldr	r2, [pc, #188]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f18:	6593      	str	r3, [r2, #88]	; 0x58
 8002f1a:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f26:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2a:	4a29      	ldr	r2, [pc, #164]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f32:	4b27      	ldr	r3, [pc, #156]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f3e:	230c      	movs	r3, #12
 8002f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f42:	2302      	movs	r3, #2
 8002f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f4e:	2307      	movs	r3, #7
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f52:	f107 031c 	add.w	r3, r7, #28
 8002f56:	4619      	mov	r1, r3
 8002f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f5c:	f001 ff0e 	bl	8004d7c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002f60:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f62:	4a1e      	ldr	r2, [pc, #120]	; (8002fdc <HAL_UART_MspInit+0x150>)
 8002f64:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002f66:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f68:	221a      	movs	r2, #26
 8002f6a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f78:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f84:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002f8a:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f96:	4810      	ldr	r0, [pc, #64]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f98:	f001 fcd0 	bl	800493c <HAL_DMA_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 8002fa2:	f7ff fdaf 	bl	8002b04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002faa:	679a      	str	r2, [r3, #120]	; 0x78
 8002fac:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	2026      	movs	r0, #38	; 0x26
 8002fb8:	f001 fc8b 	bl	80048d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fbc:	2026      	movs	r0, #38	; 0x26
 8002fbe:	f001 fca2 	bl	8004906 <HAL_NVIC_EnableIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3730      	adds	r7, #48	; 0x30
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40013800 	.word	0x40013800
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40004400 	.word	0x40004400
 8002fd8:	200002a8 	.word	0x200002a8
 8002fdc:	40020008 	.word	0x40020008

08002fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ff2:	e7fe      	b.n	8002ff2 <HardFault_Handler+0x4>

08002ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff8:	e7fe      	b.n	8002ff8 <MemManage_Handler+0x4>

08002ffa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ffe:	e7fe      	b.n	8002ffe <BusFault_Handler+0x4>

08003000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003004:	e7fe      	b.n	8003004 <UsageFault_Handler+0x4>

08003006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003006:	b480      	push	{r7}
 8003008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003034:	f000 f8d4 	bl	80031e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}

0800303c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <DMA1_Channel1_IRQHandler+0x10>)
 8003042:	f001 fd8a 	bl	8004b5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200002a8 	.word	0x200002a8

08003050 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <USART2_IRQHandler+0x10>)
 8003056:	f005 f823 	bl	80080a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000600 	.word	0x20000600

08003064 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <_sbrk+0x50>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d102      	bne.n	800307a <_sbrk+0x16>
		heap_end = &end;
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <_sbrk+0x50>)
 8003076:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <_sbrk+0x54>)
 8003078:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <_sbrk+0x50>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <_sbrk+0x50>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4413      	add	r3, r2
 8003088:	466a      	mov	r2, sp
 800308a:	4293      	cmp	r3, r2
 800308c:	d907      	bls.n	800309e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800308e:	f006 f9fd 	bl	800948c <__errno>
 8003092:	4602      	mov	r2, r0
 8003094:	230c      	movs	r3, #12
 8003096:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
 800309c:	e006      	b.n	80030ac <_sbrk+0x48>
	}

	heap_end += incr;
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <_sbrk+0x50>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	4a03      	ldr	r2, [pc, #12]	; (80030b4 <_sbrk+0x50>)
 80030a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80030aa:	68fb      	ldr	r3, [r7, #12]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000270 	.word	0x20000270
 80030b8:	20000698 	.word	0x20000698

080030bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <SystemInit+0x28>)
 80030c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c6:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <SystemInit+0x28>)
 80030c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <SystemInit+0x28>)
 80030d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030d6:	609a      	str	r2, [r3, #8]
#endif
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030e8:	480d      	ldr	r0, [pc, #52]	; (8003120 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030ec:	480d      	ldr	r0, [pc, #52]	; (8003124 <LoopForever+0x6>)
  ldr r1, =_edata
 80030ee:	490e      	ldr	r1, [pc, #56]	; (8003128 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030f0:	4a0e      	ldr	r2, [pc, #56]	; (800312c <LoopForever+0xe>)
  movs r3, #0
 80030f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80030f4:	e002      	b.n	80030fc <LoopCopyDataInit>

080030f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030fa:	3304      	adds	r3, #4

080030fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003100:	d3f9      	bcc.n	80030f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003102:	4a0b      	ldr	r2, [pc, #44]	; (8003130 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003104:	4c0b      	ldr	r4, [pc, #44]	; (8003134 <LoopForever+0x16>)
  movs r3, #0
 8003106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003108:	e001      	b.n	800310e <LoopFillZerobss>

0800310a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800310a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800310c:	3204      	adds	r2, #4

0800310e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800310e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003110:	d3fb      	bcc.n	800310a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003112:	f7ff ffd3 	bl	80030bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003116:	f006 f9bf 	bl	8009498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800311a:	f7fe fbcd 	bl	80018b8 <main>

0800311e <LoopForever>:

LoopForever:
    b LoopForever
 800311e:	e7fe      	b.n	800311e <LoopForever>
  ldr   r0, =_estack
 8003120:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003128:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800312c:	0800c3d4 	.word	0x0800c3d4
  ldr r2, =_sbss
 8003130:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003134:	20000694 	.word	0x20000694

08003138 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003138:	e7fe      	b.n	8003138 <ADC1_2_IRQHandler>

0800313a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003144:	2003      	movs	r0, #3
 8003146:	f001 fbb9 	bl	80048bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800314a:	2000      	movs	r0, #0
 800314c:	f000 f80e 	bl	800316c <HAL_InitTick>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	71fb      	strb	r3, [r7, #7]
 800315a:	e001      	b.n	8003160 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800315c:	f7ff fcda 	bl	8002b14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003160:	79fb      	ldrb	r3, [r7, #7]

}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003178:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <HAL_InitTick+0x68>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d022      	beq.n	80031c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <HAL_InitTick+0x6c>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_InitTick+0x68>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800318c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	4618      	mov	r0, r3
 8003196:	f001 fbc4 	bl	8004922 <HAL_SYSTICK_Config>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10f      	bne.n	80031c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b0f      	cmp	r3, #15
 80031a4:	d809      	bhi.n	80031ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031a6:	2200      	movs	r2, #0
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	f04f 30ff 	mov.w	r0, #4294967295
 80031ae:	f001 fb90 	bl	80048d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <HAL_InitTick+0x70>)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	e007      	b.n	80031ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
 80031be:	e004      	b.n	80031ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
 80031c4:	e001      	b.n	80031ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000028 	.word	0x20000028
 80031d8:	20000020 	.word	0x20000020
 80031dc:	20000024 	.word	0x20000024

080031e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_IncTick+0x1c>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_IncTick+0x20>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4413      	add	r3, r2
 80031ee:	4a03      	ldr	r2, [pc, #12]	; (80031fc <HAL_IncTick+0x1c>)
 80031f0:	6013      	str	r3, [r2, #0]
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	2000068c 	.word	0x2000068c
 8003200:	20000028 	.word	0x20000028

08003204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return uwTick;
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <HAL_GetTick+0x14>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	2000068c 	.word	0x2000068c

0800321c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003224:	f7ff ffee 	bl	8003204 <HAL_GetTick>
 8003228:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	d004      	beq.n	8003240 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003236:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_Delay+0x40>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4413      	add	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003240:	bf00      	nop
 8003242:	f7ff ffdf 	bl	8003204 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	429a      	cmp	r2, r3
 8003250:	d8f7      	bhi.n	8003242 <HAL_Delay+0x26>
  {
  }
}
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000028 	.word	0x20000028

08003260 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	609a      	str	r2, [r3, #8]
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	609a      	str	r2, [r3, #8]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3360      	adds	r3, #96	; 0x60
 80032da:	461a      	mov	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <LL_ADC_SetOffset+0x44>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003300:	bf00      	nop
 8003302:	371c      	adds	r7, #28
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	03fff000 	.word	0x03fff000

08003310 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3360      	adds	r3, #96	; 0x60
 800331e:	461a      	mov	r2, r3
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003330:	4618      	mov	r0, r3
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3360      	adds	r3, #96	; 0x60
 800334c:	461a      	mov	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	431a      	orrs	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003372:	b480      	push	{r7}
 8003374:	b087      	sub	sp, #28
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3360      	adds	r3, #96	; 0x60
 8003382:	461a      	mov	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	431a      	orrs	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800339c:	bf00      	nop
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3360      	adds	r3, #96	; 0x60
 80033b8:	461a      	mov	r2, r3
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	615a      	str	r2, [r3, #20]
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800342a:	b480      	push	{r7}
 800342c:	b087      	sub	sp, #28
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3330      	adds	r3, #48	; 0x30
 800343a:	461a      	mov	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	0a1b      	lsrs	r3, r3, #8
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	4413      	add	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	211f      	movs	r1, #31
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	401a      	ands	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	0e9b      	lsrs	r3, r3, #26
 8003462:	f003 011f 	and.w	r1, r3, #31
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	431a      	orrs	r2, r3
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003482:	b480      	push	{r7}
 8003484:	b087      	sub	sp, #28
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	3314      	adds	r3, #20
 8003492:	461a      	mov	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	0e5b      	lsrs	r3, r3, #25
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	4413      	add	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	0d1b      	lsrs	r3, r3, #20
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	2107      	movs	r1, #7
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	0d1b      	lsrs	r3, r3, #20
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	431a      	orrs	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80034cc:	bf00      	nop
 80034ce:	371c      	adds	r7, #28
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f0:	43db      	mvns	r3, r3
 80034f2:	401a      	ands	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f003 0318 	and.w	r3, r3, #24
 80034fa:	4908      	ldr	r1, [pc, #32]	; (800351c <LL_ADC_SetChannelSingleDiff+0x44>)
 80034fc:	40d9      	lsrs	r1, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	400b      	ands	r3, r1
 8003502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003506:	431a      	orrs	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800350e:	bf00      	nop
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	0007ffff 	.word	0x0007ffff

08003520 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 031f 	and.w	r3, r3, #31
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003568:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6093      	str	r3, [r2, #8]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800358c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003590:	d101      	bne.n	8003596 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80035b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035e0:	d101      	bne.n	80035e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003604:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003608:	f043 0201 	orr.w	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <LL_ADC_IsEnabled+0x18>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <LL_ADC_IsEnabled+0x1a>
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003652:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003656:	f043 0204 	orr.w	r2, r3, #4
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b04      	cmp	r3, #4
 800367c:	d101      	bne.n	8003682 <LL_ADC_REG_IsConversionOngoing+0x18>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d101      	bne.n	80036a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e16b      	b.n	80039aa <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d109      	bne.n	80036f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff fa3b 	bl	8002b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff ff3f 	bl	800357c <LL_ADC_IsDeepPowerDownEnabled>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d004      	beq.n	800370e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff25 	bl	8003558 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff ff5a 	bl	80035cc <LL_ADC_IsInternalRegulatorEnabled>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d113      	bne.n	8003746 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff ff3e 	bl	80035a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003728:	4ba2      	ldr	r3, [pc, #648]	; (80039b4 <HAL_ADC_Init+0x2fc>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	4aa2      	ldr	r2, [pc, #648]	; (80039b8 <HAL_ADC_Init+0x300>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	099b      	lsrs	r3, r3, #6
 8003736:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003738:	e002      	b.n	8003740 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	3b01      	subs	r3, #1
 800373e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f9      	bne.n	800373a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff ff3e 	bl	80035cc <LL_ADC_IsInternalRegulatorEnabled>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10d      	bne.n	8003772 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	f043 0210 	orr.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff ff77 	bl	800366a <LL_ADC_REG_IsConversionOngoing>
 800377c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	f040 8106 	bne.w	8003998 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	f040 8102 	bne.w	8003998 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003798:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800379c:	f043 0202 	orr.w	r2, r3, #2
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ff37 	bl	800361c <LL_ADC_IsEnabled>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d111      	bne.n	80037d8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80037b8:	f7ff ff30 	bl	800361c <LL_ADC_IsEnabled>
 80037bc:	4604      	mov	r4, r0
 80037be:	487f      	ldr	r0, [pc, #508]	; (80039bc <HAL_ADC_Init+0x304>)
 80037c0:	f7ff ff2c 	bl	800361c <LL_ADC_IsEnabled>
 80037c4:	4603      	mov	r3, r0
 80037c6:	4323      	orrs	r3, r4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	4619      	mov	r1, r3
 80037d2:	487b      	ldr	r0, [pc, #492]	; (80039c0 <HAL_ADC_Init+0x308>)
 80037d4:	f7ff fd44 	bl	8003260 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	7f5b      	ldrb	r3, [r3, #29]
 80037dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80037e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80037ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003802:	2b01      	cmp	r3, #1
 8003804:	d106      	bne.n	8003814 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	3b01      	subs	r3, #1
 800380c:	045b      	lsls	r3, r3, #17
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4313      	orrs	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	4b63      	ldr	r3, [pc, #396]	; (80039c4 <HAL_ADC_Init+0x30c>)
 8003838:	4013      	ands	r3, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	69b9      	ldr	r1, [r7, #24]
 8003840:	430b      	orrs	r3, r1
 8003842:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff ff03 	bl	800366a <LL_ADC_REG_IsConversionOngoing>
 8003864:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff ff10 	bl	8003690 <LL_ADC_INJ_IsConversionOngoing>
 8003870:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d16d      	bne.n	8003954 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d16a      	bne.n	8003954 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003882:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800388a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800389a:	f023 0302 	bic.w	r3, r3, #2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	69b9      	ldr	r1, [r7, #24]
 80038a4:	430b      	orrs	r3, r1
 80038a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80038c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80038cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6911      	ldr	r1, [r2, #16]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	430b      	orrs	r3, r1
 80038da:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80038de:	e013      	b.n	8003908 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6812      	ldr	r2, [r2, #0]
 80038fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003904:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390e:	2b01      	cmp	r3, #1
 8003910:	d118      	bne.n	8003944 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800391c:	f023 0304 	bic.w	r3, r3, #4
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003928:	4311      	orrs	r1, r2
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800392e:	4311      	orrs	r1, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003934:	430a      	orrs	r2, r1
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0201 	orr.w	r2, r2, #1
 8003940:	611a      	str	r2, [r3, #16]
 8003942:	e007      	b.n	8003954 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d10c      	bne.n	8003976 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f023 010f 	bic.w	r1, r3, #15
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	1e5a      	subs	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
 8003974:	e007      	b.n	8003986 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 020f 	bic.w	r2, r2, #15
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398a:	f023 0303 	bic.w	r3, r3, #3
 800398e:	f043 0201 	orr.w	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	65da      	str	r2, [r3, #92]	; 0x5c
 8003996:	e007      	b.n	80039a8 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	f043 0210 	orr.w	r2, r3, #16
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80039a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3724      	adds	r7, #36	; 0x24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd90      	pop	{r4, r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000020 	.word	0x20000020
 80039b8:	053e2d63 	.word	0x053e2d63
 80039bc:	50000100 	.word	0x50000100
 80039c0:	50000300 	.word	0x50000300
 80039c4:	fff04007 	.word	0xfff04007

080039c8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039d0:	4859      	ldr	r0, [pc, #356]	; (8003b38 <HAL_ADC_Start+0x170>)
 80039d2:	f7ff fda5 	bl	8003520 <LL_ADC_GetMultimode>
 80039d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff fe44 	bl	800366a <LL_ADC_REG_IsConversionOngoing>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f040 809f 	bne.w	8003b28 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_ADC_Start+0x30>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e09a      	b.n	8003b2e <HAL_ADC_Start+0x166>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fd6b 	bl	80044dc <ADC_Enable>
 8003a06:	4603      	mov	r3, r0
 8003a08:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f040 8086 	bne.w	8003b1e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a44      	ldr	r2, [pc, #272]	; (8003b3c <HAL_ADC_Start+0x174>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d002      	beq.n	8003a36 <HAL_ADC_Start+0x6e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	e001      	b.n	8003a3a <HAL_ADC_Start+0x72>
 8003a36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6812      	ldr	r2, [r2, #0]
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d002      	beq.n	8003a48 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d105      	bne.n	8003a54 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a60:	d106      	bne.n	8003a70 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a66:	f023 0206 	bic.w	r2, r3, #6
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	661a      	str	r2, [r3, #96]	; 0x60
 8003a6e:	e002      	b.n	8003a76 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	221c      	movs	r2, #28
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2c      	ldr	r2, [pc, #176]	; (8003b3c <HAL_ADC_Start+0x174>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d002      	beq.n	8003a96 <HAL_ADC_Start+0xce>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	e001      	b.n	8003a9a <HAL_ADC_Start+0xd2>
 8003a96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d008      	beq.n	8003ab4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	2b05      	cmp	r3, #5
 8003aac:	d002      	beq.n	8003ab4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b09      	cmp	r3, #9
 8003ab2:	d114      	bne.n	8003ade <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003aca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff fdb3 	bl	8003642 <LL_ADC_REG_StartConversion>
 8003adc:	e026      	b.n	8003b2c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a13      	ldr	r2, [pc, #76]	; (8003b3c <HAL_ADC_Start+0x174>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d002      	beq.n	8003afa <HAL_ADC_Start+0x132>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	e001      	b.n	8003afe <HAL_ADC_Start+0x136>
 8003afa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003afe:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00f      	beq.n	8003b2c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b1c:	e006      	b.n	8003b2c <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003b26:	e001      	b.n	8003b2c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	50000300 	.word	0x50000300
 8003b3c:	50000100 	.word	0x50000100

08003b40 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b4a:	4863      	ldr	r0, [pc, #396]	; (8003cd8 <HAL_ADC_PollForConversion+0x198>)
 8003b4c:	f7ff fce8 	bl	8003520 <LL_ADC_GetMultimode>
 8003b50:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d102      	bne.n	8003b60 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	e02a      	b.n	8003bb6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	d002      	beq.n	8003b72 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2b09      	cmp	r3, #9
 8003b70:	d111      	bne.n	8003b96 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d007      	beq.n	8003b90 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e09f      	b.n	8003cd0 <HAL_ADC_PollForConversion+0x190>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003b90:	2304      	movs	r3, #4
 8003b92:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003b94:	e00f      	b.n	8003bb6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003b96:	4850      	ldr	r0, [pc, #320]	; (8003cd8 <HAL_ADC_PollForConversion+0x198>)
 8003b98:	f7ff fcd0 	bl	800353c <LL_ADC_GetMultiDMATransfer>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba6:	f043 0220 	orr.w	r2, r3, #32
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e08e      	b.n	8003cd0 <HAL_ADC_PollForConversion+0x190>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003bb6:	f7ff fb25 	bl	8003204 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003bbc:	e01a      	b.n	8003bf4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d016      	beq.n	8003bf4 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003bc6:	f7ff fb1d 	bl	8003204 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <HAL_ADC_PollForConversion+0x9c>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be0:	f043 0204 	orr.w	r2, r3, #4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e06d      	b.n	8003cd0 <HAL_ADC_PollForConversion+0x190>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0dd      	beq.n	8003bbe <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fbf6 	bl	8003404 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01c      	beq.n	8003c58 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	7f5b      	ldrb	r3, [r3, #29]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d118      	bne.n	8003c58 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d111      	bne.n	8003c58 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c50:	f043 0201 	orr.w	r2, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <HAL_ADC_PollForConversion+0x19c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d002      	beq.n	8003c68 <HAL_ADC_PollForConversion+0x128>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	e001      	b.n	8003c6c <HAL_ADC_PollForConversion+0x12c>
 8003c68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d008      	beq.n	8003c86 <HAL_ADC_PollForConversion+0x146>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_ADC_PollForConversion+0x146>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d002      	beq.n	8003c86 <HAL_ADC_PollForConversion+0x146>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b09      	cmp	r3, #9
 8003c84:	d104      	bne.n	8003c90 <HAL_ADC_PollForConversion+0x150>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e00d      	b.n	8003cac <HAL_ADC_PollForConversion+0x16c>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <HAL_ADC_PollForConversion+0x19c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d002      	beq.n	8003ca0 <HAL_ADC_PollForConversion+0x160>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	e001      	b.n	8003ca4 <HAL_ADC_PollForConversion+0x164>
 8003ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ca4:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d104      	bne.n	8003cbc <HAL_ADC_PollForConversion+0x17c>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	e008      	b.n	8003cce <HAL_ADC_PollForConversion+0x18e>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <HAL_ADC_PollForConversion+0x18e>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	220c      	movs	r2, #12
 8003ccc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	50000300 	.word	0x50000300
 8003cdc:	50000100 	.word	0x50000100

08003ce0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
	...

08003cfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b0b6      	sub	sp, #216	; 0xd8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x22>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e3c7      	b.n	80044ae <HAL_ADC_ConfigChannel+0x7b2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff fc9d 	bl	800366a <LL_ADC_REG_IsConversionOngoing>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 83ac 	bne.w	8004490 <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6859      	ldr	r1, [r3, #4]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	f7ff fb70 	bl	800342a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fc8b 	bl	800366a <LL_ADC_REG_IsConversionOngoing>
 8003d54:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fc97 	bl	8003690 <LL_ADC_INJ_IsConversionOngoing>
 8003d62:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 81d9 	bne.w	8004122 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f040 81d4 	bne.w	8004122 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d82:	d10f      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	4619      	mov	r1, r3
 8003d90:	f7ff fb77 	bl	8003482 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fb1e 	bl	80033de <LL_ADC_SetSamplingTimeCommonConfig>
 8003da2:	e00e      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	6819      	ldr	r1, [r3, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	461a      	mov	r2, r3
 8003db2:	f7ff fb66 	bl	8003482 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2100      	movs	r1, #0
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fb0e 	bl	80033de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	08db      	lsrs	r3, r3, #3
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d022      	beq.n	8003e2a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6919      	ldr	r1, [r3, #16]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003df4:	f7ff fa68 	bl	80032c8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	6919      	ldr	r1, [r3, #16]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	461a      	mov	r2, r3
 8003e06:	f7ff fab4 	bl	8003372 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6919      	ldr	r1, [r3, #16]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	7f1b      	ldrb	r3, [r3, #28]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d102      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x124>
 8003e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e1e:	e000      	b.n	8003e22 <HAL_ADC_ConfigChannel+0x126>
 8003e20:	2300      	movs	r3, #0
 8003e22:	461a      	mov	r2, r3
 8003e24:	f7ff fac0 	bl	80033a8 <LL_ADC_SetOffsetSaturation>
 8003e28:	e17b      	b.n	8004122 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fa6d 	bl	8003310 <LL_ADC_GetOffsetChannel>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10a      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x15a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fa62 	bl	8003310 <LL_ADC_GetOffsetChannel>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	0e9b      	lsrs	r3, r3, #26
 8003e50:	f003 021f 	and.w	r2, r3, #31
 8003e54:	e01e      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x198>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff fa57 	bl	8003310 <LL_ADC_GetOffsetChannel>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e6c:	fa93 f3a3 	rbit	r3, r3
 8003e70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003e84:	2320      	movs	r3, #32
 8003e86:	e004      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e8c:	fab3 f383 	clz	r3, r3
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d105      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x1b0>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	0e9b      	lsrs	r3, r3, #26
 8003ea6:	f003 031f 	and.w	r3, r3, #31
 8003eaa:	e018      	b.n	8003ede <HAL_ADC_ConfigChannel+0x1e2>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003eb8:	fa93 f3a3 	rbit	r3, r3
 8003ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003ec0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003ec8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003ed0:	2320      	movs	r3, #32
 8003ed2:	e004      	b.n	8003ede <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003ed4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ed8:	fab3 f383 	clz	r3, r3
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d106      	bne.n	8003ef0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fa26 	bl	800333c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fa0a 	bl	8003310 <LL_ADC_GetOffsetChannel>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x220>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff f9ff 	bl	8003310 <LL_ADC_GetOffsetChannel>
 8003f12:	4603      	mov	r3, r0
 8003f14:	0e9b      	lsrs	r3, r3, #26
 8003f16:	f003 021f 	and.w	r2, r3, #31
 8003f1a:	e01e      	b.n	8003f5a <HAL_ADC_ConfigChannel+0x25e>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2101      	movs	r1, #1
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff f9f4 	bl	8003310 <LL_ADC_GetOffsetChannel>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003f4a:	2320      	movs	r3, #32
 8003f4c:	e004      	b.n	8003f58 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003f4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d105      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x276>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	0e9b      	lsrs	r3, r3, #26
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	e018      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x2a8>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f7e:	fa93 f3a3 	rbit	r3, r3
 8003f82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003f86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003f96:	2320      	movs	r3, #32
 8003f98:	e004      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f9e:	fab3 f383 	clz	r3, r3
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d106      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2200      	movs	r2, #0
 8003fae:	2101      	movs	r1, #1
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff f9c3 	bl	800333c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2102      	movs	r1, #2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff f9a7 	bl	8003310 <LL_ADC_GetOffsetChannel>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x2e6>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2102      	movs	r1, #2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff f99c 	bl	8003310 <LL_ADC_GetOffsetChannel>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	0e9b      	lsrs	r3, r3, #26
 8003fdc:	f003 021f 	and.w	r2, r3, #31
 8003fe0:	e01e      	b.n	8004020 <HAL_ADC_ConfigChannel+0x324>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff f991 	bl	8003310 <LL_ADC_GetOffsetChannel>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ff8:	fa93 f3a3 	rbit	r3, r3
 8003ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004000:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004004:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004008:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004010:	2320      	movs	r3, #32
 8004012:	e004      	b.n	800401e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004014:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004018:	fab3 f383 	clz	r3, r3
 800401c:	b2db      	uxtb	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004028:	2b00      	cmp	r3, #0
 800402a:	d105      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x33c>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	0e9b      	lsrs	r3, r3, #26
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	e016      	b.n	8004066 <HAL_ADC_ConfigChannel+0x36a>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800404a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800404c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004058:	2320      	movs	r3, #32
 800405a:	e004      	b.n	8004066 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800405c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004060:	fab3 f383 	clz	r3, r3
 8004064:	b2db      	uxtb	r3, r3
 8004066:	429a      	cmp	r2, r3
 8004068:	d106      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2200      	movs	r2, #0
 8004070:	2102      	movs	r1, #2
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff f962 	bl	800333c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2103      	movs	r1, #3
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff f946 	bl	8003310 <LL_ADC_GetOffsetChannel>
 8004084:	4603      	mov	r3, r0
 8004086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x3a8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2103      	movs	r1, #3
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff f93b 	bl	8003310 <LL_ADC_GetOffsetChannel>
 800409a:	4603      	mov	r3, r0
 800409c:	0e9b      	lsrs	r3, r3, #26
 800409e:	f003 021f 	and.w	r2, r3, #31
 80040a2:	e017      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x3d8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2103      	movs	r1, #3
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff f930 	bl	8003310 <LL_ADC_GetOffsetChannel>
 80040b0:	4603      	mov	r3, r0
 80040b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b6:	fa93 f3a3 	rbit	r3, r3
 80040ba:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80040bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040be:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80040c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80040c6:	2320      	movs	r3, #32
 80040c8:	e003      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80040ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040cc:	fab3 f383 	clz	r3, r3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x3f0>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	0e9b      	lsrs	r3, r3, #26
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	e011      	b.n	8004110 <HAL_ADC_ConfigChannel+0x414>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040f4:	fa93 f3a3 	rbit	r3, r3
 80040f8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80040fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80040fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004104:	2320      	movs	r3, #32
 8004106:	e003      	b.n	8004110 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410a:	fab3 f383 	clz	r3, r3
 800410e:	b2db      	uxtb	r3, r3
 8004110:	429a      	cmp	r2, r3
 8004112:	d106      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2200      	movs	r2, #0
 800411a:	2103      	movs	r1, #3
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff f90d 	bl	800333c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fa78 	bl	800361c <LL_ADC_IsEnabled>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	f040 8140 	bne.w	80043b4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	6819      	ldr	r1, [r3, #0]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	461a      	mov	r2, r3
 8004142:	f7ff f9c9 	bl	80034d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	4a8f      	ldr	r2, [pc, #572]	; (8004388 <HAL_ADC_ConfigChannel+0x68c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	f040 8131 	bne.w	80043b4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10b      	bne.n	800417a <HAL_ADC_ConfigChannel+0x47e>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	0e9b      	lsrs	r3, r3, #26
 8004168:	3301      	adds	r3, #1
 800416a:	f003 031f 	and.w	r3, r3, #31
 800416e:	2b09      	cmp	r3, #9
 8004170:	bf94      	ite	ls
 8004172:	2301      	movls	r3, #1
 8004174:	2300      	movhi	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	e019      	b.n	80041ae <HAL_ADC_ConfigChannel+0x4b2>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004182:	fa93 f3a3 	rbit	r3, r3
 8004186:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800418a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800418c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004192:	2320      	movs	r3, #32
 8004194:	e003      	b.n	800419e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	b2db      	uxtb	r3, r3
 800419e:	3301      	adds	r3, #1
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2b09      	cmp	r3, #9
 80041a6:	bf94      	ite	ls
 80041a8:	2301      	movls	r3, #1
 80041aa:	2300      	movhi	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d079      	beq.n	80042a6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d107      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x4d2>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	0e9b      	lsrs	r3, r3, #26
 80041c4:	3301      	adds	r3, #1
 80041c6:	069b      	lsls	r3, r3, #26
 80041c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041cc:	e015      	b.n	80041fa <HAL_ADC_ConfigChannel+0x4fe>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d6:	fa93 f3a3 	rbit	r3, r3
 80041da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041de:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80041e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80041e6:	2320      	movs	r3, #32
 80041e8:	e003      	b.n	80041f2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80041ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ec:	fab3 f383 	clz	r3, r3
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	3301      	adds	r3, #1
 80041f4:	069b      	lsls	r3, r3, #26
 80041f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <HAL_ADC_ConfigChannel+0x51e>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	0e9b      	lsrs	r3, r3, #26
 800420c:	3301      	adds	r3, #1
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	2101      	movs	r1, #1
 8004214:	fa01 f303 	lsl.w	r3, r1, r3
 8004218:	e017      	b.n	800424a <HAL_ADC_ConfigChannel+0x54e>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004222:	fa93 f3a3 	rbit	r3, r3
 8004226:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800422a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800422c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004232:	2320      	movs	r3, #32
 8004234:	e003      	b.n	800423e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004238:	fab3 f383 	clz	r3, r3
 800423c:	b2db      	uxtb	r3, r3
 800423e:	3301      	adds	r3, #1
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	ea42 0103 	orr.w	r1, r2, r3
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x574>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	0e9b      	lsrs	r3, r3, #26
 8004260:	3301      	adds	r3, #1
 8004262:	f003 021f 	and.w	r2, r3, #31
 8004266:	4613      	mov	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	051b      	lsls	r3, r3, #20
 800426e:	e018      	b.n	80042a2 <HAL_ADC_ConfigChannel+0x5a6>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800427e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004280:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004288:	2320      	movs	r3, #32
 800428a:	e003      	b.n	8004294 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800428c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	b2db      	uxtb	r3, r3
 8004294:	3301      	adds	r3, #1
 8004296:	f003 021f 	and.w	r2, r3, #31
 800429a:	4613      	mov	r3, r2
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	4413      	add	r3, r2
 80042a0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042a2:	430b      	orrs	r3, r1
 80042a4:	e081      	b.n	80043aa <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d107      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x5c6>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	0e9b      	lsrs	r3, r3, #26
 80042b8:	3301      	adds	r3, #1
 80042ba:	069b      	lsls	r3, r3, #26
 80042bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042c0:	e015      	b.n	80042ee <HAL_ADC_ConfigChannel+0x5f2>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80042da:	2320      	movs	r3, #32
 80042dc:	e003      	b.n	80042e6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	fab3 f383 	clz	r3, r3
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	3301      	adds	r3, #1
 80042e8:	069b      	lsls	r3, r3, #26
 80042ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <HAL_ADC_ConfigChannel+0x612>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	0e9b      	lsrs	r3, r3, #26
 8004300:	3301      	adds	r3, #1
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	2101      	movs	r1, #1
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	e017      	b.n	800433e <HAL_ADC_ConfigChannel+0x642>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	fa93 f3a3 	rbit	r3, r3
 800431a:	61fb      	str	r3, [r7, #28]
  return result;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004326:	2320      	movs	r3, #32
 8004328:	e003      	b.n	8004332 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	fab3 f383 	clz	r3, r3
 8004330:	b2db      	uxtb	r3, r3
 8004332:	3301      	adds	r3, #1
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2101      	movs	r1, #1
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	ea42 0103 	orr.w	r1, r2, r3
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10d      	bne.n	800436a <HAL_ADC_ConfigChannel+0x66e>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	0e9b      	lsrs	r3, r3, #26
 8004354:	3301      	adds	r3, #1
 8004356:	f003 021f 	and.w	r2, r3, #31
 800435a:	4613      	mov	r3, r2
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	4413      	add	r3, r2
 8004360:	3b1e      	subs	r3, #30
 8004362:	051b      	lsls	r3, r3, #20
 8004364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004368:	e01e      	b.n	80043a8 <HAL_ADC_ConfigChannel+0x6ac>
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fa93 f3a3 	rbit	r3, r3
 8004376:	613b      	str	r3, [r7, #16]
  return result;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d104      	bne.n	800438c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004382:	2320      	movs	r3, #32
 8004384:	e006      	b.n	8004394 <HAL_ADC_ConfigChannel+0x698>
 8004386:	bf00      	nop
 8004388:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	fab3 f383 	clz	r3, r3
 8004392:	b2db      	uxtb	r3, r3
 8004394:	3301      	adds	r3, #1
 8004396:	f003 021f 	and.w	r2, r3, #31
 800439a:	4613      	mov	r3, r2
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	4413      	add	r3, r2
 80043a0:	3b1e      	subs	r3, #30
 80043a2:	051b      	lsls	r3, r3, #20
 80043a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043a8:	430b      	orrs	r3, r1
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	6892      	ldr	r2, [r2, #8]
 80043ae:	4619      	mov	r1, r3
 80043b0:	f7ff f867 	bl	8003482 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <HAL_ADC_ConfigChannel+0x7bc>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d070      	beq.n	80044a2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043c0:	483e      	ldr	r0, [pc, #248]	; (80044bc <HAL_ADC_ConfigChannel+0x7c0>)
 80043c2:	f7fe ff73 	bl	80032ac <LL_ADC_GetCommonPathInternalCh>
 80043c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a3c      	ldr	r2, [pc, #240]	; (80044c0 <HAL_ADC_ConfigChannel+0x7c4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_ADC_ConfigChannel+0x6e2>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a3a      	ldr	r2, [pc, #232]	; (80044c4 <HAL_ADC_ConfigChannel+0x7c8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d126      	bne.n	800442c <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d120      	bne.n	800442c <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043f2:	d156      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043fc:	4619      	mov	r1, r3
 80043fe:	482f      	ldr	r0, [pc, #188]	; (80044bc <HAL_ADC_ConfigChannel+0x7c0>)
 8004400:	f7fe ff41 	bl	8003286 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004404:	4b30      	ldr	r3, [pc, #192]	; (80044c8 <HAL_ADC_ConfigChannel+0x7cc>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	099b      	lsrs	r3, r3, #6
 800440a:	4a30      	ldr	r2, [pc, #192]	; (80044cc <HAL_ADC_ConfigChannel+0x7d0>)
 800440c:	fba2 2303 	umull	r2, r3, r2, r3
 8004410:	099a      	lsrs	r2, r3, #6
 8004412:	4613      	mov	r3, r2
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	4413      	add	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800441c:	e002      	b.n	8004424 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3b01      	subs	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f9      	bne.n	800441e <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800442a:	e03a      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a27      	ldr	r2, [pc, #156]	; (80044d0 <HAL_ADC_ConfigChannel+0x7d4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d113      	bne.n	800445e <HAL_ADC_ConfigChannel+0x762>
 8004436:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800443a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10d      	bne.n	800445e <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a23      	ldr	r2, [pc, #140]	; (80044d4 <HAL_ADC_ConfigChannel+0x7d8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d02a      	beq.n	80044a2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800444c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004450:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004454:	4619      	mov	r1, r3
 8004456:	4819      	ldr	r0, [pc, #100]	; (80044bc <HAL_ADC_ConfigChannel+0x7c0>)
 8004458:	f7fe ff15 	bl	8003286 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800445c:	e021      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <HAL_ADC_ConfigChannel+0x7dc>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d11c      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800446c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d116      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <HAL_ADC_ConfigChannel+0x7d8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d011      	beq.n	80044a2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800447e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004482:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004486:	4619      	mov	r1, r3
 8004488:	480c      	ldr	r0, [pc, #48]	; (80044bc <HAL_ADC_ConfigChannel+0x7c0>)
 800448a:	f7fe fefc 	bl	8003286 <LL_ADC_SetCommonPathInternalCh>
 800448e:	e008      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004494:	f043 0220 	orr.w	r2, r3, #32
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80044aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	37d8      	adds	r7, #216	; 0xd8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	80080000 	.word	0x80080000
 80044bc:	50000300 	.word	0x50000300
 80044c0:	c3210000 	.word	0xc3210000
 80044c4:	90c00010 	.word	0x90c00010
 80044c8:	20000020 	.word	0x20000020
 80044cc:	053e2d63 	.word	0x053e2d63
 80044d0:	c7520000 	.word	0xc7520000
 80044d4:	50000100 	.word	0x50000100
 80044d8:	cb840000 	.word	0xcb840000

080044dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff f897 	bl	800361c <LL_ADC_IsEnabled>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d146      	bne.n	8004582 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	4b24      	ldr	r3, [pc, #144]	; (800458c <ADC_Enable+0xb0>)
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00d      	beq.n	800451e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004506:	f043 0210 	orr.w	r2, r3, #16
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004512:	f043 0201 	orr.w	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e032      	b.n	8004584 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff f866 	bl	80035f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004528:	f7fe fe6c 	bl	8003204 <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800452e:	e021      	b.n	8004574 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff f871 	bl	800361c <LL_ADC_IsEnabled>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff f855 	bl	80035f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800454a:	f7fe fe5b 	bl	8003204 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d90d      	bls.n	8004574 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455c:	f043 0210 	orr.w	r2, r3, #16
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004568:	f043 0201 	orr.w	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e007      	b.n	8004584 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b01      	cmp	r3, #1
 8004580:	d1d6      	bne.n	8004530 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	8000003f 	.word	0x8000003f

08004590 <LL_ADC_IsEnabled>:
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <LL_ADC_IsEnabled+0x18>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <LL_ADC_IsEnabled+0x1a>
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d101      	bne.n	80045ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80045dc:	b590      	push	{r4, r7, lr}
 80045de:	b0a1      	sub	sp, #132	; 0x84
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e087      	b.n	800470a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800460a:	d102      	bne.n	8004612 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800460c:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800460e:	60bb      	str	r3, [r7, #8]
 8004610:	e001      	b.n	8004616 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8004612:	2300      	movs	r3, #0
 8004614:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10b      	bne.n	8004634 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004620:	f043 0220 	orr.w	r2, r3, #32
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e06a      	b.n	800470a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff ffbd 	bl	80045b6 <LL_ADC_REG_IsConversionOngoing>
 800463c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff ffb7 	bl	80045b6 <LL_ADC_REG_IsConversionOngoing>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d14c      	bne.n	80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800464e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004650:	2b00      	cmp	r3, #0
 8004652:	d149      	bne.n	80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004654:	4b30      	ldr	r3, [pc, #192]	; (8004718 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004656:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d028      	beq.n	80046b2 <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004660:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	6859      	ldr	r1, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004672:	035b      	lsls	r3, r3, #13
 8004674:	430b      	orrs	r3, r1
 8004676:	431a      	orrs	r2, r3
 8004678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800467a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800467c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004680:	f7ff ff86 	bl	8004590 <LL_ADC_IsEnabled>
 8004684:	4604      	mov	r4, r0
 8004686:	4823      	ldr	r0, [pc, #140]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004688:	f7ff ff82 	bl	8004590 <LL_ADC_IsEnabled>
 800468c:	4603      	mov	r3, r0
 800468e:	4323      	orrs	r3, r4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d133      	bne.n	80046fc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800469c:	f023 030f 	bic.w	r3, r3, #15
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	6811      	ldr	r1, [r2, #0]
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	6892      	ldr	r2, [r2, #8]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	431a      	orrs	r2, r3
 80046ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046b0:	e024      	b.n	80046fc <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046be:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046c2:	f7ff ff65 	bl	8004590 <LL_ADC_IsEnabled>
 80046c6:	4604      	mov	r4, r0
 80046c8:	4812      	ldr	r0, [pc, #72]	; (8004714 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80046ca:	f7ff ff61 	bl	8004590 <LL_ADC_IsEnabled>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4323      	orrs	r3, r4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d112      	bne.n	80046fc <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046de:	f023 030f 	bic.w	r3, r3, #15
 80046e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80046e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046e6:	e009      	b.n	80046fc <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80046fa:	e000      	b.n	80046fe <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004706:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800470a:	4618      	mov	r0, r3
 800470c:	3784      	adds	r7, #132	; 0x84
 800470e:	46bd      	mov	sp, r7
 8004710:	bd90      	pop	{r4, r7, pc}
 8004712:	bf00      	nop
 8004714:	50000100 	.word	0x50000100
 8004718:	50000300 	.word	0x50000300

0800471c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800472c:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <__NVIC_SetPriorityGrouping+0x44>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004738:	4013      	ands	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800474c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800474e:	4a04      	ldr	r2, [pc, #16]	; (8004760 <__NVIC_SetPriorityGrouping+0x44>)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	60d3      	str	r3, [r2, #12]
}
 8004754:	bf00      	nop
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004768:	4b04      	ldr	r3, [pc, #16]	; (800477c <__NVIC_GetPriorityGrouping+0x18>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	f003 0307 	and.w	r3, r3, #7
}
 8004772:	4618      	mov	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	e000ed00 	.word	0xe000ed00

08004780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	2b00      	cmp	r3, #0
 8004790:	db0b      	blt.n	80047aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	f003 021f 	and.w	r2, r3, #31
 8004798:	4907      	ldr	r1, [pc, #28]	; (80047b8 <__NVIC_EnableIRQ+0x38>)
 800479a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	2001      	movs	r0, #1
 80047a2:	fa00 f202 	lsl.w	r2, r0, r2
 80047a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	e000e100 	.word	0xe000e100

080047bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	6039      	str	r1, [r7, #0]
 80047c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	db0a      	blt.n	80047e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	490c      	ldr	r1, [pc, #48]	; (8004808 <__NVIC_SetPriority+0x4c>)
 80047d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047da:	0112      	lsls	r2, r2, #4
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	440b      	add	r3, r1
 80047e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047e4:	e00a      	b.n	80047fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	4908      	ldr	r1, [pc, #32]	; (800480c <__NVIC_SetPriority+0x50>)
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	f003 030f 	and.w	r3, r3, #15
 80047f2:	3b04      	subs	r3, #4
 80047f4:	0112      	lsls	r2, r2, #4
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	440b      	add	r3, r1
 80047fa:	761a      	strb	r2, [r3, #24]
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr
 8004808:	e000e100 	.word	0xe000e100
 800480c:	e000ed00 	.word	0xe000ed00

08004810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	; 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f1c3 0307 	rsb	r3, r3, #7
 800482a:	2b04      	cmp	r3, #4
 800482c:	bf28      	it	cs
 800482e:	2304      	movcs	r3, #4
 8004830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	3304      	adds	r3, #4
 8004836:	2b06      	cmp	r3, #6
 8004838:	d902      	bls.n	8004840 <NVIC_EncodePriority+0x30>
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	3b03      	subs	r3, #3
 800483e:	e000      	b.n	8004842 <NVIC_EncodePriority+0x32>
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004844:	f04f 32ff 	mov.w	r2, #4294967295
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43da      	mvns	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	401a      	ands	r2, r3
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004858:	f04f 31ff 	mov.w	r1, #4294967295
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	43d9      	mvns	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004868:	4313      	orrs	r3, r2
         );
}
 800486a:	4618      	mov	r0, r3
 800486c:	3724      	adds	r7, #36	; 0x24
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3b01      	subs	r3, #1
 8004884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004888:	d301      	bcc.n	800488e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800488a:	2301      	movs	r3, #1
 800488c:	e00f      	b.n	80048ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800488e:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <SysTick_Config+0x40>)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	3b01      	subs	r3, #1
 8004894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004896:	210f      	movs	r1, #15
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	f7ff ff8e 	bl	80047bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <SysTick_Config+0x40>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048a6:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <SysTick_Config+0x40>)
 80048a8:	2207      	movs	r2, #7
 80048aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	e000e010 	.word	0xe000e010

080048bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff ff29 	bl	800471c <__NVIC_SetPriorityGrouping>
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b086      	sub	sp, #24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	4603      	mov	r3, r0
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
 80048de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048e0:	f7ff ff40 	bl	8004764 <__NVIC_GetPriorityGrouping>
 80048e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	6978      	ldr	r0, [r7, #20]
 80048ec:	f7ff ff90 	bl	8004810 <NVIC_EncodePriority>
 80048f0:	4602      	mov	r2, r0
 80048f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048f6:	4611      	mov	r1, r2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff ff5f 	bl	80047bc <__NVIC_SetPriority>
}
 80048fe:	bf00      	nop
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	4603      	mov	r3, r0
 800490e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff ff33 	bl	8004780 <__NVIC_EnableIRQ>
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff ffa4 	bl	8004878 <SysTick_Config>
 8004930:	4603      	mov	r3, r0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e08d      	b.n	8004a6a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	4b47      	ldr	r3, [pc, #284]	; (8004a74 <HAL_DMA_Init+0x138>)
 8004956:	429a      	cmp	r2, r3
 8004958:	d80f      	bhi.n	800497a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	4b45      	ldr	r3, [pc, #276]	; (8004a78 <HAL_DMA_Init+0x13c>)
 8004962:	4413      	add	r3, r2
 8004964:	4a45      	ldr	r2, [pc, #276]	; (8004a7c <HAL_DMA_Init+0x140>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	009a      	lsls	r2, r3, #2
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a42      	ldr	r2, [pc, #264]	; (8004a80 <HAL_DMA_Init+0x144>)
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
 8004978:	e00e      	b.n	8004998 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	4b40      	ldr	r3, [pc, #256]	; (8004a84 <HAL_DMA_Init+0x148>)
 8004982:	4413      	add	r3, r2
 8004984:	4a3d      	ldr	r2, [pc, #244]	; (8004a7c <HAL_DMA_Init+0x140>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	091b      	lsrs	r3, r3, #4
 800498c:	009a      	lsls	r2, r3, #2
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a3c      	ldr	r2, [pc, #240]	; (8004a88 <HAL_DMA_Init+0x14c>)
 8004996:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80049bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80049c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f964 	bl	8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049f8:	d102      	bne.n	8004a00 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a14:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d010      	beq.n	8004a40 <HAL_DMA_Init+0x104>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d80c      	bhi.n	8004a40 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f984 	bl	8004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a3c:	605a      	str	r2, [r3, #4]
 8004a3e:	e008      	b.n	8004a52 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40020407 	.word	0x40020407
 8004a78:	bffdfff8 	.word	0xbffdfff8
 8004a7c:	cccccccd 	.word	0xcccccccd
 8004a80:	40020000 	.word	0x40020000
 8004a84:	bffdfbf8 	.word	0xbffdfbf8
 8004a88:	40020400 	.word	0x40020400

08004a8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d00d      	beq.n	8004ac0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
 8004abe:	e047      	b.n	8004b50 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 020e 	bic.w	r2, r2, #14
 8004ace:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0201 	bic.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af4:	f003 021f 	and.w	r2, r3, #31
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	2101      	movs	r1, #1
 8004afe:	fa01 f202 	lsl.w	r2, r1, r2
 8004b02:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b0c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00c      	beq.n	8004b30 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b24:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b2e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4798      	blx	r3
    }
  }
  return status;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	409a      	lsls	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d026      	beq.n	8004bd4 <HAL_DMA_IRQHandler+0x7a>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d021      	beq.n	8004bd4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d107      	bne.n	8004bae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0204 	bic.w	r2, r2, #4
 8004bac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	f003 021f 	and.w	r2, r3, #31
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	2104      	movs	r1, #4
 8004bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d071      	beq.n	8004cae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004bd2:	e06c      	b.n	8004cae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd8:	f003 031f 	and.w	r3, r3, #31
 8004bdc:	2202      	movs	r2, #2
 8004bde:	409a      	lsls	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d02e      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d029      	beq.n	8004c46 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10b      	bne.n	8004c18 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 020a 	bic.w	r2, r2, #10
 8004c0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1c:	f003 021f 	and.w	r2, r3, #31
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	2102      	movs	r1, #2
 8004c26:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d038      	beq.n	8004cae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004c44:	e033      	b.n	8004cae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	2208      	movs	r2, #8
 8004c50:	409a      	lsls	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d02a      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d025      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 020e 	bic.w	r2, r2, #14
 8004c72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	f003 021f 	and.w	r2, r3, #31
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	2101      	movs	r1, #1
 8004c82:	fa01 f202 	lsl.w	r2, r1, r2
 8004c86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d004      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004cae:	bf00      	nop
 8004cb0:	bf00      	nop
}
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d802      	bhi.n	8004cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004ccc:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e001      	b.n	8004cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004cd4:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	3b08      	subs	r3, #8
 8004ce2:	4a12      	ldr	r2, [pc, #72]	; (8004d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf0:	089b      	lsrs	r3, r3, #2
 8004cf2:	009a      	lsls	r2, r3, #2
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a0b      	ldr	r2, [pc, #44]	; (8004d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004d02:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	409a      	lsls	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40020407 	.word	0x40020407
 8004d24:	40020800 	.word	0x40020800
 8004d28:	40020820 	.word	0x40020820
 8004d2c:	cccccccd 	.word	0xcccccccd
 8004d30:	40020880 	.word	0x40020880

08004d34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4b0b      	ldr	r3, [pc, #44]	; (8004d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a08      	ldr	r2, [pc, #32]	; (8004d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004d56:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	2201      	movs	r2, #1
 8004d62:	409a      	lsls	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004d68:	bf00      	nop
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	1000823f 	.word	0x1000823f
 8004d78:	40020940 	.word	0x40020940

08004d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d8a:	e15a      	b.n	8005042 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	2101      	movs	r1, #1
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	fa01 f303 	lsl.w	r3, r1, r3
 8004d98:	4013      	ands	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 814c 	beq.w	800503c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d00b      	beq.n	8004dc4 <HAL_GPIO_Init+0x48>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d007      	beq.n	8004dc4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004db8:	2b11      	cmp	r3, #17
 8004dba:	d003      	beq.n	8004dc4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b12      	cmp	r3, #18
 8004dc2:	d130      	bne.n	8004e26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	2203      	movs	r2, #3
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4013      	ands	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	f003 0201 	and.w	r2, r3, #1
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	2203      	movs	r2, #3
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43db      	mvns	r3, r3
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d003      	beq.n	8004e66 <HAL_GPIO_Init+0xea>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b12      	cmp	r3, #18
 8004e64:	d123      	bne.n	8004eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	08da      	lsrs	r2, r3, #3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3208      	adds	r2, #8
 8004e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	220f      	movs	r2, #15
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4013      	ands	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	08da      	lsrs	r2, r3, #3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3208      	adds	r2, #8
 8004ea8:	6939      	ldr	r1, [r7, #16]
 8004eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	2203      	movs	r2, #3
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f003 0203 	and.w	r2, r3, #3
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 80a6 	beq.w	800503c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef0:	4b5b      	ldr	r3, [pc, #364]	; (8005060 <HAL_GPIO_Init+0x2e4>)
 8004ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef4:	4a5a      	ldr	r2, [pc, #360]	; (8005060 <HAL_GPIO_Init+0x2e4>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6613      	str	r3, [r2, #96]	; 0x60
 8004efc:	4b58      	ldr	r3, [pc, #352]	; (8005060 <HAL_GPIO_Init+0x2e4>)
 8004efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f08:	4a56      	ldr	r2, [pc, #344]	; (8005064 <HAL_GPIO_Init+0x2e8>)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	089b      	lsrs	r3, r3, #2
 8004f0e:	3302      	adds	r3, #2
 8004f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	220f      	movs	r2, #15
 8004f20:	fa02 f303 	lsl.w	r3, r2, r3
 8004f24:	43db      	mvns	r3, r3
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4013      	ands	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f32:	d01f      	beq.n	8004f74 <HAL_GPIO_Init+0x1f8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a4c      	ldr	r2, [pc, #304]	; (8005068 <HAL_GPIO_Init+0x2ec>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d019      	beq.n	8004f70 <HAL_GPIO_Init+0x1f4>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a4b      	ldr	r2, [pc, #300]	; (800506c <HAL_GPIO_Init+0x2f0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <HAL_GPIO_Init+0x1f0>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a4a      	ldr	r2, [pc, #296]	; (8005070 <HAL_GPIO_Init+0x2f4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00d      	beq.n	8004f68 <HAL_GPIO_Init+0x1ec>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a49      	ldr	r2, [pc, #292]	; (8005074 <HAL_GPIO_Init+0x2f8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d007      	beq.n	8004f64 <HAL_GPIO_Init+0x1e8>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a48      	ldr	r2, [pc, #288]	; (8005078 <HAL_GPIO_Init+0x2fc>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d101      	bne.n	8004f60 <HAL_GPIO_Init+0x1e4>
 8004f5c:	2305      	movs	r3, #5
 8004f5e:	e00a      	b.n	8004f76 <HAL_GPIO_Init+0x1fa>
 8004f60:	2306      	movs	r3, #6
 8004f62:	e008      	b.n	8004f76 <HAL_GPIO_Init+0x1fa>
 8004f64:	2304      	movs	r3, #4
 8004f66:	e006      	b.n	8004f76 <HAL_GPIO_Init+0x1fa>
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e004      	b.n	8004f76 <HAL_GPIO_Init+0x1fa>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e002      	b.n	8004f76 <HAL_GPIO_Init+0x1fa>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <HAL_GPIO_Init+0x1fa>
 8004f74:	2300      	movs	r3, #0
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	f002 0203 	and.w	r2, r2, #3
 8004f7c:	0092      	lsls	r2, r2, #2
 8004f7e:	4093      	lsls	r3, r2
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f86:	4937      	ldr	r1, [pc, #220]	; (8005064 <HAL_GPIO_Init+0x2e8>)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	089b      	lsrs	r3, r3, #2
 8004f8c:	3302      	adds	r3, #2
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f94:	4b39      	ldr	r3, [pc, #228]	; (800507c <HAL_GPIO_Init+0x300>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fb8:	4a30      	ldr	r2, [pc, #192]	; (800507c <HAL_GPIO_Init+0x300>)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004fbe:	4b2f      	ldr	r3, [pc, #188]	; (800507c <HAL_GPIO_Init+0x300>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fe2:	4a26      	ldr	r2, [pc, #152]	; (800507c <HAL_GPIO_Init+0x300>)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fe8:	4b24      	ldr	r3, [pc, #144]	; (800507c <HAL_GPIO_Init+0x300>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800500c:	4a1b      	ldr	r2, [pc, #108]	; (800507c <HAL_GPIO_Init+0x300>)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005012:	4b1a      	ldr	r3, [pc, #104]	; (800507c <HAL_GPIO_Init+0x300>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	43db      	mvns	r3, r3
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4013      	ands	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005036:	4a11      	ldr	r2, [pc, #68]	; (800507c <HAL_GPIO_Init+0x300>)
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	3301      	adds	r3, #1
 8005040:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	fa22 f303 	lsr.w	r3, r2, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	f47f ae9d 	bne.w	8004d8c <HAL_GPIO_Init+0x10>
  }
}
 8005052:	bf00      	nop
 8005054:	371c      	adds	r7, #28
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000
 8005064:	40010000 	.word	0x40010000
 8005068:	48000400 	.word	0x48000400
 800506c:	48000800 	.word	0x48000800
 8005070:	48000c00 	.word	0x48000c00
 8005074:	48001000 	.word	0x48001000
 8005078:	48001400 	.word	0x48001400
 800507c:	40010400 	.word	0x40010400

08005080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	807b      	strh	r3, [r7, #2]
 800508c:	4613      	mov	r3, r2
 800508e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005090:	787b      	ldrb	r3, [r7, #1]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005096:	887a      	ldrh	r2, [r7, #2]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800509c:	e002      	b.n	80050a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800509e:	887a      	ldrh	r2, [r7, #2]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050c2:	887a      	ldrh	r2, [r7, #2]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4013      	ands	r3, r2
 80050c8:	041a      	lsls	r2, r3, #16
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	43d9      	mvns	r1, r3
 80050ce:	887b      	ldrh	r3, [r7, #2]
 80050d0:	400b      	ands	r3, r1
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	619a      	str	r2, [r3, #24]
}
 80050d8:	bf00      	nop
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e081      	b.n	80051fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7fd fda4 	bl	8002c58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2224      	movs	r2, #36	; 0x24
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005134:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005144:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d107      	bne.n	800515e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800515a:	609a      	str	r2, [r3, #8]
 800515c:	e006      	b.n	800516c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800516a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d104      	bne.n	800517e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800517c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800518c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005190:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	ea42 0103 	orr.w	r1, r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	021a      	lsls	r2, r3, #8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69d9      	ldr	r1, [r3, #28]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1a      	ldr	r2, [r3, #32]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0201 	orr.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	607a      	str	r2, [r7, #4]
 800520e:	461a      	mov	r2, r3
 8005210:	460b      	mov	r3, r1
 8005212:	817b      	strh	r3, [r7, #10]
 8005214:	4613      	mov	r3, r2
 8005216:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b20      	cmp	r3, #32
 8005222:	f040 80da 	bne.w	80053da <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_I2C_Master_Transmit+0x30>
 8005230:	2302      	movs	r3, #2
 8005232:	e0d3      	b.n	80053dc <HAL_I2C_Master_Transmit+0x1d8>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800523c:	f7fd ffe2 	bl	8003204 <HAL_GetTick>
 8005240:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	2319      	movs	r3, #25
 8005248:	2201      	movs	r2, #1
 800524a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f9e6 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e0be      	b.n	80053dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2221      	movs	r2, #33	; 0x21
 8005262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2210      	movs	r2, #16
 800526a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	893a      	ldrh	r2, [r7, #8]
 800527e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	2bff      	cmp	r3, #255	; 0xff
 800528e:	d90e      	bls.n	80052ae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	22ff      	movs	r2, #255	; 0xff
 8005294:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529a:	b2da      	uxtb	r2, r3
 800529c:	8979      	ldrh	r1, [r7, #10]
 800529e:	4b51      	ldr	r3, [pc, #324]	; (80053e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 fb48 	bl	800593c <I2C_TransferConfig>
 80052ac:	e06c      	b.n	8005388 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	8979      	ldrh	r1, [r7, #10]
 80052c0:	4b48      	ldr	r3, [pc, #288]	; (80053e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 fb37 	bl	800593c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80052ce:	e05b      	b.n	8005388 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	6a39      	ldr	r1, [r7, #32]
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f9e3 	bl	80056a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e07b      	b.n	80053dc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	781a      	ldrb	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d034      	beq.n	8005388 <HAL_I2C_Master_Transmit+0x184>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005322:	2b00      	cmp	r3, #0
 8005324:	d130      	bne.n	8005388 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	2200      	movs	r2, #0
 800532e:	2180      	movs	r1, #128	; 0x80
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f975 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e04d      	b.n	80053dc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005344:	b29b      	uxth	r3, r3
 8005346:	2bff      	cmp	r3, #255	; 0xff
 8005348:	d90e      	bls.n	8005368 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	22ff      	movs	r2, #255	; 0xff
 800534e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005354:	b2da      	uxtb	r2, r3
 8005356:	8979      	ldrh	r1, [r7, #10]
 8005358:	2300      	movs	r3, #0
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 faeb 	bl	800593c <I2C_TransferConfig>
 8005366:	e00f      	b.n	8005388 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005376:	b2da      	uxtb	r2, r3
 8005378:	8979      	ldrh	r1, [r7, #10]
 800537a:	2300      	movs	r3, #0
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 fada 	bl	800593c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d19e      	bne.n	80052d0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	6a39      	ldr	r1, [r7, #32]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f9c2 	bl	8005720 <I2C_WaitOnSTOPFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e01a      	b.n	80053dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2220      	movs	r2, #32
 80053ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6859      	ldr	r1, [r3, #4]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b0b      	ldr	r3, [pc, #44]	; (80053e8 <HAL_I2C_Master_Transmit+0x1e4>)
 80053ba:	400b      	ands	r3, r1
 80053bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2220      	movs	r2, #32
 80053c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	e000      	b.n	80053dc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80053da:	2302      	movs	r3, #2
  }
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	80002000 	.word	0x80002000
 80053e8:	fe00e800 	.word	0xfe00e800

080053ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	461a      	mov	r2, r3
 80053f8:	460b      	mov	r3, r1
 80053fa:	817b      	strh	r3, [r7, #10]
 80053fc:	4613      	mov	r3, r2
 80053fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b20      	cmp	r3, #32
 800540a:	f040 80db 	bne.w	80055c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_I2C_Master_Receive+0x30>
 8005418:	2302      	movs	r3, #2
 800541a:	e0d4      	b.n	80055c6 <HAL_I2C_Master_Receive+0x1da>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005424:	f7fd feee 	bl	8003204 <HAL_GetTick>
 8005428:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	2319      	movs	r3, #25
 8005430:	2201      	movs	r2, #1
 8005432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f8f2 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e0bf      	b.n	80055c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2222      	movs	r2, #34	; 0x22
 800544a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2210      	movs	r2, #16
 8005452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	893a      	ldrh	r2, [r7, #8]
 8005466:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005472:	b29b      	uxth	r3, r3
 8005474:	2bff      	cmp	r3, #255	; 0xff
 8005476:	d90e      	bls.n	8005496 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	22ff      	movs	r2, #255	; 0xff
 800547c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005482:	b2da      	uxtb	r2, r3
 8005484:	8979      	ldrh	r1, [r7, #10]
 8005486:	4b52      	ldr	r3, [pc, #328]	; (80055d0 <HAL_I2C_Master_Receive+0x1e4>)
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 fa54 	bl	800593c <I2C_TransferConfig>
 8005494:	e06d      	b.n	8005572 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	8979      	ldrh	r1, [r7, #10]
 80054a8:	4b49      	ldr	r3, [pc, #292]	; (80055d0 <HAL_I2C_Master_Receive+0x1e4>)
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 fa43 	bl	800593c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80054b6:	e05c      	b.n	8005572 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	6a39      	ldr	r1, [r7, #32]
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f96b 	bl	8005798 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e07c      	b.n	80055c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d034      	beq.n	8005572 <HAL_I2C_Master_Receive+0x186>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550c:	2b00      	cmp	r3, #0
 800550e:	d130      	bne.n	8005572 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	2200      	movs	r2, #0
 8005518:	2180      	movs	r1, #128	; 0x80
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f880 	bl	8005620 <I2C_WaitOnFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e04d      	b.n	80055c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552e:	b29b      	uxth	r3, r3
 8005530:	2bff      	cmp	r3, #255	; 0xff
 8005532:	d90e      	bls.n	8005552 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	22ff      	movs	r2, #255	; 0xff
 8005538:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553e:	b2da      	uxtb	r2, r3
 8005540:	8979      	ldrh	r1, [r7, #10]
 8005542:	2300      	movs	r3, #0
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f9f6 	bl	800593c <I2C_TransferConfig>
 8005550:	e00f      	b.n	8005572 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005560:	b2da      	uxtb	r2, r3
 8005562:	8979      	ldrh	r1, [r7, #10]
 8005564:	2300      	movs	r3, #0
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f9e5 	bl	800593c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d19d      	bne.n	80054b8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	6a39      	ldr	r1, [r7, #32]
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f8cd 	bl	8005720 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e01a      	b.n	80055c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2220      	movs	r2, #32
 8005596:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6859      	ldr	r1, [r3, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <HAL_I2C_Master_Receive+0x1e8>)
 80055a4:	400b      	ands	r3, r1
 80055a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	e000      	b.n	80055c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
  }
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	80002400 	.word	0x80002400
 80055d4:	fe00e800 	.word	0xfe00e800

080055d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d103      	bne.n	80055f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b01      	cmp	r3, #1
 8005602:	d007      	beq.n	8005614 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	619a      	str	r2, [r3, #24]
  }
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	4613      	mov	r3, r2
 800562e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005630:	e022      	b.n	8005678 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005638:	d01e      	beq.n	8005678 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563a:	f7fd fde3 	bl	8003204 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d302      	bcc.n	8005650 <I2C_WaitOnFlagUntilTimeout+0x30>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d113      	bne.n	8005678 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005654:	f043 0220 	orr.w	r2, r3, #32
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e00f      	b.n	8005698 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	4013      	ands	r3, r2
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	429a      	cmp	r2, r3
 8005686:	bf0c      	ite	eq
 8005688:	2301      	moveq	r3, #1
 800568a:	2300      	movne	r3, #0
 800568c:	b2db      	uxtb	r3, r3
 800568e:	461a      	mov	r2, r3
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	429a      	cmp	r2, r3
 8005694:	d0cd      	beq.n	8005632 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056ac:	e02c      	b.n	8005708 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f8dc 	bl	8005870 <I2C_IsAcknowledgeFailed>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e02a      	b.n	8005718 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d01e      	beq.n	8005708 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ca:	f7fd fd9b 	bl	8003204 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d302      	bcc.n	80056e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d113      	bne.n	8005708 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e4:	f043 0220 	orr.w	r2, r3, #32
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e007      	b.n	8005718 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b02      	cmp	r3, #2
 8005714:	d1cb      	bne.n	80056ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800572c:	e028      	b.n	8005780 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f89c 	bl	8005870 <I2C_IsAcknowledgeFailed>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e026      	b.n	8005790 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005742:	f7fd fd5f 	bl	8003204 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	429a      	cmp	r2, r3
 8005750:	d302      	bcc.n	8005758 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d113      	bne.n	8005780 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575c:	f043 0220 	orr.w	r2, r3, #32
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e007      	b.n	8005790 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b20      	cmp	r3, #32
 800578c:	d1cf      	bne.n	800572e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057a4:	e055      	b.n	8005852 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f860 	bl	8005870 <I2C_IsAcknowledgeFailed>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e053      	b.n	8005862 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d129      	bne.n	800581c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f003 0304 	and.w	r3, r3, #4
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d105      	bne.n	80057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	e03f      	b.n	8005862 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2220      	movs	r2, #32
 80057e8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6859      	ldr	r1, [r3, #4]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b1d      	ldr	r3, [pc, #116]	; (800586c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80057f6:	400b      	ands	r3, r1
 80057f8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e022      	b.n	8005862 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800581c:	f7fd fcf2 	bl	8003204 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10f      	bne.n	8005852 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	f043 0220 	orr.w	r2, r3, #32
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e007      	b.n	8005862 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b04      	cmp	r3, #4
 800585e:	d1a2      	bne.n	80057a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	fe00e800 	.word	0xfe00e800

08005870 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f003 0310 	and.w	r3, r3, #16
 8005886:	2b10      	cmp	r3, #16
 8005888:	d151      	bne.n	800592e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800588a:	e022      	b.n	80058d2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d01e      	beq.n	80058d2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005894:	f7fd fcb6 	bl	8003204 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d302      	bcc.n	80058aa <I2C_IsAcknowledgeFailed+0x3a>
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d113      	bne.n	80058d2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ae:	f043 0220 	orr.w	r2, r3, #32
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e02e      	b.n	8005930 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d1d5      	bne.n	800588c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2210      	movs	r2, #16
 80058e6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2220      	movs	r2, #32
 80058ee:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f7ff fe71 	bl	80055d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6859      	ldr	r1, [r3, #4]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <I2C_IsAcknowledgeFailed+0xc8>)
 8005902:	400b      	ands	r3, r1
 8005904:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590a:	f043 0204 	orr.w	r2, r3, #4
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e000      	b.n	8005930 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	fe00e800 	.word	0xfe00e800

0800593c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	460b      	mov	r3, r1
 8005948:	817b      	strh	r3, [r7, #10]
 800594a:	4613      	mov	r3, r2
 800594c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	0d5b      	lsrs	r3, r3, #21
 8005958:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800595c:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <I2C_TransferConfig+0x58>)
 800595e:	430b      	orrs	r3, r1
 8005960:	43db      	mvns	r3, r3
 8005962:	ea02 0103 	and.w	r1, r2, r3
 8005966:	897b      	ldrh	r3, [r7, #10]
 8005968:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800596c:	7a7b      	ldrb	r3, [r7, #9]
 800596e:	041b      	lsls	r3, r3, #16
 8005970:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	431a      	orrs	r2, r3
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	431a      	orrs	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005986:	bf00      	nop
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	03ff63ff 	.word	0x03ff63ff

08005998 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b20      	cmp	r3, #32
 80059ac:	d138      	bne.n	8005a20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e032      	b.n	8005a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2224      	movs	r2, #36	; 0x24
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0201 	bic.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6819      	ldr	r1, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e000      	b.n	8005a22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a20:	2302      	movs	r3, #2
  }
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d139      	bne.n	8005ab8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a4e:	2302      	movs	r3, #2
 8005a50:	e033      	b.n	8005aba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2224      	movs	r2, #36	; 0x24
 8005a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0201 	bic.w	r2, r2, #1
 8005a70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005a80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	021b      	lsls	r3, r3, #8
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e000      	b.n	8005aba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ab8:	2302      	movs	r3, #2
  }
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d141      	bne.n	8005b5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ad6:	4b4b      	ldr	r3, [pc, #300]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae2:	d131      	bne.n	8005b48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ae4:	4b47      	ldr	r3, [pc, #284]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aea:	4a46      	ldr	r2, [pc, #280]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005af0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005af4:	4b43      	ldr	r3, [pc, #268]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005afc:	4a41      	ldr	r2, [pc, #260]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b04:	4b40      	ldr	r3, [pc, #256]	; (8005c08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2232      	movs	r2, #50	; 0x32
 8005b0a:	fb02 f303 	mul.w	r3, r2, r3
 8005b0e:	4a3f      	ldr	r2, [pc, #252]	; (8005c0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b10:	fba2 2303 	umull	r2, r3, r2, r3
 8005b14:	0c9b      	lsrs	r3, r3, #18
 8005b16:	3301      	adds	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b1a:	e002      	b.n	8005b22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b22:	4b38      	ldr	r3, [pc, #224]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b2e:	d102      	bne.n	8005b36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f2      	bne.n	8005b1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b36:	4b33      	ldr	r3, [pc, #204]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b42:	d158      	bne.n	8005bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e057      	b.n	8005bf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b48:	4b2e      	ldr	r3, [pc, #184]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b4e:	4a2d      	ldr	r2, [pc, #180]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005b58:	e04d      	b.n	8005bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b60:	d141      	bne.n	8005be6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b62:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b6e:	d131      	bne.n	8005bd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b70:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b76:	4a23      	ldr	r2, [pc, #140]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b80:	4b20      	ldr	r3, [pc, #128]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b88:	4a1e      	ldr	r2, [pc, #120]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b90:	4b1d      	ldr	r3, [pc, #116]	; (8005c08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2232      	movs	r2, #50	; 0x32
 8005b96:	fb02 f303 	mul.w	r3, r2, r3
 8005b9a:	4a1c      	ldr	r2, [pc, #112]	; (8005c0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba0:	0c9b      	lsrs	r3, r3, #18
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ba6:	e002      	b.n	8005bae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bae:	4b15      	ldr	r3, [pc, #84]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bba:	d102      	bne.n	8005bc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1f2      	bne.n	8005ba8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bc2:	4b10      	ldr	r3, [pc, #64]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bce:	d112      	bne.n	8005bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e011      	b.n	8005bf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bda:	4a0a      	ldr	r2, [pc, #40]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005be4:	e007      	b.n	8005bf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005be6:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005bee:	4a05      	ldr	r2, [pc, #20]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bf4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	40007000 	.word	0x40007000
 8005c08:	20000020 	.word	0x20000020
 8005c0c:	431bde83 	.word	0x431bde83

08005c10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	4a04      	ldr	r2, [pc, #16]	; (8005c2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c1e:	6093      	str	r3, [r2, #8]
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40007000 	.word	0x40007000

08005c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e308      	b.n	8006254 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d075      	beq.n	8005d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c4e:	4ba3      	ldr	r3, [pc, #652]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 030c 	and.w	r3, r3, #12
 8005c56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c58:	4ba0      	ldr	r3, [pc, #640]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	2b0c      	cmp	r3, #12
 8005c66:	d102      	bne.n	8005c6e <HAL_RCC_OscConfig+0x3e>
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d002      	beq.n	8005c74 <HAL_RCC_OscConfig+0x44>
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d10b      	bne.n	8005c8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c74:	4b99      	ldr	r3, [pc, #612]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d05b      	beq.n	8005d38 <HAL_RCC_OscConfig+0x108>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d157      	bne.n	8005d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e2e3      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c94:	d106      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x74>
 8005c96:	4b91      	ldr	r3, [pc, #580]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a90      	ldr	r2, [pc, #576]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	e01d      	b.n	8005ce0 <HAL_RCC_OscConfig+0xb0>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cac:	d10c      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x98>
 8005cae:	4b8b      	ldr	r3, [pc, #556]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a8a      	ldr	r2, [pc, #552]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	4b88      	ldr	r3, [pc, #544]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a87      	ldr	r2, [pc, #540]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	e00b      	b.n	8005ce0 <HAL_RCC_OscConfig+0xb0>
 8005cc8:	4b84      	ldr	r3, [pc, #528]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a83      	ldr	r2, [pc, #524]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cd2:	6013      	str	r3, [r2, #0]
 8005cd4:	4b81      	ldr	r3, [pc, #516]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a80      	ldr	r2, [pc, #512]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d013      	beq.n	8005d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce8:	f7fd fa8c 	bl	8003204 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf0:	f7fd fa88 	bl	8003204 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b64      	cmp	r3, #100	; 0x64
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e2a8      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d02:	4b76      	ldr	r3, [pc, #472]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0f0      	beq.n	8005cf0 <HAL_RCC_OscConfig+0xc0>
 8005d0e:	e014      	b.n	8005d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d10:	f7fd fa78 	bl	8003204 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d18:	f7fd fa74 	bl	8003204 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b64      	cmp	r3, #100	; 0x64
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e294      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d2a:	4b6c      	ldr	r3, [pc, #432]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f0      	bne.n	8005d18 <HAL_RCC_OscConfig+0xe8>
 8005d36:	e000      	b.n	8005d3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d075      	beq.n	8005e32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d46:	4b65      	ldr	r3, [pc, #404]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d50:	4b62      	ldr	r3, [pc, #392]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f003 0303 	and.w	r3, r3, #3
 8005d58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b0c      	cmp	r3, #12
 8005d5e:	d102      	bne.n	8005d66 <HAL_RCC_OscConfig+0x136>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d002      	beq.n	8005d6c <HAL_RCC_OscConfig+0x13c>
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d11f      	bne.n	8005dac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d6c:	4b5b      	ldr	r3, [pc, #364]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d005      	beq.n	8005d84 <HAL_RCC_OscConfig+0x154>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e267      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d84:	4b55      	ldr	r3, [pc, #340]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	061b      	lsls	r3, r3, #24
 8005d92:	4952      	ldr	r1, [pc, #328]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d98:	4b51      	ldr	r3, [pc, #324]	; (8005ee0 <HAL_RCC_OscConfig+0x2b0>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fd f9e5 	bl	800316c <HAL_InitTick>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d043      	beq.n	8005e30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e253      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d023      	beq.n	8005dfc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005db4:	4b49      	ldr	r3, [pc, #292]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a48      	ldr	r2, [pc, #288]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fd fa20 	bl	8003204 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dc8:	f7fd fa1c 	bl	8003204 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e23c      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dda:	4b40      	ldr	r3, [pc, #256]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de6:	4b3d      	ldr	r3, [pc, #244]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	061b      	lsls	r3, r3, #24
 8005df4:	4939      	ldr	r1, [pc, #228]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	604b      	str	r3, [r1, #4]
 8005dfa:	e01a      	b.n	8005e32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dfc:	4b37      	ldr	r3, [pc, #220]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a36      	ldr	r2, [pc, #216]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005e02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e08:	f7fd f9fc 	bl	8003204 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e10:	f7fd f9f8 	bl	8003204 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e218      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e22:	4b2e      	ldr	r3, [pc, #184]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1f0      	bne.n	8005e10 <HAL_RCC_OscConfig+0x1e0>
 8005e2e:	e000      	b.n	8005e32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d03c      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d01c      	beq.n	8005e80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e46:	4b25      	ldr	r3, [pc, #148]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e4c:	4a23      	ldr	r2, [pc, #140]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e56:	f7fd f9d5 	bl	8003204 <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e5e:	f7fd f9d1 	bl	8003204 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e1f1      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e70:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0ef      	beq.n	8005e5e <HAL_RCC_OscConfig+0x22e>
 8005e7e:	e01b      	b.n	8005eb8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e80:	4b16      	ldr	r3, [pc, #88]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e86:	4a15      	ldr	r2, [pc, #84]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005e88:	f023 0301 	bic.w	r3, r3, #1
 8005e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e90:	f7fd f9b8 	bl	8003204 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e98:	f7fd f9b4 	bl	8003204 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e1d4      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005eaa:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1ef      	bne.n	8005e98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 80ab 	beq.w	800601c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005eca:	4b04      	ldr	r3, [pc, #16]	; (8005edc <HAL_RCC_OscConfig+0x2ac>)
 8005ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d106      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x2b4>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e005      	b.n	8005ee6 <HAL_RCC_OscConfig+0x2b6>
 8005eda:	bf00      	nop
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	20000024 	.word	0x20000024
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00d      	beq.n	8005f06 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eea:	4baf      	ldr	r3, [pc, #700]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eee:	4aae      	ldr	r2, [pc, #696]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8005ef6:	4bac      	ldr	r3, [pc, #688]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005f02:	2301      	movs	r3, #1
 8005f04:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f06:	4ba9      	ldr	r3, [pc, #676]	; (80061ac <HAL_RCC_OscConfig+0x57c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d118      	bne.n	8005f44 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f12:	4ba6      	ldr	r3, [pc, #664]	; (80061ac <HAL_RCC_OscConfig+0x57c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4aa5      	ldr	r2, [pc, #660]	; (80061ac <HAL_RCC_OscConfig+0x57c>)
 8005f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f1e:	f7fd f971 	bl	8003204 <HAL_GetTick>
 8005f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f26:	f7fd f96d 	bl	8003204 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e18d      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f38:	4b9c      	ldr	r3, [pc, #624]	; (80061ac <HAL_RCC_OscConfig+0x57c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0f0      	beq.n	8005f26 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d108      	bne.n	8005f5e <HAL_RCC_OscConfig+0x32e>
 8005f4c:	4b96      	ldr	r3, [pc, #600]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f52:	4a95      	ldr	r2, [pc, #596]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f5c:	e024      	b.n	8005fa8 <HAL_RCC_OscConfig+0x378>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	2b05      	cmp	r3, #5
 8005f64:	d110      	bne.n	8005f88 <HAL_RCC_OscConfig+0x358>
 8005f66:	4b90      	ldr	r3, [pc, #576]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6c:	4a8e      	ldr	r2, [pc, #568]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005f6e:	f043 0304 	orr.w	r3, r3, #4
 8005f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f76:	4b8c      	ldr	r3, [pc, #560]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7c:	4a8a      	ldr	r2, [pc, #552]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005f7e:	f043 0301 	orr.w	r3, r3, #1
 8005f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f86:	e00f      	b.n	8005fa8 <HAL_RCC_OscConfig+0x378>
 8005f88:	4b87      	ldr	r3, [pc, #540]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8e:	4a86      	ldr	r2, [pc, #536]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005f90:	f023 0301 	bic.w	r3, r3, #1
 8005f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f98:	4b83      	ldr	r3, [pc, #524]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9e:	4a82      	ldr	r2, [pc, #520]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005fa0:	f023 0304 	bic.w	r3, r3, #4
 8005fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d016      	beq.n	8005fde <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb0:	f7fd f928 	bl	8003204 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fb6:	e00a      	b.n	8005fce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb8:	f7fd f924 	bl	8003204 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d901      	bls.n	8005fce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e142      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fce:	4b76      	ldr	r3, [pc, #472]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0ed      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x388>
 8005fdc:	e015      	b.n	800600a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fde:	f7fd f911 	bl	8003204 <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fe4:	e00a      	b.n	8005ffc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe6:	f7fd f90d 	bl	8003204 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e12b      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ffc:	4b6a      	ldr	r3, [pc, #424]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1ed      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800600a:	7ffb      	ldrb	r3, [r7, #31]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d105      	bne.n	800601c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006010:	4b65      	ldr	r3, [pc, #404]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8006012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006014:	4a64      	ldr	r2, [pc, #400]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8006016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800601a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d03c      	beq.n	80060a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01c      	beq.n	800606a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006030:	4b5d      	ldr	r3, [pc, #372]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8006032:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006036:	4a5c      	ldr	r2, [pc, #368]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8006038:	f043 0301 	orr.w	r3, r3, #1
 800603c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006040:	f7fd f8e0 	bl	8003204 <HAL_GetTick>
 8006044:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006048:	f7fd f8dc 	bl	8003204 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e0fc      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800605a:	4b53      	ldr	r3, [pc, #332]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 800605c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0ef      	beq.n	8006048 <HAL_RCC_OscConfig+0x418>
 8006068:	e01b      	b.n	80060a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800606a:	4b4f      	ldr	r3, [pc, #316]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 800606c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006070:	4a4d      	ldr	r2, [pc, #308]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800607a:	f7fd f8c3 	bl	8003204 <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006080:	e008      	b.n	8006094 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006082:	f7fd f8bf 	bl	8003204 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e0df      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006094:	4b44      	ldr	r3, [pc, #272]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8006096:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1ef      	bne.n	8006082 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 80d3 	beq.w	8006252 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060ac:	4b3e      	ldr	r3, [pc, #248]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f003 030c 	and.w	r3, r3, #12
 80060b4:	2b0c      	cmp	r3, #12
 80060b6:	f000 808d 	beq.w	80061d4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d15a      	bne.n	8006178 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c2:	4b39      	ldr	r3, [pc, #228]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a38      	ldr	r2, [pc, #224]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 80060c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ce:	f7fd f899 	bl	8003204 <HAL_GetTick>
 80060d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060d4:	e008      	b.n	80060e8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d6:	f7fd f895 	bl	8003204 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e0b5      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060e8:	4b2f      	ldr	r3, [pc, #188]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1f0      	bne.n	80060d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060f4:	4b2c      	ldr	r3, [pc, #176]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	4b2d      	ldr	r3, [pc, #180]	; (80061b0 <HAL_RCC_OscConfig+0x580>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6a11      	ldr	r1, [r2, #32]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006104:	3a01      	subs	r2, #1
 8006106:	0112      	lsls	r2, r2, #4
 8006108:	4311      	orrs	r1, r2
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800610e:	0212      	lsls	r2, r2, #8
 8006110:	4311      	orrs	r1, r2
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006116:	0852      	lsrs	r2, r2, #1
 8006118:	3a01      	subs	r2, #1
 800611a:	0552      	lsls	r2, r2, #21
 800611c:	4311      	orrs	r1, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006122:	0852      	lsrs	r2, r2, #1
 8006124:	3a01      	subs	r2, #1
 8006126:	0652      	lsls	r2, r2, #25
 8006128:	4311      	orrs	r1, r2
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800612e:	06d2      	lsls	r2, r2, #27
 8006130:	430a      	orrs	r2, r1
 8006132:	491d      	ldr	r1, [pc, #116]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8006134:	4313      	orrs	r3, r2
 8006136:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006138:	4b1b      	ldr	r3, [pc, #108]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a1a      	ldr	r2, [pc, #104]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 800613e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006142:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006144:	4b18      	ldr	r3, [pc, #96]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 800614a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800614e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006150:	f7fd f858 	bl	8003204 <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006156:	e008      	b.n	800616a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006158:	f7fd f854 	bl	8003204 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e074      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0f0      	beq.n	8006158 <HAL_RCC_OscConfig+0x528>
 8006176:	e06c      	b.n	8006252 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a0a      	ldr	r2, [pc, #40]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 800617e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006182:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006184:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4a07      	ldr	r2, [pc, #28]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 800618a:	f023 0303 	bic.w	r3, r3, #3
 800618e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006190:	4b05      	ldr	r3, [pc, #20]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	4a04      	ldr	r2, [pc, #16]	; (80061a8 <HAL_RCC_OscConfig+0x578>)
 8006196:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800619a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800619e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a0:	f7fd f830 	bl	8003204 <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061a6:	e00e      	b.n	80061c6 <HAL_RCC_OscConfig+0x596>
 80061a8:	40021000 	.word	0x40021000
 80061ac:	40007000 	.word	0x40007000
 80061b0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b4:	f7fd f826 	bl	8003204 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e046      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061c6:	4b25      	ldr	r3, [pc, #148]	; (800625c <HAL_RCC_OscConfig+0x62c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x584>
 80061d2:	e03e      	b.n	8006252 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e039      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <HAL_RCC_OscConfig+0x62c>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f003 0203 	and.w	r2, r3, #3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d12c      	bne.n	800624e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fe:	3b01      	subs	r3, #1
 8006200:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006202:	429a      	cmp	r2, r3
 8006204:	d123      	bne.n	800624e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006212:	429a      	cmp	r2, r3
 8006214:	d11b      	bne.n	800624e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006222:	429a      	cmp	r2, r3
 8006224:	d113      	bne.n	800624e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006230:	085b      	lsrs	r3, r3, #1
 8006232:	3b01      	subs	r3, #1
 8006234:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006236:	429a      	cmp	r2, r3
 8006238:	d109      	bne.n	800624e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006244:	085b      	lsrs	r3, r3, #1
 8006246:	3b01      	subs	r3, #1
 8006248:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800624a:	429a      	cmp	r2, r3
 800624c:	d001      	beq.n	8006252 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3720      	adds	r7, #32
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000

08006260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e11e      	b.n	80064b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006278:	4b91      	ldr	r3, [pc, #580]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d910      	bls.n	80062a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006286:	4b8e      	ldr	r3, [pc, #568]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f023 020f 	bic.w	r2, r3, #15
 800628e:	498c      	ldr	r1, [pc, #560]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	4313      	orrs	r3, r2
 8006294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006296:	4b8a      	ldr	r3, [pc, #552]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d001      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e106      	b.n	80064b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0301 	and.w	r3, r3, #1
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d073      	beq.n	800639c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d129      	bne.n	8006310 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062bc:	4b81      	ldr	r3, [pc, #516]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e0f4      	b.n	80064b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80062cc:	f000 f99e 	bl	800660c <RCC_GetSysClockFreqFromPLLSource>
 80062d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	4a7c      	ldr	r2, [pc, #496]	; (80064c8 <HAL_RCC_ClockConfig+0x268>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d93f      	bls.n	800635a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80062da:	4b7a      	ldr	r3, [pc, #488]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d033      	beq.n	800635a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d12f      	bne.n	800635a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062fa:	4b72      	ldr	r3, [pc, #456]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006302:	4a70      	ldr	r2, [pc, #448]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 8006304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006308:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800630a:	2380      	movs	r3, #128	; 0x80
 800630c:	617b      	str	r3, [r7, #20]
 800630e:	e024      	b.n	800635a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d107      	bne.n	8006328 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006318:	4b6a      	ldr	r3, [pc, #424]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d109      	bne.n	8006338 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0c6      	b.n	80064b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006328:	4b66      	ldr	r3, [pc, #408]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e0be      	b.n	80064b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006338:	f000 f8ce 	bl	80064d8 <HAL_RCC_GetSysClockFreq>
 800633c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	4a61      	ldr	r2, [pc, #388]	; (80064c8 <HAL_RCC_ClockConfig+0x268>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d909      	bls.n	800635a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006346:	4b5f      	ldr	r3, [pc, #380]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800634e:	4a5d      	ldr	r2, [pc, #372]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 8006350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006354:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006356:	2380      	movs	r3, #128	; 0x80
 8006358:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800635a:	4b5a      	ldr	r3, [pc, #360]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f023 0203 	bic.w	r2, r3, #3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	4957      	ldr	r1, [pc, #348]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 8006368:	4313      	orrs	r3, r2
 800636a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800636c:	f7fc ff4a 	bl	8003204 <HAL_GetTick>
 8006370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006372:	e00a      	b.n	800638a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006374:	f7fc ff46 	bl	8003204 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006382:	4293      	cmp	r3, r2
 8006384:	d901      	bls.n	800638a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e095      	b.n	80064b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638a:	4b4e      	ldr	r3, [pc, #312]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 020c 	and.w	r2, r3, #12
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	429a      	cmp	r2, r3
 800639a:	d1eb      	bne.n	8006374 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d023      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063b4:	4b43      	ldr	r3, [pc, #268]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	4a42      	ldr	r2, [pc, #264]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 80063ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80063be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0308 	and.w	r3, r3, #8
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80063cc:	4b3d      	ldr	r3, [pc, #244]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80063d4:	4a3b      	ldr	r2, [pc, #236]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 80063d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80063da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063dc:	4b39      	ldr	r3, [pc, #228]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	4936      	ldr	r1, [pc, #216]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	608b      	str	r3, [r1, #8]
 80063ee:	e008      	b.n	8006402 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2b80      	cmp	r3, #128	; 0x80
 80063f4:	d105      	bne.n	8006402 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80063f6:	4b33      	ldr	r3, [pc, #204]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	4a32      	ldr	r2, [pc, #200]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 80063fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006400:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006402:	4b2f      	ldr	r3, [pc, #188]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d21d      	bcs.n	800644c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006410:	4b2b      	ldr	r3, [pc, #172]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f023 020f 	bic.w	r2, r3, #15
 8006418:	4929      	ldr	r1, [pc, #164]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	4313      	orrs	r3, r2
 800641e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006420:	f7fc fef0 	bl	8003204 <HAL_GetTick>
 8006424:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006426:	e00a      	b.n	800643e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006428:	f7fc feec 	bl	8003204 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	f241 3288 	movw	r2, #5000	; 0x1388
 8006436:	4293      	cmp	r3, r2
 8006438:	d901      	bls.n	800643e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e03b      	b.n	80064b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800643e:	4b20      	ldr	r3, [pc, #128]	; (80064c0 <HAL_RCC_ClockConfig+0x260>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	429a      	cmp	r2, r3
 800644a:	d1ed      	bne.n	8006428 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006458:	4b1a      	ldr	r3, [pc, #104]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	4917      	ldr	r1, [pc, #92]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 8006466:	4313      	orrs	r3, r2
 8006468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0308 	and.w	r3, r3, #8
 8006472:	2b00      	cmp	r3, #0
 8006474:	d009      	beq.n	800648a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006476:	4b13      	ldr	r3, [pc, #76]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	490f      	ldr	r1, [pc, #60]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 8006486:	4313      	orrs	r3, r2
 8006488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800648a:	f000 f825 	bl	80064d8 <HAL_RCC_GetSysClockFreq>
 800648e:	4601      	mov	r1, r0
 8006490:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <HAL_RCC_ClockConfig+0x264>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	091b      	lsrs	r3, r3, #4
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	4a0c      	ldr	r2, [pc, #48]	; (80064cc <HAL_RCC_ClockConfig+0x26c>)
 800649c:	5cd3      	ldrb	r3, [r2, r3]
 800649e:	f003 031f 	and.w	r3, r3, #31
 80064a2:	fa21 f303 	lsr.w	r3, r1, r3
 80064a6:	4a0a      	ldr	r2, [pc, #40]	; (80064d0 <HAL_RCC_ClockConfig+0x270>)
 80064a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80064aa:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <HAL_RCC_ClockConfig+0x274>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fc fe5c 	bl	800316c <HAL_InitTick>
 80064b4:	4603      	mov	r3, r0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3718      	adds	r7, #24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	40022000 	.word	0x40022000
 80064c4:	40021000 	.word	0x40021000
 80064c8:	04c4b400 	.word	0x04c4b400
 80064cc:	0800c134 	.word	0x0800c134
 80064d0:	20000020 	.word	0x20000020
 80064d4:	20000024 	.word	0x20000024

080064d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064d8:	b480      	push	{r7}
 80064da:	b087      	sub	sp, #28
 80064dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80064de:	4b2c      	ldr	r3, [pc, #176]	; (8006590 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 030c 	and.w	r3, r3, #12
 80064e6:	2b04      	cmp	r3, #4
 80064e8:	d102      	bne.n	80064f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064ea:	4b2a      	ldr	r3, [pc, #168]	; (8006594 <HAL_RCC_GetSysClockFreq+0xbc>)
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	e047      	b.n	8006580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80064f0:	4b27      	ldr	r3, [pc, #156]	; (8006590 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 030c 	and.w	r3, r3, #12
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d102      	bne.n	8006502 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064fc:	4b26      	ldr	r3, [pc, #152]	; (8006598 <HAL_RCC_GetSysClockFreq+0xc0>)
 80064fe:	613b      	str	r3, [r7, #16]
 8006500:	e03e      	b.n	8006580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006502:	4b23      	ldr	r3, [pc, #140]	; (8006590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 030c 	and.w	r3, r3, #12
 800650a:	2b0c      	cmp	r3, #12
 800650c:	d136      	bne.n	800657c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800650e:	4b20      	ldr	r3, [pc, #128]	; (8006590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006518:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <HAL_RCC_GetSysClockFreq+0xb8>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	3301      	adds	r3, #1
 8006524:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b03      	cmp	r3, #3
 800652a:	d10c      	bne.n	8006546 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800652c:	4a1a      	ldr	r2, [pc, #104]	; (8006598 <HAL_RCC_GetSysClockFreq+0xc0>)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	fbb2 f3f3 	udiv	r3, r2, r3
 8006534:	4a16      	ldr	r2, [pc, #88]	; (8006590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006536:	68d2      	ldr	r2, [r2, #12]
 8006538:	0a12      	lsrs	r2, r2, #8
 800653a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800653e:	fb02 f303 	mul.w	r3, r2, r3
 8006542:	617b      	str	r3, [r7, #20]
      break;
 8006544:	e00c      	b.n	8006560 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006546:	4a13      	ldr	r2, [pc, #76]	; (8006594 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	fbb2 f3f3 	udiv	r3, r2, r3
 800654e:	4a10      	ldr	r2, [pc, #64]	; (8006590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006550:	68d2      	ldr	r2, [r2, #12]
 8006552:	0a12      	lsrs	r2, r2, #8
 8006554:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006558:	fb02 f303 	mul.w	r3, r2, r3
 800655c:	617b      	str	r3, [r7, #20]
      break;
 800655e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006560:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	0e5b      	lsrs	r3, r3, #25
 8006566:	f003 0303 	and.w	r3, r3, #3
 800656a:	3301      	adds	r3, #1
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	fbb2 f3f3 	udiv	r3, r2, r3
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	e001      	b.n	8006580 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006580:	693b      	ldr	r3, [r7, #16]
}
 8006582:	4618      	mov	r0, r3
 8006584:	371c      	adds	r7, #28
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40021000 	.word	0x40021000
 8006594:	00f42400 	.word	0x00f42400
 8006598:	016e3600 	.word	0x016e3600

0800659c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065a0:	4b03      	ldr	r3, [pc, #12]	; (80065b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065a2:	681b      	ldr	r3, [r3, #0]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20000020 	.word	0x20000020

080065b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065b8:	f7ff fff0 	bl	800659c <HAL_RCC_GetHCLKFreq>
 80065bc:	4601      	mov	r1, r0
 80065be:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	0a1b      	lsrs	r3, r3, #8
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	4a04      	ldr	r2, [pc, #16]	; (80065dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80065ca:	5cd3      	ldrb	r3, [r2, r3]
 80065cc:	f003 031f 	and.w	r3, r3, #31
 80065d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	40021000 	.word	0x40021000
 80065dc:	0800c144 	.word	0x0800c144

080065e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80065e4:	f7ff ffda 	bl	800659c <HAL_RCC_GetHCLKFreq>
 80065e8:	4601      	mov	r1, r0
 80065ea:	4b06      	ldr	r3, [pc, #24]	; (8006604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	0adb      	lsrs	r3, r3, #11
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	4a04      	ldr	r2, [pc, #16]	; (8006608 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065f6:	5cd3      	ldrb	r3, [r2, r3]
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006600:	4618      	mov	r0, r3
 8006602:	bd80      	pop	{r7, pc}
 8006604:	40021000 	.word	0x40021000
 8006608:	0800c144 	.word	0x0800c144

0800660c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006612:	4b1e      	ldr	r3, [pc, #120]	; (800668c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800661c:	4b1b      	ldr	r3, [pc, #108]	; (800668c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	091b      	lsrs	r3, r3, #4
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	2b03      	cmp	r3, #3
 800662e:	d10c      	bne.n	800664a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006630:	4a17      	ldr	r2, [pc, #92]	; (8006690 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	fbb2 f3f3 	udiv	r3, r2, r3
 8006638:	4a14      	ldr	r2, [pc, #80]	; (800668c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800663a:	68d2      	ldr	r2, [r2, #12]
 800663c:	0a12      	lsrs	r2, r2, #8
 800663e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006642:	fb02 f303 	mul.w	r3, r2, r3
 8006646:	617b      	str	r3, [r7, #20]
    break;
 8006648:	e00c      	b.n	8006664 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800664a:	4a12      	ldr	r2, [pc, #72]	; (8006694 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006652:	4a0e      	ldr	r2, [pc, #56]	; (800668c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006654:	68d2      	ldr	r2, [r2, #12]
 8006656:	0a12      	lsrs	r2, r2, #8
 8006658:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800665c:	fb02 f303 	mul.w	r3, r2, r3
 8006660:	617b      	str	r3, [r7, #20]
    break;
 8006662:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006664:	4b09      	ldr	r3, [pc, #36]	; (800668c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	0e5b      	lsrs	r3, r3, #25
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	3301      	adds	r3, #1
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	fbb2 f3f3 	udiv	r3, r2, r3
 800667c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800667e:	687b      	ldr	r3, [r7, #4]
}
 8006680:	4618      	mov	r0, r3
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	40021000 	.word	0x40021000
 8006690:	016e3600 	.word	0x016e3600
 8006694:	00f42400 	.word	0x00f42400

08006698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066a0:	2300      	movs	r3, #0
 80066a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066a4:	2300      	movs	r3, #0
 80066a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 8098 	beq.w	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066b6:	2300      	movs	r3, #0
 80066b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ba:	4b43      	ldr	r3, [pc, #268]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10d      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066c6:	4b40      	ldr	r3, [pc, #256]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ca:	4a3f      	ldr	r2, [pc, #252]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d0:	6593      	str	r3, [r2, #88]	; 0x58
 80066d2:	4b3d      	ldr	r3, [pc, #244]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066da:	60bb      	str	r3, [r7, #8]
 80066dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066de:	2301      	movs	r3, #1
 80066e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066e2:	4b3a      	ldr	r3, [pc, #232]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a39      	ldr	r2, [pc, #228]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80066e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066ee:	f7fc fd89 	bl	8003204 <HAL_GetTick>
 80066f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066f4:	e009      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066f6:	f7fc fd85 	bl	8003204 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d902      	bls.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	74fb      	strb	r3, [r7, #19]
        break;
 8006708:	e005      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800670a:	4b30      	ldr	r3, [pc, #192]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0ef      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006716:	7cfb      	ldrb	r3, [r7, #19]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d159      	bne.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800671c:	4b2a      	ldr	r3, [pc, #168]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800671e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006726:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01e      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	429a      	cmp	r2, r3
 8006736:	d019      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006738:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800673a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800673e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006742:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006744:	4b20      	ldr	r3, [pc, #128]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674a:	4a1f      	ldr	r2, [pc, #124]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800674c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006754:	4b1c      	ldr	r3, [pc, #112]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675a:	4a1b      	ldr	r2, [pc, #108]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800675c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006764:	4a18      	ldr	r2, [pc, #96]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d016      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006776:	f7fc fd45 	bl	8003204 <HAL_GetTick>
 800677a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800677c:	e00b      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800677e:	f7fc fd41 	bl	8003204 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	f241 3288 	movw	r2, #5000	; 0x1388
 800678c:	4293      	cmp	r3, r2
 800678e:	d902      	bls.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	74fb      	strb	r3, [r7, #19]
            break;
 8006794:	e006      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006796:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0ec      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80067a4:	7cfb      	ldrb	r3, [r7, #19]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10b      	bne.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067aa:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b8:	4903      	ldr	r1, [pc, #12]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067c0:	e008      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067c2:	7cfb      	ldrb	r3, [r7, #19]
 80067c4:	74bb      	strb	r3, [r7, #18]
 80067c6:	e005      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80067c8:	40021000 	.word	0x40021000
 80067cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d0:	7cfb      	ldrb	r3, [r7, #19]
 80067d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067d4:	7c7b      	ldrb	r3, [r7, #17]
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d105      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067da:	4ba6      	ldr	r3, [pc, #664]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067de:	4aa5      	ldr	r2, [pc, #660]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067f2:	4ba0      	ldr	r3, [pc, #640]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f8:	f023 0203 	bic.w	r2, r3, #3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	499c      	ldr	r1, [pc, #624]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006814:	4b97      	ldr	r3, [pc, #604]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681a:	f023 020c 	bic.w	r2, r3, #12
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	4994      	ldr	r1, [pc, #592]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006836:	4b8f      	ldr	r3, [pc, #572]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	498b      	ldr	r1, [pc, #556]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0308 	and.w	r3, r3, #8
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006858:	4b86      	ldr	r3, [pc, #536]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800685a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	4983      	ldr	r1, [pc, #524]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800687a:	4b7e      	ldr	r3, [pc, #504]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800687c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006880:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	497a      	ldr	r1, [pc, #488]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800688a:	4313      	orrs	r3, r2
 800688c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800689c:	4b75      	ldr	r3, [pc, #468]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800689e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	4972      	ldr	r1, [pc, #456]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80068be:	4b6d      	ldr	r3, [pc, #436]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	4969      	ldr	r1, [pc, #420]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068e0:	4b64      	ldr	r3, [pc, #400]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	4961      	ldr	r1, [pc, #388]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006902:	4b5c      	ldr	r3, [pc, #368]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006908:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	4958      	ldr	r1, [pc, #352]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006920:	2b00      	cmp	r3, #0
 8006922:	d015      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006924:	4b53      	ldr	r3, [pc, #332]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	4950      	ldr	r1, [pc, #320]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006942:	d105      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006944:	4b4b      	ldr	r3, [pc, #300]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	4a4a      	ldr	r2, [pc, #296]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800694a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800694e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006958:	2b00      	cmp	r3, #0
 800695a:	d015      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800695c:	4b45      	ldr	r3, [pc, #276]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800695e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006962:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696a:	4942      	ldr	r1, [pc, #264]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800696c:	4313      	orrs	r3, r2
 800696e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800697a:	d105      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800697c:	4b3d      	ldr	r3, [pc, #244]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	4a3c      	ldr	r2, [pc, #240]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006986:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d015      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006994:	4b37      	ldr	r3, [pc, #220]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	4934      	ldr	r1, [pc, #208]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069b2:	d105      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069b4:	4b2f      	ldr	r3, [pc, #188]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	4a2e      	ldr	r2, [pc, #184]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d015      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069cc:	4b29      	ldr	r3, [pc, #164]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069da:	4926      	ldr	r1, [pc, #152]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069ea:	d105      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069ec:	4b21      	ldr	r3, [pc, #132]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	4a20      	ldr	r2, [pc, #128]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d015      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a04:	4b1b      	ldr	r3, [pc, #108]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a12:	4918      	ldr	r1, [pc, #96]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a22:	d105      	bne.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a24:	4b13      	ldr	r3, [pc, #76]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	4a12      	ldr	r2, [pc, #72]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d015      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a3c:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4a:	490a      	ldr	r1, [pc, #40]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a5a:	d105      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	4a04      	ldr	r2, [pc, #16]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006a68:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	40021000 	.word	0x40021000

08006a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e049      	b.n	8006b1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fc f93c 	bl	8002d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	f000 fbdc 	bl	8007274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d001      	beq.n	8006b40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e042      	b.n	8006bc6 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a21      	ldr	r2, [pc, #132]	; (8006bd4 <HAL_TIM_Base_Start+0xac>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d018      	beq.n	8006b84 <HAL_TIM_Base_Start+0x5c>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b5a:	d013      	beq.n	8006b84 <HAL_TIM_Base_Start+0x5c>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1d      	ldr	r2, [pc, #116]	; (8006bd8 <HAL_TIM_Base_Start+0xb0>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d00e      	beq.n	8006b84 <HAL_TIM_Base_Start+0x5c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1c      	ldr	r2, [pc, #112]	; (8006bdc <HAL_TIM_Base_Start+0xb4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d009      	beq.n	8006b84 <HAL_TIM_Base_Start+0x5c>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a1a      	ldr	r2, [pc, #104]	; (8006be0 <HAL_TIM_Base_Start+0xb8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d004      	beq.n	8006b84 <HAL_TIM_Base_Start+0x5c>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <HAL_TIM_Base_Start+0xbc>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d115      	bne.n	8006bb0 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	4b17      	ldr	r3, [pc, #92]	; (8006be8 <HAL_TIM_Base_Start+0xc0>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b06      	cmp	r3, #6
 8006b94:	d015      	beq.n	8006bc2 <HAL_TIM_Base_Start+0x9a>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b9c:	d011      	beq.n	8006bc2 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f042 0201 	orr.w	r2, r2, #1
 8006bac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bae:	e008      	b.n	8006bc2 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	e000      	b.n	8006bc4 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	40012c00 	.word	0x40012c00
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40013400 	.word	0x40013400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	00010007 	.word	0x00010007

08006bec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e049      	b.n	8006c92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f841 	bl	8006c9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3304      	adds	r3, #4
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4610      	mov	r0, r2
 8006c2c:	f000 fb22 	bl	8007274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
	...

08006cb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d109      	bne.n	8006cd4 <HAL_TIM_PWM_Start+0x24>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	bf14      	ite	ne
 8006ccc:	2301      	movne	r3, #1
 8006cce:	2300      	moveq	r3, #0
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	e03c      	b.n	8006d4e <HAL_TIM_PWM_Start+0x9e>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d109      	bne.n	8006cee <HAL_TIM_PWM_Start+0x3e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	bf14      	ite	ne
 8006ce6:	2301      	movne	r3, #1
 8006ce8:	2300      	moveq	r3, #0
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	e02f      	b.n	8006d4e <HAL_TIM_PWM_Start+0x9e>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d109      	bne.n	8006d08 <HAL_TIM_PWM_Start+0x58>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	bf14      	ite	ne
 8006d00:	2301      	movne	r3, #1
 8006d02:	2300      	moveq	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	e022      	b.n	8006d4e <HAL_TIM_PWM_Start+0x9e>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2b0c      	cmp	r3, #12
 8006d0c:	d109      	bne.n	8006d22 <HAL_TIM_PWM_Start+0x72>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	bf14      	ite	ne
 8006d1a:	2301      	movne	r3, #1
 8006d1c:	2300      	moveq	r3, #0
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	e015      	b.n	8006d4e <HAL_TIM_PWM_Start+0x9e>
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	2b10      	cmp	r3, #16
 8006d26:	d109      	bne.n	8006d3c <HAL_TIM_PWM_Start+0x8c>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	bf14      	ite	ne
 8006d34:	2301      	movne	r3, #1
 8006d36:	2300      	moveq	r3, #0
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	e008      	b.n	8006d4e <HAL_TIM_PWM_Start+0x9e>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	bf14      	ite	ne
 8006d48:	2301      	movne	r3, #1
 8006d4a:	2300      	moveq	r3, #0
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e097      	b.n	8006e86 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d104      	bne.n	8006d66 <HAL_TIM_PWM_Start+0xb6>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d64:	e023      	b.n	8006dae <HAL_TIM_PWM_Start+0xfe>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d104      	bne.n	8006d76 <HAL_TIM_PWM_Start+0xc6>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d74:	e01b      	b.n	8006dae <HAL_TIM_PWM_Start+0xfe>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d104      	bne.n	8006d86 <HAL_TIM_PWM_Start+0xd6>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d84:	e013      	b.n	8006dae <HAL_TIM_PWM_Start+0xfe>
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b0c      	cmp	r3, #12
 8006d8a:	d104      	bne.n	8006d96 <HAL_TIM_PWM_Start+0xe6>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d94:	e00b      	b.n	8006dae <HAL_TIM_PWM_Start+0xfe>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b10      	cmp	r3, #16
 8006d9a:	d104      	bne.n	8006da6 <HAL_TIM_PWM_Start+0xf6>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006da4:	e003      	b.n	8006dae <HAL_TIM_PWM_Start+0xfe>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2202      	movs	r2, #2
 8006daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2201      	movs	r2, #1
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 fe7e 	bl	8007ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a33      	ldr	r2, [pc, #204]	; (8006e90 <HAL_TIM_PWM_Start+0x1e0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d013      	beq.n	8006dee <HAL_TIM_PWM_Start+0x13e>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a32      	ldr	r2, [pc, #200]	; (8006e94 <HAL_TIM_PWM_Start+0x1e4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00e      	beq.n	8006dee <HAL_TIM_PWM_Start+0x13e>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a30      	ldr	r2, [pc, #192]	; (8006e98 <HAL_TIM_PWM_Start+0x1e8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d009      	beq.n	8006dee <HAL_TIM_PWM_Start+0x13e>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a2f      	ldr	r2, [pc, #188]	; (8006e9c <HAL_TIM_PWM_Start+0x1ec>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d004      	beq.n	8006dee <HAL_TIM_PWM_Start+0x13e>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a2d      	ldr	r2, [pc, #180]	; (8006ea0 <HAL_TIM_PWM_Start+0x1f0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d101      	bne.n	8006df2 <HAL_TIM_PWM_Start+0x142>
 8006dee:	2301      	movs	r3, #1
 8006df0:	e000      	b.n	8006df4 <HAL_TIM_PWM_Start+0x144>
 8006df2:	2300      	movs	r3, #0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d007      	beq.n	8006e08 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a20      	ldr	r2, [pc, #128]	; (8006e90 <HAL_TIM_PWM_Start+0x1e0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d018      	beq.n	8006e44 <HAL_TIM_PWM_Start+0x194>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1a:	d013      	beq.n	8006e44 <HAL_TIM_PWM_Start+0x194>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a20      	ldr	r2, [pc, #128]	; (8006ea4 <HAL_TIM_PWM_Start+0x1f4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d00e      	beq.n	8006e44 <HAL_TIM_PWM_Start+0x194>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1f      	ldr	r2, [pc, #124]	; (8006ea8 <HAL_TIM_PWM_Start+0x1f8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d009      	beq.n	8006e44 <HAL_TIM_PWM_Start+0x194>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a17      	ldr	r2, [pc, #92]	; (8006e94 <HAL_TIM_PWM_Start+0x1e4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d004      	beq.n	8006e44 <HAL_TIM_PWM_Start+0x194>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a16      	ldr	r2, [pc, #88]	; (8006e98 <HAL_TIM_PWM_Start+0x1e8>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d115      	bne.n	8006e70 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	689a      	ldr	r2, [r3, #8]
 8006e4a:	4b18      	ldr	r3, [pc, #96]	; (8006eac <HAL_TIM_PWM_Start+0x1fc>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b06      	cmp	r3, #6
 8006e54:	d015      	beq.n	8006e82 <HAL_TIM_PWM_Start+0x1d2>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e5c:	d011      	beq.n	8006e82 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f042 0201 	orr.w	r2, r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6e:	e008      	b.n	8006e82 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0201 	orr.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	e000      	b.n	8006e84 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	40012c00 	.word	0x40012c00
 8006e94:	40013400 	.word	0x40013400
 8006e98:	40014000 	.word	0x40014000
 8006e9c:	40014400 	.word	0x40014400
 8006ea0:	40014800 	.word	0x40014800
 8006ea4:	40000400 	.word	0x40000400
 8006ea8:	40000800 	.word	0x40000800
 8006eac:	00010007 	.word	0x00010007

08006eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d101      	bne.n	8006eca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	e0fd      	b.n	80070c6 <HAL_TIM_PWM_ConfigChannel+0x216>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b14      	cmp	r3, #20
 8006ed6:	f200 80f0 	bhi.w	80070ba <HAL_TIM_PWM_ConfigChannel+0x20a>
 8006eda:	a201      	add	r2, pc, #4	; (adr r2, 8006ee0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee0:	08006f35 	.word	0x08006f35
 8006ee4:	080070bb 	.word	0x080070bb
 8006ee8:	080070bb 	.word	0x080070bb
 8006eec:	080070bb 	.word	0x080070bb
 8006ef0:	08006f75 	.word	0x08006f75
 8006ef4:	080070bb 	.word	0x080070bb
 8006ef8:	080070bb 	.word	0x080070bb
 8006efc:	080070bb 	.word	0x080070bb
 8006f00:	08006fb7 	.word	0x08006fb7
 8006f04:	080070bb 	.word	0x080070bb
 8006f08:	080070bb 	.word	0x080070bb
 8006f0c:	080070bb 	.word	0x080070bb
 8006f10:	08006ff7 	.word	0x08006ff7
 8006f14:	080070bb 	.word	0x080070bb
 8006f18:	080070bb 	.word	0x080070bb
 8006f1c:	080070bb 	.word	0x080070bb
 8006f20:	08007039 	.word	0x08007039
 8006f24:	080070bb 	.word	0x080070bb
 8006f28:	080070bb 	.word	0x080070bb
 8006f2c:	080070bb 	.word	0x080070bb
 8006f30:	08007079 	.word	0x08007079
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fa2a 	bl	8007394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	699a      	ldr	r2, [r3, #24]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f042 0208 	orr.w	r2, r2, #8
 8006f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	699a      	ldr	r2, [r3, #24]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0204 	bic.w	r2, r2, #4
 8006f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6999      	ldr	r1, [r3, #24]
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	691a      	ldr	r2, [r3, #16]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	619a      	str	r2, [r3, #24]
      break;
 8006f72:	e0a3      	b.n	80070bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68b9      	ldr	r1, [r7, #8]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fa9a 	bl	80074b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699a      	ldr	r2, [r3, #24]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6999      	ldr	r1, [r3, #24]
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	021a      	lsls	r2, r3, #8
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	619a      	str	r2, [r3, #24]
      break;
 8006fb4:	e082      	b.n	80070bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68b9      	ldr	r1, [r7, #8]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f000 fb03 	bl	80075c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69da      	ldr	r2, [r3, #28]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f042 0208 	orr.w	r2, r2, #8
 8006fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69da      	ldr	r2, [r3, #28]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0204 	bic.w	r2, r2, #4
 8006fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69d9      	ldr	r1, [r3, #28]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	691a      	ldr	r2, [r3, #16]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	61da      	str	r2, [r3, #28]
      break;
 8006ff4:	e062      	b.n	80070bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68b9      	ldr	r1, [r7, #8]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 fb6b 	bl	80076d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69da      	ldr	r2, [r3, #28]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	69da      	ldr	r2, [r3, #28]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69d9      	ldr	r1, [r3, #28]
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	021a      	lsls	r2, r3, #8
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	61da      	str	r2, [r3, #28]
      break;
 8007036:	e041      	b.n	80070bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68b9      	ldr	r1, [r7, #8]
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fbd4 	bl	80077ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f042 0208 	orr.w	r2, r2, #8
 8007052:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f022 0204 	bic.w	r2, r2, #4
 8007062:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	691a      	ldr	r2, [r3, #16]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007076:	e021      	b.n	80070bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68b9      	ldr	r1, [r7, #8]
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fc18 	bl	80078b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007092:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	021a      	lsls	r2, r3, #8
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80070b8:	e000      	b.n	80070bc <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80070ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop

080070d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d101      	bne.n	80070e8 <HAL_TIM_ConfigClockSource+0x18>
 80070e4:	2302      	movs	r3, #2
 80070e6:	e0b9      	b.n	800725c <HAL_TIM_ConfigClockSource+0x18c>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007106:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800710a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007112:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2b70      	cmp	r3, #112	; 0x70
 8007122:	d02e      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0xb2>
 8007124:	2b70      	cmp	r3, #112	; 0x70
 8007126:	d812      	bhi.n	800714e <HAL_TIM_ConfigClockSource+0x7e>
 8007128:	2b30      	cmp	r3, #48	; 0x30
 800712a:	f000 8084 	beq.w	8007236 <HAL_TIM_ConfigClockSource+0x166>
 800712e:	2b30      	cmp	r3, #48	; 0x30
 8007130:	d806      	bhi.n	8007140 <HAL_TIM_ConfigClockSource+0x70>
 8007132:	2b10      	cmp	r3, #16
 8007134:	d07f      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x166>
 8007136:	2b20      	cmp	r3, #32
 8007138:	d07d      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x166>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d07b      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800713e:	e084      	b.n	800724a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8007140:	2b50      	cmp	r3, #80	; 0x50
 8007142:	d048      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x106>
 8007144:	2b60      	cmp	r3, #96	; 0x60
 8007146:	d056      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x126>
 8007148:	2b40      	cmp	r3, #64	; 0x40
 800714a:	d064      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x146>
      break;
 800714c:	e07d      	b.n	800724a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800714e:	4a45      	ldr	r2, [pc, #276]	; (8007264 <HAL_TIM_ConfigClockSource+0x194>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d070      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x166>
 8007154:	4a43      	ldr	r2, [pc, #268]	; (8007264 <HAL_TIM_ConfigClockSource+0x194>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d809      	bhi.n	800716e <HAL_TIM_ConfigClockSource+0x9e>
 800715a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800715e:	d027      	beq.n	80071b0 <HAL_TIM_ConfigClockSource+0xe0>
 8007160:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007164:	d067      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x166>
 8007166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800716a:	d06d      	beq.n	8007248 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800716c:	e06d      	b.n	800724a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800716e:	4a3e      	ldr	r2, [pc, #248]	; (8007268 <HAL_TIM_ConfigClockSource+0x198>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d060      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x166>
 8007174:	4a3d      	ldr	r2, [pc, #244]	; (800726c <HAL_TIM_ConfigClockSource+0x19c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d05d      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x166>
 800717a:	4a3d      	ldr	r2, [pc, #244]	; (8007270 <HAL_TIM_ConfigClockSource+0x1a0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d05a      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x166>
      break;
 8007180:	e063      	b.n	800724a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6899      	ldr	r1, [r3, #8]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f000 fc71 	bl	8007a78 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80071a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	609a      	str	r2, [r3, #8]
      break;
 80071ae:	e04c      	b.n	800724a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6818      	ldr	r0, [r3, #0]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	6899      	ldr	r1, [r3, #8]
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f000 fc5a 	bl	8007a78 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071d2:	609a      	str	r2, [r3, #8]
      break;
 80071d4:	e039      	b.n	800724a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6859      	ldr	r1, [r3, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f000 fbcc 	bl	8007980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2150      	movs	r1, #80	; 0x50
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fc25 	bl	8007a3e <TIM_ITRx_SetConfig>
      break;
 80071f4:	e029      	b.n	800724a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6859      	ldr	r1, [r3, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	461a      	mov	r2, r3
 8007204:	f000 fbeb 	bl	80079de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2160      	movs	r1, #96	; 0x60
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fc15 	bl	8007a3e <TIM_ITRx_SetConfig>
      break;
 8007214:	e019      	b.n	800724a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6818      	ldr	r0, [r3, #0]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6859      	ldr	r1, [r3, #4]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	461a      	mov	r2, r3
 8007224:	f000 fbac 	bl	8007980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2140      	movs	r1, #64	; 0x40
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fc05 	bl	8007a3e <TIM_ITRx_SetConfig>
      break;
 8007234:	e009      	b.n	800724a <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4619      	mov	r1, r3
 8007240:	4610      	mov	r0, r2
 8007242:	f000 fbfc 	bl	8007a3e <TIM_ITRx_SetConfig>
        break;
 8007246:	e000      	b.n	800724a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8007248:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	00100020 	.word	0x00100020
 8007268:	00100040 	.word	0x00100040
 800726c:	00100070 	.word	0x00100070
 8007270:	00100030 	.word	0x00100030

08007274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a3c      	ldr	r2, [pc, #240]	; (8007378 <TIM_Base_SetConfig+0x104>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00f      	beq.n	80072ac <TIM_Base_SetConfig+0x38>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007292:	d00b      	beq.n	80072ac <TIM_Base_SetConfig+0x38>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a39      	ldr	r2, [pc, #228]	; (800737c <TIM_Base_SetConfig+0x108>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d007      	beq.n	80072ac <TIM_Base_SetConfig+0x38>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a38      	ldr	r2, [pc, #224]	; (8007380 <TIM_Base_SetConfig+0x10c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_Base_SetConfig+0x38>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a37      	ldr	r2, [pc, #220]	; (8007384 <TIM_Base_SetConfig+0x110>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d108      	bne.n	80072be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a2d      	ldr	r2, [pc, #180]	; (8007378 <TIM_Base_SetConfig+0x104>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d01b      	beq.n	80072fe <TIM_Base_SetConfig+0x8a>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072cc:	d017      	beq.n	80072fe <TIM_Base_SetConfig+0x8a>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a2a      	ldr	r2, [pc, #168]	; (800737c <TIM_Base_SetConfig+0x108>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d013      	beq.n	80072fe <TIM_Base_SetConfig+0x8a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a29      	ldr	r2, [pc, #164]	; (8007380 <TIM_Base_SetConfig+0x10c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d00f      	beq.n	80072fe <TIM_Base_SetConfig+0x8a>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a28      	ldr	r2, [pc, #160]	; (8007384 <TIM_Base_SetConfig+0x110>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d00b      	beq.n	80072fe <TIM_Base_SetConfig+0x8a>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a27      	ldr	r2, [pc, #156]	; (8007388 <TIM_Base_SetConfig+0x114>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d007      	beq.n	80072fe <TIM_Base_SetConfig+0x8a>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a26      	ldr	r2, [pc, #152]	; (800738c <TIM_Base_SetConfig+0x118>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d003      	beq.n	80072fe <TIM_Base_SetConfig+0x8a>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a25      	ldr	r2, [pc, #148]	; (8007390 <TIM_Base_SetConfig+0x11c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d108      	bne.n	8007310 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4313      	orrs	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	4313      	orrs	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a10      	ldr	r2, [pc, #64]	; (8007378 <TIM_Base_SetConfig+0x104>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00f      	beq.n	800735c <TIM_Base_SetConfig+0xe8>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a11      	ldr	r2, [pc, #68]	; (8007384 <TIM_Base_SetConfig+0x110>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d00b      	beq.n	800735c <TIM_Base_SetConfig+0xe8>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a10      	ldr	r2, [pc, #64]	; (8007388 <TIM_Base_SetConfig+0x114>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d007      	beq.n	800735c <TIM_Base_SetConfig+0xe8>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a0f      	ldr	r2, [pc, #60]	; (800738c <TIM_Base_SetConfig+0x118>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d003      	beq.n	800735c <TIM_Base_SetConfig+0xe8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	4a0e      	ldr	r2, [pc, #56]	; (8007390 <TIM_Base_SetConfig+0x11c>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d103      	bne.n	8007364 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	615a      	str	r2, [r3, #20]
}
 800736a:	bf00      	nop
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	40012c00 	.word	0x40012c00
 800737c:	40000400 	.word	0x40000400
 8007380:	40000800 	.word	0x40000800
 8007384:	40013400 	.word	0x40013400
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800

08007394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	f023 0201 	bic.w	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f023 0303 	bic.w	r3, r3, #3
 80073ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f023 0302 	bic.w	r3, r3, #2
 80073e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a2c      	ldr	r2, [pc, #176]	; (80074a0 <TIM_OC1_SetConfig+0x10c>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00f      	beq.n	8007414 <TIM_OC1_SetConfig+0x80>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a2b      	ldr	r2, [pc, #172]	; (80074a4 <TIM_OC1_SetConfig+0x110>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00b      	beq.n	8007414 <TIM_OC1_SetConfig+0x80>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a2a      	ldr	r2, [pc, #168]	; (80074a8 <TIM_OC1_SetConfig+0x114>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d007      	beq.n	8007414 <TIM_OC1_SetConfig+0x80>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a29      	ldr	r2, [pc, #164]	; (80074ac <TIM_OC1_SetConfig+0x118>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d003      	beq.n	8007414 <TIM_OC1_SetConfig+0x80>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a28      	ldr	r2, [pc, #160]	; (80074b0 <TIM_OC1_SetConfig+0x11c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d10c      	bne.n	800742e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f023 0308 	bic.w	r3, r3, #8
 800741a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	4313      	orrs	r3, r2
 8007424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f023 0304 	bic.w	r3, r3, #4
 800742c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a1b      	ldr	r2, [pc, #108]	; (80074a0 <TIM_OC1_SetConfig+0x10c>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d00f      	beq.n	8007456 <TIM_OC1_SetConfig+0xc2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a1a      	ldr	r2, [pc, #104]	; (80074a4 <TIM_OC1_SetConfig+0x110>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d00b      	beq.n	8007456 <TIM_OC1_SetConfig+0xc2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a19      	ldr	r2, [pc, #100]	; (80074a8 <TIM_OC1_SetConfig+0x114>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d007      	beq.n	8007456 <TIM_OC1_SetConfig+0xc2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a18      	ldr	r2, [pc, #96]	; (80074ac <TIM_OC1_SetConfig+0x118>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d003      	beq.n	8007456 <TIM_OC1_SetConfig+0xc2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a17      	ldr	r2, [pc, #92]	; (80074b0 <TIM_OC1_SetConfig+0x11c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d111      	bne.n	800747a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800745c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	4313      	orrs	r3, r2
 8007478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	621a      	str	r2, [r3, #32]
}
 8007494:	bf00      	nop
 8007496:	371c      	adds	r7, #28
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	40012c00 	.word	0x40012c00
 80074a4:	40013400 	.word	0x40013400
 80074a8:	40014000 	.word	0x40014000
 80074ac:	40014400 	.word	0x40014400
 80074b0:	40014800 	.word	0x40014800

080074b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f023 0210 	bic.w	r2, r3, #16
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	021b      	lsls	r3, r3, #8
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f023 0320 	bic.w	r3, r3, #32
 8007502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	4313      	orrs	r3, r2
 800750e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a28      	ldr	r2, [pc, #160]	; (80075b4 <TIM_OC2_SetConfig+0x100>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_OC2_SetConfig+0x6c>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a27      	ldr	r2, [pc, #156]	; (80075b8 <TIM_OC2_SetConfig+0x104>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d10d      	bne.n	800753c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	4313      	orrs	r3, r2
 8007532:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800753a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <TIM_OC2_SetConfig+0x100>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d00f      	beq.n	8007564 <TIM_OC2_SetConfig+0xb0>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a1c      	ldr	r2, [pc, #112]	; (80075b8 <TIM_OC2_SetConfig+0x104>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d00b      	beq.n	8007564 <TIM_OC2_SetConfig+0xb0>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a1b      	ldr	r2, [pc, #108]	; (80075bc <TIM_OC2_SetConfig+0x108>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d007      	beq.n	8007564 <TIM_OC2_SetConfig+0xb0>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a1a      	ldr	r2, [pc, #104]	; (80075c0 <TIM_OC2_SetConfig+0x10c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d003      	beq.n	8007564 <TIM_OC2_SetConfig+0xb0>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a19      	ldr	r2, [pc, #100]	; (80075c4 <TIM_OC2_SetConfig+0x110>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d113      	bne.n	800758c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800756a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007572:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	4313      	orrs	r3, r2
 800757e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	4313      	orrs	r3, r2
 800758a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	621a      	str	r2, [r3, #32]
}
 80075a6:	bf00      	nop
 80075a8:	371c      	adds	r7, #28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	40012c00 	.word	0x40012c00
 80075b8:	40013400 	.word	0x40013400
 80075bc:	40014000 	.word	0x40014000
 80075c0:	40014400 	.word	0x40014400
 80075c4:	40014800 	.word	0x40014800

080075c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0303 	bic.w	r3, r3, #3
 8007602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	021b      	lsls	r3, r3, #8
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	4313      	orrs	r3, r2
 8007620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a27      	ldr	r2, [pc, #156]	; (80076c4 <TIM_OC3_SetConfig+0xfc>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d003      	beq.n	8007632 <TIM_OC3_SetConfig+0x6a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a26      	ldr	r2, [pc, #152]	; (80076c8 <TIM_OC3_SetConfig+0x100>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d10d      	bne.n	800764e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800764c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <TIM_OC3_SetConfig+0xfc>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00f      	beq.n	8007676 <TIM_OC3_SetConfig+0xae>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a1b      	ldr	r2, [pc, #108]	; (80076c8 <TIM_OC3_SetConfig+0x100>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00b      	beq.n	8007676 <TIM_OC3_SetConfig+0xae>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a1a      	ldr	r2, [pc, #104]	; (80076cc <TIM_OC3_SetConfig+0x104>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d007      	beq.n	8007676 <TIM_OC3_SetConfig+0xae>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a19      	ldr	r2, [pc, #100]	; (80076d0 <TIM_OC3_SetConfig+0x108>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d003      	beq.n	8007676 <TIM_OC3_SetConfig+0xae>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a18      	ldr	r2, [pc, #96]	; (80076d4 <TIM_OC3_SetConfig+0x10c>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d113      	bne.n	800769e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800767c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	4313      	orrs	r3, r2
 8007690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	621a      	str	r2, [r3, #32]
}
 80076b8:	bf00      	nop
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	40012c00 	.word	0x40012c00
 80076c8:	40013400 	.word	0x40013400
 80076cc:	40014000 	.word	0x40014000
 80076d0:	40014400 	.word	0x40014400
 80076d4:	40014800 	.word	0x40014800

080076d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	69db      	ldr	r3, [r3, #28]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800770a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	031b      	lsls	r3, r3, #12
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	4313      	orrs	r3, r2
 8007732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a28      	ldr	r2, [pc, #160]	; (80077d8 <TIM_OC4_SetConfig+0x100>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d003      	beq.n	8007744 <TIM_OC4_SetConfig+0x6c>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a27      	ldr	r2, [pc, #156]	; (80077dc <TIM_OC4_SetConfig+0x104>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d10d      	bne.n	8007760 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800774a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	031b      	lsls	r3, r3, #12
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	4313      	orrs	r3, r2
 8007756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800775e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a1d      	ldr	r2, [pc, #116]	; (80077d8 <TIM_OC4_SetConfig+0x100>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00f      	beq.n	8007788 <TIM_OC4_SetConfig+0xb0>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a1c      	ldr	r2, [pc, #112]	; (80077dc <TIM_OC4_SetConfig+0x104>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d00b      	beq.n	8007788 <TIM_OC4_SetConfig+0xb0>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a1b      	ldr	r2, [pc, #108]	; (80077e0 <TIM_OC4_SetConfig+0x108>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d007      	beq.n	8007788 <TIM_OC4_SetConfig+0xb0>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a1a      	ldr	r2, [pc, #104]	; (80077e4 <TIM_OC4_SetConfig+0x10c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_OC4_SetConfig+0xb0>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a19      	ldr	r2, [pc, #100]	; (80077e8 <TIM_OC4_SetConfig+0x110>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d113      	bne.n	80077b0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800778e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007796:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	019b      	lsls	r3, r3, #6
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	019b      	lsls	r3, r3, #6
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	621a      	str	r2, [r3, #32]
}
 80077ca:	bf00      	nop
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40012c00 	.word	0x40012c00
 80077dc:	40013400 	.word	0x40013400
 80077e0:	40014000 	.word	0x40014000
 80077e4:	40014400 	.word	0x40014400
 80077e8:	40014800 	.word	0x40014800

080077ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800781a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007830:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	041b      	lsls	r3, r3, #16
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	4313      	orrs	r3, r2
 800783c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a17      	ldr	r2, [pc, #92]	; (80078a0 <TIM_OC5_SetConfig+0xb4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d00f      	beq.n	8007866 <TIM_OC5_SetConfig+0x7a>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a16      	ldr	r2, [pc, #88]	; (80078a4 <TIM_OC5_SetConfig+0xb8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d00b      	beq.n	8007866 <TIM_OC5_SetConfig+0x7a>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <TIM_OC5_SetConfig+0xbc>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d007      	beq.n	8007866 <TIM_OC5_SetConfig+0x7a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a14      	ldr	r2, [pc, #80]	; (80078ac <TIM_OC5_SetConfig+0xc0>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d003      	beq.n	8007866 <TIM_OC5_SetConfig+0x7a>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a13      	ldr	r2, [pc, #76]	; (80078b0 <TIM_OC5_SetConfig+0xc4>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d109      	bne.n	800787a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800786c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	021b      	lsls	r3, r3, #8
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	621a      	str	r2, [r3, #32]
}
 8007894:	bf00      	nop
 8007896:	371c      	adds	r7, #28
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	40012c00 	.word	0x40012c00
 80078a4:	40013400 	.word	0x40013400
 80078a8:	40014000 	.word	0x40014000
 80078ac:	40014400 	.word	0x40014400
 80078b0:	40014800 	.word	0x40014800

080078b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b087      	sub	sp, #28
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	051b      	lsls	r3, r3, #20
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	4313      	orrs	r3, r2
 8007906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a18      	ldr	r2, [pc, #96]	; (800796c <TIM_OC6_SetConfig+0xb8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d00f      	beq.n	8007930 <TIM_OC6_SetConfig+0x7c>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a17      	ldr	r2, [pc, #92]	; (8007970 <TIM_OC6_SetConfig+0xbc>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d00b      	beq.n	8007930 <TIM_OC6_SetConfig+0x7c>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a16      	ldr	r2, [pc, #88]	; (8007974 <TIM_OC6_SetConfig+0xc0>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d007      	beq.n	8007930 <TIM_OC6_SetConfig+0x7c>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a15      	ldr	r2, [pc, #84]	; (8007978 <TIM_OC6_SetConfig+0xc4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d003      	beq.n	8007930 <TIM_OC6_SetConfig+0x7c>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a14      	ldr	r2, [pc, #80]	; (800797c <TIM_OC6_SetConfig+0xc8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d109      	bne.n	8007944 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007936:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	029b      	lsls	r3, r3, #10
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	621a      	str	r2, [r3, #32]
}
 800795e:	bf00      	nop
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	40012c00 	.word	0x40012c00
 8007970:	40013400 	.word	0x40013400
 8007974:	40014000 	.word	0x40014000
 8007978:	40014400 	.word	0x40014400
 800797c:	40014800 	.word	0x40014800

08007980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	f023 0201 	bic.w	r2, r3, #1
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f023 030a 	bic.w	r3, r3, #10
 80079bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	621a      	str	r2, [r3, #32]
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079de:	b480      	push	{r7}
 80079e0:	b087      	sub	sp, #28
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	60b9      	str	r1, [r7, #8]
 80079e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f023 0210 	bic.w	r2, r3, #16
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	031b      	lsls	r3, r3, #12
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	621a      	str	r2, [r3, #32]
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr

08007a3e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a3e:	b480      	push	{r7}
 8007a40:	b085      	sub	sp, #20
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	f043 0307 	orr.w	r3, r3, #7
 8007a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	609a      	str	r2, [r3, #8]
}
 8007a6c:	bf00      	nop
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	021a      	lsls	r2, r3, #8
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	609a      	str	r2, [r3, #8]
}
 8007aac:	bf00      	nop
 8007aae:	371c      	adds	r7, #28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f003 031f 	and.w	r3, r3, #31
 8007aca:	2201      	movs	r2, #1
 8007acc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6a1a      	ldr	r2, [r3, #32]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	43db      	mvns	r3, r3
 8007ada:	401a      	ands	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a1a      	ldr	r2, [r3, #32]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f003 031f 	and.w	r3, r3, #31
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	fa01 f303 	lsl.w	r3, r1, r3
 8007af0:	431a      	orrs	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	621a      	str	r2, [r3, #32]
}
 8007af6:	bf00      	nop
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
	...

08007b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d101      	bne.n	8007b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e065      	b.n	8007be8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a2c      	ldr	r2, [pc, #176]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a2b      	ldr	r2, [pc, #172]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d108      	bne.n	8007b62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a1b      	ldr	r2, [pc, #108]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d018      	beq.n	8007bbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b92:	d013      	beq.n	8007bbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a18      	ldr	r2, [pc, #96]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d00e      	beq.n	8007bbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a17      	ldr	r2, [pc, #92]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d009      	beq.n	8007bbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a12      	ldr	r2, [pc, #72]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d004      	beq.n	8007bbc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a13      	ldr	r2, [pc, #76]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d10c      	bne.n	8007bd6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	40012c00 	.word	0x40012c00
 8007bf8:	40013400 	.word	0x40013400
 8007bfc:	40000400 	.word	0x40000400
 8007c00:	40000800 	.word	0x40000800
 8007c04:	40014000 	.word	0x40014000

08007c08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d101      	bne.n	8007c24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c20:	2302      	movs	r3, #2
 8007c22:	e087      	b.n	8007d34 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	041b      	lsls	r3, r3, #16
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a27      	ldr	r2, [pc, #156]	; (8007d40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d004      	beq.n	8007cb2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a25      	ldr	r2, [pc, #148]	; (8007d44 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d106      	bne.n	8007cc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	69db      	ldr	r3, [r3, #28]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a1e      	ldr	r2, [pc, #120]	; (8007d40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d004      	beq.n	8007cd4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a1d      	ldr	r2, [pc, #116]	; (8007d44 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d126      	bne.n	8007d22 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cde:	051b      	lsls	r3, r3, #20
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a0e      	ldr	r2, [pc, #56]	; (8007d40 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d004      	beq.n	8007d14 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a0d      	ldr	r2, [pc, #52]	; (8007d44 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d106      	bne.n	8007d22 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	40012c00 	.word	0x40012c00
 8007d44:	40013400 	.word	0x40013400

08007d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d101      	bne.n	8007d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e042      	b.n	8007de0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d106      	bne.n	8007d72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7fb f88d 	bl	8002e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2224      	movs	r2, #36	; 0x24
 8007d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0201 	bic.w	r2, r2, #1
 8007d88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fb12 	bl	80083b4 <UART_SetConfig>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d101      	bne.n	8007d9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e022      	b.n	8007de0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fdae 	bl	8008904 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689a      	ldr	r2, [r3, #8]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f042 0201 	orr.w	r2, r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 fe35 	bl	8008a48 <UART_CheckIdleState>
 8007dde:	4603      	mov	r3, r0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	4613      	mov	r3, r2
 8007df4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d168      	bne.n	8007ed2 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <HAL_UART_Transmit_IT+0x24>
 8007e06:	88fb      	ldrh	r3, [r7, #6]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e061      	b.n	8007ed4 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_UART_Transmit_IT+0x36>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e05a      	b.n	8007ed4 <HAL_UART_Transmit_IT+0xec>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	88fa      	ldrh	r2, [r7, #6]
 8007e30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	88fa      	ldrh	r2, [r7, #6]
 8007e38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2221      	movs	r2, #33	; 0x21
 8007e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e5a:	d11c      	bne.n	8007e96 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e64:	d107      	bne.n	8007e76 <HAL_UART_Transmit_IT+0x8e>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d103      	bne.n	8007e76 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	4a1b      	ldr	r2, [pc, #108]	; (8007ee0 <HAL_UART_Transmit_IT+0xf8>)
 8007e72:	671a      	str	r2, [r3, #112]	; 0x70
 8007e74:	e002      	b.n	8007e7c <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4a1a      	ldr	r2, [pc, #104]	; (8007ee4 <HAL_UART_Transmit_IT+0xfc>)
 8007e7a:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007e92:	609a      	str	r2, [r3, #8]
 8007e94:	e01b      	b.n	8007ece <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e9e:	d107      	bne.n	8007eb0 <HAL_UART_Transmit_IT+0xc8>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d103      	bne.n	8007eb0 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4a0f      	ldr	r2, [pc, #60]	; (8007ee8 <HAL_UART_Transmit_IT+0x100>)
 8007eac:	671a      	str	r2, [r3, #112]	; 0x70
 8007eae:	e002      	b.n	8007eb6 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4a0e      	ldr	r2, [pc, #56]	; (8007eec <HAL_UART_Transmit_IT+0x104>)
 8007eb4:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007ecc:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	e000      	b.n	8007ed4 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 8007ed2:	2302      	movs	r3, #2
  }
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	08008dd7 	.word	0x08008dd7
 8007ee4:	08008d3d 	.word	0x08008d3d
 8007ee8:	08008cbf 	.word	0x08008cbf
 8007eec:	08008c4b 	.word	0x08008c4b

08007ef0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	4613      	mov	r3, r2
 8007efc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	f040 80bc 	bne.w	8008082 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <HAL_UART_Receive_IT+0x26>
 8007f10:	88fb      	ldrh	r3, [r7, #6]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e0b4      	b.n	8008084 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d101      	bne.n	8007f28 <HAL_UART_Receive_IT+0x38>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e0ad      	b.n	8008084 <HAL_UART_Receive_IT+0x194>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	88fa      	ldrh	r2, [r7, #6]
 8007f3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	88fa      	ldrh	r2, [r7, #6]
 8007f42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f54:	d10e      	bne.n	8007f74 <HAL_UART_Receive_IT+0x84>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d105      	bne.n	8007f6a <HAL_UART_Receive_IT+0x7a>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007f64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f68:	e02d      	b.n	8007fc6 <HAL_UART_Receive_IT+0xd6>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	22ff      	movs	r2, #255	; 0xff
 8007f6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f72:	e028      	b.n	8007fc6 <HAL_UART_Receive_IT+0xd6>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10d      	bne.n	8007f98 <HAL_UART_Receive_IT+0xa8>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d104      	bne.n	8007f8e <HAL_UART_Receive_IT+0x9e>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	22ff      	movs	r2, #255	; 0xff
 8007f88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f8c:	e01b      	b.n	8007fc6 <HAL_UART_Receive_IT+0xd6>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	227f      	movs	r2, #127	; 0x7f
 8007f92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007f96:	e016      	b.n	8007fc6 <HAL_UART_Receive_IT+0xd6>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fa0:	d10d      	bne.n	8007fbe <HAL_UART_Receive_IT+0xce>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d104      	bne.n	8007fb4 <HAL_UART_Receive_IT+0xc4>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	227f      	movs	r2, #127	; 0x7f
 8007fae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fb2:	e008      	b.n	8007fc6 <HAL_UART_Receive_IT+0xd6>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	223f      	movs	r2, #63	; 0x3f
 8007fb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007fbc:	e003      	b.n	8007fc6 <HAL_UART_Receive_IT+0xd6>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2222      	movs	r2, #34	; 0x22
 8007fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0201 	orr.w	r2, r2, #1
 8007fe4:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fee:	d12a      	bne.n	8008046 <HAL_UART_Receive_IT+0x156>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ff6:	88fa      	ldrh	r2, [r7, #6]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d324      	bcc.n	8008046 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008004:	d107      	bne.n	8008016 <HAL_UART_Receive_IT+0x126>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d103      	bne.n	8008016 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <HAL_UART_Receive_IT+0x1a0>)
 8008012:	66da      	str	r2, [r3, #108]	; 0x6c
 8008014:	e002      	b.n	800801c <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4a1e      	ldr	r2, [pc, #120]	; (8008094 <HAL_UART_Receive_IT+0x1a4>)
 800801a:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008032:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689a      	ldr	r2, [r3, #8]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008042:	609a      	str	r2, [r3, #8]
 8008044:	e01b      	b.n	800807e <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800804e:	d107      	bne.n	8008060 <HAL_UART_Receive_IT+0x170>
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d103      	bne.n	8008060 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4a0f      	ldr	r2, [pc, #60]	; (8008098 <HAL_UART_Receive_IT+0x1a8>)
 800805c:	66da      	str	r2, [r3, #108]	; 0x6c
 800805e:	e002      	b.n	8008066 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4a0e      	ldr	r2, [pc, #56]	; (800809c <HAL_UART_Receive_IT+0x1ac>)
 8008064:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800807c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	e000      	b.n	8008084 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8008082:	2302      	movs	r3, #2
  }
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	0800910d 	.word	0x0800910d
 8008094:	08009005 	.word	0x08009005
 8008098:	08008f59 	.word	0x08008f59
 800809c:	08008eaf 	.word	0x08008eaf

080080a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080c0:	69fa      	ldr	r2, [r7, #28]
 80080c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80080c6:	4013      	ands	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d118      	bne.n	8008102 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f003 0320 	and.w	r3, r3, #32
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d013      	beq.n	8008102 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d104      	bne.n	80080ee <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d009      	beq.n	8008102 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 8145 	beq.w	8008382 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	4798      	blx	r3
      }
      return;
 8008100:	e13f      	b.n	8008382 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 80e8 	beq.w	80082da <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4ba1      	ldr	r3, [pc, #644]	; (8008394 <HAL_UART_IRQHandler+0x2f4>)
 800810e:	4013      	ands	r3, r2
 8008110:	2b00      	cmp	r3, #0
 8008112:	d105      	bne.n	8008120 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	4ba0      	ldr	r3, [pc, #640]	; (8008398 <HAL_UART_IRQHandler+0x2f8>)
 8008118:	4013      	ands	r3, r2
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 80dd 	beq.w	80082da <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	f003 0301 	and.w	r3, r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	d010      	beq.n	800814c <HAL_UART_IRQHandler+0xac>
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2201      	movs	r2, #1
 800813a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008142:	f043 0201 	orr.w	r2, r3, #1
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d010      	beq.n	8008178 <HAL_UART_IRQHandler+0xd8>
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00b      	beq.n	8008178 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2202      	movs	r2, #2
 8008166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800816e:	f043 0204 	orr.w	r2, r3, #4
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	f003 0304 	and.w	r3, r3, #4
 800817e:	2b00      	cmp	r3, #0
 8008180:	d010      	beq.n	80081a4 <HAL_UART_IRQHandler+0x104>
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f003 0301 	and.w	r3, r3, #1
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00b      	beq.n	80081a4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2204      	movs	r2, #4
 8008192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800819a:	f043 0202 	orr.w	r2, r3, #2
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d015      	beq.n	80081da <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	f003 0320 	and.w	r3, r3, #32
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d104      	bne.n	80081c2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	4b76      	ldr	r3, [pc, #472]	; (8008394 <HAL_UART_IRQHandler+0x2f4>)
 80081bc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2208      	movs	r2, #8
 80081c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d0:	f043 0208 	orr.w	r2, r3, #8
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d011      	beq.n	8008208 <HAL_UART_IRQHandler+0x168>
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00c      	beq.n	8008208 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081fe:	f043 0220 	orr.w	r2, r3, #32
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 80b9 	beq.w	8008386 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	f003 0320 	and.w	r3, r3, #32
 800821a:	2b00      	cmp	r3, #0
 800821c:	d011      	beq.n	8008242 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	f003 0320 	and.w	r3, r3, #32
 8008224:	2b00      	cmp	r3, #0
 8008226:	d104      	bne.n	8008232 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d007      	beq.n	8008242 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008248:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008254:	2b40      	cmp	r3, #64	; 0x40
 8008256:	d004      	beq.n	8008262 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800825e:	2b00      	cmp	r3, #0
 8008260:	d031      	beq.n	80082c6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fcb8 	bl	8008bd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008272:	2b40      	cmp	r3, #64	; 0x40
 8008274:	d123      	bne.n	80082be <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008284:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800828a:	2b00      	cmp	r3, #0
 800828c:	d013      	beq.n	80082b6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008292:	4a42      	ldr	r2, [pc, #264]	; (800839c <HAL_UART_IRQHandler+0x2fc>)
 8008294:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800829a:	4618      	mov	r0, r3
 800829c:	f7fc fbf6 	bl	8004a8c <HAL_DMA_Abort_IT>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d017      	beq.n	80082d6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80082b0:	4610      	mov	r0, r2
 80082b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b4:	e00f      	b.n	80082d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f872 	bl	80083a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082bc:	e00b      	b.n	80082d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f86e 	bl	80083a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c4:	e007      	b.n	80082d6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f86a 	bl	80083a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80082d4:	e057      	b.n	8008386 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d6:	bf00      	nop
    return;
 80082d8:	e055      	b.n	8008386 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00d      	beq.n	8008300 <HAL_UART_IRQHandler+0x260>
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d008      	beq.n	8008300 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80082f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 ff8b 	bl	8009214 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082fe:	e045      	b.n	800838c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008306:	2b00      	cmp	r3, #0
 8008308:	d012      	beq.n	8008330 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008310:	2b00      	cmp	r3, #0
 8008312:	d104      	bne.n	800831e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d008      	beq.n	8008330 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008322:	2b00      	cmp	r3, #0
 8008324:	d031      	beq.n	800838a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
    }
    return;
 800832e:	e02c      	b.n	800838a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	d008      	beq.n	800834c <HAL_UART_IRQHandler+0x2ac>
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fd98 	bl	8008e7a <UART_EndTransmit_IT>
    return;
 800834a:	e01f      	b.n	800838c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d008      	beq.n	8008368 <HAL_UART_IRQHandler+0x2c8>
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 ff6b 	bl	800923c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008366:	e011      	b.n	800838c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00c      	beq.n	800838c <HAL_UART_IRQHandler+0x2ec>
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	2b00      	cmp	r3, #0
 8008376:	da09      	bge.n	800838c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 ff55 	bl	8009228 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800837e:	bf00      	nop
 8008380:	e004      	b.n	800838c <HAL_UART_IRQHandler+0x2ec>
      return;
 8008382:	bf00      	nop
 8008384:	e002      	b.n	800838c <HAL_UART_IRQHandler+0x2ec>
    return;
 8008386:	bf00      	nop
 8008388:	e000      	b.n	800838c <HAL_UART_IRQHandler+0x2ec>
    return;
 800838a:	bf00      	nop
  }
}
 800838c:	3720      	adds	r7, #32
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	10000001 	.word	0x10000001
 8008398:	04000120 	.word	0x04000120
 800839c:	08008c1f 	.word	0x08008c1f

080083a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083b4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80083b8:	b088      	sub	sp, #32
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	431a      	orrs	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	431a      	orrs	r2, r3
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	69db      	ldr	r3, [r3, #28]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083de:	69fa      	ldr	r2, [r7, #28]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	4bb0      	ldr	r3, [pc, #704]	; (80086ac <UART_SetConfig+0x2f8>)
 80083ec:	4013      	ands	r3, r2
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	6812      	ldr	r2, [r2, #0]
 80083f2:	69f9      	ldr	r1, [r7, #28]
 80083f4:	430b      	orrs	r3, r1
 80083f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	430a      	orrs	r2, r1
 800840c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4aa5      	ldr	r2, [pc, #660]	; (80086b0 <UART_SetConfig+0x2fc>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d004      	beq.n	8008428 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	69fa      	ldr	r2, [r7, #28]
 8008424:	4313      	orrs	r3, r2
 8008426:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008432:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	6812      	ldr	r2, [r2, #0]
 800843a:	69f9      	ldr	r1, [r7, #28]
 800843c:	430b      	orrs	r3, r1
 800843e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008446:	f023 010f 	bic.w	r1, r3, #15
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a96      	ldr	r2, [pc, #600]	; (80086b4 <UART_SetConfig+0x300>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d121      	bne.n	80084a4 <UART_SetConfig+0xf0>
 8008460:	4b95      	ldr	r3, [pc, #596]	; (80086b8 <UART_SetConfig+0x304>)
 8008462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008466:	f003 0303 	and.w	r3, r3, #3
 800846a:	2b03      	cmp	r3, #3
 800846c:	d816      	bhi.n	800849c <UART_SetConfig+0xe8>
 800846e:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <UART_SetConfig+0xc0>)
 8008470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008474:	08008485 	.word	0x08008485
 8008478:	08008491 	.word	0x08008491
 800847c:	0800848b 	.word	0x0800848b
 8008480:	08008497 	.word	0x08008497
 8008484:	2301      	movs	r3, #1
 8008486:	76fb      	strb	r3, [r7, #27]
 8008488:	e0be      	b.n	8008608 <UART_SetConfig+0x254>
 800848a:	2302      	movs	r3, #2
 800848c:	76fb      	strb	r3, [r7, #27]
 800848e:	e0bb      	b.n	8008608 <UART_SetConfig+0x254>
 8008490:	2304      	movs	r3, #4
 8008492:	76fb      	strb	r3, [r7, #27]
 8008494:	e0b8      	b.n	8008608 <UART_SetConfig+0x254>
 8008496:	2308      	movs	r3, #8
 8008498:	76fb      	strb	r3, [r7, #27]
 800849a:	e0b5      	b.n	8008608 <UART_SetConfig+0x254>
 800849c:	2310      	movs	r3, #16
 800849e:	76fb      	strb	r3, [r7, #27]
 80084a0:	bf00      	nop
 80084a2:	e0b1      	b.n	8008608 <UART_SetConfig+0x254>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a84      	ldr	r2, [pc, #528]	; (80086bc <UART_SetConfig+0x308>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d134      	bne.n	8008518 <UART_SetConfig+0x164>
 80084ae:	4b82      	ldr	r3, [pc, #520]	; (80086b8 <UART_SetConfig+0x304>)
 80084b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b4:	f003 030c 	and.w	r3, r3, #12
 80084b8:	2b0c      	cmp	r3, #12
 80084ba:	d829      	bhi.n	8008510 <UART_SetConfig+0x15c>
 80084bc:	a201      	add	r2, pc, #4	; (adr r2, 80084c4 <UART_SetConfig+0x110>)
 80084be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c2:	bf00      	nop
 80084c4:	080084f9 	.word	0x080084f9
 80084c8:	08008511 	.word	0x08008511
 80084cc:	08008511 	.word	0x08008511
 80084d0:	08008511 	.word	0x08008511
 80084d4:	08008505 	.word	0x08008505
 80084d8:	08008511 	.word	0x08008511
 80084dc:	08008511 	.word	0x08008511
 80084e0:	08008511 	.word	0x08008511
 80084e4:	080084ff 	.word	0x080084ff
 80084e8:	08008511 	.word	0x08008511
 80084ec:	08008511 	.word	0x08008511
 80084f0:	08008511 	.word	0x08008511
 80084f4:	0800850b 	.word	0x0800850b
 80084f8:	2300      	movs	r3, #0
 80084fa:	76fb      	strb	r3, [r7, #27]
 80084fc:	e084      	b.n	8008608 <UART_SetConfig+0x254>
 80084fe:	2302      	movs	r3, #2
 8008500:	76fb      	strb	r3, [r7, #27]
 8008502:	e081      	b.n	8008608 <UART_SetConfig+0x254>
 8008504:	2304      	movs	r3, #4
 8008506:	76fb      	strb	r3, [r7, #27]
 8008508:	e07e      	b.n	8008608 <UART_SetConfig+0x254>
 800850a:	2308      	movs	r3, #8
 800850c:	76fb      	strb	r3, [r7, #27]
 800850e:	e07b      	b.n	8008608 <UART_SetConfig+0x254>
 8008510:	2310      	movs	r3, #16
 8008512:	76fb      	strb	r3, [r7, #27]
 8008514:	bf00      	nop
 8008516:	e077      	b.n	8008608 <UART_SetConfig+0x254>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a68      	ldr	r2, [pc, #416]	; (80086c0 <UART_SetConfig+0x30c>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d120      	bne.n	8008564 <UART_SetConfig+0x1b0>
 8008522:	4b65      	ldr	r3, [pc, #404]	; (80086b8 <UART_SetConfig+0x304>)
 8008524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008528:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800852c:	2b10      	cmp	r3, #16
 800852e:	d00f      	beq.n	8008550 <UART_SetConfig+0x19c>
 8008530:	2b10      	cmp	r3, #16
 8008532:	d802      	bhi.n	800853a <UART_SetConfig+0x186>
 8008534:	2b00      	cmp	r3, #0
 8008536:	d005      	beq.n	8008544 <UART_SetConfig+0x190>
 8008538:	e010      	b.n	800855c <UART_SetConfig+0x1a8>
 800853a:	2b20      	cmp	r3, #32
 800853c:	d005      	beq.n	800854a <UART_SetConfig+0x196>
 800853e:	2b30      	cmp	r3, #48	; 0x30
 8008540:	d009      	beq.n	8008556 <UART_SetConfig+0x1a2>
 8008542:	e00b      	b.n	800855c <UART_SetConfig+0x1a8>
 8008544:	2300      	movs	r3, #0
 8008546:	76fb      	strb	r3, [r7, #27]
 8008548:	e05e      	b.n	8008608 <UART_SetConfig+0x254>
 800854a:	2302      	movs	r3, #2
 800854c:	76fb      	strb	r3, [r7, #27]
 800854e:	e05b      	b.n	8008608 <UART_SetConfig+0x254>
 8008550:	2304      	movs	r3, #4
 8008552:	76fb      	strb	r3, [r7, #27]
 8008554:	e058      	b.n	8008608 <UART_SetConfig+0x254>
 8008556:	2308      	movs	r3, #8
 8008558:	76fb      	strb	r3, [r7, #27]
 800855a:	e055      	b.n	8008608 <UART_SetConfig+0x254>
 800855c:	2310      	movs	r3, #16
 800855e:	76fb      	strb	r3, [r7, #27]
 8008560:	bf00      	nop
 8008562:	e051      	b.n	8008608 <UART_SetConfig+0x254>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a56      	ldr	r2, [pc, #344]	; (80086c4 <UART_SetConfig+0x310>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d120      	bne.n	80085b0 <UART_SetConfig+0x1fc>
 800856e:	4b52      	ldr	r3, [pc, #328]	; (80086b8 <UART_SetConfig+0x304>)
 8008570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008574:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008578:	2b40      	cmp	r3, #64	; 0x40
 800857a:	d00f      	beq.n	800859c <UART_SetConfig+0x1e8>
 800857c:	2b40      	cmp	r3, #64	; 0x40
 800857e:	d802      	bhi.n	8008586 <UART_SetConfig+0x1d2>
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <UART_SetConfig+0x1dc>
 8008584:	e010      	b.n	80085a8 <UART_SetConfig+0x1f4>
 8008586:	2b80      	cmp	r3, #128	; 0x80
 8008588:	d005      	beq.n	8008596 <UART_SetConfig+0x1e2>
 800858a:	2bc0      	cmp	r3, #192	; 0xc0
 800858c:	d009      	beq.n	80085a2 <UART_SetConfig+0x1ee>
 800858e:	e00b      	b.n	80085a8 <UART_SetConfig+0x1f4>
 8008590:	2300      	movs	r3, #0
 8008592:	76fb      	strb	r3, [r7, #27]
 8008594:	e038      	b.n	8008608 <UART_SetConfig+0x254>
 8008596:	2302      	movs	r3, #2
 8008598:	76fb      	strb	r3, [r7, #27]
 800859a:	e035      	b.n	8008608 <UART_SetConfig+0x254>
 800859c:	2304      	movs	r3, #4
 800859e:	76fb      	strb	r3, [r7, #27]
 80085a0:	e032      	b.n	8008608 <UART_SetConfig+0x254>
 80085a2:	2308      	movs	r3, #8
 80085a4:	76fb      	strb	r3, [r7, #27]
 80085a6:	e02f      	b.n	8008608 <UART_SetConfig+0x254>
 80085a8:	2310      	movs	r3, #16
 80085aa:	76fb      	strb	r3, [r7, #27]
 80085ac:	bf00      	nop
 80085ae:	e02b      	b.n	8008608 <UART_SetConfig+0x254>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a3e      	ldr	r2, [pc, #248]	; (80086b0 <UART_SetConfig+0x2fc>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d124      	bne.n	8008604 <UART_SetConfig+0x250>
 80085ba:	4b3f      	ldr	r3, [pc, #252]	; (80086b8 <UART_SetConfig+0x304>)
 80085bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80085c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085c8:	d012      	beq.n	80085f0 <UART_SetConfig+0x23c>
 80085ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ce:	d802      	bhi.n	80085d6 <UART_SetConfig+0x222>
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d007      	beq.n	80085e4 <UART_SetConfig+0x230>
 80085d4:	e012      	b.n	80085fc <UART_SetConfig+0x248>
 80085d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085da:	d006      	beq.n	80085ea <UART_SetConfig+0x236>
 80085dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085e0:	d009      	beq.n	80085f6 <UART_SetConfig+0x242>
 80085e2:	e00b      	b.n	80085fc <UART_SetConfig+0x248>
 80085e4:	2300      	movs	r3, #0
 80085e6:	76fb      	strb	r3, [r7, #27]
 80085e8:	e00e      	b.n	8008608 <UART_SetConfig+0x254>
 80085ea:	2302      	movs	r3, #2
 80085ec:	76fb      	strb	r3, [r7, #27]
 80085ee:	e00b      	b.n	8008608 <UART_SetConfig+0x254>
 80085f0:	2304      	movs	r3, #4
 80085f2:	76fb      	strb	r3, [r7, #27]
 80085f4:	e008      	b.n	8008608 <UART_SetConfig+0x254>
 80085f6:	2308      	movs	r3, #8
 80085f8:	76fb      	strb	r3, [r7, #27]
 80085fa:	e005      	b.n	8008608 <UART_SetConfig+0x254>
 80085fc:	2310      	movs	r3, #16
 80085fe:	76fb      	strb	r3, [r7, #27]
 8008600:	bf00      	nop
 8008602:	e001      	b.n	8008608 <UART_SetConfig+0x254>
 8008604:	2310      	movs	r3, #16
 8008606:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a28      	ldr	r2, [pc, #160]	; (80086b0 <UART_SetConfig+0x2fc>)
 800860e:	4293      	cmp	r3, r2
 8008610:	f040 80a1 	bne.w	8008756 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008614:	7efb      	ldrb	r3, [r7, #27]
 8008616:	2b08      	cmp	r3, #8
 8008618:	d823      	bhi.n	8008662 <UART_SetConfig+0x2ae>
 800861a:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <UART_SetConfig+0x26c>)
 800861c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008620:	08008645 	.word	0x08008645
 8008624:	08008663 	.word	0x08008663
 8008628:	0800864d 	.word	0x0800864d
 800862c:	08008663 	.word	0x08008663
 8008630:	08008653 	.word	0x08008653
 8008634:	08008663 	.word	0x08008663
 8008638:	08008663 	.word	0x08008663
 800863c:	08008663 	.word	0x08008663
 8008640:	0800865b 	.word	0x0800865b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008644:	f7fd ffb6 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 8008648:	6178      	str	r0, [r7, #20]
        break;
 800864a:	e00f      	b.n	800866c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800864c:	4b1e      	ldr	r3, [pc, #120]	; (80086c8 <UART_SetConfig+0x314>)
 800864e:	617b      	str	r3, [r7, #20]
        break;
 8008650:	e00c      	b.n	800866c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008652:	f7fd ff41 	bl	80064d8 <HAL_RCC_GetSysClockFreq>
 8008656:	6178      	str	r0, [r7, #20]
        break;
 8008658:	e008      	b.n	800866c <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800865a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800865e:	617b      	str	r3, [r7, #20]
        break;
 8008660:	e004      	b.n	800866c <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	76bb      	strb	r3, [r7, #26]
        break;
 800866a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 8130 	beq.w	80088d4 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	4a14      	ldr	r2, [pc, #80]	; (80086cc <UART_SetConfig+0x318>)
 800867a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800867e:	461a      	mov	r2, r3
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	fbb3 f3f2 	udiv	r3, r3, r2
 8008686:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	4613      	mov	r3, r2
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	4413      	add	r3, r2
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	429a      	cmp	r2, r3
 8008696:	d305      	bcc.n	80086a4 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d915      	bls.n	80086d0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	76bb      	strb	r3, [r7, #26]
 80086a8:	e114      	b.n	80088d4 <UART_SetConfig+0x520>
 80086aa:	bf00      	nop
 80086ac:	cfff69f3 	.word	0xcfff69f3
 80086b0:	40008000 	.word	0x40008000
 80086b4:	40013800 	.word	0x40013800
 80086b8:	40021000 	.word	0x40021000
 80086bc:	40004400 	.word	0x40004400
 80086c0:	40004800 	.word	0x40004800
 80086c4:	40004c00 	.word	0x40004c00
 80086c8:	00f42400 	.word	0x00f42400
 80086cc:	0800c14c 	.word	0x0800c14c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f04f 0100 	mov.w	r1, #0
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	4a87      	ldr	r2, [pc, #540]	; (80088fc <UART_SetConfig+0x548>)
 80086de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	f04f 0400 	mov.w	r4, #0
 80086e8:	461a      	mov	r2, r3
 80086ea:	4623      	mov	r3, r4
 80086ec:	f7f8 faf4 	bl	8000cd8 <__aeabi_uldivmod>
 80086f0:	4603      	mov	r3, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	4619      	mov	r1, r3
 80086f6:	4622      	mov	r2, r4
 80086f8:	f04f 0300 	mov.w	r3, #0
 80086fc:	f04f 0400 	mov.w	r4, #0
 8008700:	0214      	lsls	r4, r2, #8
 8008702:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008706:	020b      	lsls	r3, r1, #8
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	6852      	ldr	r2, [r2, #4]
 800870c:	0852      	lsrs	r2, r2, #1
 800870e:	4611      	mov	r1, r2
 8008710:	f04f 0200 	mov.w	r2, #0
 8008714:	eb13 0b01 	adds.w	fp, r3, r1
 8008718:	eb44 0c02 	adc.w	ip, r4, r2
 800871c:	4658      	mov	r0, fp
 800871e:	4661      	mov	r1, ip
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f04f 0400 	mov.w	r4, #0
 8008728:	461a      	mov	r2, r3
 800872a:	4623      	mov	r3, r4
 800872c:	f7f8 fad4 	bl	8000cd8 <__aeabi_uldivmod>
 8008730:	4603      	mov	r3, r0
 8008732:	460c      	mov	r4, r1
 8008734:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800873c:	d308      	bcc.n	8008750 <UART_SetConfig+0x39c>
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008744:	d204      	bcs.n	8008750 <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	60da      	str	r2, [r3, #12]
 800874e:	e0c1      	b.n	80088d4 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	76bb      	strb	r3, [r7, #26]
 8008754:	e0be      	b.n	80088d4 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800875e:	d164      	bne.n	800882a <UART_SetConfig+0x476>
  {
    switch (clocksource)
 8008760:	7efb      	ldrb	r3, [r7, #27]
 8008762:	2b08      	cmp	r3, #8
 8008764:	d827      	bhi.n	80087b6 <UART_SetConfig+0x402>
 8008766:	a201      	add	r2, pc, #4	; (adr r2, 800876c <UART_SetConfig+0x3b8>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	08008791 	.word	0x08008791
 8008770:	08008799 	.word	0x08008799
 8008774:	080087a1 	.word	0x080087a1
 8008778:	080087b7 	.word	0x080087b7
 800877c:	080087a7 	.word	0x080087a7
 8008780:	080087b7 	.word	0x080087b7
 8008784:	080087b7 	.word	0x080087b7
 8008788:	080087b7 	.word	0x080087b7
 800878c:	080087af 	.word	0x080087af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008790:	f7fd ff10 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 8008794:	6178      	str	r0, [r7, #20]
        break;
 8008796:	e013      	b.n	80087c0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008798:	f7fd ff22 	bl	80065e0 <HAL_RCC_GetPCLK2Freq>
 800879c:	6178      	str	r0, [r7, #20]
        break;
 800879e:	e00f      	b.n	80087c0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087a0:	4b57      	ldr	r3, [pc, #348]	; (8008900 <UART_SetConfig+0x54c>)
 80087a2:	617b      	str	r3, [r7, #20]
        break;
 80087a4:	e00c      	b.n	80087c0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087a6:	f7fd fe97 	bl	80064d8 <HAL_RCC_GetSysClockFreq>
 80087aa:	6178      	str	r0, [r7, #20]
        break;
 80087ac:	e008      	b.n	80087c0 <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087b2:	617b      	str	r3, [r7, #20]
        break;
 80087b4:	e004      	b.n	80087c0 <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	76bb      	strb	r3, [r7, #26]
        break;
 80087be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	f000 8086 	beq.w	80088d4 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	4a4b      	ldr	r2, [pc, #300]	; (80088fc <UART_SetConfig+0x548>)
 80087ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087d2:	461a      	mov	r2, r3
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80087da:	005a      	lsls	r2, r3, #1
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	085b      	lsrs	r3, r3, #1
 80087e2:	441a      	add	r2, r3
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	2b0f      	cmp	r3, #15
 80087f4:	d916      	bls.n	8008824 <UART_SetConfig+0x470>
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087fc:	d212      	bcs.n	8008824 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	b29b      	uxth	r3, r3
 8008802:	f023 030f 	bic.w	r3, r3, #15
 8008806:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	085b      	lsrs	r3, r3, #1
 800880c:	b29b      	uxth	r3, r3
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	b29a      	uxth	r2, r3
 8008814:	89fb      	ldrh	r3, [r7, #14]
 8008816:	4313      	orrs	r3, r2
 8008818:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	89fa      	ldrh	r2, [r7, #14]
 8008820:	60da      	str	r2, [r3, #12]
 8008822:	e057      	b.n	80088d4 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	76bb      	strb	r3, [r7, #26]
 8008828:	e054      	b.n	80088d4 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 800882a:	7efb      	ldrb	r3, [r7, #27]
 800882c:	2b08      	cmp	r3, #8
 800882e:	d828      	bhi.n	8008882 <UART_SetConfig+0x4ce>
 8008830:	a201      	add	r2, pc, #4	; (adr r2, 8008838 <UART_SetConfig+0x484>)
 8008832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008836:	bf00      	nop
 8008838:	0800885d 	.word	0x0800885d
 800883c:	08008865 	.word	0x08008865
 8008840:	0800886d 	.word	0x0800886d
 8008844:	08008883 	.word	0x08008883
 8008848:	08008873 	.word	0x08008873
 800884c:	08008883 	.word	0x08008883
 8008850:	08008883 	.word	0x08008883
 8008854:	08008883 	.word	0x08008883
 8008858:	0800887b 	.word	0x0800887b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800885c:	f7fd feaa 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 8008860:	6178      	str	r0, [r7, #20]
        break;
 8008862:	e013      	b.n	800888c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008864:	f7fd febc 	bl	80065e0 <HAL_RCC_GetPCLK2Freq>
 8008868:	6178      	str	r0, [r7, #20]
        break;
 800886a:	e00f      	b.n	800888c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800886c:	4b24      	ldr	r3, [pc, #144]	; (8008900 <UART_SetConfig+0x54c>)
 800886e:	617b      	str	r3, [r7, #20]
        break;
 8008870:	e00c      	b.n	800888c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008872:	f7fd fe31 	bl	80064d8 <HAL_RCC_GetSysClockFreq>
 8008876:	6178      	str	r0, [r7, #20]
        break;
 8008878:	e008      	b.n	800888c <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800887a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800887e:	617b      	str	r3, [r7, #20]
        break;
 8008880:	e004      	b.n	800888c <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	76bb      	strb	r3, [r7, #26]
        break;
 800888a:	bf00      	nop
    }

    if (pclk != 0U)
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d020      	beq.n	80088d4 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008896:	4a19      	ldr	r2, [pc, #100]	; (80088fc <UART_SetConfig+0x548>)
 8008898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800889c:	461a      	mov	r2, r3
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	085b      	lsrs	r3, r3, #1
 80088aa:	441a      	add	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b0f      	cmp	r3, #15
 80088bc:	d908      	bls.n	80088d0 <UART_SetConfig+0x51c>
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088c4:	d204      	bcs.n	80088d0 <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	60da      	str	r2, [r3, #12]
 80088ce:	e001      	b.n	80088d4 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80088f0:	7ebb      	ldrb	r3, [r7, #26]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3720      	adds	r7, #32
 80088f6:	46bd      	mov	sp, r7
 80088f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80088fc:	0800c14c 	.word	0x0800c14c
 8008900:	00f42400 	.word	0x00f42400

08008904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00a      	beq.n	800892e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008976:	f003 0308 	and.w	r3, r3, #8
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	430a      	orrs	r2, r1
 8008992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008998:	f003 0310 	and.w	r3, r3, #16
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00a      	beq.n	80089b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	430a      	orrs	r2, r1
 80089d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d01a      	beq.n	8008a1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a02:	d10a      	bne.n	8008a1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	605a      	str	r2, [r3, #4]
  }
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af02      	add	r7, sp, #8
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a58:	f7fa fbd4 	bl	8003204 <HAL_GetTick>
 8008a5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0308 	and.w	r3, r3, #8
 8008a68:	2b08      	cmp	r3, #8
 8008a6a:	d10e      	bne.n	8008a8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f82c 	bl	8008ad8 <UART_WaitOnFlagUntilTimeout>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e022      	b.n	8008ad0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d10e      	bne.n	8008ab6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f816 	bl	8008ad8 <UART_WaitOnFlagUntilTimeout>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e00c      	b.n	8008ad0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	603b      	str	r3, [r7, #0]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ae8:	e062      	b.n	8008bb0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af0:	d05e      	beq.n	8008bb0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008af2:	f7fa fb87 	bl	8003204 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d302      	bcc.n	8008b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d11d      	bne.n	8008b44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b16:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689a      	ldr	r2, [r3, #8]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f022 0201 	bic.w	r2, r2, #1
 8008b26:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e045      	b.n	8008bd0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0304 	and.w	r3, r3, #4
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d02e      	beq.n	8008bb0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	69db      	ldr	r3, [r3, #28]
 8008b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b60:	d126      	bne.n	8008bb0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b6a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b7a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f022 0201 	bic.w	r2, r2, #1
 8008b8a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e00f      	b.n	8008bd0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	69da      	ldr	r2, [r3, #28]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	bf0c      	ite	eq
 8008bc0:	2301      	moveq	r3, #1
 8008bc2:	2300      	movne	r3, #0
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d08d      	beq.n	8008aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	6812      	ldr	r2, [r2, #0]
 8008bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bfe:	f023 0301 	bic.w	r3, r3, #1
 8008c02:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008c12:	bf00      	nop
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f7ff fbaf 	bl	80083a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c42:	bf00      	nop
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c58:	2b21      	cmp	r3, #33	; 0x21
 8008c5a:	d12a      	bne.n	8008cb2 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d110      	bne.n	8008c8a <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c76:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c86:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008c88:	e013      	b.n	8008cb2 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c8e:	781a      	ldrb	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008cb2:	bf00      	nop
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b085      	sub	sp, #20
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ccc:	2b21      	cmp	r3, #33	; 0x21
 8008cce:	d12f      	bne.n	8008d30 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d110      	bne.n	8008cfe <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cea:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cfa:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008cfc:	e018      	b.n	8008d30 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d02:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d12:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d18:	1c9a      	adds	r2, r3, #2
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008d30:	bf00      	nop
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d4a:	2b21      	cmp	r3, #33	; 0x21
 8008d4c:	d13d      	bne.n	8008dca <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d54:	81fb      	strh	r3, [r7, #14]
 8008d56:	e035      	b.n	8008dc4 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d111      	bne.n	8008d88 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689a      	ldr	r2, [r3, #8]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008d72:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d82:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8008d84:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8008d86:	e020      	b.n	8008dca <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d013      	beq.n	8008dbe <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d9a:	781a      	ldrb	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	3b01      	subs	r3, #1
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008dbe:	89fb      	ldrh	r3, [r7, #14]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	81fb      	strh	r3, [r7, #14]
 8008dc4:	89fb      	ldrh	r3, [r7, #14]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1c6      	bne.n	8008d58 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8008dca:	bf00      	nop
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b085      	sub	sp, #20
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008de4:	2b21      	cmp	r3, #33	; 0x21
 8008de6:	d142      	bne.n	8008e6e <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008dee:	81fb      	strh	r3, [r7, #14]
 8008df0:	e03a      	b.n	8008e68 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d111      	bne.n	8008e22 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008e0c:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e1c:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8008e1e:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8008e20:	e025      	b.n	8008e6e <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d018      	beq.n	8008e62 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e34:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e44:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e4a:	1c9a      	adds	r2, r3, #2
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008e62:	89fb      	ldrh	r3, [r7, #14]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	81fb      	strh	r3, [r7, #14]
 8008e68:	89fb      	ldrh	r3, [r7, #14]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1c1      	bne.n	8008df2 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8008e6e:	bf00      	nop
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e90:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2220      	movs	r2, #32
 8008e96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7f8 fc9d 	bl	80017e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ea6:	bf00      	nop
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ebc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ec4:	2b22      	cmp	r3, #34	; 0x22
 8008ec6:	d13b      	bne.n	8008f40 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ed0:	89bb      	ldrh	r3, [r7, #12]
 8008ed2:	b2d9      	uxtb	r1, r3
 8008ed4:	89fb      	ldrh	r3, [r7, #14]
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008edc:	400a      	ands	r2, r1
 8008ede:	b2d2      	uxtb	r2, r2
 8008ee0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d122      	bne.n	8008f50 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f18:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f022 0201 	bic.w	r2, r2, #1
 8008f28:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7f8 fc61 	bl	8001800 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f3e:	e007      	b.n	8008f50 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	699a      	ldr	r2, [r3, #24]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0208 	orr.w	r2, r2, #8
 8008f4e:	619a      	str	r2, [r3, #24]
}
 8008f50:	bf00      	nop
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f66:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f6e:	2b22      	cmp	r3, #34	; 0x22
 8008f70:	d13b      	bne.n	8008fea <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f78:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f7e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f80:	89ba      	ldrh	r2, [r7, #12]
 8008f82:	89fb      	ldrh	r3, [r7, #14]
 8008f84:	4013      	ands	r3, r2
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f90:	1c9a      	adds	r2, r3, #2
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d122      	bne.n	8008ffa <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008fc2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689a      	ldr	r2, [r3, #8]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 0201 	bic.w	r2, r2, #1
 8008fd2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2220      	movs	r2, #32
 8008fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7f8 fc0c 	bl	8001800 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fe8:	e007      	b.n	8008ffa <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	699a      	ldr	r2, [r3, #24]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f042 0208 	orr.w	r2, r2, #8
 8008ff8:	619a      	str	r2, [r3, #24]
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009012:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800901a:	2b22      	cmp	r3, #34	; 0x22
 800901c:	d168      	bne.n	80090f0 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009024:	81fb      	strh	r3, [r7, #14]
 8009026:	e03f      	b.n	80090a8 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009030:	893b      	ldrh	r3, [r7, #8]
 8009032:	b2d9      	uxtb	r1, r3
 8009034:	89bb      	ldrh	r3, [r7, #12]
 8009036:	b2da      	uxtb	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903c:	400a      	ands	r2, r1
 800903e:	b2d2      	uxtb	r2, r2
 8009040:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009052:	b29b      	uxth	r3, r3
 8009054:	3b01      	subs	r3, #1
 8009056:	b29a      	uxth	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009064:	b29b      	uxth	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d11b      	bne.n	80090a2 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009078:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	6812      	ldr	r2, [r2, #0]
 8009084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009088:	f023 0301 	bic.w	r3, r3, #1
 800908c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2220      	movs	r2, #32
 8009092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7f8 fbaf 	bl	8001800 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80090a2:	89fb      	ldrh	r3, [r7, #14]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	81fb      	strh	r3, [r7, #14]
 80090a8:	89fb      	ldrh	r3, [r7, #14]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1bc      	bne.n	8009028 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090b4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80090b6:	897b      	ldrh	r3, [r7, #10]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d021      	beq.n	8009100 <UART_RxISR_8BIT_FIFOEN+0xfc>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090c2:	897a      	ldrh	r2, [r7, #10]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d21b      	bcs.n	8009100 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689a      	ldr	r2, [r3, #8]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80090d6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a0b      	ldr	r2, [pc, #44]	; (8009108 <UART_RxISR_8BIT_FIFOEN+0x104>)
 80090dc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f042 0220 	orr.w	r2, r2, #32
 80090ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090ee:	e007      	b.n	8009100 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	699a      	ldr	r2, [r3, #24]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f042 0208 	orr.w	r2, r2, #8
 80090fe:	619a      	str	r2, [r3, #24]
}
 8009100:	bf00      	nop
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	08008eaf 	.word	0x08008eaf

0800910c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800911a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009122:	2b22      	cmp	r3, #34	; 0x22
 8009124:	d168      	bne.n	80091f8 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800912c:	82fb      	strh	r3, [r7, #22]
 800912e:	e03f      	b.n	80091b0 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800913c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800913e:	8a3a      	ldrh	r2, [r7, #16]
 8009140:	8abb      	ldrh	r3, [r7, #20]
 8009142:	4013      	ands	r3, r2
 8009144:	b29a      	uxth	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800914e:	1c9a      	adds	r2, r3, #2
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800915a:	b29b      	uxth	r3, r3
 800915c:	3b01      	subs	r3, #1
 800915e:	b29a      	uxth	r2, r3
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800916c:	b29b      	uxth	r3, r3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d11b      	bne.n	80091aa <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009180:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	6812      	ldr	r2, [r2, #0]
 800918c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009190:	f023 0301 	bic.w	r3, r3, #1
 8009194:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2220      	movs	r2, #32
 800919a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7f8 fb2b 	bl	8001800 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80091aa:	8afb      	ldrh	r3, [r7, #22]
 80091ac:	3b01      	subs	r3, #1
 80091ae:	82fb      	strh	r3, [r7, #22]
 80091b0:	8afb      	ldrh	r3, [r7, #22]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1bc      	bne.n	8009130 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091bc:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091be:	8a7b      	ldrh	r3, [r7, #18]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d021      	beq.n	8009208 <UART_RxISR_16BIT_FIFOEN+0xfc>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091ca:	8a7a      	ldrh	r2, [r7, #18]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d21b      	bcs.n	8009208 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689a      	ldr	r2, [r3, #8]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80091de:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a0b      	ldr	r2, [pc, #44]	; (8009210 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80091e4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f042 0220 	orr.w	r2, r2, #32
 80091f4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091f6:	e007      	b.n	8009208 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	699a      	ldr	r2, [r3, #24]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f042 0208 	orr.w	r2, r2, #8
 8009206:	619a      	str	r2, [r3, #24]
}
 8009208:	bf00      	nop
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	08008f59 	.word	0x08008f59

08009214 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800925e:	2b01      	cmp	r3, #1
 8009260:	d101      	bne.n	8009266 <HAL_UARTEx_DisableFifoMode+0x16>
 8009262:	2302      	movs	r3, #2
 8009264:	e027      	b.n	80092b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2224      	movs	r2, #36	; 0x24
 8009272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f022 0201 	bic.w	r2, r2, #1
 800928c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009294:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b084      	sub	sp, #16
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d101      	bne.n	80092da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e02d      	b.n	8009336 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2224      	movs	r2, #36	; 0x24
 80092e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0201 	bic.w	r2, r2, #1
 8009300:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f850 	bl	80093bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800934e:	2b01      	cmp	r3, #1
 8009350:	d101      	bne.n	8009356 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009352:	2302      	movs	r3, #2
 8009354:	e02d      	b.n	80093b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2201      	movs	r2, #1
 800935a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2224      	movs	r2, #36	; 0x24
 8009362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f022 0201 	bic.w	r2, r2, #1
 800937c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	683a      	ldr	r2, [r7, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f812 	bl	80093bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2220      	movs	r2, #32
 80093a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80093bc:	b480      	push	{r7}
 80093be:	b089      	sub	sp, #36	; 0x24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80093c4:	4a2f      	ldr	r2, [pc, #188]	; (8009484 <UARTEx_SetNbDataToProcess+0xc8>)
 80093c6:	f107 0314 	add.w	r3, r7, #20
 80093ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093ce:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80093d2:	4a2d      	ldr	r2, [pc, #180]	; (8009488 <UARTEx_SetNbDataToProcess+0xcc>)
 80093d4:	f107 030c 	add.w	r3, r7, #12
 80093d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093dc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d108      	bne.n	80093fa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093f8:	e03d      	b.n	8009476 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093fa:	2308      	movs	r3, #8
 80093fc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093fe:	2308      	movs	r3, #8
 8009400:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	0e5b      	lsrs	r3, r3, #25
 800940a:	b2db      	uxtb	r3, r3
 800940c:	f003 0307 	and.w	r3, r3, #7
 8009410:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	0f5b      	lsrs	r3, r3, #29
 800941a:	b2db      	uxtb	r3, r3
 800941c:	f003 0307 	and.w	r3, r3, #7
 8009420:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009422:	7fbb      	ldrb	r3, [r7, #30]
 8009424:	7f3a      	ldrb	r2, [r7, #28]
 8009426:	f107 0120 	add.w	r1, r7, #32
 800942a:	440a      	add	r2, r1
 800942c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009430:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009434:	7f3a      	ldrb	r2, [r7, #28]
 8009436:	f107 0120 	add.w	r1, r7, #32
 800943a:	440a      	add	r2, r1
 800943c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009440:	fb93 f3f2 	sdiv	r3, r3, r2
 8009444:	b29a      	uxth	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800944c:	7ffb      	ldrb	r3, [r7, #31]
 800944e:	7f7a      	ldrb	r2, [r7, #29]
 8009450:	f107 0120 	add.w	r1, r7, #32
 8009454:	440a      	add	r2, r1
 8009456:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800945a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800945e:	7f7a      	ldrb	r2, [r7, #29]
 8009460:	f107 0120 	add.w	r1, r7, #32
 8009464:	440a      	add	r2, r1
 8009466:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800946a:	fb93 f3f2 	sdiv	r3, r3, r2
 800946e:	b29a      	uxth	r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009476:	bf00      	nop
 8009478:	3724      	adds	r7, #36	; 0x24
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	0800c124 	.word	0x0800c124
 8009488:	0800c12c 	.word	0x0800c12c

0800948c <__errno>:
 800948c:	4b01      	ldr	r3, [pc, #4]	; (8009494 <__errno+0x8>)
 800948e:	6818      	ldr	r0, [r3, #0]
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	2000002c 	.word	0x2000002c

08009498 <__libc_init_array>:
 8009498:	b570      	push	{r4, r5, r6, lr}
 800949a:	4e0d      	ldr	r6, [pc, #52]	; (80094d0 <__libc_init_array+0x38>)
 800949c:	4c0d      	ldr	r4, [pc, #52]	; (80094d4 <__libc_init_array+0x3c>)
 800949e:	1ba4      	subs	r4, r4, r6
 80094a0:	10a4      	asrs	r4, r4, #2
 80094a2:	2500      	movs	r5, #0
 80094a4:	42a5      	cmp	r5, r4
 80094a6:	d109      	bne.n	80094bc <__libc_init_array+0x24>
 80094a8:	4e0b      	ldr	r6, [pc, #44]	; (80094d8 <__libc_init_array+0x40>)
 80094aa:	4c0c      	ldr	r4, [pc, #48]	; (80094dc <__libc_init_array+0x44>)
 80094ac:	f002 fb04 	bl	800bab8 <_init>
 80094b0:	1ba4      	subs	r4, r4, r6
 80094b2:	10a4      	asrs	r4, r4, #2
 80094b4:	2500      	movs	r5, #0
 80094b6:	42a5      	cmp	r5, r4
 80094b8:	d105      	bne.n	80094c6 <__libc_init_array+0x2e>
 80094ba:	bd70      	pop	{r4, r5, r6, pc}
 80094bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094c0:	4798      	blx	r3
 80094c2:	3501      	adds	r5, #1
 80094c4:	e7ee      	b.n	80094a4 <__libc_init_array+0xc>
 80094c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094ca:	4798      	blx	r3
 80094cc:	3501      	adds	r5, #1
 80094ce:	e7f2      	b.n	80094b6 <__libc_init_array+0x1e>
 80094d0:	0800c3cc 	.word	0x0800c3cc
 80094d4:	0800c3cc 	.word	0x0800c3cc
 80094d8:	0800c3cc 	.word	0x0800c3cc
 80094dc:	0800c3d0 	.word	0x0800c3d0

080094e0 <memcpy>:
 80094e0:	b510      	push	{r4, lr}
 80094e2:	1e43      	subs	r3, r0, #1
 80094e4:	440a      	add	r2, r1
 80094e6:	4291      	cmp	r1, r2
 80094e8:	d100      	bne.n	80094ec <memcpy+0xc>
 80094ea:	bd10      	pop	{r4, pc}
 80094ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094f4:	e7f7      	b.n	80094e6 <memcpy+0x6>

080094f6 <memset>:
 80094f6:	4402      	add	r2, r0
 80094f8:	4603      	mov	r3, r0
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d100      	bne.n	8009500 <memset+0xa>
 80094fe:	4770      	bx	lr
 8009500:	f803 1b01 	strb.w	r1, [r3], #1
 8009504:	e7f9      	b.n	80094fa <memset+0x4>

08009506 <__cvt>:
 8009506:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800950a:	ec55 4b10 	vmov	r4, r5, d0
 800950e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009510:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009514:	2d00      	cmp	r5, #0
 8009516:	460e      	mov	r6, r1
 8009518:	4691      	mov	r9, r2
 800951a:	4619      	mov	r1, r3
 800951c:	bfb8      	it	lt
 800951e:	4622      	movlt	r2, r4
 8009520:	462b      	mov	r3, r5
 8009522:	f027 0720 	bic.w	r7, r7, #32
 8009526:	bfbb      	ittet	lt
 8009528:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800952c:	461d      	movlt	r5, r3
 800952e:	2300      	movge	r3, #0
 8009530:	232d      	movlt	r3, #45	; 0x2d
 8009532:	bfb8      	it	lt
 8009534:	4614      	movlt	r4, r2
 8009536:	2f46      	cmp	r7, #70	; 0x46
 8009538:	700b      	strb	r3, [r1, #0]
 800953a:	d004      	beq.n	8009546 <__cvt+0x40>
 800953c:	2f45      	cmp	r7, #69	; 0x45
 800953e:	d100      	bne.n	8009542 <__cvt+0x3c>
 8009540:	3601      	adds	r6, #1
 8009542:	2102      	movs	r1, #2
 8009544:	e000      	b.n	8009548 <__cvt+0x42>
 8009546:	2103      	movs	r1, #3
 8009548:	ab03      	add	r3, sp, #12
 800954a:	9301      	str	r3, [sp, #4]
 800954c:	ab02      	add	r3, sp, #8
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	4632      	mov	r2, r6
 8009552:	4653      	mov	r3, sl
 8009554:	ec45 4b10 	vmov	d0, r4, r5
 8009558:	f000 fd46 	bl	8009fe8 <_dtoa_r>
 800955c:	2f47      	cmp	r7, #71	; 0x47
 800955e:	4680      	mov	r8, r0
 8009560:	d102      	bne.n	8009568 <__cvt+0x62>
 8009562:	f019 0f01 	tst.w	r9, #1
 8009566:	d026      	beq.n	80095b6 <__cvt+0xb0>
 8009568:	2f46      	cmp	r7, #70	; 0x46
 800956a:	eb08 0906 	add.w	r9, r8, r6
 800956e:	d111      	bne.n	8009594 <__cvt+0x8e>
 8009570:	f898 3000 	ldrb.w	r3, [r8]
 8009574:	2b30      	cmp	r3, #48	; 0x30
 8009576:	d10a      	bne.n	800958e <__cvt+0x88>
 8009578:	2200      	movs	r2, #0
 800957a:	2300      	movs	r3, #0
 800957c:	4620      	mov	r0, r4
 800957e:	4629      	mov	r1, r5
 8009580:	f7f7 faca 	bl	8000b18 <__aeabi_dcmpeq>
 8009584:	b918      	cbnz	r0, 800958e <__cvt+0x88>
 8009586:	f1c6 0601 	rsb	r6, r6, #1
 800958a:	f8ca 6000 	str.w	r6, [sl]
 800958e:	f8da 3000 	ldr.w	r3, [sl]
 8009592:	4499      	add	r9, r3
 8009594:	2200      	movs	r2, #0
 8009596:	2300      	movs	r3, #0
 8009598:	4620      	mov	r0, r4
 800959a:	4629      	mov	r1, r5
 800959c:	f7f7 fabc 	bl	8000b18 <__aeabi_dcmpeq>
 80095a0:	b938      	cbnz	r0, 80095b2 <__cvt+0xac>
 80095a2:	2230      	movs	r2, #48	; 0x30
 80095a4:	9b03      	ldr	r3, [sp, #12]
 80095a6:	454b      	cmp	r3, r9
 80095a8:	d205      	bcs.n	80095b6 <__cvt+0xb0>
 80095aa:	1c59      	adds	r1, r3, #1
 80095ac:	9103      	str	r1, [sp, #12]
 80095ae:	701a      	strb	r2, [r3, #0]
 80095b0:	e7f8      	b.n	80095a4 <__cvt+0x9e>
 80095b2:	f8cd 900c 	str.w	r9, [sp, #12]
 80095b6:	9b03      	ldr	r3, [sp, #12]
 80095b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095ba:	eba3 0308 	sub.w	r3, r3, r8
 80095be:	4640      	mov	r0, r8
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	b004      	add	sp, #16
 80095c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080095c8 <__exponent>:
 80095c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ca:	2900      	cmp	r1, #0
 80095cc:	4604      	mov	r4, r0
 80095ce:	bfba      	itte	lt
 80095d0:	4249      	neglt	r1, r1
 80095d2:	232d      	movlt	r3, #45	; 0x2d
 80095d4:	232b      	movge	r3, #43	; 0x2b
 80095d6:	2909      	cmp	r1, #9
 80095d8:	f804 2b02 	strb.w	r2, [r4], #2
 80095dc:	7043      	strb	r3, [r0, #1]
 80095de:	dd20      	ble.n	8009622 <__exponent+0x5a>
 80095e0:	f10d 0307 	add.w	r3, sp, #7
 80095e4:	461f      	mov	r7, r3
 80095e6:	260a      	movs	r6, #10
 80095e8:	fb91 f5f6 	sdiv	r5, r1, r6
 80095ec:	fb06 1115 	mls	r1, r6, r5, r1
 80095f0:	3130      	adds	r1, #48	; 0x30
 80095f2:	2d09      	cmp	r5, #9
 80095f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80095f8:	f103 32ff 	add.w	r2, r3, #4294967295
 80095fc:	4629      	mov	r1, r5
 80095fe:	dc09      	bgt.n	8009614 <__exponent+0x4c>
 8009600:	3130      	adds	r1, #48	; 0x30
 8009602:	3b02      	subs	r3, #2
 8009604:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009608:	42bb      	cmp	r3, r7
 800960a:	4622      	mov	r2, r4
 800960c:	d304      	bcc.n	8009618 <__exponent+0x50>
 800960e:	1a10      	subs	r0, r2, r0
 8009610:	b003      	add	sp, #12
 8009612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009614:	4613      	mov	r3, r2
 8009616:	e7e7      	b.n	80095e8 <__exponent+0x20>
 8009618:	f813 2b01 	ldrb.w	r2, [r3], #1
 800961c:	f804 2b01 	strb.w	r2, [r4], #1
 8009620:	e7f2      	b.n	8009608 <__exponent+0x40>
 8009622:	2330      	movs	r3, #48	; 0x30
 8009624:	4419      	add	r1, r3
 8009626:	7083      	strb	r3, [r0, #2]
 8009628:	1d02      	adds	r2, r0, #4
 800962a:	70c1      	strb	r1, [r0, #3]
 800962c:	e7ef      	b.n	800960e <__exponent+0x46>
	...

08009630 <_printf_float>:
 8009630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009634:	b08d      	sub	sp, #52	; 0x34
 8009636:	460c      	mov	r4, r1
 8009638:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800963c:	4616      	mov	r6, r2
 800963e:	461f      	mov	r7, r3
 8009640:	4605      	mov	r5, r0
 8009642:	f001 fa89 	bl	800ab58 <_localeconv_r>
 8009646:	6803      	ldr	r3, [r0, #0]
 8009648:	9304      	str	r3, [sp, #16]
 800964a:	4618      	mov	r0, r3
 800964c:	f7f6 fde8 	bl	8000220 <strlen>
 8009650:	2300      	movs	r3, #0
 8009652:	930a      	str	r3, [sp, #40]	; 0x28
 8009654:	f8d8 3000 	ldr.w	r3, [r8]
 8009658:	9005      	str	r0, [sp, #20]
 800965a:	3307      	adds	r3, #7
 800965c:	f023 0307 	bic.w	r3, r3, #7
 8009660:	f103 0208 	add.w	r2, r3, #8
 8009664:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009668:	f8d4 b000 	ldr.w	fp, [r4]
 800966c:	f8c8 2000 	str.w	r2, [r8]
 8009670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009674:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009678:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800967c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009680:	9307      	str	r3, [sp, #28]
 8009682:	f8cd 8018 	str.w	r8, [sp, #24]
 8009686:	f04f 32ff 	mov.w	r2, #4294967295
 800968a:	4ba7      	ldr	r3, [pc, #668]	; (8009928 <_printf_float+0x2f8>)
 800968c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009690:	f7f7 fa74 	bl	8000b7c <__aeabi_dcmpun>
 8009694:	bb70      	cbnz	r0, 80096f4 <_printf_float+0xc4>
 8009696:	f04f 32ff 	mov.w	r2, #4294967295
 800969a:	4ba3      	ldr	r3, [pc, #652]	; (8009928 <_printf_float+0x2f8>)
 800969c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096a0:	f7f7 fa4e 	bl	8000b40 <__aeabi_dcmple>
 80096a4:	bb30      	cbnz	r0, 80096f4 <_printf_float+0xc4>
 80096a6:	2200      	movs	r2, #0
 80096a8:	2300      	movs	r3, #0
 80096aa:	4640      	mov	r0, r8
 80096ac:	4649      	mov	r1, r9
 80096ae:	f7f7 fa3d 	bl	8000b2c <__aeabi_dcmplt>
 80096b2:	b110      	cbz	r0, 80096ba <_printf_float+0x8a>
 80096b4:	232d      	movs	r3, #45	; 0x2d
 80096b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ba:	4a9c      	ldr	r2, [pc, #624]	; (800992c <_printf_float+0x2fc>)
 80096bc:	4b9c      	ldr	r3, [pc, #624]	; (8009930 <_printf_float+0x300>)
 80096be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80096c2:	bf8c      	ite	hi
 80096c4:	4690      	movhi	r8, r2
 80096c6:	4698      	movls	r8, r3
 80096c8:	2303      	movs	r3, #3
 80096ca:	f02b 0204 	bic.w	r2, fp, #4
 80096ce:	6123      	str	r3, [r4, #16]
 80096d0:	6022      	str	r2, [r4, #0]
 80096d2:	f04f 0900 	mov.w	r9, #0
 80096d6:	9700      	str	r7, [sp, #0]
 80096d8:	4633      	mov	r3, r6
 80096da:	aa0b      	add	r2, sp, #44	; 0x2c
 80096dc:	4621      	mov	r1, r4
 80096de:	4628      	mov	r0, r5
 80096e0:	f000 f9e6 	bl	8009ab0 <_printf_common>
 80096e4:	3001      	adds	r0, #1
 80096e6:	f040 808d 	bne.w	8009804 <_printf_float+0x1d4>
 80096ea:	f04f 30ff 	mov.w	r0, #4294967295
 80096ee:	b00d      	add	sp, #52	; 0x34
 80096f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f4:	4642      	mov	r2, r8
 80096f6:	464b      	mov	r3, r9
 80096f8:	4640      	mov	r0, r8
 80096fa:	4649      	mov	r1, r9
 80096fc:	f7f7 fa3e 	bl	8000b7c <__aeabi_dcmpun>
 8009700:	b110      	cbz	r0, 8009708 <_printf_float+0xd8>
 8009702:	4a8c      	ldr	r2, [pc, #560]	; (8009934 <_printf_float+0x304>)
 8009704:	4b8c      	ldr	r3, [pc, #560]	; (8009938 <_printf_float+0x308>)
 8009706:	e7da      	b.n	80096be <_printf_float+0x8e>
 8009708:	6861      	ldr	r1, [r4, #4]
 800970a:	1c4b      	adds	r3, r1, #1
 800970c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009710:	a80a      	add	r0, sp, #40	; 0x28
 8009712:	d13e      	bne.n	8009792 <_printf_float+0x162>
 8009714:	2306      	movs	r3, #6
 8009716:	6063      	str	r3, [r4, #4]
 8009718:	2300      	movs	r3, #0
 800971a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800971e:	ab09      	add	r3, sp, #36	; 0x24
 8009720:	9300      	str	r3, [sp, #0]
 8009722:	ec49 8b10 	vmov	d0, r8, r9
 8009726:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800972a:	6022      	str	r2, [r4, #0]
 800972c:	f8cd a004 	str.w	sl, [sp, #4]
 8009730:	6861      	ldr	r1, [r4, #4]
 8009732:	4628      	mov	r0, r5
 8009734:	f7ff fee7 	bl	8009506 <__cvt>
 8009738:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800973c:	2b47      	cmp	r3, #71	; 0x47
 800973e:	4680      	mov	r8, r0
 8009740:	d109      	bne.n	8009756 <_printf_float+0x126>
 8009742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009744:	1cd8      	adds	r0, r3, #3
 8009746:	db02      	blt.n	800974e <_printf_float+0x11e>
 8009748:	6862      	ldr	r2, [r4, #4]
 800974a:	4293      	cmp	r3, r2
 800974c:	dd47      	ble.n	80097de <_printf_float+0x1ae>
 800974e:	f1aa 0a02 	sub.w	sl, sl, #2
 8009752:	fa5f fa8a 	uxtb.w	sl, sl
 8009756:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800975a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800975c:	d824      	bhi.n	80097a8 <_printf_float+0x178>
 800975e:	3901      	subs	r1, #1
 8009760:	4652      	mov	r2, sl
 8009762:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009766:	9109      	str	r1, [sp, #36]	; 0x24
 8009768:	f7ff ff2e 	bl	80095c8 <__exponent>
 800976c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800976e:	1813      	adds	r3, r2, r0
 8009770:	2a01      	cmp	r2, #1
 8009772:	4681      	mov	r9, r0
 8009774:	6123      	str	r3, [r4, #16]
 8009776:	dc02      	bgt.n	800977e <_printf_float+0x14e>
 8009778:	6822      	ldr	r2, [r4, #0]
 800977a:	07d1      	lsls	r1, r2, #31
 800977c:	d501      	bpl.n	8009782 <_printf_float+0x152>
 800977e:	3301      	adds	r3, #1
 8009780:	6123      	str	r3, [r4, #16]
 8009782:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0a5      	beq.n	80096d6 <_printf_float+0xa6>
 800978a:	232d      	movs	r3, #45	; 0x2d
 800978c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009790:	e7a1      	b.n	80096d6 <_printf_float+0xa6>
 8009792:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009796:	f000 8177 	beq.w	8009a88 <_printf_float+0x458>
 800979a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800979e:	d1bb      	bne.n	8009718 <_printf_float+0xe8>
 80097a0:	2900      	cmp	r1, #0
 80097a2:	d1b9      	bne.n	8009718 <_printf_float+0xe8>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e7b6      	b.n	8009716 <_printf_float+0xe6>
 80097a8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80097ac:	d119      	bne.n	80097e2 <_printf_float+0x1b2>
 80097ae:	2900      	cmp	r1, #0
 80097b0:	6863      	ldr	r3, [r4, #4]
 80097b2:	dd0c      	ble.n	80097ce <_printf_float+0x19e>
 80097b4:	6121      	str	r1, [r4, #16]
 80097b6:	b913      	cbnz	r3, 80097be <_printf_float+0x18e>
 80097b8:	6822      	ldr	r2, [r4, #0]
 80097ba:	07d2      	lsls	r2, r2, #31
 80097bc:	d502      	bpl.n	80097c4 <_printf_float+0x194>
 80097be:	3301      	adds	r3, #1
 80097c0:	440b      	add	r3, r1
 80097c2:	6123      	str	r3, [r4, #16]
 80097c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80097c8:	f04f 0900 	mov.w	r9, #0
 80097cc:	e7d9      	b.n	8009782 <_printf_float+0x152>
 80097ce:	b913      	cbnz	r3, 80097d6 <_printf_float+0x1a6>
 80097d0:	6822      	ldr	r2, [r4, #0]
 80097d2:	07d0      	lsls	r0, r2, #31
 80097d4:	d501      	bpl.n	80097da <_printf_float+0x1aa>
 80097d6:	3302      	adds	r3, #2
 80097d8:	e7f3      	b.n	80097c2 <_printf_float+0x192>
 80097da:	2301      	movs	r3, #1
 80097dc:	e7f1      	b.n	80097c2 <_printf_float+0x192>
 80097de:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80097e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80097e6:	4293      	cmp	r3, r2
 80097e8:	db05      	blt.n	80097f6 <_printf_float+0x1c6>
 80097ea:	6822      	ldr	r2, [r4, #0]
 80097ec:	6123      	str	r3, [r4, #16]
 80097ee:	07d1      	lsls	r1, r2, #31
 80097f0:	d5e8      	bpl.n	80097c4 <_printf_float+0x194>
 80097f2:	3301      	adds	r3, #1
 80097f4:	e7e5      	b.n	80097c2 <_printf_float+0x192>
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bfd4      	ite	le
 80097fa:	f1c3 0302 	rsble	r3, r3, #2
 80097fe:	2301      	movgt	r3, #1
 8009800:	4413      	add	r3, r2
 8009802:	e7de      	b.n	80097c2 <_printf_float+0x192>
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	055a      	lsls	r2, r3, #21
 8009808:	d407      	bmi.n	800981a <_printf_float+0x1ea>
 800980a:	6923      	ldr	r3, [r4, #16]
 800980c:	4642      	mov	r2, r8
 800980e:	4631      	mov	r1, r6
 8009810:	4628      	mov	r0, r5
 8009812:	47b8      	blx	r7
 8009814:	3001      	adds	r0, #1
 8009816:	d12b      	bne.n	8009870 <_printf_float+0x240>
 8009818:	e767      	b.n	80096ea <_printf_float+0xba>
 800981a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800981e:	f240 80dc 	bls.w	80099da <_printf_float+0x3aa>
 8009822:	2200      	movs	r2, #0
 8009824:	2300      	movs	r3, #0
 8009826:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800982a:	f7f7 f975 	bl	8000b18 <__aeabi_dcmpeq>
 800982e:	2800      	cmp	r0, #0
 8009830:	d033      	beq.n	800989a <_printf_float+0x26a>
 8009832:	2301      	movs	r3, #1
 8009834:	4a41      	ldr	r2, [pc, #260]	; (800993c <_printf_float+0x30c>)
 8009836:	4631      	mov	r1, r6
 8009838:	4628      	mov	r0, r5
 800983a:	47b8      	blx	r7
 800983c:	3001      	adds	r0, #1
 800983e:	f43f af54 	beq.w	80096ea <_printf_float+0xba>
 8009842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009846:	429a      	cmp	r2, r3
 8009848:	db02      	blt.n	8009850 <_printf_float+0x220>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	07d8      	lsls	r0, r3, #31
 800984e:	d50f      	bpl.n	8009870 <_printf_float+0x240>
 8009850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009854:	4631      	mov	r1, r6
 8009856:	4628      	mov	r0, r5
 8009858:	47b8      	blx	r7
 800985a:	3001      	adds	r0, #1
 800985c:	f43f af45 	beq.w	80096ea <_printf_float+0xba>
 8009860:	f04f 0800 	mov.w	r8, #0
 8009864:	f104 091a 	add.w	r9, r4, #26
 8009868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800986a:	3b01      	subs	r3, #1
 800986c:	4543      	cmp	r3, r8
 800986e:	dc09      	bgt.n	8009884 <_printf_float+0x254>
 8009870:	6823      	ldr	r3, [r4, #0]
 8009872:	079b      	lsls	r3, r3, #30
 8009874:	f100 8103 	bmi.w	8009a7e <_printf_float+0x44e>
 8009878:	68e0      	ldr	r0, [r4, #12]
 800987a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800987c:	4298      	cmp	r0, r3
 800987e:	bfb8      	it	lt
 8009880:	4618      	movlt	r0, r3
 8009882:	e734      	b.n	80096ee <_printf_float+0xbe>
 8009884:	2301      	movs	r3, #1
 8009886:	464a      	mov	r2, r9
 8009888:	4631      	mov	r1, r6
 800988a:	4628      	mov	r0, r5
 800988c:	47b8      	blx	r7
 800988e:	3001      	adds	r0, #1
 8009890:	f43f af2b 	beq.w	80096ea <_printf_float+0xba>
 8009894:	f108 0801 	add.w	r8, r8, #1
 8009898:	e7e6      	b.n	8009868 <_printf_float+0x238>
 800989a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800989c:	2b00      	cmp	r3, #0
 800989e:	dc2b      	bgt.n	80098f8 <_printf_float+0x2c8>
 80098a0:	2301      	movs	r3, #1
 80098a2:	4a26      	ldr	r2, [pc, #152]	; (800993c <_printf_float+0x30c>)
 80098a4:	4631      	mov	r1, r6
 80098a6:	4628      	mov	r0, r5
 80098a8:	47b8      	blx	r7
 80098aa:	3001      	adds	r0, #1
 80098ac:	f43f af1d 	beq.w	80096ea <_printf_float+0xba>
 80098b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b2:	b923      	cbnz	r3, 80098be <_printf_float+0x28e>
 80098b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098b6:	b913      	cbnz	r3, 80098be <_printf_float+0x28e>
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	07d9      	lsls	r1, r3, #31
 80098bc:	d5d8      	bpl.n	8009870 <_printf_float+0x240>
 80098be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098c2:	4631      	mov	r1, r6
 80098c4:	4628      	mov	r0, r5
 80098c6:	47b8      	blx	r7
 80098c8:	3001      	adds	r0, #1
 80098ca:	f43f af0e 	beq.w	80096ea <_printf_float+0xba>
 80098ce:	f04f 0900 	mov.w	r9, #0
 80098d2:	f104 0a1a 	add.w	sl, r4, #26
 80098d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d8:	425b      	negs	r3, r3
 80098da:	454b      	cmp	r3, r9
 80098dc:	dc01      	bgt.n	80098e2 <_printf_float+0x2b2>
 80098de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e0:	e794      	b.n	800980c <_printf_float+0x1dc>
 80098e2:	2301      	movs	r3, #1
 80098e4:	4652      	mov	r2, sl
 80098e6:	4631      	mov	r1, r6
 80098e8:	4628      	mov	r0, r5
 80098ea:	47b8      	blx	r7
 80098ec:	3001      	adds	r0, #1
 80098ee:	f43f aefc 	beq.w	80096ea <_printf_float+0xba>
 80098f2:	f109 0901 	add.w	r9, r9, #1
 80098f6:	e7ee      	b.n	80098d6 <_printf_float+0x2a6>
 80098f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098fc:	429a      	cmp	r2, r3
 80098fe:	bfa8      	it	ge
 8009900:	461a      	movge	r2, r3
 8009902:	2a00      	cmp	r2, #0
 8009904:	4691      	mov	r9, r2
 8009906:	dd07      	ble.n	8009918 <_printf_float+0x2e8>
 8009908:	4613      	mov	r3, r2
 800990a:	4631      	mov	r1, r6
 800990c:	4642      	mov	r2, r8
 800990e:	4628      	mov	r0, r5
 8009910:	47b8      	blx	r7
 8009912:	3001      	adds	r0, #1
 8009914:	f43f aee9 	beq.w	80096ea <_printf_float+0xba>
 8009918:	f104 031a 	add.w	r3, r4, #26
 800991c:	f04f 0b00 	mov.w	fp, #0
 8009920:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009924:	9306      	str	r3, [sp, #24]
 8009926:	e015      	b.n	8009954 <_printf_float+0x324>
 8009928:	7fefffff 	.word	0x7fefffff
 800992c:	0800c168 	.word	0x0800c168
 8009930:	0800c164 	.word	0x0800c164
 8009934:	0800c170 	.word	0x0800c170
 8009938:	0800c16c 	.word	0x0800c16c
 800993c:	0800c174 	.word	0x0800c174
 8009940:	2301      	movs	r3, #1
 8009942:	9a06      	ldr	r2, [sp, #24]
 8009944:	4631      	mov	r1, r6
 8009946:	4628      	mov	r0, r5
 8009948:	47b8      	blx	r7
 800994a:	3001      	adds	r0, #1
 800994c:	f43f aecd 	beq.w	80096ea <_printf_float+0xba>
 8009950:	f10b 0b01 	add.w	fp, fp, #1
 8009954:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009958:	ebaa 0309 	sub.w	r3, sl, r9
 800995c:	455b      	cmp	r3, fp
 800995e:	dcef      	bgt.n	8009940 <_printf_float+0x310>
 8009960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009964:	429a      	cmp	r2, r3
 8009966:	44d0      	add	r8, sl
 8009968:	db15      	blt.n	8009996 <_printf_float+0x366>
 800996a:	6823      	ldr	r3, [r4, #0]
 800996c:	07da      	lsls	r2, r3, #31
 800996e:	d412      	bmi.n	8009996 <_printf_float+0x366>
 8009970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009972:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009974:	eba3 020a 	sub.w	r2, r3, sl
 8009978:	eba3 0a01 	sub.w	sl, r3, r1
 800997c:	4592      	cmp	sl, r2
 800997e:	bfa8      	it	ge
 8009980:	4692      	movge	sl, r2
 8009982:	f1ba 0f00 	cmp.w	sl, #0
 8009986:	dc0e      	bgt.n	80099a6 <_printf_float+0x376>
 8009988:	f04f 0800 	mov.w	r8, #0
 800998c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009990:	f104 091a 	add.w	r9, r4, #26
 8009994:	e019      	b.n	80099ca <_printf_float+0x39a>
 8009996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800999a:	4631      	mov	r1, r6
 800999c:	4628      	mov	r0, r5
 800999e:	47b8      	blx	r7
 80099a0:	3001      	adds	r0, #1
 80099a2:	d1e5      	bne.n	8009970 <_printf_float+0x340>
 80099a4:	e6a1      	b.n	80096ea <_printf_float+0xba>
 80099a6:	4653      	mov	r3, sl
 80099a8:	4642      	mov	r2, r8
 80099aa:	4631      	mov	r1, r6
 80099ac:	4628      	mov	r0, r5
 80099ae:	47b8      	blx	r7
 80099b0:	3001      	adds	r0, #1
 80099b2:	d1e9      	bne.n	8009988 <_printf_float+0x358>
 80099b4:	e699      	b.n	80096ea <_printf_float+0xba>
 80099b6:	2301      	movs	r3, #1
 80099b8:	464a      	mov	r2, r9
 80099ba:	4631      	mov	r1, r6
 80099bc:	4628      	mov	r0, r5
 80099be:	47b8      	blx	r7
 80099c0:	3001      	adds	r0, #1
 80099c2:	f43f ae92 	beq.w	80096ea <_printf_float+0xba>
 80099c6:	f108 0801 	add.w	r8, r8, #1
 80099ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099ce:	1a9b      	subs	r3, r3, r2
 80099d0:	eba3 030a 	sub.w	r3, r3, sl
 80099d4:	4543      	cmp	r3, r8
 80099d6:	dcee      	bgt.n	80099b6 <_printf_float+0x386>
 80099d8:	e74a      	b.n	8009870 <_printf_float+0x240>
 80099da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099dc:	2a01      	cmp	r2, #1
 80099de:	dc01      	bgt.n	80099e4 <_printf_float+0x3b4>
 80099e0:	07db      	lsls	r3, r3, #31
 80099e2:	d53a      	bpl.n	8009a5a <_printf_float+0x42a>
 80099e4:	2301      	movs	r3, #1
 80099e6:	4642      	mov	r2, r8
 80099e8:	4631      	mov	r1, r6
 80099ea:	4628      	mov	r0, r5
 80099ec:	47b8      	blx	r7
 80099ee:	3001      	adds	r0, #1
 80099f0:	f43f ae7b 	beq.w	80096ea <_printf_float+0xba>
 80099f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099f8:	4631      	mov	r1, r6
 80099fa:	4628      	mov	r0, r5
 80099fc:	47b8      	blx	r7
 80099fe:	3001      	adds	r0, #1
 8009a00:	f108 0801 	add.w	r8, r8, #1
 8009a04:	f43f ae71 	beq.w	80096ea <_printf_float+0xba>
 8009a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f103 3aff 	add.w	sl, r3, #4294967295
 8009a10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a14:	2300      	movs	r3, #0
 8009a16:	f7f7 f87f 	bl	8000b18 <__aeabi_dcmpeq>
 8009a1a:	b9c8      	cbnz	r0, 8009a50 <_printf_float+0x420>
 8009a1c:	4653      	mov	r3, sl
 8009a1e:	4642      	mov	r2, r8
 8009a20:	4631      	mov	r1, r6
 8009a22:	4628      	mov	r0, r5
 8009a24:	47b8      	blx	r7
 8009a26:	3001      	adds	r0, #1
 8009a28:	d10e      	bne.n	8009a48 <_printf_float+0x418>
 8009a2a:	e65e      	b.n	80096ea <_printf_float+0xba>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	4652      	mov	r2, sl
 8009a30:	4631      	mov	r1, r6
 8009a32:	4628      	mov	r0, r5
 8009a34:	47b8      	blx	r7
 8009a36:	3001      	adds	r0, #1
 8009a38:	f43f ae57 	beq.w	80096ea <_printf_float+0xba>
 8009a3c:	f108 0801 	add.w	r8, r8, #1
 8009a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a42:	3b01      	subs	r3, #1
 8009a44:	4543      	cmp	r3, r8
 8009a46:	dcf1      	bgt.n	8009a2c <_printf_float+0x3fc>
 8009a48:	464b      	mov	r3, r9
 8009a4a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a4e:	e6de      	b.n	800980e <_printf_float+0x1de>
 8009a50:	f04f 0800 	mov.w	r8, #0
 8009a54:	f104 0a1a 	add.w	sl, r4, #26
 8009a58:	e7f2      	b.n	8009a40 <_printf_float+0x410>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e7df      	b.n	8009a1e <_printf_float+0x3ee>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	464a      	mov	r2, r9
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	f43f ae3e 	beq.w	80096ea <_printf_float+0xba>
 8009a6e:	f108 0801 	add.w	r8, r8, #1
 8009a72:	68e3      	ldr	r3, [r4, #12]
 8009a74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	4543      	cmp	r3, r8
 8009a7a:	dcf0      	bgt.n	8009a5e <_printf_float+0x42e>
 8009a7c:	e6fc      	b.n	8009878 <_printf_float+0x248>
 8009a7e:	f04f 0800 	mov.w	r8, #0
 8009a82:	f104 0919 	add.w	r9, r4, #25
 8009a86:	e7f4      	b.n	8009a72 <_printf_float+0x442>
 8009a88:	2900      	cmp	r1, #0
 8009a8a:	f43f ae8b 	beq.w	80097a4 <_printf_float+0x174>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009a94:	ab09      	add	r3, sp, #36	; 0x24
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	ec49 8b10 	vmov	d0, r8, r9
 8009a9c:	6022      	str	r2, [r4, #0]
 8009a9e:	f8cd a004 	str.w	sl, [sp, #4]
 8009aa2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f7ff fd2d 	bl	8009506 <__cvt>
 8009aac:	4680      	mov	r8, r0
 8009aae:	e648      	b.n	8009742 <_printf_float+0x112>

08009ab0 <_printf_common>:
 8009ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab4:	4691      	mov	r9, r2
 8009ab6:	461f      	mov	r7, r3
 8009ab8:	688a      	ldr	r2, [r1, #8]
 8009aba:	690b      	ldr	r3, [r1, #16]
 8009abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	bfb8      	it	lt
 8009ac4:	4613      	movlt	r3, r2
 8009ac6:	f8c9 3000 	str.w	r3, [r9]
 8009aca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ace:	4606      	mov	r6, r0
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	b112      	cbz	r2, 8009ada <_printf_common+0x2a>
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	f8c9 3000 	str.w	r3, [r9]
 8009ada:	6823      	ldr	r3, [r4, #0]
 8009adc:	0699      	lsls	r1, r3, #26
 8009ade:	bf42      	ittt	mi
 8009ae0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009ae4:	3302      	addmi	r3, #2
 8009ae6:	f8c9 3000 	strmi.w	r3, [r9]
 8009aea:	6825      	ldr	r5, [r4, #0]
 8009aec:	f015 0506 	ands.w	r5, r5, #6
 8009af0:	d107      	bne.n	8009b02 <_printf_common+0x52>
 8009af2:	f104 0a19 	add.w	sl, r4, #25
 8009af6:	68e3      	ldr	r3, [r4, #12]
 8009af8:	f8d9 2000 	ldr.w	r2, [r9]
 8009afc:	1a9b      	subs	r3, r3, r2
 8009afe:	42ab      	cmp	r3, r5
 8009b00:	dc28      	bgt.n	8009b54 <_printf_common+0xa4>
 8009b02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b06:	6822      	ldr	r2, [r4, #0]
 8009b08:	3300      	adds	r3, #0
 8009b0a:	bf18      	it	ne
 8009b0c:	2301      	movne	r3, #1
 8009b0e:	0692      	lsls	r2, r2, #26
 8009b10:	d42d      	bmi.n	8009b6e <_printf_common+0xbe>
 8009b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b16:	4639      	mov	r1, r7
 8009b18:	4630      	mov	r0, r6
 8009b1a:	47c0      	blx	r8
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d020      	beq.n	8009b62 <_printf_common+0xb2>
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	68e5      	ldr	r5, [r4, #12]
 8009b24:	f8d9 2000 	ldr.w	r2, [r9]
 8009b28:	f003 0306 	and.w	r3, r3, #6
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	bf08      	it	eq
 8009b30:	1aad      	subeq	r5, r5, r2
 8009b32:	68a3      	ldr	r3, [r4, #8]
 8009b34:	6922      	ldr	r2, [r4, #16]
 8009b36:	bf0c      	ite	eq
 8009b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b3c:	2500      	movne	r5, #0
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	bfc4      	itt	gt
 8009b42:	1a9b      	subgt	r3, r3, r2
 8009b44:	18ed      	addgt	r5, r5, r3
 8009b46:	f04f 0900 	mov.w	r9, #0
 8009b4a:	341a      	adds	r4, #26
 8009b4c:	454d      	cmp	r5, r9
 8009b4e:	d11a      	bne.n	8009b86 <_printf_common+0xd6>
 8009b50:	2000      	movs	r0, #0
 8009b52:	e008      	b.n	8009b66 <_printf_common+0xb6>
 8009b54:	2301      	movs	r3, #1
 8009b56:	4652      	mov	r2, sl
 8009b58:	4639      	mov	r1, r7
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	47c0      	blx	r8
 8009b5e:	3001      	adds	r0, #1
 8009b60:	d103      	bne.n	8009b6a <_printf_common+0xba>
 8009b62:	f04f 30ff 	mov.w	r0, #4294967295
 8009b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b6a:	3501      	adds	r5, #1
 8009b6c:	e7c3      	b.n	8009af6 <_printf_common+0x46>
 8009b6e:	18e1      	adds	r1, r4, r3
 8009b70:	1c5a      	adds	r2, r3, #1
 8009b72:	2030      	movs	r0, #48	; 0x30
 8009b74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b78:	4422      	add	r2, r4
 8009b7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b82:	3302      	adds	r3, #2
 8009b84:	e7c5      	b.n	8009b12 <_printf_common+0x62>
 8009b86:	2301      	movs	r3, #1
 8009b88:	4622      	mov	r2, r4
 8009b8a:	4639      	mov	r1, r7
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	47c0      	blx	r8
 8009b90:	3001      	adds	r0, #1
 8009b92:	d0e6      	beq.n	8009b62 <_printf_common+0xb2>
 8009b94:	f109 0901 	add.w	r9, r9, #1
 8009b98:	e7d8      	b.n	8009b4c <_printf_common+0x9c>
	...

08009b9c <_printf_i>:
 8009b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ba0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	7e09      	ldrb	r1, [r1, #24]
 8009ba8:	b085      	sub	sp, #20
 8009baa:	296e      	cmp	r1, #110	; 0x6e
 8009bac:	4617      	mov	r7, r2
 8009bae:	4606      	mov	r6, r0
 8009bb0:	4698      	mov	r8, r3
 8009bb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bb4:	f000 80b3 	beq.w	8009d1e <_printf_i+0x182>
 8009bb8:	d822      	bhi.n	8009c00 <_printf_i+0x64>
 8009bba:	2963      	cmp	r1, #99	; 0x63
 8009bbc:	d036      	beq.n	8009c2c <_printf_i+0x90>
 8009bbe:	d80a      	bhi.n	8009bd6 <_printf_i+0x3a>
 8009bc0:	2900      	cmp	r1, #0
 8009bc2:	f000 80b9 	beq.w	8009d38 <_printf_i+0x19c>
 8009bc6:	2958      	cmp	r1, #88	; 0x58
 8009bc8:	f000 8083 	beq.w	8009cd2 <_printf_i+0x136>
 8009bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009bd4:	e032      	b.n	8009c3c <_printf_i+0xa0>
 8009bd6:	2964      	cmp	r1, #100	; 0x64
 8009bd8:	d001      	beq.n	8009bde <_printf_i+0x42>
 8009bda:	2969      	cmp	r1, #105	; 0x69
 8009bdc:	d1f6      	bne.n	8009bcc <_printf_i+0x30>
 8009bde:	6820      	ldr	r0, [r4, #0]
 8009be0:	6813      	ldr	r3, [r2, #0]
 8009be2:	0605      	lsls	r5, r0, #24
 8009be4:	f103 0104 	add.w	r1, r3, #4
 8009be8:	d52a      	bpl.n	8009c40 <_printf_i+0xa4>
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6011      	str	r1, [r2, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	da03      	bge.n	8009bfa <_printf_i+0x5e>
 8009bf2:	222d      	movs	r2, #45	; 0x2d
 8009bf4:	425b      	negs	r3, r3
 8009bf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009bfa:	486f      	ldr	r0, [pc, #444]	; (8009db8 <_printf_i+0x21c>)
 8009bfc:	220a      	movs	r2, #10
 8009bfe:	e039      	b.n	8009c74 <_printf_i+0xd8>
 8009c00:	2973      	cmp	r1, #115	; 0x73
 8009c02:	f000 809d 	beq.w	8009d40 <_printf_i+0x1a4>
 8009c06:	d808      	bhi.n	8009c1a <_printf_i+0x7e>
 8009c08:	296f      	cmp	r1, #111	; 0x6f
 8009c0a:	d020      	beq.n	8009c4e <_printf_i+0xb2>
 8009c0c:	2970      	cmp	r1, #112	; 0x70
 8009c0e:	d1dd      	bne.n	8009bcc <_printf_i+0x30>
 8009c10:	6823      	ldr	r3, [r4, #0]
 8009c12:	f043 0320 	orr.w	r3, r3, #32
 8009c16:	6023      	str	r3, [r4, #0]
 8009c18:	e003      	b.n	8009c22 <_printf_i+0x86>
 8009c1a:	2975      	cmp	r1, #117	; 0x75
 8009c1c:	d017      	beq.n	8009c4e <_printf_i+0xb2>
 8009c1e:	2978      	cmp	r1, #120	; 0x78
 8009c20:	d1d4      	bne.n	8009bcc <_printf_i+0x30>
 8009c22:	2378      	movs	r3, #120	; 0x78
 8009c24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c28:	4864      	ldr	r0, [pc, #400]	; (8009dbc <_printf_i+0x220>)
 8009c2a:	e055      	b.n	8009cd8 <_printf_i+0x13c>
 8009c2c:	6813      	ldr	r3, [r2, #0]
 8009c2e:	1d19      	adds	r1, r3, #4
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6011      	str	r1, [r2, #0]
 8009c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e08c      	b.n	8009d5a <_printf_i+0x1be>
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6011      	str	r1, [r2, #0]
 8009c44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c48:	bf18      	it	ne
 8009c4a:	b21b      	sxthne	r3, r3
 8009c4c:	e7cf      	b.n	8009bee <_printf_i+0x52>
 8009c4e:	6813      	ldr	r3, [r2, #0]
 8009c50:	6825      	ldr	r5, [r4, #0]
 8009c52:	1d18      	adds	r0, r3, #4
 8009c54:	6010      	str	r0, [r2, #0]
 8009c56:	0628      	lsls	r0, r5, #24
 8009c58:	d501      	bpl.n	8009c5e <_printf_i+0xc2>
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	e002      	b.n	8009c64 <_printf_i+0xc8>
 8009c5e:	0668      	lsls	r0, r5, #25
 8009c60:	d5fb      	bpl.n	8009c5a <_printf_i+0xbe>
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	4854      	ldr	r0, [pc, #336]	; (8009db8 <_printf_i+0x21c>)
 8009c66:	296f      	cmp	r1, #111	; 0x6f
 8009c68:	bf14      	ite	ne
 8009c6a:	220a      	movne	r2, #10
 8009c6c:	2208      	moveq	r2, #8
 8009c6e:	2100      	movs	r1, #0
 8009c70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c74:	6865      	ldr	r5, [r4, #4]
 8009c76:	60a5      	str	r5, [r4, #8]
 8009c78:	2d00      	cmp	r5, #0
 8009c7a:	f2c0 8095 	blt.w	8009da8 <_printf_i+0x20c>
 8009c7e:	6821      	ldr	r1, [r4, #0]
 8009c80:	f021 0104 	bic.w	r1, r1, #4
 8009c84:	6021      	str	r1, [r4, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d13d      	bne.n	8009d06 <_printf_i+0x16a>
 8009c8a:	2d00      	cmp	r5, #0
 8009c8c:	f040 808e 	bne.w	8009dac <_printf_i+0x210>
 8009c90:	4665      	mov	r5, ip
 8009c92:	2a08      	cmp	r2, #8
 8009c94:	d10b      	bne.n	8009cae <_printf_i+0x112>
 8009c96:	6823      	ldr	r3, [r4, #0]
 8009c98:	07db      	lsls	r3, r3, #31
 8009c9a:	d508      	bpl.n	8009cae <_printf_i+0x112>
 8009c9c:	6923      	ldr	r3, [r4, #16]
 8009c9e:	6862      	ldr	r2, [r4, #4]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	bfde      	ittt	le
 8009ca4:	2330      	movle	r3, #48	; 0x30
 8009ca6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009caa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cae:	ebac 0305 	sub.w	r3, ip, r5
 8009cb2:	6123      	str	r3, [r4, #16]
 8009cb4:	f8cd 8000 	str.w	r8, [sp]
 8009cb8:	463b      	mov	r3, r7
 8009cba:	aa03      	add	r2, sp, #12
 8009cbc:	4621      	mov	r1, r4
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f7ff fef6 	bl	8009ab0 <_printf_common>
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d14d      	bne.n	8009d64 <_printf_i+0x1c8>
 8009cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ccc:	b005      	add	sp, #20
 8009cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cd2:	4839      	ldr	r0, [pc, #228]	; (8009db8 <_printf_i+0x21c>)
 8009cd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009cd8:	6813      	ldr	r3, [r2, #0]
 8009cda:	6821      	ldr	r1, [r4, #0]
 8009cdc:	1d1d      	adds	r5, r3, #4
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6015      	str	r5, [r2, #0]
 8009ce2:	060a      	lsls	r2, r1, #24
 8009ce4:	d50b      	bpl.n	8009cfe <_printf_i+0x162>
 8009ce6:	07ca      	lsls	r2, r1, #31
 8009ce8:	bf44      	itt	mi
 8009cea:	f041 0120 	orrmi.w	r1, r1, #32
 8009cee:	6021      	strmi	r1, [r4, #0]
 8009cf0:	b91b      	cbnz	r3, 8009cfa <_printf_i+0x15e>
 8009cf2:	6822      	ldr	r2, [r4, #0]
 8009cf4:	f022 0220 	bic.w	r2, r2, #32
 8009cf8:	6022      	str	r2, [r4, #0]
 8009cfa:	2210      	movs	r2, #16
 8009cfc:	e7b7      	b.n	8009c6e <_printf_i+0xd2>
 8009cfe:	064d      	lsls	r5, r1, #25
 8009d00:	bf48      	it	mi
 8009d02:	b29b      	uxthmi	r3, r3
 8009d04:	e7ef      	b.n	8009ce6 <_printf_i+0x14a>
 8009d06:	4665      	mov	r5, ip
 8009d08:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d0c:	fb02 3311 	mls	r3, r2, r1, r3
 8009d10:	5cc3      	ldrb	r3, [r0, r3]
 8009d12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009d16:	460b      	mov	r3, r1
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	d1f5      	bne.n	8009d08 <_printf_i+0x16c>
 8009d1c:	e7b9      	b.n	8009c92 <_printf_i+0xf6>
 8009d1e:	6813      	ldr	r3, [r2, #0]
 8009d20:	6825      	ldr	r5, [r4, #0]
 8009d22:	6961      	ldr	r1, [r4, #20]
 8009d24:	1d18      	adds	r0, r3, #4
 8009d26:	6010      	str	r0, [r2, #0]
 8009d28:	0628      	lsls	r0, r5, #24
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	d501      	bpl.n	8009d32 <_printf_i+0x196>
 8009d2e:	6019      	str	r1, [r3, #0]
 8009d30:	e002      	b.n	8009d38 <_printf_i+0x19c>
 8009d32:	066a      	lsls	r2, r5, #25
 8009d34:	d5fb      	bpl.n	8009d2e <_printf_i+0x192>
 8009d36:	8019      	strh	r1, [r3, #0]
 8009d38:	2300      	movs	r3, #0
 8009d3a:	6123      	str	r3, [r4, #16]
 8009d3c:	4665      	mov	r5, ip
 8009d3e:	e7b9      	b.n	8009cb4 <_printf_i+0x118>
 8009d40:	6813      	ldr	r3, [r2, #0]
 8009d42:	1d19      	adds	r1, r3, #4
 8009d44:	6011      	str	r1, [r2, #0]
 8009d46:	681d      	ldr	r5, [r3, #0]
 8009d48:	6862      	ldr	r2, [r4, #4]
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	f7f6 fa6f 	bl	8000230 <memchr>
 8009d52:	b108      	cbz	r0, 8009d58 <_printf_i+0x1bc>
 8009d54:	1b40      	subs	r0, r0, r5
 8009d56:	6060      	str	r0, [r4, #4]
 8009d58:	6863      	ldr	r3, [r4, #4]
 8009d5a:	6123      	str	r3, [r4, #16]
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d62:	e7a7      	b.n	8009cb4 <_printf_i+0x118>
 8009d64:	6923      	ldr	r3, [r4, #16]
 8009d66:	462a      	mov	r2, r5
 8009d68:	4639      	mov	r1, r7
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	47c0      	blx	r8
 8009d6e:	3001      	adds	r0, #1
 8009d70:	d0aa      	beq.n	8009cc8 <_printf_i+0x12c>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	079b      	lsls	r3, r3, #30
 8009d76:	d413      	bmi.n	8009da0 <_printf_i+0x204>
 8009d78:	68e0      	ldr	r0, [r4, #12]
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	4298      	cmp	r0, r3
 8009d7e:	bfb8      	it	lt
 8009d80:	4618      	movlt	r0, r3
 8009d82:	e7a3      	b.n	8009ccc <_printf_i+0x130>
 8009d84:	2301      	movs	r3, #1
 8009d86:	464a      	mov	r2, r9
 8009d88:	4639      	mov	r1, r7
 8009d8a:	4630      	mov	r0, r6
 8009d8c:	47c0      	blx	r8
 8009d8e:	3001      	adds	r0, #1
 8009d90:	d09a      	beq.n	8009cc8 <_printf_i+0x12c>
 8009d92:	3501      	adds	r5, #1
 8009d94:	68e3      	ldr	r3, [r4, #12]
 8009d96:	9a03      	ldr	r2, [sp, #12]
 8009d98:	1a9b      	subs	r3, r3, r2
 8009d9a:	42ab      	cmp	r3, r5
 8009d9c:	dcf2      	bgt.n	8009d84 <_printf_i+0x1e8>
 8009d9e:	e7eb      	b.n	8009d78 <_printf_i+0x1dc>
 8009da0:	2500      	movs	r5, #0
 8009da2:	f104 0919 	add.w	r9, r4, #25
 8009da6:	e7f5      	b.n	8009d94 <_printf_i+0x1f8>
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1ac      	bne.n	8009d06 <_printf_i+0x16a>
 8009dac:	7803      	ldrb	r3, [r0, #0]
 8009dae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009db2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009db6:	e76c      	b.n	8009c92 <_printf_i+0xf6>
 8009db8:	0800c176 	.word	0x0800c176
 8009dbc:	0800c187 	.word	0x0800c187

08009dc0 <siprintf>:
 8009dc0:	b40e      	push	{r1, r2, r3}
 8009dc2:	b500      	push	{lr}
 8009dc4:	b09c      	sub	sp, #112	; 0x70
 8009dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8009dc8:	9002      	str	r0, [sp, #8]
 8009dca:	9006      	str	r0, [sp, #24]
 8009dcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009dd0:	4809      	ldr	r0, [pc, #36]	; (8009df8 <siprintf+0x38>)
 8009dd2:	9107      	str	r1, [sp, #28]
 8009dd4:	9104      	str	r1, [sp, #16]
 8009dd6:	4909      	ldr	r1, [pc, #36]	; (8009dfc <siprintf+0x3c>)
 8009dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ddc:	9105      	str	r1, [sp, #20]
 8009dde:	6800      	ldr	r0, [r0, #0]
 8009de0:	9301      	str	r3, [sp, #4]
 8009de2:	a902      	add	r1, sp, #8
 8009de4:	f001 faba 	bl	800b35c <_svfiprintf_r>
 8009de8:	9b02      	ldr	r3, [sp, #8]
 8009dea:	2200      	movs	r2, #0
 8009dec:	701a      	strb	r2, [r3, #0]
 8009dee:	b01c      	add	sp, #112	; 0x70
 8009df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009df4:	b003      	add	sp, #12
 8009df6:	4770      	bx	lr
 8009df8:	2000002c 	.word	0x2000002c
 8009dfc:	ffff0208 	.word	0xffff0208

08009e00 <strncmp>:
 8009e00:	b510      	push	{r4, lr}
 8009e02:	b16a      	cbz	r2, 8009e20 <strncmp+0x20>
 8009e04:	3901      	subs	r1, #1
 8009e06:	1884      	adds	r4, r0, r2
 8009e08:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009e0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d103      	bne.n	8009e1c <strncmp+0x1c>
 8009e14:	42a0      	cmp	r0, r4
 8009e16:	d001      	beq.n	8009e1c <strncmp+0x1c>
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1f5      	bne.n	8009e08 <strncmp+0x8>
 8009e1c:	1a98      	subs	r0, r3, r2
 8009e1e:	bd10      	pop	{r4, pc}
 8009e20:	4610      	mov	r0, r2
 8009e22:	e7fc      	b.n	8009e1e <strncmp+0x1e>

08009e24 <strtok>:
 8009e24:	4b13      	ldr	r3, [pc, #76]	; (8009e74 <strtok+0x50>)
 8009e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2a:	681d      	ldr	r5, [r3, #0]
 8009e2c:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009e2e:	4606      	mov	r6, r0
 8009e30:	460f      	mov	r7, r1
 8009e32:	b9b4      	cbnz	r4, 8009e62 <strtok+0x3e>
 8009e34:	2050      	movs	r0, #80	; 0x50
 8009e36:	f000 fe9d 	bl	800ab74 <malloc>
 8009e3a:	65a8      	str	r0, [r5, #88]	; 0x58
 8009e3c:	e9c0 4400 	strd	r4, r4, [r0]
 8009e40:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009e44:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009e48:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009e4c:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009e50:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009e54:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009e58:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009e5c:	6184      	str	r4, [r0, #24]
 8009e5e:	7704      	strb	r4, [r0, #28]
 8009e60:	6244      	str	r4, [r0, #36]	; 0x24
 8009e62:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8009e64:	4639      	mov	r1, r7
 8009e66:	4630      	mov	r0, r6
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6e:	f000 b803 	b.w	8009e78 <__strtok_r>
 8009e72:	bf00      	nop
 8009e74:	2000002c 	.word	0x2000002c

08009e78 <__strtok_r>:
 8009e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e7a:	b918      	cbnz	r0, 8009e84 <__strtok_r+0xc>
 8009e7c:	6810      	ldr	r0, [r2, #0]
 8009e7e:	b908      	cbnz	r0, 8009e84 <__strtok_r+0xc>
 8009e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e82:	4620      	mov	r0, r4
 8009e84:	4604      	mov	r4, r0
 8009e86:	460f      	mov	r7, r1
 8009e88:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009e8c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009e90:	b91e      	cbnz	r6, 8009e9a <__strtok_r+0x22>
 8009e92:	b96d      	cbnz	r5, 8009eb0 <__strtok_r+0x38>
 8009e94:	6015      	str	r5, [r2, #0]
 8009e96:	4628      	mov	r0, r5
 8009e98:	e7f2      	b.n	8009e80 <__strtok_r+0x8>
 8009e9a:	42b5      	cmp	r5, r6
 8009e9c:	d1f6      	bne.n	8009e8c <__strtok_r+0x14>
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1ef      	bne.n	8009e82 <__strtok_r+0xa>
 8009ea2:	6014      	str	r4, [r2, #0]
 8009ea4:	7003      	strb	r3, [r0, #0]
 8009ea6:	e7eb      	b.n	8009e80 <__strtok_r+0x8>
 8009ea8:	462b      	mov	r3, r5
 8009eaa:	e00d      	b.n	8009ec8 <__strtok_r+0x50>
 8009eac:	b926      	cbnz	r6, 8009eb8 <__strtok_r+0x40>
 8009eae:	461c      	mov	r4, r3
 8009eb0:	4623      	mov	r3, r4
 8009eb2:	460f      	mov	r7, r1
 8009eb4:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009eb8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009ebc:	42b5      	cmp	r5, r6
 8009ebe:	d1f5      	bne.n	8009eac <__strtok_r+0x34>
 8009ec0:	2d00      	cmp	r5, #0
 8009ec2:	d0f1      	beq.n	8009ea8 <__strtok_r+0x30>
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	7021      	strb	r1, [r4, #0]
 8009ec8:	6013      	str	r3, [r2, #0]
 8009eca:	e7d9      	b.n	8009e80 <__strtok_r+0x8>

08009ecc <quorem>:
 8009ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed0:	6903      	ldr	r3, [r0, #16]
 8009ed2:	690c      	ldr	r4, [r1, #16]
 8009ed4:	42a3      	cmp	r3, r4
 8009ed6:	4680      	mov	r8, r0
 8009ed8:	f2c0 8082 	blt.w	8009fe0 <quorem+0x114>
 8009edc:	3c01      	subs	r4, #1
 8009ede:	f101 0714 	add.w	r7, r1, #20
 8009ee2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009ee6:	f100 0614 	add.w	r6, r0, #20
 8009eea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009eee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009ef2:	eb06 030c 	add.w	r3, r6, ip
 8009ef6:	3501      	adds	r5, #1
 8009ef8:	eb07 090c 	add.w	r9, r7, ip
 8009efc:	9301      	str	r3, [sp, #4]
 8009efe:	fbb0 f5f5 	udiv	r5, r0, r5
 8009f02:	b395      	cbz	r5, 8009f6a <quorem+0x9e>
 8009f04:	f04f 0a00 	mov.w	sl, #0
 8009f08:	4638      	mov	r0, r7
 8009f0a:	46b6      	mov	lr, r6
 8009f0c:	46d3      	mov	fp, sl
 8009f0e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f12:	b293      	uxth	r3, r2
 8009f14:	fb05 a303 	mla	r3, r5, r3, sl
 8009f18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	ebab 0303 	sub.w	r3, fp, r3
 8009f22:	0c12      	lsrs	r2, r2, #16
 8009f24:	f8de b000 	ldr.w	fp, [lr]
 8009f28:	fb05 a202 	mla	r2, r5, r2, sl
 8009f2c:	fa13 f38b 	uxtah	r3, r3, fp
 8009f30:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009f34:	fa1f fb82 	uxth.w	fp, r2
 8009f38:	f8de 2000 	ldr.w	r2, [lr]
 8009f3c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009f40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f4a:	4581      	cmp	r9, r0
 8009f4c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009f50:	f84e 3b04 	str.w	r3, [lr], #4
 8009f54:	d2db      	bcs.n	8009f0e <quorem+0x42>
 8009f56:	f856 300c 	ldr.w	r3, [r6, ip]
 8009f5a:	b933      	cbnz	r3, 8009f6a <quorem+0x9e>
 8009f5c:	9b01      	ldr	r3, [sp, #4]
 8009f5e:	3b04      	subs	r3, #4
 8009f60:	429e      	cmp	r6, r3
 8009f62:	461a      	mov	r2, r3
 8009f64:	d330      	bcc.n	8009fc8 <quorem+0xfc>
 8009f66:	f8c8 4010 	str.w	r4, [r8, #16]
 8009f6a:	4640      	mov	r0, r8
 8009f6c:	f001 f820 	bl	800afb0 <__mcmp>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	db25      	blt.n	8009fc0 <quorem+0xf4>
 8009f74:	3501      	adds	r5, #1
 8009f76:	4630      	mov	r0, r6
 8009f78:	f04f 0c00 	mov.w	ip, #0
 8009f7c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009f80:	f8d0 e000 	ldr.w	lr, [r0]
 8009f84:	b293      	uxth	r3, r2
 8009f86:	ebac 0303 	sub.w	r3, ip, r3
 8009f8a:	0c12      	lsrs	r2, r2, #16
 8009f8c:	fa13 f38e 	uxtah	r3, r3, lr
 8009f90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f9e:	45b9      	cmp	r9, r7
 8009fa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009fa4:	f840 3b04 	str.w	r3, [r0], #4
 8009fa8:	d2e8      	bcs.n	8009f7c <quorem+0xb0>
 8009faa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009fae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009fb2:	b92a      	cbnz	r2, 8009fc0 <quorem+0xf4>
 8009fb4:	3b04      	subs	r3, #4
 8009fb6:	429e      	cmp	r6, r3
 8009fb8:	461a      	mov	r2, r3
 8009fba:	d30b      	bcc.n	8009fd4 <quorem+0x108>
 8009fbc:	f8c8 4010 	str.w	r4, [r8, #16]
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	b003      	add	sp, #12
 8009fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fc8:	6812      	ldr	r2, [r2, #0]
 8009fca:	3b04      	subs	r3, #4
 8009fcc:	2a00      	cmp	r2, #0
 8009fce:	d1ca      	bne.n	8009f66 <quorem+0x9a>
 8009fd0:	3c01      	subs	r4, #1
 8009fd2:	e7c5      	b.n	8009f60 <quorem+0x94>
 8009fd4:	6812      	ldr	r2, [r2, #0]
 8009fd6:	3b04      	subs	r3, #4
 8009fd8:	2a00      	cmp	r2, #0
 8009fda:	d1ef      	bne.n	8009fbc <quorem+0xf0>
 8009fdc:	3c01      	subs	r4, #1
 8009fde:	e7ea      	b.n	8009fb6 <quorem+0xea>
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	e7ee      	b.n	8009fc2 <quorem+0xf6>
 8009fe4:	0000      	movs	r0, r0
	...

08009fe8 <_dtoa_r>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	ec57 6b10 	vmov	r6, r7, d0
 8009ff0:	b097      	sub	sp, #92	; 0x5c
 8009ff2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ff4:	9106      	str	r1, [sp, #24]
 8009ff6:	4604      	mov	r4, r0
 8009ff8:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ffa:	9312      	str	r3, [sp, #72]	; 0x48
 8009ffc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a000:	e9cd 6700 	strd	r6, r7, [sp]
 800a004:	b93d      	cbnz	r5, 800a016 <_dtoa_r+0x2e>
 800a006:	2010      	movs	r0, #16
 800a008:	f000 fdb4 	bl	800ab74 <malloc>
 800a00c:	6260      	str	r0, [r4, #36]	; 0x24
 800a00e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a012:	6005      	str	r5, [r0, #0]
 800a014:	60c5      	str	r5, [r0, #12]
 800a016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a018:	6819      	ldr	r1, [r3, #0]
 800a01a:	b151      	cbz	r1, 800a032 <_dtoa_r+0x4a>
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	604a      	str	r2, [r1, #4]
 800a020:	2301      	movs	r3, #1
 800a022:	4093      	lsls	r3, r2
 800a024:	608b      	str	r3, [r1, #8]
 800a026:	4620      	mov	r0, r4
 800a028:	f000 fde0 	bl	800abec <_Bfree>
 800a02c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]
 800a032:	1e3b      	subs	r3, r7, #0
 800a034:	bfbb      	ittet	lt
 800a036:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a03a:	9301      	strlt	r3, [sp, #4]
 800a03c:	2300      	movge	r3, #0
 800a03e:	2201      	movlt	r2, #1
 800a040:	bfac      	ite	ge
 800a042:	f8c8 3000 	strge.w	r3, [r8]
 800a046:	f8c8 2000 	strlt.w	r2, [r8]
 800a04a:	4baf      	ldr	r3, [pc, #700]	; (800a308 <_dtoa_r+0x320>)
 800a04c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a050:	ea33 0308 	bics.w	r3, r3, r8
 800a054:	d114      	bne.n	800a080 <_dtoa_r+0x98>
 800a056:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a058:	f242 730f 	movw	r3, #9999	; 0x270f
 800a05c:	6013      	str	r3, [r2, #0]
 800a05e:	9b00      	ldr	r3, [sp, #0]
 800a060:	b923      	cbnz	r3, 800a06c <_dtoa_r+0x84>
 800a062:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a066:	2800      	cmp	r0, #0
 800a068:	f000 8542 	beq.w	800aaf0 <_dtoa_r+0xb08>
 800a06c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a06e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a31c <_dtoa_r+0x334>
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 8544 	beq.w	800ab00 <_dtoa_r+0xb18>
 800a078:	f10b 0303 	add.w	r3, fp, #3
 800a07c:	f000 bd3e 	b.w	800aafc <_dtoa_r+0xb14>
 800a080:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a084:	2200      	movs	r2, #0
 800a086:	2300      	movs	r3, #0
 800a088:	4630      	mov	r0, r6
 800a08a:	4639      	mov	r1, r7
 800a08c:	f7f6 fd44 	bl	8000b18 <__aeabi_dcmpeq>
 800a090:	4681      	mov	r9, r0
 800a092:	b168      	cbz	r0, 800a0b0 <_dtoa_r+0xc8>
 800a094:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a096:	2301      	movs	r3, #1
 800a098:	6013      	str	r3, [r2, #0]
 800a09a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f000 8524 	beq.w	800aaea <_dtoa_r+0xb02>
 800a0a2:	4b9a      	ldr	r3, [pc, #616]	; (800a30c <_dtoa_r+0x324>)
 800a0a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0a6:	f103 3bff 	add.w	fp, r3, #4294967295
 800a0aa:	6013      	str	r3, [r2, #0]
 800a0ac:	f000 bd28 	b.w	800ab00 <_dtoa_r+0xb18>
 800a0b0:	aa14      	add	r2, sp, #80	; 0x50
 800a0b2:	a915      	add	r1, sp, #84	; 0x54
 800a0b4:	ec47 6b10 	vmov	d0, r6, r7
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f000 fff0 	bl	800b09e <__d2b>
 800a0be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a0c2:	9004      	str	r0, [sp, #16]
 800a0c4:	2d00      	cmp	r5, #0
 800a0c6:	d07c      	beq.n	800a1c2 <_dtoa_r+0x1da>
 800a0c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a0cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a0d0:	46b2      	mov	sl, r6
 800a0d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a0d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a0da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a0de:	2200      	movs	r2, #0
 800a0e0:	4b8b      	ldr	r3, [pc, #556]	; (800a310 <_dtoa_r+0x328>)
 800a0e2:	4650      	mov	r0, sl
 800a0e4:	4659      	mov	r1, fp
 800a0e6:	f7f6 f8f7 	bl	80002d8 <__aeabi_dsub>
 800a0ea:	a381      	add	r3, pc, #516	; (adr r3, 800a2f0 <_dtoa_r+0x308>)
 800a0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f0:	f7f6 faaa 	bl	8000648 <__aeabi_dmul>
 800a0f4:	a380      	add	r3, pc, #512	; (adr r3, 800a2f8 <_dtoa_r+0x310>)
 800a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fa:	f7f6 f8ef 	bl	80002dc <__adddf3>
 800a0fe:	4606      	mov	r6, r0
 800a100:	4628      	mov	r0, r5
 800a102:	460f      	mov	r7, r1
 800a104:	f7f6 fa36 	bl	8000574 <__aeabi_i2d>
 800a108:	a37d      	add	r3, pc, #500	; (adr r3, 800a300 <_dtoa_r+0x318>)
 800a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10e:	f7f6 fa9b 	bl	8000648 <__aeabi_dmul>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4630      	mov	r0, r6
 800a118:	4639      	mov	r1, r7
 800a11a:	f7f6 f8df 	bl	80002dc <__adddf3>
 800a11e:	4606      	mov	r6, r0
 800a120:	460f      	mov	r7, r1
 800a122:	f7f6 fd41 	bl	8000ba8 <__aeabi_d2iz>
 800a126:	2200      	movs	r2, #0
 800a128:	4682      	mov	sl, r0
 800a12a:	2300      	movs	r3, #0
 800a12c:	4630      	mov	r0, r6
 800a12e:	4639      	mov	r1, r7
 800a130:	f7f6 fcfc 	bl	8000b2c <__aeabi_dcmplt>
 800a134:	b148      	cbz	r0, 800a14a <_dtoa_r+0x162>
 800a136:	4650      	mov	r0, sl
 800a138:	f7f6 fa1c 	bl	8000574 <__aeabi_i2d>
 800a13c:	4632      	mov	r2, r6
 800a13e:	463b      	mov	r3, r7
 800a140:	f7f6 fcea 	bl	8000b18 <__aeabi_dcmpeq>
 800a144:	b908      	cbnz	r0, 800a14a <_dtoa_r+0x162>
 800a146:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a14a:	f1ba 0f16 	cmp.w	sl, #22
 800a14e:	d859      	bhi.n	800a204 <_dtoa_r+0x21c>
 800a150:	4970      	ldr	r1, [pc, #448]	; (800a314 <_dtoa_r+0x32c>)
 800a152:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a156:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a15a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a15e:	f7f6 fd03 	bl	8000b68 <__aeabi_dcmpgt>
 800a162:	2800      	cmp	r0, #0
 800a164:	d050      	beq.n	800a208 <_dtoa_r+0x220>
 800a166:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a16a:	2300      	movs	r3, #0
 800a16c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a16e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a170:	1b5d      	subs	r5, r3, r5
 800a172:	f1b5 0801 	subs.w	r8, r5, #1
 800a176:	bf49      	itett	mi
 800a178:	f1c5 0301 	rsbmi	r3, r5, #1
 800a17c:	2300      	movpl	r3, #0
 800a17e:	9305      	strmi	r3, [sp, #20]
 800a180:	f04f 0800 	movmi.w	r8, #0
 800a184:	bf58      	it	pl
 800a186:	9305      	strpl	r3, [sp, #20]
 800a188:	f1ba 0f00 	cmp.w	sl, #0
 800a18c:	db3e      	blt.n	800a20c <_dtoa_r+0x224>
 800a18e:	2300      	movs	r3, #0
 800a190:	44d0      	add	r8, sl
 800a192:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a196:	9307      	str	r3, [sp, #28]
 800a198:	9b06      	ldr	r3, [sp, #24]
 800a19a:	2b09      	cmp	r3, #9
 800a19c:	f200 8090 	bhi.w	800a2c0 <_dtoa_r+0x2d8>
 800a1a0:	2b05      	cmp	r3, #5
 800a1a2:	bfc4      	itt	gt
 800a1a4:	3b04      	subgt	r3, #4
 800a1a6:	9306      	strgt	r3, [sp, #24]
 800a1a8:	9b06      	ldr	r3, [sp, #24]
 800a1aa:	f1a3 0302 	sub.w	r3, r3, #2
 800a1ae:	bfcc      	ite	gt
 800a1b0:	2500      	movgt	r5, #0
 800a1b2:	2501      	movle	r5, #1
 800a1b4:	2b03      	cmp	r3, #3
 800a1b6:	f200 808f 	bhi.w	800a2d8 <_dtoa_r+0x2f0>
 800a1ba:	e8df f003 	tbb	[pc, r3]
 800a1be:	7f7d      	.short	0x7f7d
 800a1c0:	7131      	.short	0x7131
 800a1c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a1c6:	441d      	add	r5, r3
 800a1c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a1cc:	2820      	cmp	r0, #32
 800a1ce:	dd13      	ble.n	800a1f8 <_dtoa_r+0x210>
 800a1d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a1d4:	9b00      	ldr	r3, [sp, #0]
 800a1d6:	fa08 f800 	lsl.w	r8, r8, r0
 800a1da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a1de:	fa23 f000 	lsr.w	r0, r3, r0
 800a1e2:	ea48 0000 	orr.w	r0, r8, r0
 800a1e6:	f7f6 f9b5 	bl	8000554 <__aeabi_ui2d>
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	4682      	mov	sl, r0
 800a1ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a1f2:	3d01      	subs	r5, #1
 800a1f4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1f6:	e772      	b.n	800a0de <_dtoa_r+0xf6>
 800a1f8:	9b00      	ldr	r3, [sp, #0]
 800a1fa:	f1c0 0020 	rsb	r0, r0, #32
 800a1fe:	fa03 f000 	lsl.w	r0, r3, r0
 800a202:	e7f0      	b.n	800a1e6 <_dtoa_r+0x1fe>
 800a204:	2301      	movs	r3, #1
 800a206:	e7b1      	b.n	800a16c <_dtoa_r+0x184>
 800a208:	900f      	str	r0, [sp, #60]	; 0x3c
 800a20a:	e7b0      	b.n	800a16e <_dtoa_r+0x186>
 800a20c:	9b05      	ldr	r3, [sp, #20]
 800a20e:	eba3 030a 	sub.w	r3, r3, sl
 800a212:	9305      	str	r3, [sp, #20]
 800a214:	f1ca 0300 	rsb	r3, sl, #0
 800a218:	9307      	str	r3, [sp, #28]
 800a21a:	2300      	movs	r3, #0
 800a21c:	930e      	str	r3, [sp, #56]	; 0x38
 800a21e:	e7bb      	b.n	800a198 <_dtoa_r+0x1b0>
 800a220:	2301      	movs	r3, #1
 800a222:	930a      	str	r3, [sp, #40]	; 0x28
 800a224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a226:	2b00      	cmp	r3, #0
 800a228:	dd59      	ble.n	800a2de <_dtoa_r+0x2f6>
 800a22a:	9302      	str	r3, [sp, #8]
 800a22c:	4699      	mov	r9, r3
 800a22e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a230:	2200      	movs	r2, #0
 800a232:	6072      	str	r2, [r6, #4]
 800a234:	2204      	movs	r2, #4
 800a236:	f102 0014 	add.w	r0, r2, #20
 800a23a:	4298      	cmp	r0, r3
 800a23c:	6871      	ldr	r1, [r6, #4]
 800a23e:	d953      	bls.n	800a2e8 <_dtoa_r+0x300>
 800a240:	4620      	mov	r0, r4
 800a242:	f000 fc9f 	bl	800ab84 <_Balloc>
 800a246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a248:	6030      	str	r0, [r6, #0]
 800a24a:	f1b9 0f0e 	cmp.w	r9, #14
 800a24e:	f8d3 b000 	ldr.w	fp, [r3]
 800a252:	f200 80e6 	bhi.w	800a422 <_dtoa_r+0x43a>
 800a256:	2d00      	cmp	r5, #0
 800a258:	f000 80e3 	beq.w	800a422 <_dtoa_r+0x43a>
 800a25c:	ed9d 7b00 	vldr	d7, [sp]
 800a260:	f1ba 0f00 	cmp.w	sl, #0
 800a264:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a268:	dd74      	ble.n	800a354 <_dtoa_r+0x36c>
 800a26a:	4a2a      	ldr	r2, [pc, #168]	; (800a314 <_dtoa_r+0x32c>)
 800a26c:	f00a 030f 	and.w	r3, sl, #15
 800a270:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a274:	ed93 7b00 	vldr	d7, [r3]
 800a278:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a27c:	06f0      	lsls	r0, r6, #27
 800a27e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a282:	d565      	bpl.n	800a350 <_dtoa_r+0x368>
 800a284:	4b24      	ldr	r3, [pc, #144]	; (800a318 <_dtoa_r+0x330>)
 800a286:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a28a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a28e:	f7f6 fb05 	bl	800089c <__aeabi_ddiv>
 800a292:	e9cd 0100 	strd	r0, r1, [sp]
 800a296:	f006 060f 	and.w	r6, r6, #15
 800a29a:	2503      	movs	r5, #3
 800a29c:	4f1e      	ldr	r7, [pc, #120]	; (800a318 <_dtoa_r+0x330>)
 800a29e:	e04c      	b.n	800a33a <_dtoa_r+0x352>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a2a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2a6:	4453      	add	r3, sl
 800a2a8:	f103 0901 	add.w	r9, r3, #1
 800a2ac:	9302      	str	r3, [sp, #8]
 800a2ae:	464b      	mov	r3, r9
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	bfb8      	it	lt
 800a2b4:	2301      	movlt	r3, #1
 800a2b6:	e7ba      	b.n	800a22e <_dtoa_r+0x246>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	e7b2      	b.n	800a222 <_dtoa_r+0x23a>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	e7f0      	b.n	800a2a2 <_dtoa_r+0x2ba>
 800a2c0:	2501      	movs	r5, #1
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9306      	str	r3, [sp, #24]
 800a2c6:	950a      	str	r5, [sp, #40]	; 0x28
 800a2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2cc:	9302      	str	r3, [sp, #8]
 800a2ce:	4699      	mov	r9, r3
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2312      	movs	r3, #18
 800a2d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a2d6:	e7aa      	b.n	800a22e <_dtoa_r+0x246>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	930a      	str	r3, [sp, #40]	; 0x28
 800a2dc:	e7f4      	b.n	800a2c8 <_dtoa_r+0x2e0>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	9302      	str	r3, [sp, #8]
 800a2e2:	4699      	mov	r9, r3
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	e7f5      	b.n	800a2d4 <_dtoa_r+0x2ec>
 800a2e8:	3101      	adds	r1, #1
 800a2ea:	6071      	str	r1, [r6, #4]
 800a2ec:	0052      	lsls	r2, r2, #1
 800a2ee:	e7a2      	b.n	800a236 <_dtoa_r+0x24e>
 800a2f0:	636f4361 	.word	0x636f4361
 800a2f4:	3fd287a7 	.word	0x3fd287a7
 800a2f8:	8b60c8b3 	.word	0x8b60c8b3
 800a2fc:	3fc68a28 	.word	0x3fc68a28
 800a300:	509f79fb 	.word	0x509f79fb
 800a304:	3fd34413 	.word	0x3fd34413
 800a308:	7ff00000 	.word	0x7ff00000
 800a30c:	0800c175 	.word	0x0800c175
 800a310:	3ff80000 	.word	0x3ff80000
 800a314:	0800c1d0 	.word	0x0800c1d0
 800a318:	0800c1a8 	.word	0x0800c1a8
 800a31c:	0800c1a1 	.word	0x0800c1a1
 800a320:	07f1      	lsls	r1, r6, #31
 800a322:	d508      	bpl.n	800a336 <_dtoa_r+0x34e>
 800a324:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a32c:	f7f6 f98c 	bl	8000648 <__aeabi_dmul>
 800a330:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a334:	3501      	adds	r5, #1
 800a336:	1076      	asrs	r6, r6, #1
 800a338:	3708      	adds	r7, #8
 800a33a:	2e00      	cmp	r6, #0
 800a33c:	d1f0      	bne.n	800a320 <_dtoa_r+0x338>
 800a33e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a342:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a346:	f7f6 faa9 	bl	800089c <__aeabi_ddiv>
 800a34a:	e9cd 0100 	strd	r0, r1, [sp]
 800a34e:	e01a      	b.n	800a386 <_dtoa_r+0x39e>
 800a350:	2502      	movs	r5, #2
 800a352:	e7a3      	b.n	800a29c <_dtoa_r+0x2b4>
 800a354:	f000 80a0 	beq.w	800a498 <_dtoa_r+0x4b0>
 800a358:	f1ca 0600 	rsb	r6, sl, #0
 800a35c:	4b9f      	ldr	r3, [pc, #636]	; (800a5dc <_dtoa_r+0x5f4>)
 800a35e:	4fa0      	ldr	r7, [pc, #640]	; (800a5e0 <_dtoa_r+0x5f8>)
 800a360:	f006 020f 	and.w	r2, r6, #15
 800a364:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a370:	f7f6 f96a 	bl	8000648 <__aeabi_dmul>
 800a374:	e9cd 0100 	strd	r0, r1, [sp]
 800a378:	1136      	asrs	r6, r6, #4
 800a37a:	2300      	movs	r3, #0
 800a37c:	2502      	movs	r5, #2
 800a37e:	2e00      	cmp	r6, #0
 800a380:	d17f      	bne.n	800a482 <_dtoa_r+0x49a>
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1e1      	bne.n	800a34a <_dtoa_r+0x362>
 800a386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f000 8087 	beq.w	800a49c <_dtoa_r+0x4b4>
 800a38e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a392:	2200      	movs	r2, #0
 800a394:	4b93      	ldr	r3, [pc, #588]	; (800a5e4 <_dtoa_r+0x5fc>)
 800a396:	4630      	mov	r0, r6
 800a398:	4639      	mov	r1, r7
 800a39a:	f7f6 fbc7 	bl	8000b2c <__aeabi_dcmplt>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d07c      	beq.n	800a49c <_dtoa_r+0x4b4>
 800a3a2:	f1b9 0f00 	cmp.w	r9, #0
 800a3a6:	d079      	beq.n	800a49c <_dtoa_r+0x4b4>
 800a3a8:	9b02      	ldr	r3, [sp, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	dd35      	ble.n	800a41a <_dtoa_r+0x432>
 800a3ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a3b2:	9308      	str	r3, [sp, #32]
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	4b8b      	ldr	r3, [pc, #556]	; (800a5e8 <_dtoa_r+0x600>)
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f7f6 f944 	bl	8000648 <__aeabi_dmul>
 800a3c0:	e9cd 0100 	strd	r0, r1, [sp]
 800a3c4:	9f02      	ldr	r7, [sp, #8]
 800a3c6:	3501      	adds	r5, #1
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	f7f6 f8d3 	bl	8000574 <__aeabi_i2d>
 800a3ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3d2:	f7f6 f939 	bl	8000648 <__aeabi_dmul>
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	4b84      	ldr	r3, [pc, #528]	; (800a5ec <_dtoa_r+0x604>)
 800a3da:	f7f5 ff7f 	bl	80002dc <__adddf3>
 800a3de:	4605      	mov	r5, r0
 800a3e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a3e4:	2f00      	cmp	r7, #0
 800a3e6:	d15d      	bne.n	800a4a4 <_dtoa_r+0x4bc>
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	4b81      	ldr	r3, [pc, #516]	; (800a5f0 <_dtoa_r+0x608>)
 800a3ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3f0:	f7f5 ff72 	bl	80002d8 <__aeabi_dsub>
 800a3f4:	462a      	mov	r2, r5
 800a3f6:	4633      	mov	r3, r6
 800a3f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a3fc:	f7f6 fbb4 	bl	8000b68 <__aeabi_dcmpgt>
 800a400:	2800      	cmp	r0, #0
 800a402:	f040 8288 	bne.w	800a916 <_dtoa_r+0x92e>
 800a406:	462a      	mov	r2, r5
 800a408:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a40c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a410:	f7f6 fb8c 	bl	8000b2c <__aeabi_dcmplt>
 800a414:	2800      	cmp	r0, #0
 800a416:	f040 827c 	bne.w	800a912 <_dtoa_r+0x92a>
 800a41a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a41e:	e9cd 2300 	strd	r2, r3, [sp]
 800a422:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a424:	2b00      	cmp	r3, #0
 800a426:	f2c0 8150 	blt.w	800a6ca <_dtoa_r+0x6e2>
 800a42a:	f1ba 0f0e 	cmp.w	sl, #14
 800a42e:	f300 814c 	bgt.w	800a6ca <_dtoa_r+0x6e2>
 800a432:	4b6a      	ldr	r3, [pc, #424]	; (800a5dc <_dtoa_r+0x5f4>)
 800a434:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a438:	ed93 7b00 	vldr	d7, [r3]
 800a43c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a43e:	2b00      	cmp	r3, #0
 800a440:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a444:	f280 80d8 	bge.w	800a5f8 <_dtoa_r+0x610>
 800a448:	f1b9 0f00 	cmp.w	r9, #0
 800a44c:	f300 80d4 	bgt.w	800a5f8 <_dtoa_r+0x610>
 800a450:	f040 825e 	bne.w	800a910 <_dtoa_r+0x928>
 800a454:	2200      	movs	r2, #0
 800a456:	4b66      	ldr	r3, [pc, #408]	; (800a5f0 <_dtoa_r+0x608>)
 800a458:	ec51 0b17 	vmov	r0, r1, d7
 800a45c:	f7f6 f8f4 	bl	8000648 <__aeabi_dmul>
 800a460:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a464:	f7f6 fb76 	bl	8000b54 <__aeabi_dcmpge>
 800a468:	464f      	mov	r7, r9
 800a46a:	464e      	mov	r6, r9
 800a46c:	2800      	cmp	r0, #0
 800a46e:	f040 8234 	bne.w	800a8da <_dtoa_r+0x8f2>
 800a472:	2331      	movs	r3, #49	; 0x31
 800a474:	f10b 0501 	add.w	r5, fp, #1
 800a478:	f88b 3000 	strb.w	r3, [fp]
 800a47c:	f10a 0a01 	add.w	sl, sl, #1
 800a480:	e22f      	b.n	800a8e2 <_dtoa_r+0x8fa>
 800a482:	07f2      	lsls	r2, r6, #31
 800a484:	d505      	bpl.n	800a492 <_dtoa_r+0x4aa>
 800a486:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a48a:	f7f6 f8dd 	bl	8000648 <__aeabi_dmul>
 800a48e:	3501      	adds	r5, #1
 800a490:	2301      	movs	r3, #1
 800a492:	1076      	asrs	r6, r6, #1
 800a494:	3708      	adds	r7, #8
 800a496:	e772      	b.n	800a37e <_dtoa_r+0x396>
 800a498:	2502      	movs	r5, #2
 800a49a:	e774      	b.n	800a386 <_dtoa_r+0x39e>
 800a49c:	f8cd a020 	str.w	sl, [sp, #32]
 800a4a0:	464f      	mov	r7, r9
 800a4a2:	e791      	b.n	800a3c8 <_dtoa_r+0x3e0>
 800a4a4:	4b4d      	ldr	r3, [pc, #308]	; (800a5dc <_dtoa_r+0x5f4>)
 800a4a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a4aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d047      	beq.n	800a544 <_dtoa_r+0x55c>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	494e      	ldr	r1, [pc, #312]	; (800a5f4 <_dtoa_r+0x60c>)
 800a4bc:	f7f6 f9ee 	bl	800089c <__aeabi_ddiv>
 800a4c0:	462a      	mov	r2, r5
 800a4c2:	4633      	mov	r3, r6
 800a4c4:	f7f5 ff08 	bl	80002d8 <__aeabi_dsub>
 800a4c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a4cc:	465d      	mov	r5, fp
 800a4ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4d2:	f7f6 fb69 	bl	8000ba8 <__aeabi_d2iz>
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	f7f6 f84c 	bl	8000574 <__aeabi_i2d>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4e4:	f7f5 fef8 	bl	80002d8 <__aeabi_dsub>
 800a4e8:	3630      	adds	r6, #48	; 0x30
 800a4ea:	f805 6b01 	strb.w	r6, [r5], #1
 800a4ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a4f2:	e9cd 0100 	strd	r0, r1, [sp]
 800a4f6:	f7f6 fb19 	bl	8000b2c <__aeabi_dcmplt>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d163      	bne.n	800a5c6 <_dtoa_r+0x5de>
 800a4fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a502:	2000      	movs	r0, #0
 800a504:	4937      	ldr	r1, [pc, #220]	; (800a5e4 <_dtoa_r+0x5fc>)
 800a506:	f7f5 fee7 	bl	80002d8 <__aeabi_dsub>
 800a50a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a50e:	f7f6 fb0d 	bl	8000b2c <__aeabi_dcmplt>
 800a512:	2800      	cmp	r0, #0
 800a514:	f040 80b7 	bne.w	800a686 <_dtoa_r+0x69e>
 800a518:	eba5 030b 	sub.w	r3, r5, fp
 800a51c:	429f      	cmp	r7, r3
 800a51e:	f77f af7c 	ble.w	800a41a <_dtoa_r+0x432>
 800a522:	2200      	movs	r2, #0
 800a524:	4b30      	ldr	r3, [pc, #192]	; (800a5e8 <_dtoa_r+0x600>)
 800a526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a52a:	f7f6 f88d 	bl	8000648 <__aeabi_dmul>
 800a52e:	2200      	movs	r2, #0
 800a530:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a534:	4b2c      	ldr	r3, [pc, #176]	; (800a5e8 <_dtoa_r+0x600>)
 800a536:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a53a:	f7f6 f885 	bl	8000648 <__aeabi_dmul>
 800a53e:	e9cd 0100 	strd	r0, r1, [sp]
 800a542:	e7c4      	b.n	800a4ce <_dtoa_r+0x4e6>
 800a544:	462a      	mov	r2, r5
 800a546:	4633      	mov	r3, r6
 800a548:	f7f6 f87e 	bl	8000648 <__aeabi_dmul>
 800a54c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a550:	eb0b 0507 	add.w	r5, fp, r7
 800a554:	465e      	mov	r6, fp
 800a556:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a55a:	f7f6 fb25 	bl	8000ba8 <__aeabi_d2iz>
 800a55e:	4607      	mov	r7, r0
 800a560:	f7f6 f808 	bl	8000574 <__aeabi_i2d>
 800a564:	3730      	adds	r7, #48	; 0x30
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a56e:	f7f5 feb3 	bl	80002d8 <__aeabi_dsub>
 800a572:	f806 7b01 	strb.w	r7, [r6], #1
 800a576:	42ae      	cmp	r6, r5
 800a578:	e9cd 0100 	strd	r0, r1, [sp]
 800a57c:	f04f 0200 	mov.w	r2, #0
 800a580:	d126      	bne.n	800a5d0 <_dtoa_r+0x5e8>
 800a582:	4b1c      	ldr	r3, [pc, #112]	; (800a5f4 <_dtoa_r+0x60c>)
 800a584:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a588:	f7f5 fea8 	bl	80002dc <__adddf3>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a594:	f7f6 fae8 	bl	8000b68 <__aeabi_dcmpgt>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d174      	bne.n	800a686 <_dtoa_r+0x69e>
 800a59c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	4914      	ldr	r1, [pc, #80]	; (800a5f4 <_dtoa_r+0x60c>)
 800a5a4:	f7f5 fe98 	bl	80002d8 <__aeabi_dsub>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5b0:	f7f6 fabc 	bl	8000b2c <__aeabi_dcmplt>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	f43f af30 	beq.w	800a41a <_dtoa_r+0x432>
 800a5ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5be:	2b30      	cmp	r3, #48	; 0x30
 800a5c0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a5c4:	d002      	beq.n	800a5cc <_dtoa_r+0x5e4>
 800a5c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a5ca:	e04a      	b.n	800a662 <_dtoa_r+0x67a>
 800a5cc:	4615      	mov	r5, r2
 800a5ce:	e7f4      	b.n	800a5ba <_dtoa_r+0x5d2>
 800a5d0:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <_dtoa_r+0x600>)
 800a5d2:	f7f6 f839 	bl	8000648 <__aeabi_dmul>
 800a5d6:	e9cd 0100 	strd	r0, r1, [sp]
 800a5da:	e7bc      	b.n	800a556 <_dtoa_r+0x56e>
 800a5dc:	0800c1d0 	.word	0x0800c1d0
 800a5e0:	0800c1a8 	.word	0x0800c1a8
 800a5e4:	3ff00000 	.word	0x3ff00000
 800a5e8:	40240000 	.word	0x40240000
 800a5ec:	401c0000 	.word	0x401c0000
 800a5f0:	40140000 	.word	0x40140000
 800a5f4:	3fe00000 	.word	0x3fe00000
 800a5f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a5fc:	465d      	mov	r5, fp
 800a5fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a602:	4630      	mov	r0, r6
 800a604:	4639      	mov	r1, r7
 800a606:	f7f6 f949 	bl	800089c <__aeabi_ddiv>
 800a60a:	f7f6 facd 	bl	8000ba8 <__aeabi_d2iz>
 800a60e:	4680      	mov	r8, r0
 800a610:	f7f5 ffb0 	bl	8000574 <__aeabi_i2d>
 800a614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a618:	f7f6 f816 	bl	8000648 <__aeabi_dmul>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4630      	mov	r0, r6
 800a622:	4639      	mov	r1, r7
 800a624:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a628:	f7f5 fe56 	bl	80002d8 <__aeabi_dsub>
 800a62c:	f805 6b01 	strb.w	r6, [r5], #1
 800a630:	eba5 060b 	sub.w	r6, r5, fp
 800a634:	45b1      	cmp	r9, r6
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	d139      	bne.n	800a6b0 <_dtoa_r+0x6c8>
 800a63c:	f7f5 fe4e 	bl	80002dc <__adddf3>
 800a640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a644:	4606      	mov	r6, r0
 800a646:	460f      	mov	r7, r1
 800a648:	f7f6 fa8e 	bl	8000b68 <__aeabi_dcmpgt>
 800a64c:	b9c8      	cbnz	r0, 800a682 <_dtoa_r+0x69a>
 800a64e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a652:	4630      	mov	r0, r6
 800a654:	4639      	mov	r1, r7
 800a656:	f7f6 fa5f 	bl	8000b18 <__aeabi_dcmpeq>
 800a65a:	b110      	cbz	r0, 800a662 <_dtoa_r+0x67a>
 800a65c:	f018 0f01 	tst.w	r8, #1
 800a660:	d10f      	bne.n	800a682 <_dtoa_r+0x69a>
 800a662:	9904      	ldr	r1, [sp, #16]
 800a664:	4620      	mov	r0, r4
 800a666:	f000 fac1 	bl	800abec <_Bfree>
 800a66a:	2300      	movs	r3, #0
 800a66c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a66e:	702b      	strb	r3, [r5, #0]
 800a670:	f10a 0301 	add.w	r3, sl, #1
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 8241 	beq.w	800ab00 <_dtoa_r+0xb18>
 800a67e:	601d      	str	r5, [r3, #0]
 800a680:	e23e      	b.n	800ab00 <_dtoa_r+0xb18>
 800a682:	f8cd a020 	str.w	sl, [sp, #32]
 800a686:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a68a:	2a39      	cmp	r2, #57	; 0x39
 800a68c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a690:	d108      	bne.n	800a6a4 <_dtoa_r+0x6bc>
 800a692:	459b      	cmp	fp, r3
 800a694:	d10a      	bne.n	800a6ac <_dtoa_r+0x6c4>
 800a696:	9b08      	ldr	r3, [sp, #32]
 800a698:	3301      	adds	r3, #1
 800a69a:	9308      	str	r3, [sp, #32]
 800a69c:	2330      	movs	r3, #48	; 0x30
 800a69e:	f88b 3000 	strb.w	r3, [fp]
 800a6a2:	465b      	mov	r3, fp
 800a6a4:	781a      	ldrb	r2, [r3, #0]
 800a6a6:	3201      	adds	r2, #1
 800a6a8:	701a      	strb	r2, [r3, #0]
 800a6aa:	e78c      	b.n	800a5c6 <_dtoa_r+0x5de>
 800a6ac:	461d      	mov	r5, r3
 800a6ae:	e7ea      	b.n	800a686 <_dtoa_r+0x69e>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4b9b      	ldr	r3, [pc, #620]	; (800a920 <_dtoa_r+0x938>)
 800a6b4:	f7f5 ffc8 	bl	8000648 <__aeabi_dmul>
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	4606      	mov	r6, r0
 800a6be:	460f      	mov	r7, r1
 800a6c0:	f7f6 fa2a 	bl	8000b18 <__aeabi_dcmpeq>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d09a      	beq.n	800a5fe <_dtoa_r+0x616>
 800a6c8:	e7cb      	b.n	800a662 <_dtoa_r+0x67a>
 800a6ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6cc:	2a00      	cmp	r2, #0
 800a6ce:	f000 808b 	beq.w	800a7e8 <_dtoa_r+0x800>
 800a6d2:	9a06      	ldr	r2, [sp, #24]
 800a6d4:	2a01      	cmp	r2, #1
 800a6d6:	dc6e      	bgt.n	800a7b6 <_dtoa_r+0x7ce>
 800a6d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6da:	2a00      	cmp	r2, #0
 800a6dc:	d067      	beq.n	800a7ae <_dtoa_r+0x7c6>
 800a6de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6e2:	9f07      	ldr	r7, [sp, #28]
 800a6e4:	9d05      	ldr	r5, [sp, #20]
 800a6e6:	9a05      	ldr	r2, [sp, #20]
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	441a      	add	r2, r3
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	9205      	str	r2, [sp, #20]
 800a6f0:	4498      	add	r8, r3
 800a6f2:	f000 fb1b 	bl	800ad2c <__i2b>
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	2d00      	cmp	r5, #0
 800a6fa:	dd0c      	ble.n	800a716 <_dtoa_r+0x72e>
 800a6fc:	f1b8 0f00 	cmp.w	r8, #0
 800a700:	dd09      	ble.n	800a716 <_dtoa_r+0x72e>
 800a702:	4545      	cmp	r5, r8
 800a704:	9a05      	ldr	r2, [sp, #20]
 800a706:	462b      	mov	r3, r5
 800a708:	bfa8      	it	ge
 800a70a:	4643      	movge	r3, r8
 800a70c:	1ad2      	subs	r2, r2, r3
 800a70e:	9205      	str	r2, [sp, #20]
 800a710:	1aed      	subs	r5, r5, r3
 800a712:	eba8 0803 	sub.w	r8, r8, r3
 800a716:	9b07      	ldr	r3, [sp, #28]
 800a718:	b1eb      	cbz	r3, 800a756 <_dtoa_r+0x76e>
 800a71a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d067      	beq.n	800a7f0 <_dtoa_r+0x808>
 800a720:	b18f      	cbz	r7, 800a746 <_dtoa_r+0x75e>
 800a722:	4631      	mov	r1, r6
 800a724:	463a      	mov	r2, r7
 800a726:	4620      	mov	r0, r4
 800a728:	f000 fba0 	bl	800ae6c <__pow5mult>
 800a72c:	9a04      	ldr	r2, [sp, #16]
 800a72e:	4601      	mov	r1, r0
 800a730:	4606      	mov	r6, r0
 800a732:	4620      	mov	r0, r4
 800a734:	f000 fb03 	bl	800ad3e <__multiply>
 800a738:	9904      	ldr	r1, [sp, #16]
 800a73a:	9008      	str	r0, [sp, #32]
 800a73c:	4620      	mov	r0, r4
 800a73e:	f000 fa55 	bl	800abec <_Bfree>
 800a742:	9b08      	ldr	r3, [sp, #32]
 800a744:	9304      	str	r3, [sp, #16]
 800a746:	9b07      	ldr	r3, [sp, #28]
 800a748:	1bda      	subs	r2, r3, r7
 800a74a:	d004      	beq.n	800a756 <_dtoa_r+0x76e>
 800a74c:	9904      	ldr	r1, [sp, #16]
 800a74e:	4620      	mov	r0, r4
 800a750:	f000 fb8c 	bl	800ae6c <__pow5mult>
 800a754:	9004      	str	r0, [sp, #16]
 800a756:	2101      	movs	r1, #1
 800a758:	4620      	mov	r0, r4
 800a75a:	f000 fae7 	bl	800ad2c <__i2b>
 800a75e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a760:	4607      	mov	r7, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	f000 81d0 	beq.w	800ab08 <_dtoa_r+0xb20>
 800a768:	461a      	mov	r2, r3
 800a76a:	4601      	mov	r1, r0
 800a76c:	4620      	mov	r0, r4
 800a76e:	f000 fb7d 	bl	800ae6c <__pow5mult>
 800a772:	9b06      	ldr	r3, [sp, #24]
 800a774:	2b01      	cmp	r3, #1
 800a776:	4607      	mov	r7, r0
 800a778:	dc40      	bgt.n	800a7fc <_dtoa_r+0x814>
 800a77a:	9b00      	ldr	r3, [sp, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d139      	bne.n	800a7f4 <_dtoa_r+0x80c>
 800a780:	9b01      	ldr	r3, [sp, #4]
 800a782:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a786:	2b00      	cmp	r3, #0
 800a788:	d136      	bne.n	800a7f8 <_dtoa_r+0x810>
 800a78a:	9b01      	ldr	r3, [sp, #4]
 800a78c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a790:	0d1b      	lsrs	r3, r3, #20
 800a792:	051b      	lsls	r3, r3, #20
 800a794:	b12b      	cbz	r3, 800a7a2 <_dtoa_r+0x7ba>
 800a796:	9b05      	ldr	r3, [sp, #20]
 800a798:	3301      	adds	r3, #1
 800a79a:	9305      	str	r3, [sp, #20]
 800a79c:	f108 0801 	add.w	r8, r8, #1
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	9307      	str	r3, [sp, #28]
 800a7a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d12a      	bne.n	800a800 <_dtoa_r+0x818>
 800a7aa:	2001      	movs	r0, #1
 800a7ac:	e030      	b.n	800a810 <_dtoa_r+0x828>
 800a7ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7b4:	e795      	b.n	800a6e2 <_dtoa_r+0x6fa>
 800a7b6:	9b07      	ldr	r3, [sp, #28]
 800a7b8:	f109 37ff 	add.w	r7, r9, #4294967295
 800a7bc:	42bb      	cmp	r3, r7
 800a7be:	bfbf      	itttt	lt
 800a7c0:	9b07      	ldrlt	r3, [sp, #28]
 800a7c2:	9707      	strlt	r7, [sp, #28]
 800a7c4:	1afa      	sublt	r2, r7, r3
 800a7c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a7c8:	bfbb      	ittet	lt
 800a7ca:	189b      	addlt	r3, r3, r2
 800a7cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a7ce:	1bdf      	subge	r7, r3, r7
 800a7d0:	2700      	movlt	r7, #0
 800a7d2:	f1b9 0f00 	cmp.w	r9, #0
 800a7d6:	bfb5      	itete	lt
 800a7d8:	9b05      	ldrlt	r3, [sp, #20]
 800a7da:	9d05      	ldrge	r5, [sp, #20]
 800a7dc:	eba3 0509 	sublt.w	r5, r3, r9
 800a7e0:	464b      	movge	r3, r9
 800a7e2:	bfb8      	it	lt
 800a7e4:	2300      	movlt	r3, #0
 800a7e6:	e77e      	b.n	800a6e6 <_dtoa_r+0x6fe>
 800a7e8:	9f07      	ldr	r7, [sp, #28]
 800a7ea:	9d05      	ldr	r5, [sp, #20]
 800a7ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a7ee:	e783      	b.n	800a6f8 <_dtoa_r+0x710>
 800a7f0:	9a07      	ldr	r2, [sp, #28]
 800a7f2:	e7ab      	b.n	800a74c <_dtoa_r+0x764>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	e7d4      	b.n	800a7a2 <_dtoa_r+0x7ba>
 800a7f8:	9b00      	ldr	r3, [sp, #0]
 800a7fa:	e7d2      	b.n	800a7a2 <_dtoa_r+0x7ba>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	9307      	str	r3, [sp, #28]
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a806:	6918      	ldr	r0, [r3, #16]
 800a808:	f000 fa42 	bl	800ac90 <__hi0bits>
 800a80c:	f1c0 0020 	rsb	r0, r0, #32
 800a810:	4440      	add	r0, r8
 800a812:	f010 001f 	ands.w	r0, r0, #31
 800a816:	d047      	beq.n	800a8a8 <_dtoa_r+0x8c0>
 800a818:	f1c0 0320 	rsb	r3, r0, #32
 800a81c:	2b04      	cmp	r3, #4
 800a81e:	dd3b      	ble.n	800a898 <_dtoa_r+0x8b0>
 800a820:	9b05      	ldr	r3, [sp, #20]
 800a822:	f1c0 001c 	rsb	r0, r0, #28
 800a826:	4403      	add	r3, r0
 800a828:	9305      	str	r3, [sp, #20]
 800a82a:	4405      	add	r5, r0
 800a82c:	4480      	add	r8, r0
 800a82e:	9b05      	ldr	r3, [sp, #20]
 800a830:	2b00      	cmp	r3, #0
 800a832:	dd05      	ble.n	800a840 <_dtoa_r+0x858>
 800a834:	461a      	mov	r2, r3
 800a836:	9904      	ldr	r1, [sp, #16]
 800a838:	4620      	mov	r0, r4
 800a83a:	f000 fb65 	bl	800af08 <__lshift>
 800a83e:	9004      	str	r0, [sp, #16]
 800a840:	f1b8 0f00 	cmp.w	r8, #0
 800a844:	dd05      	ble.n	800a852 <_dtoa_r+0x86a>
 800a846:	4639      	mov	r1, r7
 800a848:	4642      	mov	r2, r8
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 fb5c 	bl	800af08 <__lshift>
 800a850:	4607      	mov	r7, r0
 800a852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a854:	b353      	cbz	r3, 800a8ac <_dtoa_r+0x8c4>
 800a856:	4639      	mov	r1, r7
 800a858:	9804      	ldr	r0, [sp, #16]
 800a85a:	f000 fba9 	bl	800afb0 <__mcmp>
 800a85e:	2800      	cmp	r0, #0
 800a860:	da24      	bge.n	800a8ac <_dtoa_r+0x8c4>
 800a862:	2300      	movs	r3, #0
 800a864:	220a      	movs	r2, #10
 800a866:	9904      	ldr	r1, [sp, #16]
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 f9d6 	bl	800ac1a <__multadd>
 800a86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a870:	9004      	str	r0, [sp, #16]
 800a872:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a876:	2b00      	cmp	r3, #0
 800a878:	f000 814d 	beq.w	800ab16 <_dtoa_r+0xb2e>
 800a87c:	2300      	movs	r3, #0
 800a87e:	4631      	mov	r1, r6
 800a880:	220a      	movs	r2, #10
 800a882:	4620      	mov	r0, r4
 800a884:	f000 f9c9 	bl	800ac1a <__multadd>
 800a888:	9b02      	ldr	r3, [sp, #8]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	4606      	mov	r6, r0
 800a88e:	dc4f      	bgt.n	800a930 <_dtoa_r+0x948>
 800a890:	9b06      	ldr	r3, [sp, #24]
 800a892:	2b02      	cmp	r3, #2
 800a894:	dd4c      	ble.n	800a930 <_dtoa_r+0x948>
 800a896:	e011      	b.n	800a8bc <_dtoa_r+0x8d4>
 800a898:	d0c9      	beq.n	800a82e <_dtoa_r+0x846>
 800a89a:	9a05      	ldr	r2, [sp, #20]
 800a89c:	331c      	adds	r3, #28
 800a89e:	441a      	add	r2, r3
 800a8a0:	9205      	str	r2, [sp, #20]
 800a8a2:	441d      	add	r5, r3
 800a8a4:	4498      	add	r8, r3
 800a8a6:	e7c2      	b.n	800a82e <_dtoa_r+0x846>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	e7f6      	b.n	800a89a <_dtoa_r+0x8b2>
 800a8ac:	f1b9 0f00 	cmp.w	r9, #0
 800a8b0:	dc38      	bgt.n	800a924 <_dtoa_r+0x93c>
 800a8b2:	9b06      	ldr	r3, [sp, #24]
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	dd35      	ble.n	800a924 <_dtoa_r+0x93c>
 800a8b8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a8bc:	9b02      	ldr	r3, [sp, #8]
 800a8be:	b963      	cbnz	r3, 800a8da <_dtoa_r+0x8f2>
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	2205      	movs	r2, #5
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 f9a8 	bl	800ac1a <__multadd>
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	4607      	mov	r7, r0
 800a8ce:	9804      	ldr	r0, [sp, #16]
 800a8d0:	f000 fb6e 	bl	800afb0 <__mcmp>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	f73f adcc 	bgt.w	800a472 <_dtoa_r+0x48a>
 800a8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8dc:	465d      	mov	r5, fp
 800a8de:	ea6f 0a03 	mvn.w	sl, r3
 800a8e2:	f04f 0900 	mov.w	r9, #0
 800a8e6:	4639      	mov	r1, r7
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 f97f 	bl	800abec <_Bfree>
 800a8ee:	2e00      	cmp	r6, #0
 800a8f0:	f43f aeb7 	beq.w	800a662 <_dtoa_r+0x67a>
 800a8f4:	f1b9 0f00 	cmp.w	r9, #0
 800a8f8:	d005      	beq.n	800a906 <_dtoa_r+0x91e>
 800a8fa:	45b1      	cmp	r9, r6
 800a8fc:	d003      	beq.n	800a906 <_dtoa_r+0x91e>
 800a8fe:	4649      	mov	r1, r9
 800a900:	4620      	mov	r0, r4
 800a902:	f000 f973 	bl	800abec <_Bfree>
 800a906:	4631      	mov	r1, r6
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 f96f 	bl	800abec <_Bfree>
 800a90e:	e6a8      	b.n	800a662 <_dtoa_r+0x67a>
 800a910:	2700      	movs	r7, #0
 800a912:	463e      	mov	r6, r7
 800a914:	e7e1      	b.n	800a8da <_dtoa_r+0x8f2>
 800a916:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a91a:	463e      	mov	r6, r7
 800a91c:	e5a9      	b.n	800a472 <_dtoa_r+0x48a>
 800a91e:	bf00      	nop
 800a920:	40240000 	.word	0x40240000
 800a924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a926:	f8cd 9008 	str.w	r9, [sp, #8]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f000 80fa 	beq.w	800ab24 <_dtoa_r+0xb3c>
 800a930:	2d00      	cmp	r5, #0
 800a932:	dd05      	ble.n	800a940 <_dtoa_r+0x958>
 800a934:	4631      	mov	r1, r6
 800a936:	462a      	mov	r2, r5
 800a938:	4620      	mov	r0, r4
 800a93a:	f000 fae5 	bl	800af08 <__lshift>
 800a93e:	4606      	mov	r6, r0
 800a940:	9b07      	ldr	r3, [sp, #28]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d04c      	beq.n	800a9e0 <_dtoa_r+0x9f8>
 800a946:	6871      	ldr	r1, [r6, #4]
 800a948:	4620      	mov	r0, r4
 800a94a:	f000 f91b 	bl	800ab84 <_Balloc>
 800a94e:	6932      	ldr	r2, [r6, #16]
 800a950:	3202      	adds	r2, #2
 800a952:	4605      	mov	r5, r0
 800a954:	0092      	lsls	r2, r2, #2
 800a956:	f106 010c 	add.w	r1, r6, #12
 800a95a:	300c      	adds	r0, #12
 800a95c:	f7fe fdc0 	bl	80094e0 <memcpy>
 800a960:	2201      	movs	r2, #1
 800a962:	4629      	mov	r1, r5
 800a964:	4620      	mov	r0, r4
 800a966:	f000 facf 	bl	800af08 <__lshift>
 800a96a:	9b00      	ldr	r3, [sp, #0]
 800a96c:	f8cd b014 	str.w	fp, [sp, #20]
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	46b1      	mov	r9, r6
 800a976:	9307      	str	r3, [sp, #28]
 800a978:	4606      	mov	r6, r0
 800a97a:	4639      	mov	r1, r7
 800a97c:	9804      	ldr	r0, [sp, #16]
 800a97e:	f7ff faa5 	bl	8009ecc <quorem>
 800a982:	4649      	mov	r1, r9
 800a984:	4605      	mov	r5, r0
 800a986:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a98a:	9804      	ldr	r0, [sp, #16]
 800a98c:	f000 fb10 	bl	800afb0 <__mcmp>
 800a990:	4632      	mov	r2, r6
 800a992:	9000      	str	r0, [sp, #0]
 800a994:	4639      	mov	r1, r7
 800a996:	4620      	mov	r0, r4
 800a998:	f000 fb24 	bl	800afe4 <__mdiff>
 800a99c:	68c3      	ldr	r3, [r0, #12]
 800a99e:	4602      	mov	r2, r0
 800a9a0:	bb03      	cbnz	r3, 800a9e4 <_dtoa_r+0x9fc>
 800a9a2:	4601      	mov	r1, r0
 800a9a4:	9008      	str	r0, [sp, #32]
 800a9a6:	9804      	ldr	r0, [sp, #16]
 800a9a8:	f000 fb02 	bl	800afb0 <__mcmp>
 800a9ac:	9a08      	ldr	r2, [sp, #32]
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	4611      	mov	r1, r2
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	9308      	str	r3, [sp, #32]
 800a9b6:	f000 f919 	bl	800abec <_Bfree>
 800a9ba:	9b08      	ldr	r3, [sp, #32]
 800a9bc:	b9a3      	cbnz	r3, 800a9e8 <_dtoa_r+0xa00>
 800a9be:	9a06      	ldr	r2, [sp, #24]
 800a9c0:	b992      	cbnz	r2, 800a9e8 <_dtoa_r+0xa00>
 800a9c2:	9a07      	ldr	r2, [sp, #28]
 800a9c4:	b982      	cbnz	r2, 800a9e8 <_dtoa_r+0xa00>
 800a9c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a9ca:	d029      	beq.n	800aa20 <_dtoa_r+0xa38>
 800a9cc:	9b00      	ldr	r3, [sp, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	dd01      	ble.n	800a9d6 <_dtoa_r+0x9ee>
 800a9d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a9d6:	9b05      	ldr	r3, [sp, #20]
 800a9d8:	1c5d      	adds	r5, r3, #1
 800a9da:	f883 8000 	strb.w	r8, [r3]
 800a9de:	e782      	b.n	800a8e6 <_dtoa_r+0x8fe>
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	e7c2      	b.n	800a96a <_dtoa_r+0x982>
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e7e3      	b.n	800a9b0 <_dtoa_r+0x9c8>
 800a9e8:	9a00      	ldr	r2, [sp, #0]
 800a9ea:	2a00      	cmp	r2, #0
 800a9ec:	db04      	blt.n	800a9f8 <_dtoa_r+0xa10>
 800a9ee:	d125      	bne.n	800aa3c <_dtoa_r+0xa54>
 800a9f0:	9a06      	ldr	r2, [sp, #24]
 800a9f2:	bb1a      	cbnz	r2, 800aa3c <_dtoa_r+0xa54>
 800a9f4:	9a07      	ldr	r2, [sp, #28]
 800a9f6:	bb0a      	cbnz	r2, 800aa3c <_dtoa_r+0xa54>
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	ddec      	ble.n	800a9d6 <_dtoa_r+0x9ee>
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	9904      	ldr	r1, [sp, #16]
 800aa00:	4620      	mov	r0, r4
 800aa02:	f000 fa81 	bl	800af08 <__lshift>
 800aa06:	4639      	mov	r1, r7
 800aa08:	9004      	str	r0, [sp, #16]
 800aa0a:	f000 fad1 	bl	800afb0 <__mcmp>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	dc03      	bgt.n	800aa1a <_dtoa_r+0xa32>
 800aa12:	d1e0      	bne.n	800a9d6 <_dtoa_r+0x9ee>
 800aa14:	f018 0f01 	tst.w	r8, #1
 800aa18:	d0dd      	beq.n	800a9d6 <_dtoa_r+0x9ee>
 800aa1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa1e:	d1d8      	bne.n	800a9d2 <_dtoa_r+0x9ea>
 800aa20:	9b05      	ldr	r3, [sp, #20]
 800aa22:	9a05      	ldr	r2, [sp, #20]
 800aa24:	1c5d      	adds	r5, r3, #1
 800aa26:	2339      	movs	r3, #57	; 0x39
 800aa28:	7013      	strb	r3, [r2, #0]
 800aa2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa2e:	2b39      	cmp	r3, #57	; 0x39
 800aa30:	f105 32ff 	add.w	r2, r5, #4294967295
 800aa34:	d04f      	beq.n	800aad6 <_dtoa_r+0xaee>
 800aa36:	3301      	adds	r3, #1
 800aa38:	7013      	strb	r3, [r2, #0]
 800aa3a:	e754      	b.n	800a8e6 <_dtoa_r+0x8fe>
 800aa3c:	9a05      	ldr	r2, [sp, #20]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	f102 0501 	add.w	r5, r2, #1
 800aa44:	dd06      	ble.n	800aa54 <_dtoa_r+0xa6c>
 800aa46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa4a:	d0e9      	beq.n	800aa20 <_dtoa_r+0xa38>
 800aa4c:	f108 0801 	add.w	r8, r8, #1
 800aa50:	9b05      	ldr	r3, [sp, #20]
 800aa52:	e7c2      	b.n	800a9da <_dtoa_r+0x9f2>
 800aa54:	9a02      	ldr	r2, [sp, #8]
 800aa56:	f805 8c01 	strb.w	r8, [r5, #-1]
 800aa5a:	eba5 030b 	sub.w	r3, r5, fp
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d021      	beq.n	800aaa6 <_dtoa_r+0xabe>
 800aa62:	2300      	movs	r3, #0
 800aa64:	220a      	movs	r2, #10
 800aa66:	9904      	ldr	r1, [sp, #16]
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f000 f8d6 	bl	800ac1a <__multadd>
 800aa6e:	45b1      	cmp	r9, r6
 800aa70:	9004      	str	r0, [sp, #16]
 800aa72:	f04f 0300 	mov.w	r3, #0
 800aa76:	f04f 020a 	mov.w	r2, #10
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	d105      	bne.n	800aa8c <_dtoa_r+0xaa4>
 800aa80:	f000 f8cb 	bl	800ac1a <__multadd>
 800aa84:	4681      	mov	r9, r0
 800aa86:	4606      	mov	r6, r0
 800aa88:	9505      	str	r5, [sp, #20]
 800aa8a:	e776      	b.n	800a97a <_dtoa_r+0x992>
 800aa8c:	f000 f8c5 	bl	800ac1a <__multadd>
 800aa90:	4631      	mov	r1, r6
 800aa92:	4681      	mov	r9, r0
 800aa94:	2300      	movs	r3, #0
 800aa96:	220a      	movs	r2, #10
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f000 f8be 	bl	800ac1a <__multadd>
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	e7f2      	b.n	800aa88 <_dtoa_r+0xaa0>
 800aaa2:	f04f 0900 	mov.w	r9, #0
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	9904      	ldr	r1, [sp, #16]
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f000 fa2c 	bl	800af08 <__lshift>
 800aab0:	4639      	mov	r1, r7
 800aab2:	9004      	str	r0, [sp, #16]
 800aab4:	f000 fa7c 	bl	800afb0 <__mcmp>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	dcb6      	bgt.n	800aa2a <_dtoa_r+0xa42>
 800aabc:	d102      	bne.n	800aac4 <_dtoa_r+0xadc>
 800aabe:	f018 0f01 	tst.w	r8, #1
 800aac2:	d1b2      	bne.n	800aa2a <_dtoa_r+0xa42>
 800aac4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aac8:	2b30      	cmp	r3, #48	; 0x30
 800aaca:	f105 32ff 	add.w	r2, r5, #4294967295
 800aace:	f47f af0a 	bne.w	800a8e6 <_dtoa_r+0x8fe>
 800aad2:	4615      	mov	r5, r2
 800aad4:	e7f6      	b.n	800aac4 <_dtoa_r+0xadc>
 800aad6:	4593      	cmp	fp, r2
 800aad8:	d105      	bne.n	800aae6 <_dtoa_r+0xafe>
 800aada:	2331      	movs	r3, #49	; 0x31
 800aadc:	f10a 0a01 	add.w	sl, sl, #1
 800aae0:	f88b 3000 	strb.w	r3, [fp]
 800aae4:	e6ff      	b.n	800a8e6 <_dtoa_r+0x8fe>
 800aae6:	4615      	mov	r5, r2
 800aae8:	e79f      	b.n	800aa2a <_dtoa_r+0xa42>
 800aaea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ab50 <_dtoa_r+0xb68>
 800aaee:	e007      	b.n	800ab00 <_dtoa_r+0xb18>
 800aaf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaf2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ab54 <_dtoa_r+0xb6c>
 800aaf6:	b11b      	cbz	r3, 800ab00 <_dtoa_r+0xb18>
 800aaf8:	f10b 0308 	add.w	r3, fp, #8
 800aafc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aafe:	6013      	str	r3, [r2, #0]
 800ab00:	4658      	mov	r0, fp
 800ab02:	b017      	add	sp, #92	; 0x5c
 800ab04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab08:	9b06      	ldr	r3, [sp, #24]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	f77f ae35 	ble.w	800a77a <_dtoa_r+0x792>
 800ab10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab12:	9307      	str	r3, [sp, #28]
 800ab14:	e649      	b.n	800a7aa <_dtoa_r+0x7c2>
 800ab16:	9b02      	ldr	r3, [sp, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	dc03      	bgt.n	800ab24 <_dtoa_r+0xb3c>
 800ab1c:	9b06      	ldr	r3, [sp, #24]
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	f73f aecc 	bgt.w	800a8bc <_dtoa_r+0x8d4>
 800ab24:	465d      	mov	r5, fp
 800ab26:	4639      	mov	r1, r7
 800ab28:	9804      	ldr	r0, [sp, #16]
 800ab2a:	f7ff f9cf 	bl	8009ecc <quorem>
 800ab2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ab32:	f805 8b01 	strb.w	r8, [r5], #1
 800ab36:	9a02      	ldr	r2, [sp, #8]
 800ab38:	eba5 030b 	sub.w	r3, r5, fp
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	ddb0      	ble.n	800aaa2 <_dtoa_r+0xaba>
 800ab40:	2300      	movs	r3, #0
 800ab42:	220a      	movs	r2, #10
 800ab44:	9904      	ldr	r1, [sp, #16]
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 f867 	bl	800ac1a <__multadd>
 800ab4c:	9004      	str	r0, [sp, #16]
 800ab4e:	e7ea      	b.n	800ab26 <_dtoa_r+0xb3e>
 800ab50:	0800c174 	.word	0x0800c174
 800ab54:	0800c198 	.word	0x0800c198

0800ab58 <_localeconv_r>:
 800ab58:	4b04      	ldr	r3, [pc, #16]	; (800ab6c <_localeconv_r+0x14>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	6a18      	ldr	r0, [r3, #32]
 800ab5e:	4b04      	ldr	r3, [pc, #16]	; (800ab70 <_localeconv_r+0x18>)
 800ab60:	2800      	cmp	r0, #0
 800ab62:	bf08      	it	eq
 800ab64:	4618      	moveq	r0, r3
 800ab66:	30f0      	adds	r0, #240	; 0xf0
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	2000002c 	.word	0x2000002c
 800ab70:	20000090 	.word	0x20000090

0800ab74 <malloc>:
 800ab74:	4b02      	ldr	r3, [pc, #8]	; (800ab80 <malloc+0xc>)
 800ab76:	4601      	mov	r1, r0
 800ab78:	6818      	ldr	r0, [r3, #0]
 800ab7a:	f000 bb3b 	b.w	800b1f4 <_malloc_r>
 800ab7e:	bf00      	nop
 800ab80:	2000002c 	.word	0x2000002c

0800ab84 <_Balloc>:
 800ab84:	b570      	push	{r4, r5, r6, lr}
 800ab86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ab88:	4604      	mov	r4, r0
 800ab8a:	460e      	mov	r6, r1
 800ab8c:	b93d      	cbnz	r5, 800ab9e <_Balloc+0x1a>
 800ab8e:	2010      	movs	r0, #16
 800ab90:	f7ff fff0 	bl	800ab74 <malloc>
 800ab94:	6260      	str	r0, [r4, #36]	; 0x24
 800ab96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ab9a:	6005      	str	r5, [r0, #0]
 800ab9c:	60c5      	str	r5, [r0, #12]
 800ab9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aba0:	68eb      	ldr	r3, [r5, #12]
 800aba2:	b183      	cbz	r3, 800abc6 <_Balloc+0x42>
 800aba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800abac:	b9b8      	cbnz	r0, 800abde <_Balloc+0x5a>
 800abae:	2101      	movs	r1, #1
 800abb0:	fa01 f506 	lsl.w	r5, r1, r6
 800abb4:	1d6a      	adds	r2, r5, #5
 800abb6:	0092      	lsls	r2, r2, #2
 800abb8:	4620      	mov	r0, r4
 800abba:	f000 fabf 	bl	800b13c <_calloc_r>
 800abbe:	b160      	cbz	r0, 800abda <_Balloc+0x56>
 800abc0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800abc4:	e00e      	b.n	800abe4 <_Balloc+0x60>
 800abc6:	2221      	movs	r2, #33	; 0x21
 800abc8:	2104      	movs	r1, #4
 800abca:	4620      	mov	r0, r4
 800abcc:	f000 fab6 	bl	800b13c <_calloc_r>
 800abd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abd2:	60e8      	str	r0, [r5, #12]
 800abd4:	68db      	ldr	r3, [r3, #12]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1e4      	bne.n	800aba4 <_Balloc+0x20>
 800abda:	2000      	movs	r0, #0
 800abdc:	bd70      	pop	{r4, r5, r6, pc}
 800abde:	6802      	ldr	r2, [r0, #0]
 800abe0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800abe4:	2300      	movs	r3, #0
 800abe6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abea:	e7f7      	b.n	800abdc <_Balloc+0x58>

0800abec <_Bfree>:
 800abec:	b570      	push	{r4, r5, r6, lr}
 800abee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800abf0:	4606      	mov	r6, r0
 800abf2:	460d      	mov	r5, r1
 800abf4:	b93c      	cbnz	r4, 800ac06 <_Bfree+0x1a>
 800abf6:	2010      	movs	r0, #16
 800abf8:	f7ff ffbc 	bl	800ab74 <malloc>
 800abfc:	6270      	str	r0, [r6, #36]	; 0x24
 800abfe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac02:	6004      	str	r4, [r0, #0]
 800ac04:	60c4      	str	r4, [r0, #12]
 800ac06:	b13d      	cbz	r5, 800ac18 <_Bfree+0x2c>
 800ac08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ac0a:	686a      	ldr	r2, [r5, #4]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac12:	6029      	str	r1, [r5, #0]
 800ac14:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ac18:	bd70      	pop	{r4, r5, r6, pc}

0800ac1a <__multadd>:
 800ac1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac1e:	690d      	ldr	r5, [r1, #16]
 800ac20:	461f      	mov	r7, r3
 800ac22:	4606      	mov	r6, r0
 800ac24:	460c      	mov	r4, r1
 800ac26:	f101 0c14 	add.w	ip, r1, #20
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	f8dc 0000 	ldr.w	r0, [ip]
 800ac30:	b281      	uxth	r1, r0
 800ac32:	fb02 7101 	mla	r1, r2, r1, r7
 800ac36:	0c0f      	lsrs	r7, r1, #16
 800ac38:	0c00      	lsrs	r0, r0, #16
 800ac3a:	fb02 7000 	mla	r0, r2, r0, r7
 800ac3e:	b289      	uxth	r1, r1
 800ac40:	3301      	adds	r3, #1
 800ac42:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ac46:	429d      	cmp	r5, r3
 800ac48:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ac4c:	f84c 1b04 	str.w	r1, [ip], #4
 800ac50:	dcec      	bgt.n	800ac2c <__multadd+0x12>
 800ac52:	b1d7      	cbz	r7, 800ac8a <__multadd+0x70>
 800ac54:	68a3      	ldr	r3, [r4, #8]
 800ac56:	42ab      	cmp	r3, r5
 800ac58:	dc12      	bgt.n	800ac80 <__multadd+0x66>
 800ac5a:	6861      	ldr	r1, [r4, #4]
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	3101      	adds	r1, #1
 800ac60:	f7ff ff90 	bl	800ab84 <_Balloc>
 800ac64:	6922      	ldr	r2, [r4, #16]
 800ac66:	3202      	adds	r2, #2
 800ac68:	f104 010c 	add.w	r1, r4, #12
 800ac6c:	4680      	mov	r8, r0
 800ac6e:	0092      	lsls	r2, r2, #2
 800ac70:	300c      	adds	r0, #12
 800ac72:	f7fe fc35 	bl	80094e0 <memcpy>
 800ac76:	4621      	mov	r1, r4
 800ac78:	4630      	mov	r0, r6
 800ac7a:	f7ff ffb7 	bl	800abec <_Bfree>
 800ac7e:	4644      	mov	r4, r8
 800ac80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac84:	3501      	adds	r5, #1
 800ac86:	615f      	str	r7, [r3, #20]
 800ac88:	6125      	str	r5, [r4, #16]
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ac90 <__hi0bits>:
 800ac90:	0c02      	lsrs	r2, r0, #16
 800ac92:	0412      	lsls	r2, r2, #16
 800ac94:	4603      	mov	r3, r0
 800ac96:	b9b2      	cbnz	r2, 800acc6 <__hi0bits+0x36>
 800ac98:	0403      	lsls	r3, r0, #16
 800ac9a:	2010      	movs	r0, #16
 800ac9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aca0:	bf04      	itt	eq
 800aca2:	021b      	lsleq	r3, r3, #8
 800aca4:	3008      	addeq	r0, #8
 800aca6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800acaa:	bf04      	itt	eq
 800acac:	011b      	lsleq	r3, r3, #4
 800acae:	3004      	addeq	r0, #4
 800acb0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800acb4:	bf04      	itt	eq
 800acb6:	009b      	lsleq	r3, r3, #2
 800acb8:	3002      	addeq	r0, #2
 800acba:	2b00      	cmp	r3, #0
 800acbc:	db06      	blt.n	800accc <__hi0bits+0x3c>
 800acbe:	005b      	lsls	r3, r3, #1
 800acc0:	d503      	bpl.n	800acca <__hi0bits+0x3a>
 800acc2:	3001      	adds	r0, #1
 800acc4:	4770      	bx	lr
 800acc6:	2000      	movs	r0, #0
 800acc8:	e7e8      	b.n	800ac9c <__hi0bits+0xc>
 800acca:	2020      	movs	r0, #32
 800accc:	4770      	bx	lr

0800acce <__lo0bits>:
 800acce:	6803      	ldr	r3, [r0, #0]
 800acd0:	f013 0207 	ands.w	r2, r3, #7
 800acd4:	4601      	mov	r1, r0
 800acd6:	d00b      	beq.n	800acf0 <__lo0bits+0x22>
 800acd8:	07da      	lsls	r2, r3, #31
 800acda:	d423      	bmi.n	800ad24 <__lo0bits+0x56>
 800acdc:	0798      	lsls	r0, r3, #30
 800acde:	bf49      	itett	mi
 800ace0:	085b      	lsrmi	r3, r3, #1
 800ace2:	089b      	lsrpl	r3, r3, #2
 800ace4:	2001      	movmi	r0, #1
 800ace6:	600b      	strmi	r3, [r1, #0]
 800ace8:	bf5c      	itt	pl
 800acea:	600b      	strpl	r3, [r1, #0]
 800acec:	2002      	movpl	r0, #2
 800acee:	4770      	bx	lr
 800acf0:	b298      	uxth	r0, r3
 800acf2:	b9a8      	cbnz	r0, 800ad20 <__lo0bits+0x52>
 800acf4:	0c1b      	lsrs	r3, r3, #16
 800acf6:	2010      	movs	r0, #16
 800acf8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800acfc:	bf04      	itt	eq
 800acfe:	0a1b      	lsreq	r3, r3, #8
 800ad00:	3008      	addeq	r0, #8
 800ad02:	071a      	lsls	r2, r3, #28
 800ad04:	bf04      	itt	eq
 800ad06:	091b      	lsreq	r3, r3, #4
 800ad08:	3004      	addeq	r0, #4
 800ad0a:	079a      	lsls	r2, r3, #30
 800ad0c:	bf04      	itt	eq
 800ad0e:	089b      	lsreq	r3, r3, #2
 800ad10:	3002      	addeq	r0, #2
 800ad12:	07da      	lsls	r2, r3, #31
 800ad14:	d402      	bmi.n	800ad1c <__lo0bits+0x4e>
 800ad16:	085b      	lsrs	r3, r3, #1
 800ad18:	d006      	beq.n	800ad28 <__lo0bits+0x5a>
 800ad1a:	3001      	adds	r0, #1
 800ad1c:	600b      	str	r3, [r1, #0]
 800ad1e:	4770      	bx	lr
 800ad20:	4610      	mov	r0, r2
 800ad22:	e7e9      	b.n	800acf8 <__lo0bits+0x2a>
 800ad24:	2000      	movs	r0, #0
 800ad26:	4770      	bx	lr
 800ad28:	2020      	movs	r0, #32
 800ad2a:	4770      	bx	lr

0800ad2c <__i2b>:
 800ad2c:	b510      	push	{r4, lr}
 800ad2e:	460c      	mov	r4, r1
 800ad30:	2101      	movs	r1, #1
 800ad32:	f7ff ff27 	bl	800ab84 <_Balloc>
 800ad36:	2201      	movs	r2, #1
 800ad38:	6144      	str	r4, [r0, #20]
 800ad3a:	6102      	str	r2, [r0, #16]
 800ad3c:	bd10      	pop	{r4, pc}

0800ad3e <__multiply>:
 800ad3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad42:	4614      	mov	r4, r2
 800ad44:	690a      	ldr	r2, [r1, #16]
 800ad46:	6923      	ldr	r3, [r4, #16]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	bfb8      	it	lt
 800ad4c:	460b      	movlt	r3, r1
 800ad4e:	4688      	mov	r8, r1
 800ad50:	bfbc      	itt	lt
 800ad52:	46a0      	movlt	r8, r4
 800ad54:	461c      	movlt	r4, r3
 800ad56:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad5a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad62:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad66:	eb07 0609 	add.w	r6, r7, r9
 800ad6a:	42b3      	cmp	r3, r6
 800ad6c:	bfb8      	it	lt
 800ad6e:	3101      	addlt	r1, #1
 800ad70:	f7ff ff08 	bl	800ab84 <_Balloc>
 800ad74:	f100 0514 	add.w	r5, r0, #20
 800ad78:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ad7c:	462b      	mov	r3, r5
 800ad7e:	2200      	movs	r2, #0
 800ad80:	4573      	cmp	r3, lr
 800ad82:	d316      	bcc.n	800adb2 <__multiply+0x74>
 800ad84:	f104 0214 	add.w	r2, r4, #20
 800ad88:	f108 0114 	add.w	r1, r8, #20
 800ad8c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ad90:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	9b00      	ldr	r3, [sp, #0]
 800ad98:	9201      	str	r2, [sp, #4]
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d80c      	bhi.n	800adb8 <__multiply+0x7a>
 800ad9e:	2e00      	cmp	r6, #0
 800ada0:	dd03      	ble.n	800adaa <__multiply+0x6c>
 800ada2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d05d      	beq.n	800ae66 <__multiply+0x128>
 800adaa:	6106      	str	r6, [r0, #16]
 800adac:	b003      	add	sp, #12
 800adae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adb2:	f843 2b04 	str.w	r2, [r3], #4
 800adb6:	e7e3      	b.n	800ad80 <__multiply+0x42>
 800adb8:	f8b2 b000 	ldrh.w	fp, [r2]
 800adbc:	f1bb 0f00 	cmp.w	fp, #0
 800adc0:	d023      	beq.n	800ae0a <__multiply+0xcc>
 800adc2:	4689      	mov	r9, r1
 800adc4:	46ac      	mov	ip, r5
 800adc6:	f04f 0800 	mov.w	r8, #0
 800adca:	f859 4b04 	ldr.w	r4, [r9], #4
 800adce:	f8dc a000 	ldr.w	sl, [ip]
 800add2:	b2a3      	uxth	r3, r4
 800add4:	fa1f fa8a 	uxth.w	sl, sl
 800add8:	fb0b a303 	mla	r3, fp, r3, sl
 800addc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ade0:	f8dc 4000 	ldr.w	r4, [ip]
 800ade4:	4443      	add	r3, r8
 800ade6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800adea:	fb0b 840a 	mla	r4, fp, sl, r8
 800adee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800adf2:	46e2      	mov	sl, ip
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800adfa:	454f      	cmp	r7, r9
 800adfc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ae00:	f84a 3b04 	str.w	r3, [sl], #4
 800ae04:	d82b      	bhi.n	800ae5e <__multiply+0x120>
 800ae06:	f8cc 8004 	str.w	r8, [ip, #4]
 800ae0a:	9b01      	ldr	r3, [sp, #4]
 800ae0c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ae10:	3204      	adds	r2, #4
 800ae12:	f1ba 0f00 	cmp.w	sl, #0
 800ae16:	d020      	beq.n	800ae5a <__multiply+0x11c>
 800ae18:	682b      	ldr	r3, [r5, #0]
 800ae1a:	4689      	mov	r9, r1
 800ae1c:	46a8      	mov	r8, r5
 800ae1e:	f04f 0b00 	mov.w	fp, #0
 800ae22:	f8b9 c000 	ldrh.w	ip, [r9]
 800ae26:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ae2a:	fb0a 440c 	mla	r4, sl, ip, r4
 800ae2e:	445c      	add	r4, fp
 800ae30:	46c4      	mov	ip, r8
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ae38:	f84c 3b04 	str.w	r3, [ip], #4
 800ae3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae40:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ae44:	0c1b      	lsrs	r3, r3, #16
 800ae46:	fb0a b303 	mla	r3, sl, r3, fp
 800ae4a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ae4e:	454f      	cmp	r7, r9
 800ae50:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ae54:	d805      	bhi.n	800ae62 <__multiply+0x124>
 800ae56:	f8c8 3004 	str.w	r3, [r8, #4]
 800ae5a:	3504      	adds	r5, #4
 800ae5c:	e79b      	b.n	800ad96 <__multiply+0x58>
 800ae5e:	46d4      	mov	ip, sl
 800ae60:	e7b3      	b.n	800adca <__multiply+0x8c>
 800ae62:	46e0      	mov	r8, ip
 800ae64:	e7dd      	b.n	800ae22 <__multiply+0xe4>
 800ae66:	3e01      	subs	r6, #1
 800ae68:	e799      	b.n	800ad9e <__multiply+0x60>
	...

0800ae6c <__pow5mult>:
 800ae6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae70:	4615      	mov	r5, r2
 800ae72:	f012 0203 	ands.w	r2, r2, #3
 800ae76:	4606      	mov	r6, r0
 800ae78:	460f      	mov	r7, r1
 800ae7a:	d007      	beq.n	800ae8c <__pow5mult+0x20>
 800ae7c:	3a01      	subs	r2, #1
 800ae7e:	4c21      	ldr	r4, [pc, #132]	; (800af04 <__pow5mult+0x98>)
 800ae80:	2300      	movs	r3, #0
 800ae82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae86:	f7ff fec8 	bl	800ac1a <__multadd>
 800ae8a:	4607      	mov	r7, r0
 800ae8c:	10ad      	asrs	r5, r5, #2
 800ae8e:	d035      	beq.n	800aefc <__pow5mult+0x90>
 800ae90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae92:	b93c      	cbnz	r4, 800aea4 <__pow5mult+0x38>
 800ae94:	2010      	movs	r0, #16
 800ae96:	f7ff fe6d 	bl	800ab74 <malloc>
 800ae9a:	6270      	str	r0, [r6, #36]	; 0x24
 800ae9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aea0:	6004      	str	r4, [r0, #0]
 800aea2:	60c4      	str	r4, [r0, #12]
 800aea4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aeac:	b94c      	cbnz	r4, 800aec2 <__pow5mult+0x56>
 800aeae:	f240 2171 	movw	r1, #625	; 0x271
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f7ff ff3a 	bl	800ad2c <__i2b>
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f8c8 0008 	str.w	r0, [r8, #8]
 800aebe:	4604      	mov	r4, r0
 800aec0:	6003      	str	r3, [r0, #0]
 800aec2:	f04f 0800 	mov.w	r8, #0
 800aec6:	07eb      	lsls	r3, r5, #31
 800aec8:	d50a      	bpl.n	800aee0 <__pow5mult+0x74>
 800aeca:	4639      	mov	r1, r7
 800aecc:	4622      	mov	r2, r4
 800aece:	4630      	mov	r0, r6
 800aed0:	f7ff ff35 	bl	800ad3e <__multiply>
 800aed4:	4639      	mov	r1, r7
 800aed6:	4681      	mov	r9, r0
 800aed8:	4630      	mov	r0, r6
 800aeda:	f7ff fe87 	bl	800abec <_Bfree>
 800aede:	464f      	mov	r7, r9
 800aee0:	106d      	asrs	r5, r5, #1
 800aee2:	d00b      	beq.n	800aefc <__pow5mult+0x90>
 800aee4:	6820      	ldr	r0, [r4, #0]
 800aee6:	b938      	cbnz	r0, 800aef8 <__pow5mult+0x8c>
 800aee8:	4622      	mov	r2, r4
 800aeea:	4621      	mov	r1, r4
 800aeec:	4630      	mov	r0, r6
 800aeee:	f7ff ff26 	bl	800ad3e <__multiply>
 800aef2:	6020      	str	r0, [r4, #0]
 800aef4:	f8c0 8000 	str.w	r8, [r0]
 800aef8:	4604      	mov	r4, r0
 800aefa:	e7e4      	b.n	800aec6 <__pow5mult+0x5a>
 800aefc:	4638      	mov	r0, r7
 800aefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af02:	bf00      	nop
 800af04:	0800c298 	.word	0x0800c298

0800af08 <__lshift>:
 800af08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af0c:	460c      	mov	r4, r1
 800af0e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af12:	6923      	ldr	r3, [r4, #16]
 800af14:	6849      	ldr	r1, [r1, #4]
 800af16:	eb0a 0903 	add.w	r9, sl, r3
 800af1a:	68a3      	ldr	r3, [r4, #8]
 800af1c:	4607      	mov	r7, r0
 800af1e:	4616      	mov	r6, r2
 800af20:	f109 0501 	add.w	r5, r9, #1
 800af24:	42ab      	cmp	r3, r5
 800af26:	db32      	blt.n	800af8e <__lshift+0x86>
 800af28:	4638      	mov	r0, r7
 800af2a:	f7ff fe2b 	bl	800ab84 <_Balloc>
 800af2e:	2300      	movs	r3, #0
 800af30:	4680      	mov	r8, r0
 800af32:	f100 0114 	add.w	r1, r0, #20
 800af36:	461a      	mov	r2, r3
 800af38:	4553      	cmp	r3, sl
 800af3a:	db2b      	blt.n	800af94 <__lshift+0x8c>
 800af3c:	6920      	ldr	r0, [r4, #16]
 800af3e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af42:	f104 0314 	add.w	r3, r4, #20
 800af46:	f016 021f 	ands.w	r2, r6, #31
 800af4a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af4e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af52:	d025      	beq.n	800afa0 <__lshift+0x98>
 800af54:	f1c2 0e20 	rsb	lr, r2, #32
 800af58:	2000      	movs	r0, #0
 800af5a:	681e      	ldr	r6, [r3, #0]
 800af5c:	468a      	mov	sl, r1
 800af5e:	4096      	lsls	r6, r2
 800af60:	4330      	orrs	r0, r6
 800af62:	f84a 0b04 	str.w	r0, [sl], #4
 800af66:	f853 0b04 	ldr.w	r0, [r3], #4
 800af6a:	459c      	cmp	ip, r3
 800af6c:	fa20 f00e 	lsr.w	r0, r0, lr
 800af70:	d814      	bhi.n	800af9c <__lshift+0x94>
 800af72:	6048      	str	r0, [r1, #4]
 800af74:	b108      	cbz	r0, 800af7a <__lshift+0x72>
 800af76:	f109 0502 	add.w	r5, r9, #2
 800af7a:	3d01      	subs	r5, #1
 800af7c:	4638      	mov	r0, r7
 800af7e:	f8c8 5010 	str.w	r5, [r8, #16]
 800af82:	4621      	mov	r1, r4
 800af84:	f7ff fe32 	bl	800abec <_Bfree>
 800af88:	4640      	mov	r0, r8
 800af8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af8e:	3101      	adds	r1, #1
 800af90:	005b      	lsls	r3, r3, #1
 800af92:	e7c7      	b.n	800af24 <__lshift+0x1c>
 800af94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800af98:	3301      	adds	r3, #1
 800af9a:	e7cd      	b.n	800af38 <__lshift+0x30>
 800af9c:	4651      	mov	r1, sl
 800af9e:	e7dc      	b.n	800af5a <__lshift+0x52>
 800afa0:	3904      	subs	r1, #4
 800afa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800afa6:	f841 2f04 	str.w	r2, [r1, #4]!
 800afaa:	459c      	cmp	ip, r3
 800afac:	d8f9      	bhi.n	800afa2 <__lshift+0x9a>
 800afae:	e7e4      	b.n	800af7a <__lshift+0x72>

0800afb0 <__mcmp>:
 800afb0:	6903      	ldr	r3, [r0, #16]
 800afb2:	690a      	ldr	r2, [r1, #16]
 800afb4:	1a9b      	subs	r3, r3, r2
 800afb6:	b530      	push	{r4, r5, lr}
 800afb8:	d10c      	bne.n	800afd4 <__mcmp+0x24>
 800afba:	0092      	lsls	r2, r2, #2
 800afbc:	3014      	adds	r0, #20
 800afbe:	3114      	adds	r1, #20
 800afc0:	1884      	adds	r4, r0, r2
 800afc2:	4411      	add	r1, r2
 800afc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800afc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800afcc:	4295      	cmp	r5, r2
 800afce:	d003      	beq.n	800afd8 <__mcmp+0x28>
 800afd0:	d305      	bcc.n	800afde <__mcmp+0x2e>
 800afd2:	2301      	movs	r3, #1
 800afd4:	4618      	mov	r0, r3
 800afd6:	bd30      	pop	{r4, r5, pc}
 800afd8:	42a0      	cmp	r0, r4
 800afda:	d3f3      	bcc.n	800afc4 <__mcmp+0x14>
 800afdc:	e7fa      	b.n	800afd4 <__mcmp+0x24>
 800afde:	f04f 33ff 	mov.w	r3, #4294967295
 800afe2:	e7f7      	b.n	800afd4 <__mcmp+0x24>

0800afe4 <__mdiff>:
 800afe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afe8:	460d      	mov	r5, r1
 800afea:	4607      	mov	r7, r0
 800afec:	4611      	mov	r1, r2
 800afee:	4628      	mov	r0, r5
 800aff0:	4614      	mov	r4, r2
 800aff2:	f7ff ffdd 	bl	800afb0 <__mcmp>
 800aff6:	1e06      	subs	r6, r0, #0
 800aff8:	d108      	bne.n	800b00c <__mdiff+0x28>
 800affa:	4631      	mov	r1, r6
 800affc:	4638      	mov	r0, r7
 800affe:	f7ff fdc1 	bl	800ab84 <_Balloc>
 800b002:	2301      	movs	r3, #1
 800b004:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b00c:	bfa4      	itt	ge
 800b00e:	4623      	movge	r3, r4
 800b010:	462c      	movge	r4, r5
 800b012:	4638      	mov	r0, r7
 800b014:	6861      	ldr	r1, [r4, #4]
 800b016:	bfa6      	itte	ge
 800b018:	461d      	movge	r5, r3
 800b01a:	2600      	movge	r6, #0
 800b01c:	2601      	movlt	r6, #1
 800b01e:	f7ff fdb1 	bl	800ab84 <_Balloc>
 800b022:	692b      	ldr	r3, [r5, #16]
 800b024:	60c6      	str	r6, [r0, #12]
 800b026:	6926      	ldr	r6, [r4, #16]
 800b028:	f105 0914 	add.w	r9, r5, #20
 800b02c:	f104 0214 	add.w	r2, r4, #20
 800b030:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b034:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b038:	f100 0514 	add.w	r5, r0, #20
 800b03c:	f04f 0e00 	mov.w	lr, #0
 800b040:	f852 ab04 	ldr.w	sl, [r2], #4
 800b044:	f859 4b04 	ldr.w	r4, [r9], #4
 800b048:	fa1e f18a 	uxtah	r1, lr, sl
 800b04c:	b2a3      	uxth	r3, r4
 800b04e:	1ac9      	subs	r1, r1, r3
 800b050:	0c23      	lsrs	r3, r4, #16
 800b052:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b056:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b05a:	b289      	uxth	r1, r1
 800b05c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b060:	45c8      	cmp	r8, r9
 800b062:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b066:	4694      	mov	ip, r2
 800b068:	f845 3b04 	str.w	r3, [r5], #4
 800b06c:	d8e8      	bhi.n	800b040 <__mdiff+0x5c>
 800b06e:	45bc      	cmp	ip, r7
 800b070:	d304      	bcc.n	800b07c <__mdiff+0x98>
 800b072:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b076:	b183      	cbz	r3, 800b09a <__mdiff+0xb6>
 800b078:	6106      	str	r6, [r0, #16]
 800b07a:	e7c5      	b.n	800b008 <__mdiff+0x24>
 800b07c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b080:	fa1e f381 	uxtah	r3, lr, r1
 800b084:	141a      	asrs	r2, r3, #16
 800b086:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b090:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b094:	f845 3b04 	str.w	r3, [r5], #4
 800b098:	e7e9      	b.n	800b06e <__mdiff+0x8a>
 800b09a:	3e01      	subs	r6, #1
 800b09c:	e7e9      	b.n	800b072 <__mdiff+0x8e>

0800b09e <__d2b>:
 800b09e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0a2:	460e      	mov	r6, r1
 800b0a4:	2101      	movs	r1, #1
 800b0a6:	ec59 8b10 	vmov	r8, r9, d0
 800b0aa:	4615      	mov	r5, r2
 800b0ac:	f7ff fd6a 	bl	800ab84 <_Balloc>
 800b0b0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b0b4:	4607      	mov	r7, r0
 800b0b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0ba:	bb34      	cbnz	r4, 800b10a <__d2b+0x6c>
 800b0bc:	9301      	str	r3, [sp, #4]
 800b0be:	f1b8 0300 	subs.w	r3, r8, #0
 800b0c2:	d027      	beq.n	800b114 <__d2b+0x76>
 800b0c4:	a802      	add	r0, sp, #8
 800b0c6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b0ca:	f7ff fe00 	bl	800acce <__lo0bits>
 800b0ce:	9900      	ldr	r1, [sp, #0]
 800b0d0:	b1f0      	cbz	r0, 800b110 <__d2b+0x72>
 800b0d2:	9a01      	ldr	r2, [sp, #4]
 800b0d4:	f1c0 0320 	rsb	r3, r0, #32
 800b0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0dc:	430b      	orrs	r3, r1
 800b0de:	40c2      	lsrs	r2, r0
 800b0e0:	617b      	str	r3, [r7, #20]
 800b0e2:	9201      	str	r2, [sp, #4]
 800b0e4:	9b01      	ldr	r3, [sp, #4]
 800b0e6:	61bb      	str	r3, [r7, #24]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	bf14      	ite	ne
 800b0ec:	2102      	movne	r1, #2
 800b0ee:	2101      	moveq	r1, #1
 800b0f0:	6139      	str	r1, [r7, #16]
 800b0f2:	b1c4      	cbz	r4, 800b126 <__d2b+0x88>
 800b0f4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b0f8:	4404      	add	r4, r0
 800b0fa:	6034      	str	r4, [r6, #0]
 800b0fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b100:	6028      	str	r0, [r5, #0]
 800b102:	4638      	mov	r0, r7
 800b104:	b003      	add	sp, #12
 800b106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b10a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b10e:	e7d5      	b.n	800b0bc <__d2b+0x1e>
 800b110:	6179      	str	r1, [r7, #20]
 800b112:	e7e7      	b.n	800b0e4 <__d2b+0x46>
 800b114:	a801      	add	r0, sp, #4
 800b116:	f7ff fdda 	bl	800acce <__lo0bits>
 800b11a:	9b01      	ldr	r3, [sp, #4]
 800b11c:	617b      	str	r3, [r7, #20]
 800b11e:	2101      	movs	r1, #1
 800b120:	6139      	str	r1, [r7, #16]
 800b122:	3020      	adds	r0, #32
 800b124:	e7e5      	b.n	800b0f2 <__d2b+0x54>
 800b126:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b12a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b12e:	6030      	str	r0, [r6, #0]
 800b130:	6918      	ldr	r0, [r3, #16]
 800b132:	f7ff fdad 	bl	800ac90 <__hi0bits>
 800b136:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b13a:	e7e1      	b.n	800b100 <__d2b+0x62>

0800b13c <_calloc_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	fb02 f401 	mul.w	r4, r2, r1
 800b142:	4621      	mov	r1, r4
 800b144:	f000 f856 	bl	800b1f4 <_malloc_r>
 800b148:	4605      	mov	r5, r0
 800b14a:	b118      	cbz	r0, 800b154 <_calloc_r+0x18>
 800b14c:	4622      	mov	r2, r4
 800b14e:	2100      	movs	r1, #0
 800b150:	f7fe f9d1 	bl	80094f6 <memset>
 800b154:	4628      	mov	r0, r5
 800b156:	bd38      	pop	{r3, r4, r5, pc}

0800b158 <_free_r>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	4605      	mov	r5, r0
 800b15c:	2900      	cmp	r1, #0
 800b15e:	d045      	beq.n	800b1ec <_free_r+0x94>
 800b160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b164:	1f0c      	subs	r4, r1, #4
 800b166:	2b00      	cmp	r3, #0
 800b168:	bfb8      	it	lt
 800b16a:	18e4      	addlt	r4, r4, r3
 800b16c:	f000 fa29 	bl	800b5c2 <__malloc_lock>
 800b170:	4a1f      	ldr	r2, [pc, #124]	; (800b1f0 <_free_r+0x98>)
 800b172:	6813      	ldr	r3, [r2, #0]
 800b174:	4610      	mov	r0, r2
 800b176:	b933      	cbnz	r3, 800b186 <_free_r+0x2e>
 800b178:	6063      	str	r3, [r4, #4]
 800b17a:	6014      	str	r4, [r2, #0]
 800b17c:	4628      	mov	r0, r5
 800b17e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b182:	f000 ba1f 	b.w	800b5c4 <__malloc_unlock>
 800b186:	42a3      	cmp	r3, r4
 800b188:	d90c      	bls.n	800b1a4 <_free_r+0x4c>
 800b18a:	6821      	ldr	r1, [r4, #0]
 800b18c:	1862      	adds	r2, r4, r1
 800b18e:	4293      	cmp	r3, r2
 800b190:	bf04      	itt	eq
 800b192:	681a      	ldreq	r2, [r3, #0]
 800b194:	685b      	ldreq	r3, [r3, #4]
 800b196:	6063      	str	r3, [r4, #4]
 800b198:	bf04      	itt	eq
 800b19a:	1852      	addeq	r2, r2, r1
 800b19c:	6022      	streq	r2, [r4, #0]
 800b19e:	6004      	str	r4, [r0, #0]
 800b1a0:	e7ec      	b.n	800b17c <_free_r+0x24>
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	685a      	ldr	r2, [r3, #4]
 800b1a6:	b10a      	cbz	r2, 800b1ac <_free_r+0x54>
 800b1a8:	42a2      	cmp	r2, r4
 800b1aa:	d9fa      	bls.n	800b1a2 <_free_r+0x4a>
 800b1ac:	6819      	ldr	r1, [r3, #0]
 800b1ae:	1858      	adds	r0, r3, r1
 800b1b0:	42a0      	cmp	r0, r4
 800b1b2:	d10b      	bne.n	800b1cc <_free_r+0x74>
 800b1b4:	6820      	ldr	r0, [r4, #0]
 800b1b6:	4401      	add	r1, r0
 800b1b8:	1858      	adds	r0, r3, r1
 800b1ba:	4282      	cmp	r2, r0
 800b1bc:	6019      	str	r1, [r3, #0]
 800b1be:	d1dd      	bne.n	800b17c <_free_r+0x24>
 800b1c0:	6810      	ldr	r0, [r2, #0]
 800b1c2:	6852      	ldr	r2, [r2, #4]
 800b1c4:	605a      	str	r2, [r3, #4]
 800b1c6:	4401      	add	r1, r0
 800b1c8:	6019      	str	r1, [r3, #0]
 800b1ca:	e7d7      	b.n	800b17c <_free_r+0x24>
 800b1cc:	d902      	bls.n	800b1d4 <_free_r+0x7c>
 800b1ce:	230c      	movs	r3, #12
 800b1d0:	602b      	str	r3, [r5, #0]
 800b1d2:	e7d3      	b.n	800b17c <_free_r+0x24>
 800b1d4:	6820      	ldr	r0, [r4, #0]
 800b1d6:	1821      	adds	r1, r4, r0
 800b1d8:	428a      	cmp	r2, r1
 800b1da:	bf04      	itt	eq
 800b1dc:	6811      	ldreq	r1, [r2, #0]
 800b1de:	6852      	ldreq	r2, [r2, #4]
 800b1e0:	6062      	str	r2, [r4, #4]
 800b1e2:	bf04      	itt	eq
 800b1e4:	1809      	addeq	r1, r1, r0
 800b1e6:	6021      	streq	r1, [r4, #0]
 800b1e8:	605c      	str	r4, [r3, #4]
 800b1ea:	e7c7      	b.n	800b17c <_free_r+0x24>
 800b1ec:	bd38      	pop	{r3, r4, r5, pc}
 800b1ee:	bf00      	nop
 800b1f0:	20000274 	.word	0x20000274

0800b1f4 <_malloc_r>:
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	1ccd      	adds	r5, r1, #3
 800b1f8:	f025 0503 	bic.w	r5, r5, #3
 800b1fc:	3508      	adds	r5, #8
 800b1fe:	2d0c      	cmp	r5, #12
 800b200:	bf38      	it	cc
 800b202:	250c      	movcc	r5, #12
 800b204:	2d00      	cmp	r5, #0
 800b206:	4606      	mov	r6, r0
 800b208:	db01      	blt.n	800b20e <_malloc_r+0x1a>
 800b20a:	42a9      	cmp	r1, r5
 800b20c:	d903      	bls.n	800b216 <_malloc_r+0x22>
 800b20e:	230c      	movs	r3, #12
 800b210:	6033      	str	r3, [r6, #0]
 800b212:	2000      	movs	r0, #0
 800b214:	bd70      	pop	{r4, r5, r6, pc}
 800b216:	f000 f9d4 	bl	800b5c2 <__malloc_lock>
 800b21a:	4a21      	ldr	r2, [pc, #132]	; (800b2a0 <_malloc_r+0xac>)
 800b21c:	6814      	ldr	r4, [r2, #0]
 800b21e:	4621      	mov	r1, r4
 800b220:	b991      	cbnz	r1, 800b248 <_malloc_r+0x54>
 800b222:	4c20      	ldr	r4, [pc, #128]	; (800b2a4 <_malloc_r+0xb0>)
 800b224:	6823      	ldr	r3, [r4, #0]
 800b226:	b91b      	cbnz	r3, 800b230 <_malloc_r+0x3c>
 800b228:	4630      	mov	r0, r6
 800b22a:	f000 f98f 	bl	800b54c <_sbrk_r>
 800b22e:	6020      	str	r0, [r4, #0]
 800b230:	4629      	mov	r1, r5
 800b232:	4630      	mov	r0, r6
 800b234:	f000 f98a 	bl	800b54c <_sbrk_r>
 800b238:	1c43      	adds	r3, r0, #1
 800b23a:	d124      	bne.n	800b286 <_malloc_r+0x92>
 800b23c:	230c      	movs	r3, #12
 800b23e:	6033      	str	r3, [r6, #0]
 800b240:	4630      	mov	r0, r6
 800b242:	f000 f9bf 	bl	800b5c4 <__malloc_unlock>
 800b246:	e7e4      	b.n	800b212 <_malloc_r+0x1e>
 800b248:	680b      	ldr	r3, [r1, #0]
 800b24a:	1b5b      	subs	r3, r3, r5
 800b24c:	d418      	bmi.n	800b280 <_malloc_r+0x8c>
 800b24e:	2b0b      	cmp	r3, #11
 800b250:	d90f      	bls.n	800b272 <_malloc_r+0x7e>
 800b252:	600b      	str	r3, [r1, #0]
 800b254:	50cd      	str	r5, [r1, r3]
 800b256:	18cc      	adds	r4, r1, r3
 800b258:	4630      	mov	r0, r6
 800b25a:	f000 f9b3 	bl	800b5c4 <__malloc_unlock>
 800b25e:	f104 000b 	add.w	r0, r4, #11
 800b262:	1d23      	adds	r3, r4, #4
 800b264:	f020 0007 	bic.w	r0, r0, #7
 800b268:	1ac3      	subs	r3, r0, r3
 800b26a:	d0d3      	beq.n	800b214 <_malloc_r+0x20>
 800b26c:	425a      	negs	r2, r3
 800b26e:	50e2      	str	r2, [r4, r3]
 800b270:	e7d0      	b.n	800b214 <_malloc_r+0x20>
 800b272:	428c      	cmp	r4, r1
 800b274:	684b      	ldr	r3, [r1, #4]
 800b276:	bf16      	itet	ne
 800b278:	6063      	strne	r3, [r4, #4]
 800b27a:	6013      	streq	r3, [r2, #0]
 800b27c:	460c      	movne	r4, r1
 800b27e:	e7eb      	b.n	800b258 <_malloc_r+0x64>
 800b280:	460c      	mov	r4, r1
 800b282:	6849      	ldr	r1, [r1, #4]
 800b284:	e7cc      	b.n	800b220 <_malloc_r+0x2c>
 800b286:	1cc4      	adds	r4, r0, #3
 800b288:	f024 0403 	bic.w	r4, r4, #3
 800b28c:	42a0      	cmp	r0, r4
 800b28e:	d005      	beq.n	800b29c <_malloc_r+0xa8>
 800b290:	1a21      	subs	r1, r4, r0
 800b292:	4630      	mov	r0, r6
 800b294:	f000 f95a 	bl	800b54c <_sbrk_r>
 800b298:	3001      	adds	r0, #1
 800b29a:	d0cf      	beq.n	800b23c <_malloc_r+0x48>
 800b29c:	6025      	str	r5, [r4, #0]
 800b29e:	e7db      	b.n	800b258 <_malloc_r+0x64>
 800b2a0:	20000274 	.word	0x20000274
 800b2a4:	20000278 	.word	0x20000278

0800b2a8 <__ssputs_r>:
 800b2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2ac:	688e      	ldr	r6, [r1, #8]
 800b2ae:	429e      	cmp	r6, r3
 800b2b0:	4682      	mov	sl, r0
 800b2b2:	460c      	mov	r4, r1
 800b2b4:	4690      	mov	r8, r2
 800b2b6:	4699      	mov	r9, r3
 800b2b8:	d837      	bhi.n	800b32a <__ssputs_r+0x82>
 800b2ba:	898a      	ldrh	r2, [r1, #12]
 800b2bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2c0:	d031      	beq.n	800b326 <__ssputs_r+0x7e>
 800b2c2:	6825      	ldr	r5, [r4, #0]
 800b2c4:	6909      	ldr	r1, [r1, #16]
 800b2c6:	1a6f      	subs	r7, r5, r1
 800b2c8:	6965      	ldr	r5, [r4, #20]
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2d0:	fb95 f5f3 	sdiv	r5, r5, r3
 800b2d4:	f109 0301 	add.w	r3, r9, #1
 800b2d8:	443b      	add	r3, r7
 800b2da:	429d      	cmp	r5, r3
 800b2dc:	bf38      	it	cc
 800b2de:	461d      	movcc	r5, r3
 800b2e0:	0553      	lsls	r3, r2, #21
 800b2e2:	d530      	bpl.n	800b346 <__ssputs_r+0x9e>
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	f7ff ff85 	bl	800b1f4 <_malloc_r>
 800b2ea:	4606      	mov	r6, r0
 800b2ec:	b950      	cbnz	r0, 800b304 <__ssputs_r+0x5c>
 800b2ee:	230c      	movs	r3, #12
 800b2f0:	f8ca 3000 	str.w	r3, [sl]
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2fa:	81a3      	strh	r3, [r4, #12]
 800b2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b304:	463a      	mov	r2, r7
 800b306:	6921      	ldr	r1, [r4, #16]
 800b308:	f7fe f8ea 	bl	80094e0 <memcpy>
 800b30c:	89a3      	ldrh	r3, [r4, #12]
 800b30e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b316:	81a3      	strh	r3, [r4, #12]
 800b318:	6126      	str	r6, [r4, #16]
 800b31a:	6165      	str	r5, [r4, #20]
 800b31c:	443e      	add	r6, r7
 800b31e:	1bed      	subs	r5, r5, r7
 800b320:	6026      	str	r6, [r4, #0]
 800b322:	60a5      	str	r5, [r4, #8]
 800b324:	464e      	mov	r6, r9
 800b326:	454e      	cmp	r6, r9
 800b328:	d900      	bls.n	800b32c <__ssputs_r+0x84>
 800b32a:	464e      	mov	r6, r9
 800b32c:	4632      	mov	r2, r6
 800b32e:	4641      	mov	r1, r8
 800b330:	6820      	ldr	r0, [r4, #0]
 800b332:	f000 f92d 	bl	800b590 <memmove>
 800b336:	68a3      	ldr	r3, [r4, #8]
 800b338:	1b9b      	subs	r3, r3, r6
 800b33a:	60a3      	str	r3, [r4, #8]
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	441e      	add	r6, r3
 800b340:	6026      	str	r6, [r4, #0]
 800b342:	2000      	movs	r0, #0
 800b344:	e7dc      	b.n	800b300 <__ssputs_r+0x58>
 800b346:	462a      	mov	r2, r5
 800b348:	f000 f93d 	bl	800b5c6 <_realloc_r>
 800b34c:	4606      	mov	r6, r0
 800b34e:	2800      	cmp	r0, #0
 800b350:	d1e2      	bne.n	800b318 <__ssputs_r+0x70>
 800b352:	6921      	ldr	r1, [r4, #16]
 800b354:	4650      	mov	r0, sl
 800b356:	f7ff feff 	bl	800b158 <_free_r>
 800b35a:	e7c8      	b.n	800b2ee <__ssputs_r+0x46>

0800b35c <_svfiprintf_r>:
 800b35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b360:	461d      	mov	r5, r3
 800b362:	898b      	ldrh	r3, [r1, #12]
 800b364:	061f      	lsls	r7, r3, #24
 800b366:	b09d      	sub	sp, #116	; 0x74
 800b368:	4680      	mov	r8, r0
 800b36a:	460c      	mov	r4, r1
 800b36c:	4616      	mov	r6, r2
 800b36e:	d50f      	bpl.n	800b390 <_svfiprintf_r+0x34>
 800b370:	690b      	ldr	r3, [r1, #16]
 800b372:	b96b      	cbnz	r3, 800b390 <_svfiprintf_r+0x34>
 800b374:	2140      	movs	r1, #64	; 0x40
 800b376:	f7ff ff3d 	bl	800b1f4 <_malloc_r>
 800b37a:	6020      	str	r0, [r4, #0]
 800b37c:	6120      	str	r0, [r4, #16]
 800b37e:	b928      	cbnz	r0, 800b38c <_svfiprintf_r+0x30>
 800b380:	230c      	movs	r3, #12
 800b382:	f8c8 3000 	str.w	r3, [r8]
 800b386:	f04f 30ff 	mov.w	r0, #4294967295
 800b38a:	e0c8      	b.n	800b51e <_svfiprintf_r+0x1c2>
 800b38c:	2340      	movs	r3, #64	; 0x40
 800b38e:	6163      	str	r3, [r4, #20]
 800b390:	2300      	movs	r3, #0
 800b392:	9309      	str	r3, [sp, #36]	; 0x24
 800b394:	2320      	movs	r3, #32
 800b396:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b39a:	2330      	movs	r3, #48	; 0x30
 800b39c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3a0:	9503      	str	r5, [sp, #12]
 800b3a2:	f04f 0b01 	mov.w	fp, #1
 800b3a6:	4637      	mov	r7, r6
 800b3a8:	463d      	mov	r5, r7
 800b3aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b3ae:	b10b      	cbz	r3, 800b3b4 <_svfiprintf_r+0x58>
 800b3b0:	2b25      	cmp	r3, #37	; 0x25
 800b3b2:	d13e      	bne.n	800b432 <_svfiprintf_r+0xd6>
 800b3b4:	ebb7 0a06 	subs.w	sl, r7, r6
 800b3b8:	d00b      	beq.n	800b3d2 <_svfiprintf_r+0x76>
 800b3ba:	4653      	mov	r3, sl
 800b3bc:	4632      	mov	r2, r6
 800b3be:	4621      	mov	r1, r4
 800b3c0:	4640      	mov	r0, r8
 800b3c2:	f7ff ff71 	bl	800b2a8 <__ssputs_r>
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	f000 80a4 	beq.w	800b514 <_svfiprintf_r+0x1b8>
 800b3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ce:	4453      	add	r3, sl
 800b3d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3d2:	783b      	ldrb	r3, [r7, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f000 809d 	beq.w	800b514 <_svfiprintf_r+0x1b8>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3e4:	9304      	str	r3, [sp, #16]
 800b3e6:	9307      	str	r3, [sp, #28]
 800b3e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b3ee:	462f      	mov	r7, r5
 800b3f0:	2205      	movs	r2, #5
 800b3f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b3f6:	4850      	ldr	r0, [pc, #320]	; (800b538 <_svfiprintf_r+0x1dc>)
 800b3f8:	f7f4 ff1a 	bl	8000230 <memchr>
 800b3fc:	9b04      	ldr	r3, [sp, #16]
 800b3fe:	b9d0      	cbnz	r0, 800b436 <_svfiprintf_r+0xda>
 800b400:	06d9      	lsls	r1, r3, #27
 800b402:	bf44      	itt	mi
 800b404:	2220      	movmi	r2, #32
 800b406:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b40a:	071a      	lsls	r2, r3, #28
 800b40c:	bf44      	itt	mi
 800b40e:	222b      	movmi	r2, #43	; 0x2b
 800b410:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b414:	782a      	ldrb	r2, [r5, #0]
 800b416:	2a2a      	cmp	r2, #42	; 0x2a
 800b418:	d015      	beq.n	800b446 <_svfiprintf_r+0xea>
 800b41a:	9a07      	ldr	r2, [sp, #28]
 800b41c:	462f      	mov	r7, r5
 800b41e:	2000      	movs	r0, #0
 800b420:	250a      	movs	r5, #10
 800b422:	4639      	mov	r1, r7
 800b424:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b428:	3b30      	subs	r3, #48	; 0x30
 800b42a:	2b09      	cmp	r3, #9
 800b42c:	d94d      	bls.n	800b4ca <_svfiprintf_r+0x16e>
 800b42e:	b1b8      	cbz	r0, 800b460 <_svfiprintf_r+0x104>
 800b430:	e00f      	b.n	800b452 <_svfiprintf_r+0xf6>
 800b432:	462f      	mov	r7, r5
 800b434:	e7b8      	b.n	800b3a8 <_svfiprintf_r+0x4c>
 800b436:	4a40      	ldr	r2, [pc, #256]	; (800b538 <_svfiprintf_r+0x1dc>)
 800b438:	1a80      	subs	r0, r0, r2
 800b43a:	fa0b f000 	lsl.w	r0, fp, r0
 800b43e:	4318      	orrs	r0, r3
 800b440:	9004      	str	r0, [sp, #16]
 800b442:	463d      	mov	r5, r7
 800b444:	e7d3      	b.n	800b3ee <_svfiprintf_r+0x92>
 800b446:	9a03      	ldr	r2, [sp, #12]
 800b448:	1d11      	adds	r1, r2, #4
 800b44a:	6812      	ldr	r2, [r2, #0]
 800b44c:	9103      	str	r1, [sp, #12]
 800b44e:	2a00      	cmp	r2, #0
 800b450:	db01      	blt.n	800b456 <_svfiprintf_r+0xfa>
 800b452:	9207      	str	r2, [sp, #28]
 800b454:	e004      	b.n	800b460 <_svfiprintf_r+0x104>
 800b456:	4252      	negs	r2, r2
 800b458:	f043 0302 	orr.w	r3, r3, #2
 800b45c:	9207      	str	r2, [sp, #28]
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	783b      	ldrb	r3, [r7, #0]
 800b462:	2b2e      	cmp	r3, #46	; 0x2e
 800b464:	d10c      	bne.n	800b480 <_svfiprintf_r+0x124>
 800b466:	787b      	ldrb	r3, [r7, #1]
 800b468:	2b2a      	cmp	r3, #42	; 0x2a
 800b46a:	d133      	bne.n	800b4d4 <_svfiprintf_r+0x178>
 800b46c:	9b03      	ldr	r3, [sp, #12]
 800b46e:	1d1a      	adds	r2, r3, #4
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	9203      	str	r2, [sp, #12]
 800b474:	2b00      	cmp	r3, #0
 800b476:	bfb8      	it	lt
 800b478:	f04f 33ff 	movlt.w	r3, #4294967295
 800b47c:	3702      	adds	r7, #2
 800b47e:	9305      	str	r3, [sp, #20]
 800b480:	4d2e      	ldr	r5, [pc, #184]	; (800b53c <_svfiprintf_r+0x1e0>)
 800b482:	7839      	ldrb	r1, [r7, #0]
 800b484:	2203      	movs	r2, #3
 800b486:	4628      	mov	r0, r5
 800b488:	f7f4 fed2 	bl	8000230 <memchr>
 800b48c:	b138      	cbz	r0, 800b49e <_svfiprintf_r+0x142>
 800b48e:	2340      	movs	r3, #64	; 0x40
 800b490:	1b40      	subs	r0, r0, r5
 800b492:	fa03 f000 	lsl.w	r0, r3, r0
 800b496:	9b04      	ldr	r3, [sp, #16]
 800b498:	4303      	orrs	r3, r0
 800b49a:	3701      	adds	r7, #1
 800b49c:	9304      	str	r3, [sp, #16]
 800b49e:	7839      	ldrb	r1, [r7, #0]
 800b4a0:	4827      	ldr	r0, [pc, #156]	; (800b540 <_svfiprintf_r+0x1e4>)
 800b4a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4a6:	2206      	movs	r2, #6
 800b4a8:	1c7e      	adds	r6, r7, #1
 800b4aa:	f7f4 fec1 	bl	8000230 <memchr>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	d038      	beq.n	800b524 <_svfiprintf_r+0x1c8>
 800b4b2:	4b24      	ldr	r3, [pc, #144]	; (800b544 <_svfiprintf_r+0x1e8>)
 800b4b4:	bb13      	cbnz	r3, 800b4fc <_svfiprintf_r+0x1a0>
 800b4b6:	9b03      	ldr	r3, [sp, #12]
 800b4b8:	3307      	adds	r3, #7
 800b4ba:	f023 0307 	bic.w	r3, r3, #7
 800b4be:	3308      	adds	r3, #8
 800b4c0:	9303      	str	r3, [sp, #12]
 800b4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c4:	444b      	add	r3, r9
 800b4c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c8:	e76d      	b.n	800b3a6 <_svfiprintf_r+0x4a>
 800b4ca:	fb05 3202 	mla	r2, r5, r2, r3
 800b4ce:	2001      	movs	r0, #1
 800b4d0:	460f      	mov	r7, r1
 800b4d2:	e7a6      	b.n	800b422 <_svfiprintf_r+0xc6>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	3701      	adds	r7, #1
 800b4d8:	9305      	str	r3, [sp, #20]
 800b4da:	4619      	mov	r1, r3
 800b4dc:	250a      	movs	r5, #10
 800b4de:	4638      	mov	r0, r7
 800b4e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4e4:	3a30      	subs	r2, #48	; 0x30
 800b4e6:	2a09      	cmp	r2, #9
 800b4e8:	d903      	bls.n	800b4f2 <_svfiprintf_r+0x196>
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d0c8      	beq.n	800b480 <_svfiprintf_r+0x124>
 800b4ee:	9105      	str	r1, [sp, #20]
 800b4f0:	e7c6      	b.n	800b480 <_svfiprintf_r+0x124>
 800b4f2:	fb05 2101 	mla	r1, r5, r1, r2
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	4607      	mov	r7, r0
 800b4fa:	e7f0      	b.n	800b4de <_svfiprintf_r+0x182>
 800b4fc:	ab03      	add	r3, sp, #12
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	4622      	mov	r2, r4
 800b502:	4b11      	ldr	r3, [pc, #68]	; (800b548 <_svfiprintf_r+0x1ec>)
 800b504:	a904      	add	r1, sp, #16
 800b506:	4640      	mov	r0, r8
 800b508:	f7fe f892 	bl	8009630 <_printf_float>
 800b50c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b510:	4681      	mov	r9, r0
 800b512:	d1d6      	bne.n	800b4c2 <_svfiprintf_r+0x166>
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	065b      	lsls	r3, r3, #25
 800b518:	f53f af35 	bmi.w	800b386 <_svfiprintf_r+0x2a>
 800b51c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b51e:	b01d      	add	sp, #116	; 0x74
 800b520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b524:	ab03      	add	r3, sp, #12
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	4622      	mov	r2, r4
 800b52a:	4b07      	ldr	r3, [pc, #28]	; (800b548 <_svfiprintf_r+0x1ec>)
 800b52c:	a904      	add	r1, sp, #16
 800b52e:	4640      	mov	r0, r8
 800b530:	f7fe fb34 	bl	8009b9c <_printf_i>
 800b534:	e7ea      	b.n	800b50c <_svfiprintf_r+0x1b0>
 800b536:	bf00      	nop
 800b538:	0800c2a4 	.word	0x0800c2a4
 800b53c:	0800c2aa 	.word	0x0800c2aa
 800b540:	0800c2ae 	.word	0x0800c2ae
 800b544:	08009631 	.word	0x08009631
 800b548:	0800b2a9 	.word	0x0800b2a9

0800b54c <_sbrk_r>:
 800b54c:	b538      	push	{r3, r4, r5, lr}
 800b54e:	4c06      	ldr	r4, [pc, #24]	; (800b568 <_sbrk_r+0x1c>)
 800b550:	2300      	movs	r3, #0
 800b552:	4605      	mov	r5, r0
 800b554:	4608      	mov	r0, r1
 800b556:	6023      	str	r3, [r4, #0]
 800b558:	f7f7 fd84 	bl	8003064 <_sbrk>
 800b55c:	1c43      	adds	r3, r0, #1
 800b55e:	d102      	bne.n	800b566 <_sbrk_r+0x1a>
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	b103      	cbz	r3, 800b566 <_sbrk_r+0x1a>
 800b564:	602b      	str	r3, [r5, #0]
 800b566:	bd38      	pop	{r3, r4, r5, pc}
 800b568:	20000690 	.word	0x20000690

0800b56c <__ascii_mbtowc>:
 800b56c:	b082      	sub	sp, #8
 800b56e:	b901      	cbnz	r1, 800b572 <__ascii_mbtowc+0x6>
 800b570:	a901      	add	r1, sp, #4
 800b572:	b142      	cbz	r2, 800b586 <__ascii_mbtowc+0x1a>
 800b574:	b14b      	cbz	r3, 800b58a <__ascii_mbtowc+0x1e>
 800b576:	7813      	ldrb	r3, [r2, #0]
 800b578:	600b      	str	r3, [r1, #0]
 800b57a:	7812      	ldrb	r2, [r2, #0]
 800b57c:	1c10      	adds	r0, r2, #0
 800b57e:	bf18      	it	ne
 800b580:	2001      	movne	r0, #1
 800b582:	b002      	add	sp, #8
 800b584:	4770      	bx	lr
 800b586:	4610      	mov	r0, r2
 800b588:	e7fb      	b.n	800b582 <__ascii_mbtowc+0x16>
 800b58a:	f06f 0001 	mvn.w	r0, #1
 800b58e:	e7f8      	b.n	800b582 <__ascii_mbtowc+0x16>

0800b590 <memmove>:
 800b590:	4288      	cmp	r0, r1
 800b592:	b510      	push	{r4, lr}
 800b594:	eb01 0302 	add.w	r3, r1, r2
 800b598:	d807      	bhi.n	800b5aa <memmove+0x1a>
 800b59a:	1e42      	subs	r2, r0, #1
 800b59c:	4299      	cmp	r1, r3
 800b59e:	d00a      	beq.n	800b5b6 <memmove+0x26>
 800b5a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5a4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b5a8:	e7f8      	b.n	800b59c <memmove+0xc>
 800b5aa:	4283      	cmp	r3, r0
 800b5ac:	d9f5      	bls.n	800b59a <memmove+0xa>
 800b5ae:	1881      	adds	r1, r0, r2
 800b5b0:	1ad2      	subs	r2, r2, r3
 800b5b2:	42d3      	cmn	r3, r2
 800b5b4:	d100      	bne.n	800b5b8 <memmove+0x28>
 800b5b6:	bd10      	pop	{r4, pc}
 800b5b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b5c0:	e7f7      	b.n	800b5b2 <memmove+0x22>

0800b5c2 <__malloc_lock>:
 800b5c2:	4770      	bx	lr

0800b5c4 <__malloc_unlock>:
 800b5c4:	4770      	bx	lr

0800b5c6 <_realloc_r>:
 800b5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c8:	4607      	mov	r7, r0
 800b5ca:	4614      	mov	r4, r2
 800b5cc:	460e      	mov	r6, r1
 800b5ce:	b921      	cbnz	r1, 800b5da <_realloc_r+0x14>
 800b5d0:	4611      	mov	r1, r2
 800b5d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b5d6:	f7ff be0d 	b.w	800b1f4 <_malloc_r>
 800b5da:	b922      	cbnz	r2, 800b5e6 <_realloc_r+0x20>
 800b5dc:	f7ff fdbc 	bl	800b158 <_free_r>
 800b5e0:	4625      	mov	r5, r4
 800b5e2:	4628      	mov	r0, r5
 800b5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e6:	f000 f821 	bl	800b62c <_malloc_usable_size_r>
 800b5ea:	42a0      	cmp	r0, r4
 800b5ec:	d20f      	bcs.n	800b60e <_realloc_r+0x48>
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	f7ff fdff 	bl	800b1f4 <_malloc_r>
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d0f2      	beq.n	800b5e2 <_realloc_r+0x1c>
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	4622      	mov	r2, r4
 800b600:	f7fd ff6e 	bl	80094e0 <memcpy>
 800b604:	4631      	mov	r1, r6
 800b606:	4638      	mov	r0, r7
 800b608:	f7ff fda6 	bl	800b158 <_free_r>
 800b60c:	e7e9      	b.n	800b5e2 <_realloc_r+0x1c>
 800b60e:	4635      	mov	r5, r6
 800b610:	e7e7      	b.n	800b5e2 <_realloc_r+0x1c>

0800b612 <__ascii_wctomb>:
 800b612:	b149      	cbz	r1, 800b628 <__ascii_wctomb+0x16>
 800b614:	2aff      	cmp	r2, #255	; 0xff
 800b616:	bf85      	ittet	hi
 800b618:	238a      	movhi	r3, #138	; 0x8a
 800b61a:	6003      	strhi	r3, [r0, #0]
 800b61c:	700a      	strbls	r2, [r1, #0]
 800b61e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b622:	bf98      	it	ls
 800b624:	2001      	movls	r0, #1
 800b626:	4770      	bx	lr
 800b628:	4608      	mov	r0, r1
 800b62a:	4770      	bx	lr

0800b62c <_malloc_usable_size_r>:
 800b62c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b630:	1f18      	subs	r0, r3, #4
 800b632:	2b00      	cmp	r3, #0
 800b634:	bfbc      	itt	lt
 800b636:	580b      	ldrlt	r3, [r1, r0]
 800b638:	18c0      	addlt	r0, r0, r3
 800b63a:	4770      	bx	lr

0800b63c <log>:
 800b63c:	b570      	push	{r4, r5, r6, lr}
 800b63e:	ed2d 8b02 	vpush	{d8}
 800b642:	b08a      	sub	sp, #40	; 0x28
 800b644:	ec55 4b10 	vmov	r4, r5, d0
 800b648:	f000 f87a 	bl	800b740 <__ieee754_log>
 800b64c:	4b36      	ldr	r3, [pc, #216]	; (800b728 <log+0xec>)
 800b64e:	eeb0 8a40 	vmov.f32	s16, s0
 800b652:	eef0 8a60 	vmov.f32	s17, s1
 800b656:	f993 6000 	ldrsb.w	r6, [r3]
 800b65a:	1c73      	adds	r3, r6, #1
 800b65c:	d05b      	beq.n	800b716 <log+0xda>
 800b65e:	4622      	mov	r2, r4
 800b660:	462b      	mov	r3, r5
 800b662:	4620      	mov	r0, r4
 800b664:	4629      	mov	r1, r5
 800b666:	f7f5 fa89 	bl	8000b7c <__aeabi_dcmpun>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d153      	bne.n	800b716 <log+0xda>
 800b66e:	2200      	movs	r2, #0
 800b670:	2300      	movs	r3, #0
 800b672:	4620      	mov	r0, r4
 800b674:	4629      	mov	r1, r5
 800b676:	f7f5 fa77 	bl	8000b68 <__aeabi_dcmpgt>
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d14b      	bne.n	800b716 <log+0xda>
 800b67e:	4b2b      	ldr	r3, [pc, #172]	; (800b72c <log+0xf0>)
 800b680:	9301      	str	r3, [sp, #4]
 800b682:	9008      	str	r0, [sp, #32]
 800b684:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b688:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b68c:	b9a6      	cbnz	r6, 800b6b8 <log+0x7c>
 800b68e:	4b28      	ldr	r3, [pc, #160]	; (800b730 <log+0xf4>)
 800b690:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b694:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b698:	4620      	mov	r0, r4
 800b69a:	2200      	movs	r2, #0
 800b69c:	2300      	movs	r3, #0
 800b69e:	4629      	mov	r1, r5
 800b6a0:	f7f5 fa3a 	bl	8000b18 <__aeabi_dcmpeq>
 800b6a4:	bb40      	cbnz	r0, 800b6f8 <log+0xbc>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	2e02      	cmp	r6, #2
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	d119      	bne.n	800b6e2 <log+0xa6>
 800b6ae:	f7fd feed 	bl	800948c <__errno>
 800b6b2:	2321      	movs	r3, #33	; 0x21
 800b6b4:	6003      	str	r3, [r0, #0]
 800b6b6:	e019      	b.n	800b6ec <log+0xb0>
 800b6b8:	4b1e      	ldr	r3, [pc, #120]	; (800b734 <log+0xf8>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	f7f5 fa26 	bl	8000b18 <__aeabi_dcmpeq>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d0ea      	beq.n	800b6a6 <log+0x6a>
 800b6d0:	2302      	movs	r3, #2
 800b6d2:	429e      	cmp	r6, r3
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	d111      	bne.n	800b6fc <log+0xc0>
 800b6d8:	f7fd fed8 	bl	800948c <__errno>
 800b6dc:	2322      	movs	r3, #34	; 0x22
 800b6de:	6003      	str	r3, [r0, #0]
 800b6e0:	e011      	b.n	800b706 <log+0xca>
 800b6e2:	4668      	mov	r0, sp
 800b6e4:	f000 f9de 	bl	800baa4 <matherr>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d0e0      	beq.n	800b6ae <log+0x72>
 800b6ec:	4812      	ldr	r0, [pc, #72]	; (800b738 <log+0xfc>)
 800b6ee:	f000 f9db 	bl	800baa8 <nan>
 800b6f2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800b6f6:	e006      	b.n	800b706 <log+0xca>
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	4668      	mov	r0, sp
 800b6fe:	f000 f9d1 	bl	800baa4 <matherr>
 800b702:	2800      	cmp	r0, #0
 800b704:	d0e8      	beq.n	800b6d8 <log+0x9c>
 800b706:	9b08      	ldr	r3, [sp, #32]
 800b708:	b11b      	cbz	r3, 800b712 <log+0xd6>
 800b70a:	f7fd febf 	bl	800948c <__errno>
 800b70e:	9b08      	ldr	r3, [sp, #32]
 800b710:	6003      	str	r3, [r0, #0]
 800b712:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b716:	eeb0 0a48 	vmov.f32	s0, s16
 800b71a:	eef0 0a68 	vmov.f32	s1, s17
 800b71e:	b00a      	add	sp, #40	; 0x28
 800b720:	ecbd 8b02 	vpop	{d8}
 800b724:	bd70      	pop	{r4, r5, r6, pc}
 800b726:	bf00      	nop
 800b728:	200001fc 	.word	0x200001fc
 800b72c:	0800c3c0 	.word	0x0800c3c0
 800b730:	c7efffff 	.word	0xc7efffff
 800b734:	fff00000 	.word	0xfff00000
 800b738:	0800c2a9 	.word	0x0800c2a9
 800b73c:	00000000 	.word	0x00000000

0800b740 <__ieee754_log>:
 800b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	ec51 0b10 	vmov	r0, r1, d0
 800b748:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b74c:	b087      	sub	sp, #28
 800b74e:	460d      	mov	r5, r1
 800b750:	da27      	bge.n	800b7a2 <__ieee754_log+0x62>
 800b752:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b756:	4303      	orrs	r3, r0
 800b758:	ee10 2a10 	vmov	r2, s0
 800b75c:	d10a      	bne.n	800b774 <__ieee754_log+0x34>
 800b75e:	49cc      	ldr	r1, [pc, #816]	; (800ba90 <__ieee754_log+0x350>)
 800b760:	2200      	movs	r2, #0
 800b762:	2300      	movs	r3, #0
 800b764:	2000      	movs	r0, #0
 800b766:	f7f5 f899 	bl	800089c <__aeabi_ddiv>
 800b76a:	ec41 0b10 	vmov	d0, r0, r1
 800b76e:	b007      	add	sp, #28
 800b770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b774:	2900      	cmp	r1, #0
 800b776:	da05      	bge.n	800b784 <__ieee754_log+0x44>
 800b778:	460b      	mov	r3, r1
 800b77a:	f7f4 fdad 	bl	80002d8 <__aeabi_dsub>
 800b77e:	2200      	movs	r2, #0
 800b780:	2300      	movs	r3, #0
 800b782:	e7f0      	b.n	800b766 <__ieee754_log+0x26>
 800b784:	4bc3      	ldr	r3, [pc, #780]	; (800ba94 <__ieee754_log+0x354>)
 800b786:	2200      	movs	r2, #0
 800b788:	f7f4 ff5e 	bl	8000648 <__aeabi_dmul>
 800b78c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b790:	460d      	mov	r5, r1
 800b792:	4ac1      	ldr	r2, [pc, #772]	; (800ba98 <__ieee754_log+0x358>)
 800b794:	4295      	cmp	r5, r2
 800b796:	dd06      	ble.n	800b7a6 <__ieee754_log+0x66>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	f7f4 fd9e 	bl	80002dc <__adddf3>
 800b7a0:	e7e3      	b.n	800b76a <__ieee754_log+0x2a>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	e7f5      	b.n	800b792 <__ieee754_log+0x52>
 800b7a6:	152c      	asrs	r4, r5, #20
 800b7a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b7ac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b7b0:	441c      	add	r4, r3
 800b7b2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b7b6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b7ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7be:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b7c2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b7c6:	ea42 0105 	orr.w	r1, r2, r5
 800b7ca:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	4bb2      	ldr	r3, [pc, #712]	; (800ba9c <__ieee754_log+0x35c>)
 800b7d2:	f7f4 fd81 	bl	80002d8 <__aeabi_dsub>
 800b7d6:	1cab      	adds	r3, r5, #2
 800b7d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	4682      	mov	sl, r0
 800b7e0:	468b      	mov	fp, r1
 800b7e2:	f04f 0200 	mov.w	r2, #0
 800b7e6:	dc53      	bgt.n	800b890 <__ieee754_log+0x150>
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	f7f5 f995 	bl	8000b18 <__aeabi_dcmpeq>
 800b7ee:	b1d0      	cbz	r0, 800b826 <__ieee754_log+0xe6>
 800b7f0:	2c00      	cmp	r4, #0
 800b7f2:	f000 8120 	beq.w	800ba36 <__ieee754_log+0x2f6>
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f7f4 febc 	bl	8000574 <__aeabi_i2d>
 800b7fc:	a390      	add	r3, pc, #576	; (adr r3, 800ba40 <__ieee754_log+0x300>)
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	4606      	mov	r6, r0
 800b804:	460f      	mov	r7, r1
 800b806:	f7f4 ff1f 	bl	8000648 <__aeabi_dmul>
 800b80a:	a38f      	add	r3, pc, #572	; (adr r3, 800ba48 <__ieee754_log+0x308>)
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	4604      	mov	r4, r0
 800b812:	460d      	mov	r5, r1
 800b814:	4630      	mov	r0, r6
 800b816:	4639      	mov	r1, r7
 800b818:	f7f4 ff16 	bl	8000648 <__aeabi_dmul>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	4620      	mov	r0, r4
 800b822:	4629      	mov	r1, r5
 800b824:	e7ba      	b.n	800b79c <__ieee754_log+0x5c>
 800b826:	a38a      	add	r3, pc, #552	; (adr r3, 800ba50 <__ieee754_log+0x310>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	4650      	mov	r0, sl
 800b82e:	4659      	mov	r1, fp
 800b830:	f7f4 ff0a 	bl	8000648 <__aeabi_dmul>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	2000      	movs	r0, #0
 800b83a:	4999      	ldr	r1, [pc, #612]	; (800baa0 <__ieee754_log+0x360>)
 800b83c:	f7f4 fd4c 	bl	80002d8 <__aeabi_dsub>
 800b840:	4652      	mov	r2, sl
 800b842:	4606      	mov	r6, r0
 800b844:	460f      	mov	r7, r1
 800b846:	465b      	mov	r3, fp
 800b848:	4650      	mov	r0, sl
 800b84a:	4659      	mov	r1, fp
 800b84c:	f7f4 fefc 	bl	8000648 <__aeabi_dmul>
 800b850:	4602      	mov	r2, r0
 800b852:	460b      	mov	r3, r1
 800b854:	4630      	mov	r0, r6
 800b856:	4639      	mov	r1, r7
 800b858:	f7f4 fef6 	bl	8000648 <__aeabi_dmul>
 800b85c:	4606      	mov	r6, r0
 800b85e:	460f      	mov	r7, r1
 800b860:	b914      	cbnz	r4, 800b868 <__ieee754_log+0x128>
 800b862:	4632      	mov	r2, r6
 800b864:	463b      	mov	r3, r7
 800b866:	e0a0      	b.n	800b9aa <__ieee754_log+0x26a>
 800b868:	4620      	mov	r0, r4
 800b86a:	f7f4 fe83 	bl	8000574 <__aeabi_i2d>
 800b86e:	a374      	add	r3, pc, #464	; (adr r3, 800ba40 <__ieee754_log+0x300>)
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	4680      	mov	r8, r0
 800b876:	4689      	mov	r9, r1
 800b878:	f7f4 fee6 	bl	8000648 <__aeabi_dmul>
 800b87c:	a372      	add	r3, pc, #456	; (adr r3, 800ba48 <__ieee754_log+0x308>)
 800b87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b882:	4604      	mov	r4, r0
 800b884:	460d      	mov	r5, r1
 800b886:	4640      	mov	r0, r8
 800b888:	4649      	mov	r1, r9
 800b88a:	f7f4 fedd 	bl	8000648 <__aeabi_dmul>
 800b88e:	e0a5      	b.n	800b9dc <__ieee754_log+0x29c>
 800b890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b894:	f7f4 fd22 	bl	80002dc <__adddf3>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	4650      	mov	r0, sl
 800b89e:	4659      	mov	r1, fp
 800b8a0:	f7f4 fffc 	bl	800089c <__aeabi_ddiv>
 800b8a4:	e9cd 0100 	strd	r0, r1, [sp]
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f7f4 fe63 	bl	8000574 <__aeabi_i2d>
 800b8ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	f7f4 fec5 	bl	8000648 <__aeabi_dmul>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8c6:	f7f4 febf 	bl	8000648 <__aeabi_dmul>
 800b8ca:	a363      	add	r3, pc, #396	; (adr r3, 800ba58 <__ieee754_log+0x318>)
 800b8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d0:	4680      	mov	r8, r0
 800b8d2:	4689      	mov	r9, r1
 800b8d4:	f7f4 feb8 	bl	8000648 <__aeabi_dmul>
 800b8d8:	a361      	add	r3, pc, #388	; (adr r3, 800ba60 <__ieee754_log+0x320>)
 800b8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8de:	f7f4 fcfd 	bl	80002dc <__adddf3>
 800b8e2:	4642      	mov	r2, r8
 800b8e4:	464b      	mov	r3, r9
 800b8e6:	f7f4 feaf 	bl	8000648 <__aeabi_dmul>
 800b8ea:	a35f      	add	r3, pc, #380	; (adr r3, 800ba68 <__ieee754_log+0x328>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	f7f4 fcf4 	bl	80002dc <__adddf3>
 800b8f4:	4642      	mov	r2, r8
 800b8f6:	464b      	mov	r3, r9
 800b8f8:	f7f4 fea6 	bl	8000648 <__aeabi_dmul>
 800b8fc:	a35c      	add	r3, pc, #368	; (adr r3, 800ba70 <__ieee754_log+0x330>)
 800b8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b902:	f7f4 fceb 	bl	80002dc <__adddf3>
 800b906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b90a:	f7f4 fe9d 	bl	8000648 <__aeabi_dmul>
 800b90e:	a35a      	add	r3, pc, #360	; (adr r3, 800ba78 <__ieee754_log+0x338>)
 800b910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b918:	4640      	mov	r0, r8
 800b91a:	4649      	mov	r1, r9
 800b91c:	f7f4 fe94 	bl	8000648 <__aeabi_dmul>
 800b920:	a357      	add	r3, pc, #348	; (adr r3, 800ba80 <__ieee754_log+0x340>)
 800b922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b926:	f7f4 fcd9 	bl	80002dc <__adddf3>
 800b92a:	4642      	mov	r2, r8
 800b92c:	464b      	mov	r3, r9
 800b92e:	f7f4 fe8b 	bl	8000648 <__aeabi_dmul>
 800b932:	a355      	add	r3, pc, #340	; (adr r3, 800ba88 <__ieee754_log+0x348>)
 800b934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b938:	f7f4 fcd0 	bl	80002dc <__adddf3>
 800b93c:	4642      	mov	r2, r8
 800b93e:	464b      	mov	r3, r9
 800b940:	f7f4 fe82 	bl	8000648 <__aeabi_dmul>
 800b944:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800b948:	4602      	mov	r2, r0
 800b94a:	460b      	mov	r3, r1
 800b94c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b950:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b954:	f7f4 fcc2 	bl	80002dc <__adddf3>
 800b958:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800b95c:	3551      	adds	r5, #81	; 0x51
 800b95e:	4335      	orrs	r5, r6
 800b960:	2d00      	cmp	r5, #0
 800b962:	4680      	mov	r8, r0
 800b964:	4689      	mov	r9, r1
 800b966:	dd48      	ble.n	800b9fa <__ieee754_log+0x2ba>
 800b968:	2200      	movs	r2, #0
 800b96a:	4b4d      	ldr	r3, [pc, #308]	; (800baa0 <__ieee754_log+0x360>)
 800b96c:	4650      	mov	r0, sl
 800b96e:	4659      	mov	r1, fp
 800b970:	f7f4 fe6a 	bl	8000648 <__aeabi_dmul>
 800b974:	4652      	mov	r2, sl
 800b976:	465b      	mov	r3, fp
 800b978:	f7f4 fe66 	bl	8000648 <__aeabi_dmul>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	4606      	mov	r6, r0
 800b982:	460f      	mov	r7, r1
 800b984:	4640      	mov	r0, r8
 800b986:	4649      	mov	r1, r9
 800b988:	f7f4 fca8 	bl	80002dc <__adddf3>
 800b98c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b990:	f7f4 fe5a 	bl	8000648 <__aeabi_dmul>
 800b994:	4680      	mov	r8, r0
 800b996:	4689      	mov	r9, r1
 800b998:	b964      	cbnz	r4, 800b9b4 <__ieee754_log+0x274>
 800b99a:	4602      	mov	r2, r0
 800b99c:	460b      	mov	r3, r1
 800b99e:	4630      	mov	r0, r6
 800b9a0:	4639      	mov	r1, r7
 800b9a2:	f7f4 fc99 	bl	80002d8 <__aeabi_dsub>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4650      	mov	r0, sl
 800b9ac:	4659      	mov	r1, fp
 800b9ae:	f7f4 fc93 	bl	80002d8 <__aeabi_dsub>
 800b9b2:	e6da      	b.n	800b76a <__ieee754_log+0x2a>
 800b9b4:	a322      	add	r3, pc, #136	; (adr r3, 800ba40 <__ieee754_log+0x300>)
 800b9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9be:	f7f4 fe43 	bl	8000648 <__aeabi_dmul>
 800b9c2:	a321      	add	r3, pc, #132	; (adr r3, 800ba48 <__ieee754_log+0x308>)
 800b9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	460d      	mov	r5, r1
 800b9cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9d0:	f7f4 fe3a 	bl	8000648 <__aeabi_dmul>
 800b9d4:	4642      	mov	r2, r8
 800b9d6:	464b      	mov	r3, r9
 800b9d8:	f7f4 fc80 	bl	80002dc <__adddf3>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	4639      	mov	r1, r7
 800b9e4:	f7f4 fc78 	bl	80002d8 <__aeabi_dsub>
 800b9e8:	4652      	mov	r2, sl
 800b9ea:	465b      	mov	r3, fp
 800b9ec:	f7f4 fc74 	bl	80002d8 <__aeabi_dsub>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	e7d9      	b.n	800b9ae <__ieee754_log+0x26e>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	4650      	mov	r0, sl
 800ba00:	4659      	mov	r1, fp
 800ba02:	f7f4 fc69 	bl	80002d8 <__aeabi_dsub>
 800ba06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba0a:	f7f4 fe1d 	bl	8000648 <__aeabi_dmul>
 800ba0e:	4606      	mov	r6, r0
 800ba10:	460f      	mov	r7, r1
 800ba12:	2c00      	cmp	r4, #0
 800ba14:	f43f af25 	beq.w	800b862 <__ieee754_log+0x122>
 800ba18:	a309      	add	r3, pc, #36	; (adr r3, 800ba40 <__ieee754_log+0x300>)
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba22:	f7f4 fe11 	bl	8000648 <__aeabi_dmul>
 800ba26:	a308      	add	r3, pc, #32	; (adr r3, 800ba48 <__ieee754_log+0x308>)
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	460d      	mov	r5, r1
 800ba30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba34:	e729      	b.n	800b88a <__ieee754_log+0x14a>
 800ba36:	2000      	movs	r0, #0
 800ba38:	2100      	movs	r1, #0
 800ba3a:	e696      	b.n	800b76a <__ieee754_log+0x2a>
 800ba3c:	f3af 8000 	nop.w
 800ba40:	fee00000 	.word	0xfee00000
 800ba44:	3fe62e42 	.word	0x3fe62e42
 800ba48:	35793c76 	.word	0x35793c76
 800ba4c:	3dea39ef 	.word	0x3dea39ef
 800ba50:	55555555 	.word	0x55555555
 800ba54:	3fd55555 	.word	0x3fd55555
 800ba58:	df3e5244 	.word	0xdf3e5244
 800ba5c:	3fc2f112 	.word	0x3fc2f112
 800ba60:	96cb03de 	.word	0x96cb03de
 800ba64:	3fc74664 	.word	0x3fc74664
 800ba68:	94229359 	.word	0x94229359
 800ba6c:	3fd24924 	.word	0x3fd24924
 800ba70:	55555593 	.word	0x55555593
 800ba74:	3fe55555 	.word	0x3fe55555
 800ba78:	d078c69f 	.word	0xd078c69f
 800ba7c:	3fc39a09 	.word	0x3fc39a09
 800ba80:	1d8e78af 	.word	0x1d8e78af
 800ba84:	3fcc71c5 	.word	0x3fcc71c5
 800ba88:	9997fa04 	.word	0x9997fa04
 800ba8c:	3fd99999 	.word	0x3fd99999
 800ba90:	c3500000 	.word	0xc3500000
 800ba94:	43500000 	.word	0x43500000
 800ba98:	7fefffff 	.word	0x7fefffff
 800ba9c:	3ff00000 	.word	0x3ff00000
 800baa0:	3fe00000 	.word	0x3fe00000

0800baa4 <matherr>:
 800baa4:	2000      	movs	r0, #0
 800baa6:	4770      	bx	lr

0800baa8 <nan>:
 800baa8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bab0 <nan+0x8>
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	00000000 	.word	0x00000000
 800bab4:	7ff80000 	.word	0x7ff80000

0800bab8 <_init>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	bf00      	nop
 800babc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800babe:	bc08      	pop	{r3}
 800bac0:	469e      	mov	lr, r3
 800bac2:	4770      	bx	lr

0800bac4 <_fini>:
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	bf00      	nop
 800bac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baca:	bc08      	pop	{r3}
 800bacc:	469e      	mov	lr, r3
 800bace:	4770      	bx	lr
