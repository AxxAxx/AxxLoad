
STM32G431_AxxLOAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb38  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000984  0800bd18  0800bd18  0001bd18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c69c  0800c69c  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800c69c  0800c69c  0001c69c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6a4  0800c6a4  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6a4  0800c6a4  0001c6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6a8  0800c6a8  0001c6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800c6ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000200  0800c8ac  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000694  0800c8ac  00020694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9e6  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c3d  00000000  00000000  0003ac16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b8  00000000  00000000  0003d858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001660  00000000  00000000  0003f010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020f65  00000000  00000000  00040670  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012552  00000000  00000000  000615d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de3bb  00000000  00000000  00073b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151ee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072ec  00000000  00000000  00151f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bd00 	.word	0x0800bd00

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	0800bd00 	.word	0x0800bd00

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <debugPrintln>:
	float   amperehours;
	float   watthours;
	uint16_t fanSpeed;
};

void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
    txDone = false;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <debugPrintln+0x68>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) _out, strlen(_out));
 8000fe8:	6838      	ldr	r0, [r7, #0]
 8000fea:	f7ff f919 	bl	8000220 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	6839      	ldr	r1, [r7, #0]
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f007 f81c 	bl	8008034 <HAL_UART_Transmit_IT>
	while(!txDone);
 8000ffc:	bf00      	nop
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <debugPrintln+0x68>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f083 0301 	eor.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f8      	bne.n	8000ffe <debugPrintln+0x26>
	char newline[2] = "\r\n";
 800100c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001010:	81bb      	strh	r3, [r7, #12]
    txDone = false;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <debugPrintln+0x68>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) newline, 2);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2202      	movs	r2, #2
 800101e:	4619      	mov	r1, r3
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f007 f807 	bl	8008034 <HAL_UART_Transmit_IT>
	while(!txDone);
 8001026:	bf00      	nop
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <debugPrintln+0x68>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f083 0301 	eor.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f8      	bne.n	8001028 <debugPrintln+0x50>

}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000004 	.word	0x20000004
 8001044:	00000000 	.word	0x00000000

08001048 <adc2Temperature>:

uint16_t adc2Temperature(uint16_t adcValue, uint16_t adcResolution){
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	460a      	mov	r2, r1
 8001052:	80fb      	strh	r3, [r7, #6]
 8001054:	4613      	mov	r3, r2
 8001056:	80bb      	strh	r3, [r7, #4]

	temperatureC = (float)adcResolution / adcValue - 1;
 8001058:	88bb      	ldrh	r3, [r7, #4]
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001070:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001078:	4b41      	ldr	r3, [pc, #260]	; (8001180 <adc2Temperature+0x138>)
 800107a:	edc3 7a00 	vstr	s15, [r3]
	temperatureC = SERIESRESISTOR / temperatureC;
 800107e:	4b40      	ldr	r3, [pc, #256]	; (8001180 <adc2Temperature+0x138>)
 8001080:	ed93 7a00 	vldr	s14, [r3]
 8001084:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001184 <adc2Temperature+0x13c>
 8001088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800108c:	4b3c      	ldr	r3, [pc, #240]	; (8001180 <adc2Temperature+0x138>)
 800108e:	edc3 7a00 	vstr	s15, [r3]

  temperatureC = temperatureC / THERMISTORNOMINAL;     // (R/Ro)
 8001092:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <adc2Temperature+0x138>)
 8001094:	ed93 7a00 	vldr	s14, [r3]
 8001098:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001184 <adc2Temperature+0x13c>
 800109c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a0:	4b37      	ldr	r3, [pc, #220]	; (8001180 <adc2Temperature+0x138>)
 80010a2:	edc3 7a00 	vstr	s15, [r3]
  temperatureC = log(temperatureC);                  // ln(R/Ro)
 80010a6:	4b36      	ldr	r3, [pc, #216]	; (8001180 <adc2Temperature+0x138>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa74 	bl	8000598 <__aeabi_f2d>
 80010b0:	4603      	mov	r3, r0
 80010b2:	460c      	mov	r4, r1
 80010b4:	ec44 3b10 	vmov	d0, r3, r4
 80010b8:	f00a fbe4 	bl	800b884 <log>
 80010bc:	ec54 3b10 	vmov	r3, r4, d0
 80010c0:	4618      	mov	r0, r3
 80010c2:	4621      	mov	r1, r4
 80010c4:	f7ff fdb8 	bl	8000c38 <__aeabi_d2f>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <adc2Temperature+0x138>)
 80010cc:	601a      	str	r2, [r3, #0]
  temperatureC /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <adc2Temperature+0x138>)
 80010d0:	ed93 7a00 	vldr	s14, [r3]
 80010d4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001188 <adc2Temperature+0x140>
 80010d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010dc:	4b28      	ldr	r3, [pc, #160]	; (8001180 <adc2Temperature+0x138>)
 80010de:	edc3 7a00 	vstr	s15, [r3]
  temperatureC += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
 80010e2:	4b27      	ldr	r3, [pc, #156]	; (8001180 <adc2Temperature+0x138>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fa56 	bl	8000598 <__aeabi_f2d>
 80010ec:	a320      	add	r3, pc, #128	; (adr r3, 8001170 <adc2Temperature+0x128>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff f8f3 	bl	80002dc <__adddf3>
 80010f6:	4603      	mov	r3, r0
 80010f8:	460c      	mov	r4, r1
 80010fa:	4618      	mov	r0, r3
 80010fc:	4621      	mov	r1, r4
 80010fe:	f7ff fd9b 	bl	8000c38 <__aeabi_d2f>
 8001102:	4602      	mov	r2, r0
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <adc2Temperature+0x138>)
 8001106:	601a      	str	r2, [r3, #0]
  temperatureC = 1.0 / temperatureC;                 // Invert
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <adc2Temperature+0x138>)
 800110a:	ed93 7a00 	vldr	s14, [r3]
 800110e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <adc2Temperature+0x138>)
 8001118:	edc3 7a00 	vstr	s15, [r3]
  temperatureC -= 273.15;                         // convert to C
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <adc2Temperature+0x138>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fa39 	bl	8000598 <__aeabi_f2d>
 8001126:	a314      	add	r3, pc, #80	; (adr r3, 8001178 <adc2Temperature+0x130>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff f8d4 	bl	80002d8 <__aeabi_dsub>
 8001130:	4603      	mov	r3, r0
 8001132:	460c      	mov	r4, r1
 8001134:	4618      	mov	r0, r3
 8001136:	4621      	mov	r1, r4
 8001138:	f7ff fd7e 	bl	8000c38 <__aeabi_d2f>
 800113c:	4602      	mov	r2, r0
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <adc2Temperature+0x138>)
 8001140:	601a      	str	r2, [r3, #0]
  temperatureC *= 10;
 8001142:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <adc2Temperature+0x138>)
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800114c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <adc2Temperature+0x138>)
 8001152:	edc3 7a00 	vstr	s15, [r3]
  return temperatureC;
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <adc2Temperature+0x138>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001160:	ee17 3a90 	vmov	r3, s15
 8001164:	b29b      	uxth	r3, r3
	}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bd90      	pop	{r4, r7, pc}
 800116e:	bf00      	nop
 8001170:	dcb5db83 	.word	0xdcb5db83
 8001174:	3f6b79e1 	.word	0x3f6b79e1
 8001178:	66666666 	.word	0x66666666
 800117c:	40711266 	.word	0x40711266
 8001180:	2000027c 	.word	0x2000027c
 8001184:	461c4000 	.word	0x461c4000
 8001188:	45734000 	.word	0x45734000

0800118c <debugPrint>:


void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
    txDone = false;
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <debugPrint+0x3c>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) _out, strlen(_out));
 800119c:	6838      	ldr	r0, [r7, #0]
 800119e:	f7ff f83f 	bl	8000220 <strlen>
 80011a2:	4603      	mov	r3, r0
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	461a      	mov	r2, r3
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f006 ff42 	bl	8008034 <HAL_UART_Transmit_IT>
	while(!txDone);
 80011b0:	bf00      	nop
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <debugPrint+0x3c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f083 0301 	eor.w	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f8      	bne.n	80011b2 <debugPrint+0x26>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000004 	.word	0x20000004

080011cc <printHELP>:

void printHELP(UART_HandleTypeDef *huart, struct statusValues statusValues_1){
 80011cc:	b084      	sub	sp, #16
 80011ce:	b5b0      	push	{r4, r5, r7, lr}
 80011d0:	b08a      	sub	sp, #40	; 0x28
 80011d2:	af08      	add	r7, sp, #32
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	f107 001c 	add.w	r0, r7, #28
 80011da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	  debugPrintln(huart, "|------------------------------------------|");
 80011de:	494b      	ldr	r1, [pc, #300]	; (800130c <printHELP+0x140>)
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff fef9 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "|      Axel Johansson's Electronic load    |");
 80011e6:	494a      	ldr	r1, [pc, #296]	; (8001310 <printHELP+0x144>)
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff fef5 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "|      Version 2.2 2020                    |");
 80011ee:	4949      	ldr	r1, [pc, #292]	; (8001314 <printHELP+0x148>)
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff fef1 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "|---------- Availible Commands ------------|");
 80011f6:	4948      	ldr	r1, [pc, #288]	; (8001318 <printHELP+0x14c>)
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff feed 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "      cc <mA> - Constant current");
 80011fe:	4947      	ldr	r1, [pc, #284]	; (800131c <printHELP+0x150>)
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff fee9 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "      cp <W> - Constant power(To be implemented..)");
 8001206:	4946      	ldr	r1, [pc, #280]	; (8001320 <printHELP+0x154>)
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff fee5 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "    cr <mOhm> - Constant resistance(To be implemented..)");
 800120e:	4945      	ldr	r1, [pc, #276]	; (8001324 <printHELP+0x158>)
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff fee1 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, " pm <ms> <mA> - PulseMode, Set PULSE length and amplitude");
 8001216:	4944      	ldr	r1, [pc, #272]	; (8001328 <printHELP+0x15c>)
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fedd 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "     fs <%/A> - Fanspeed, (0-100% OR \"A\" for Automatic) - Default: A");
 800121e:	4943      	ldr	r1, [pc, #268]	; (800132c <printHELP+0x160>)
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fed9 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "      mv <mV> - Set MIN voltage - Default: 0 mV");
 8001226:	4942      	ldr	r1, [pc, #264]	; (8001330 <printHELP+0x164>)
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fed5 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "     log <ms> - Interval of printing status");
 800122e:	4941      	ldr	r1, [pc, #260]	; (8001334 <printHELP+0x168>)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff fed1 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "         stop - Turn current off");
 8001236:	4940      	ldr	r1, [pc, #256]	; (8001338 <printHELP+0x16c>)
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff fecd 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "        reset - Reset charge/energy counters");
 800123e:	493f      	ldr	r1, [pc, #252]	; (800133c <printHELP+0x170>)
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff fec9 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "       status - Print status");
 8001246:	493e      	ldr	r1, [pc, #248]	; (8001340 <printHELP+0x174>)
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fec5 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "         help - Show this help");
 800124e:	493d      	ldr	r1, [pc, #244]	; (8001344 <printHELP+0x178>)
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff fec1 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, " ");
 8001256:	493c      	ldr	r1, [pc, #240]	; (8001348 <printHELP+0x17c>)
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff febd 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Status is printed out as:");
 800125e:	493b      	ldr	r1, [pc, #236]	; (800134c <printHELP+0x180>)
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff feb9 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Timestamp [ms]");
 8001266:	493a      	ldr	r1, [pc, #232]	; (8001350 <printHELP+0x184>)
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff feb5 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Temperature - Heatsink [deg C]");
 800126e:	4939      	ldr	r1, [pc, #228]	; (8001354 <printHELP+0x188>)
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff feb1 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Temperature - MosFET1 [deg C]");
 8001276:	4938      	ldr	r1, [pc, #224]	; (8001358 <printHELP+0x18c>)
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fead 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Temperature - MosFET2 [deg C]");
 800127e:	4937      	ldr	r1, [pc, #220]	; (800135c <printHELP+0x190>)
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff fea9 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Temperature - PCB [deg C]");
 8001286:	4936      	ldr	r1, [pc, #216]	; (8001360 <printHELP+0x194>)
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fea5 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Set current [mA]");
 800128e:	4935      	ldr	r1, [pc, #212]	; (8001364 <printHELP+0x198>)
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff fea1 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Measured current [mA]");
 8001296:	4934      	ldr	r1, [pc, #208]	; (8001368 <printHELP+0x19c>)
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fe9d 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Measured Voltage [mV]");
 800129e:	4933      	ldr	r1, [pc, #204]	; (800136c <printHELP+0x1a0>)
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff fe99 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Measured Power [mW]");
 80012a6:	4932      	ldr	r1, [pc, #200]	; (8001370 <printHELP+0x1a4>)
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fe95 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Measured Equivalent Resistance [OHM]");
 80012ae:	4931      	ldr	r1, [pc, #196]	; (8001374 <printHELP+0x1a8>)
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fe91 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Discharged Amperehours [mAh]");
 80012b6:	4930      	ldr	r1, [pc, #192]	; (8001378 <printHELP+0x1ac>)
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff fe8d 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Discharged Watthours [mWh]");
 80012be:	492f      	ldr	r1, [pc, #188]	; (800137c <printHELP+0x1b0>)
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff fe89 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Fan Speed [%]");
 80012c6:	492e      	ldr	r1, [pc, #184]	; (8001380 <printHELP+0x1b4>)
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fe85 	bl	8000fd8 <debugPrintln>


	  printStatus(statusValues_1, huart);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	9306      	str	r3, [sp, #24]
 80012d2:	466d      	mov	r5, sp
 80012d4:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80012d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ea:	f000 f919 	bl	8001520 <printStatus>
	  debugPrintln(huart, "|------------------------------------------|");
 80012ee:	4907      	ldr	r1, [pc, #28]	; (800130c <printHELP+0x140>)
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff fe71 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, " ");
 80012f6:	4914      	ldr	r1, [pc, #80]	; (8001348 <printHELP+0x17c>)
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fe6d 	bl	8000fd8 <debugPrintln>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001308:	b004      	add	sp, #16
 800130a:	4770      	bx	lr
 800130c:	0800bd18 	.word	0x0800bd18
 8001310:	0800bd48 	.word	0x0800bd48
 8001314:	0800bd78 	.word	0x0800bd78
 8001318:	0800bda8 	.word	0x0800bda8
 800131c:	0800bdd8 	.word	0x0800bdd8
 8001320:	0800bdfc 	.word	0x0800bdfc
 8001324:	0800be30 	.word	0x0800be30
 8001328:	0800be6c 	.word	0x0800be6c
 800132c:	0800bea8 	.word	0x0800bea8
 8001330:	0800bef0 	.word	0x0800bef0
 8001334:	0800bf20 	.word	0x0800bf20
 8001338:	0800bf4c 	.word	0x0800bf4c
 800133c:	0800bf70 	.word	0x0800bf70
 8001340:	0800bfa0 	.word	0x0800bfa0
 8001344:	0800bfc0 	.word	0x0800bfc0
 8001348:	0800bfe0 	.word	0x0800bfe0
 800134c:	0800bfe4 	.word	0x0800bfe4
 8001350:	0800c000 	.word	0x0800c000
 8001354:	0800c010 	.word	0x0800c010
 8001358:	0800c030 	.word	0x0800c030
 800135c:	0800c050 	.word	0x0800c050
 8001360:	0800c070 	.word	0x0800c070
 8001364:	0800c08c 	.word	0x0800c08c
 8001368:	0800c0a0 	.word	0x0800c0a0
 800136c:	0800c0b8 	.word	0x0800c0b8
 8001370:	0800c0d0 	.word	0x0800c0d0
 8001374:	0800c0e4 	.word	0x0800c0e4
 8001378:	0800c10c 	.word	0x0800c10c
 800137c:	0800c12c 	.word	0x0800c12c
 8001380:	0800c148 	.word	0x0800c148

08001384 <BEEP>:

void BEEP(TIM_HandleTypeDef *htim){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SetCompare(htim, TIM_CHANNEL_3, 5); //update pwm value
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2205      	movs	r2, #5
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(20);
 8001394:	2014      	movs	r0, #20
 8001396:	f002 f867 	bl	8003468 <HAL_Delay>
	__HAL_TIM_SetCompare(htim, TIM_CHANNEL_3, 0); //update pwm value
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	63da      	str	r2, [r3, #60]	; 0x3c


}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <MCP4725_write>:
void MCP4725_write(I2C_HandleTypeDef *hi2c, uint16_t outputVoltage){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]

	mcp4725Voltage = outputVoltage*outputVoltageCompensationConstant;
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c2:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MCP4725_write+0x6c>)
 80013c4:	edd3 7a00 	vldr	s15, [r3]
 80013c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d0:	ee17 3a90 	vmov	r3, s15
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MCP4725_write+0x70>)
 80013d8:	801a      	strh	r2, [r3, #0]
	ADSwrite[0] = 0b01000000;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MCP4725_write+0x74>)
 80013dc:	2240      	movs	r2, #64	; 0x40
 80013de:	701a      	strb	r2, [r3, #0]
	ADSwrite[1] = mcp4725Voltage >> 4;
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MCP4725_write+0x70>)
 80013e2:	881b      	ldrh	r3, [r3, #0]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MCP4725_write+0x74>)
 80013ec:	705a      	strb	r2, [r3, #1]
	ADSwrite[2] = (mcp4725Voltage & 15) << 4;
 80013ee:	4b0b      	ldr	r3, [pc, #44]	; (800141c <MCP4725_write+0x70>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <MCP4725_write+0x74>)
 80013f8:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(hi2c, MCP4725_ADDRESS << 1, ADSwrite, 3, 100);
 80013fa:	2364      	movs	r3, #100	; 0x64
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2303      	movs	r3, #3
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <MCP4725_write+0x74>)
 8001402:	21c0      	movs	r1, #192	; 0xc0
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f004 f823 	bl	8005450 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 800140a:	200a      	movs	r0, #10
 800140c:	f002 f82c 	bl	8003468 <HAL_Delay>

}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000000 	.word	0x20000000
 800141c:	2000021c 	.word	0x2000021c
 8001420:	20000294 	.word	0x20000294

08001424 <stringToInt>:


uint16_t stringToInt(char *string){
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	uint16_t command_value = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	81fb      	strh	r3, [r7, #14]
	uint8_t x=0;
 8001430:	2300      	movs	r3, #0
 8001432:	737b      	strb	r3, [r7, #13]
	while( string[x] >= '0' && string[x] <= '9' && x < 7 ){	//check how many numbers after '$' and get message ID from that
 8001434:	e012      	b.n	800145c <stringToInt+0x38>
		command_value *= 10;
 8001436:	89fb      	ldrh	r3, [r7, #14]
 8001438:	461a      	mov	r2, r3
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4413      	add	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	81fb      	strh	r3, [r7, #14]
		command_value += string[x] - '0';
 8001442:	7b7b      	ldrb	r3, [r7, #13]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	4413      	add	r3, r2
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b29a      	uxth	r2, r3
 800144c:	89fb      	ldrh	r3, [r7, #14]
 800144e:	4413      	add	r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	3b30      	subs	r3, #48	; 0x30
 8001454:	81fb      	strh	r3, [r7, #14]
		x++;
 8001456:	7b7b      	ldrb	r3, [r7, #13]
 8001458:	3301      	adds	r3, #1
 800145a:	737b      	strb	r3, [r7, #13]
	while( string[x] >= '0' && string[x] <= '9' && x < 7 ){	//check how many numbers after '$' and get message ID from that
 800145c:	7b7b      	ldrb	r3, [r7, #13]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b2f      	cmp	r3, #47	; 0x2f
 8001466:	d908      	bls.n	800147a <stringToInt+0x56>
 8001468:	7b7b      	ldrb	r3, [r7, #13]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b39      	cmp	r3, #57	; 0x39
 8001472:	d802      	bhi.n	800147a <stringToInt+0x56>
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	2b06      	cmp	r3, #6
 8001478:	d9dd      	bls.n	8001436 <stringToInt+0x12>
	}
	return command_value;
 800147a:	89fb      	ldrh	r3, [r7, #14]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <setFanSpeed>:


void setFanSpeed(UART_HandleTypeDef *huart, TIM_HandleTypeDef *htim, struct statusValues statusValues_1){
 8001488:	b082      	sub	sp, #8
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
 8001494:	f107 0110 	add.w	r1, r7, #16
 8001498:	e881 000c 	stmia.w	r1, {r2, r3}
	debugPrint(huart, "Setting Fan speed to: ");
 800149c:	4911      	ldr	r1, [pc, #68]	; (80014e4 <setFanSpeed+0x5c>)
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fe74 	bl	800118c <debugPrint>
	sprintf(buffer, "%hu", statusValues_1.fanSpeed);
 80014a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80014a6:	461a      	mov	r2, r3
 80014a8:	490f      	ldr	r1, [pc, #60]	; (80014e8 <setFanSpeed+0x60>)
 80014aa:	4810      	ldr	r0, [pc, #64]	; (80014ec <setFanSpeed+0x64>)
 80014ac:	f008 fdae 	bl	800a00c <siprintf>
	debugPrint(huart, buffer);
 80014b0:	490e      	ldr	r1, [pc, #56]	; (80014ec <setFanSpeed+0x64>)
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff fe6a 	bl	800118c <debugPrint>
	debugPrintln(huart, "%");
 80014b8:	490d      	ldr	r1, [pc, #52]	; (80014f0 <setFanSpeed+0x68>)
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fd8c 	bl	8000fd8 <debugPrintln>
	__HAL_TIM_SetCompare(htim, TIM_CHANNEL_1, statusValues_1.fanSpeed*10); //update pwm value //TIM2->CCR2 = pwm;
 80014c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80014c2:	461a      	mov	r2, r3
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	461a      	mov	r2, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014de:	b002      	add	sp, #8
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	0800c158 	.word	0x0800c158
 80014e8:	0800c170 	.word	0x0800c170
 80014ec:	20000288 	.word	0x20000288
 80014f0:	0800c174 	.word	0x0800c174

080014f4 <autoFanSpeed>:

void autoFanSpeed(struct statusValues statusValues_1, TIM_HandleTypeDef *htim){
 80014f4:	b084      	sub	sp, #16
 80014f6:	b490      	push	{r4, r7}
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	f107 0408 	add.w	r4, r7, #8
 80014fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	__HAL_TIM_SetCompare(htim, TIM_CHANNEL_1, statusValues_1.fanSpeed*10);
 8001502:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001504:	461a      	mov	r2, r3
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	461a      	mov	r2, r3
 8001510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc90      	pop	{r4, r7}
 800151c:	b004      	add	sp, #16
 800151e:	4770      	bx	lr

08001520 <printStatus>:


void printStatus(struct statusValues statusValues_1, UART_HandleTypeDef *huart){
 8001520:	b084      	sub	sp, #16
 8001522:	b590      	push	{r4, r7, lr}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	f107 0420 	add.w	r4, r7, #32
 800152c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	debugPrint(huart, ">>");
 8001530:	49d1      	ldr	r1, [pc, #836]	; (8001878 <printStatus+0x358>)
 8001532:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001534:	f7ff fe2a 	bl	800118c <debugPrint>
	char buffer[15];
  		memset(&buffer, '\0', sizeof(buffer));
 8001538:	463b      	mov	r3, r7
 800153a:	220f      	movs	r2, #15
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f008 f8ff 	bl	8009742 <memset>

		//Timestamp[ms]
	  	//sprintf(buffer, "%hu", statusValues_1.timestamp);
  		sprintf(buffer, "%8.2f", statusValues_1.timestamp/1000.0);
 8001544:	6a3b      	ldr	r3, [r7, #32]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f804 	bl	8000554 <__aeabi_ui2d>
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4bca      	ldr	r3, [pc, #808]	; (800187c <printStatus+0x35c>)
 8001552:	f7ff f9a3 	bl	800089c <__aeabi_ddiv>
 8001556:	4603      	mov	r3, r0
 8001558:	460c      	mov	r4, r1
 800155a:	4638      	mov	r0, r7
 800155c:	461a      	mov	r2, r3
 800155e:	4623      	mov	r3, r4
 8001560:	49c7      	ldr	r1, [pc, #796]	; (8001880 <printStatus+0x360>)
 8001562:	f008 fd53 	bl	800a00c <siprintf>
	  	//gcvt((statusValues_1.timestamp/1000.0), 6, buffer);
		debugPrint(huart, buffer);
 8001566:	463b      	mov	r3, r7
 8001568:	4619      	mov	r1, r3
 800156a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800156c:	f7ff fe0e 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 8001570:	463b      	mov	r3, r7
 8001572:	220f      	movs	r2, #15
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f008 f8e3 	bl	8009742 <memset>
		debugPrint(huart, "   ");
 800157c:	49c1      	ldr	r1, [pc, #772]	; (8001884 <printStatus+0x364>)
 800157e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001580:	f7ff fe04 	bl	800118c <debugPrint>

		//Temperature - Heatsink[deg C]
	  	//gcvt((statusValues_1.temperature/10.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.HEATSINK_Temp/10.0);
 8001584:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff4 	bl	8000574 <__aeabi_i2d>
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	4bbd      	ldr	r3, [pc, #756]	; (8001888 <printStatus+0x368>)
 8001592:	f7ff f983 	bl	800089c <__aeabi_ddiv>
 8001596:	4603      	mov	r3, r0
 8001598:	460c      	mov	r4, r1
 800159a:	4638      	mov	r0, r7
 800159c:	461a      	mov	r2, r3
 800159e:	4623      	mov	r3, r4
 80015a0:	49ba      	ldr	r1, [pc, #744]	; (800188c <printStatus+0x36c>)
 80015a2:	f008 fd33 	bl	800a00c <siprintf>
	  	debugPrint(huart, buffer);
 80015a6:	463b      	mov	r3, r7
 80015a8:	4619      	mov	r1, r3
 80015aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015ac:	f7ff fdee 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 80015b0:	463b      	mov	r3, r7
 80015b2:	220f      	movs	r2, #15
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f008 f8c3 	bl	8009742 <memset>
		debugPrint(huart, "   ");
 80015bc:	49b1      	ldr	r1, [pc, #708]	; (8001884 <printStatus+0x364>)
 80015be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015c0:	f7ff fde4 	bl	800118c <debugPrint>

		//Temperature - MosFET1[deg C]
	  	//gcvt((statusValues_1.temperature/10.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.MOSFET1_Temp/10.0);
 80015c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffd4 	bl	8000574 <__aeabi_i2d>
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	4bad      	ldr	r3, [pc, #692]	; (8001888 <printStatus+0x368>)
 80015d2:	f7ff f963 	bl	800089c <__aeabi_ddiv>
 80015d6:	4603      	mov	r3, r0
 80015d8:	460c      	mov	r4, r1
 80015da:	4638      	mov	r0, r7
 80015dc:	461a      	mov	r2, r3
 80015de:	4623      	mov	r3, r4
 80015e0:	49aa      	ldr	r1, [pc, #680]	; (800188c <printStatus+0x36c>)
 80015e2:	f008 fd13 	bl	800a00c <siprintf>
	  	debugPrint(huart, buffer);
 80015e6:	463b      	mov	r3, r7
 80015e8:	4619      	mov	r1, r3
 80015ea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80015ec:	f7ff fdce 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 80015f0:	463b      	mov	r3, r7
 80015f2:	220f      	movs	r2, #15
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f008 f8a3 	bl	8009742 <memset>
		debugPrint(huart, "   ");
 80015fc:	49a1      	ldr	r1, [pc, #644]	; (8001884 <printStatus+0x364>)
 80015fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001600:	f7ff fdc4 	bl	800118c <debugPrint>

		//Temperature - MosFET2[deg C]
	  	//gcvt((statusValues_1.temperature/10.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.MOSFET2_Temp/10.0);
 8001604:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ffb4 	bl	8000574 <__aeabi_i2d>
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	4b9d      	ldr	r3, [pc, #628]	; (8001888 <printStatus+0x368>)
 8001612:	f7ff f943 	bl	800089c <__aeabi_ddiv>
 8001616:	4603      	mov	r3, r0
 8001618:	460c      	mov	r4, r1
 800161a:	4638      	mov	r0, r7
 800161c:	461a      	mov	r2, r3
 800161e:	4623      	mov	r3, r4
 8001620:	499a      	ldr	r1, [pc, #616]	; (800188c <printStatus+0x36c>)
 8001622:	f008 fcf3 	bl	800a00c <siprintf>
	  	debugPrint(huart, buffer);
 8001626:	463b      	mov	r3, r7
 8001628:	4619      	mov	r1, r3
 800162a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800162c:	f7ff fdae 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 8001630:	463b      	mov	r3, r7
 8001632:	220f      	movs	r2, #15
 8001634:	2100      	movs	r1, #0
 8001636:	4618      	mov	r0, r3
 8001638:	f008 f883 	bl	8009742 <memset>
		debugPrint(huart, "   ");
 800163c:	4991      	ldr	r1, [pc, #580]	; (8001884 <printStatus+0x364>)
 800163e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001640:	f7ff fda4 	bl	800118c <debugPrint>

		//Temperature - PCB[deg C]
	  	//gcvt((statusValues_1.temperature/10.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.PCB_Temp/10.0);
 8001644:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe ff94 	bl	8000574 <__aeabi_i2d>
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	4b8d      	ldr	r3, [pc, #564]	; (8001888 <printStatus+0x368>)
 8001652:	f7ff f923 	bl	800089c <__aeabi_ddiv>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	4638      	mov	r0, r7
 800165c:	461a      	mov	r2, r3
 800165e:	4623      	mov	r3, r4
 8001660:	498a      	ldr	r1, [pc, #552]	; (800188c <printStatus+0x36c>)
 8001662:	f008 fcd3 	bl	800a00c <siprintf>
	  	debugPrint(huart, buffer);
 8001666:	463b      	mov	r3, r7
 8001668:	4619      	mov	r1, r3
 800166a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800166c:	f7ff fd8e 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 8001670:	463b      	mov	r3, r7
 8001672:	220f      	movs	r2, #15
 8001674:	2100      	movs	r1, #0
 8001676:	4618      	mov	r0, r3
 8001678:	f008 f863 	bl	8009742 <memset>
		debugPrint(huart, "   ");
 800167c:	4981      	ldr	r1, [pc, #516]	; (8001884 <printStatus+0x364>)
 800167e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001680:	f7ff fd84 	bl	800118c <debugPrint>

		//Set current[mA]
	  	//sprintf(buffer, "%hu", statusValues_1.setCurrent);
	  	//gcvt((statusValues_1.setCurrent/1000.0), 6, buffer);
  		sprintf(buffer, "%7.2f", statusValues_1.setCurrent/1000.0);
 8001684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff74 	bl	8000574 <__aeabi_i2d>
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	4b7a      	ldr	r3, [pc, #488]	; (800187c <printStatus+0x35c>)
 8001692:	f7ff f903 	bl	800089c <__aeabi_ddiv>
 8001696:	4603      	mov	r3, r0
 8001698:	460c      	mov	r4, r1
 800169a:	4638      	mov	r0, r7
 800169c:	461a      	mov	r2, r3
 800169e:	4623      	mov	r3, r4
 80016a0:	497b      	ldr	r1, [pc, #492]	; (8001890 <printStatus+0x370>)
 80016a2:	f008 fcb3 	bl	800a00c <siprintf>
	  	debugPrint(huart, buffer);
 80016a6:	463b      	mov	r3, r7
 80016a8:	4619      	mov	r1, r3
 80016aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80016ac:	f7ff fd6e 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 80016b0:	463b      	mov	r3, r7
 80016b2:	220f      	movs	r2, #15
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f008 f843 	bl	8009742 <memset>
		debugPrint(huart, "   ");
 80016bc:	4971      	ldr	r1, [pc, #452]	; (8001884 <printStatus+0x364>)
 80016be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80016c0:	f7ff fd64 	bl	800118c <debugPrint>

		//Measured current[mA]
	  	//sprintf(buffer, "%hu", statusValues_1.measuredCurrent);
	  	//gcvt((statusValues_1.measuredCurrent/1000.0), 6, buffer);
  		sprintf(buffer, "%7.2f", statusValues_1.measuredCurrent/1000.0);
 80016c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff54 	bl	8000574 <__aeabi_i2d>
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b6a      	ldr	r3, [pc, #424]	; (800187c <printStatus+0x35c>)
 80016d2:	f7ff f8e3 	bl	800089c <__aeabi_ddiv>
 80016d6:	4603      	mov	r3, r0
 80016d8:	460c      	mov	r4, r1
 80016da:	4638      	mov	r0, r7
 80016dc:	461a      	mov	r2, r3
 80016de:	4623      	mov	r3, r4
 80016e0:	496b      	ldr	r1, [pc, #428]	; (8001890 <printStatus+0x370>)
 80016e2:	f008 fc93 	bl	800a00c <siprintf>
  		debugPrint(huart, buffer);
 80016e6:	463b      	mov	r3, r7
 80016e8:	4619      	mov	r1, r3
 80016ea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80016ec:	f7ff fd4e 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 80016f0:	463b      	mov	r3, r7
 80016f2:	220f      	movs	r2, #15
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f008 f823 	bl	8009742 <memset>
		debugPrint(huart, "   ");
 80016fc:	4961      	ldr	r1, [pc, #388]	; (8001884 <printStatus+0x364>)
 80016fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001700:	f7ff fd44 	bl	800118c <debugPrint>


		//Measured Voltage[mV]
	  	//sprintf(buffer, "%hu", statusValues_1.measuredVoltage);
	  	//gcvt((statusValues_1.measuredVoltage/1000.0), 6, buffer);
  		sprintf(buffer, "%4.2f", statusValues_1.measuredVoltage/1000.0);
 8001704:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff34 	bl	8000574 <__aeabi_i2d>
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	4b5a      	ldr	r3, [pc, #360]	; (800187c <printStatus+0x35c>)
 8001712:	f7ff f8c3 	bl	800089c <__aeabi_ddiv>
 8001716:	4603      	mov	r3, r0
 8001718:	460c      	mov	r4, r1
 800171a:	4638      	mov	r0, r7
 800171c:	461a      	mov	r2, r3
 800171e:	4623      	mov	r3, r4
 8001720:	495c      	ldr	r1, [pc, #368]	; (8001894 <printStatus+0x374>)
 8001722:	f008 fc73 	bl	800a00c <siprintf>
	  	debugPrint(huart, buffer);
 8001726:	463b      	mov	r3, r7
 8001728:	4619      	mov	r1, r3
 800172a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800172c:	f7ff fd2e 	bl	800118c <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 8001730:	463b      	mov	r3, r7
 8001732:	220f      	movs	r2, #15
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f008 f803 	bl	8009742 <memset>
		debugPrint(huart, "   ");
 800173c:	4951      	ldr	r1, [pc, #324]	; (8001884 <printStatus+0x364>)
 800173e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001740:	f7ff fd24 	bl	800118c <debugPrint>

		//Measured Power[mW]
		//sprintf(buffer, "%hu", statusValues_1.measuredPower);
	  	//gcvt((statusValues_1.measuredPower/1.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.measuredPower/1000.0);
 8001744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe ff04 	bl	8000554 <__aeabi_ui2d>
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	4b4a      	ldr	r3, [pc, #296]	; (800187c <printStatus+0x35c>)
 8001752:	f7ff f8a3 	bl	800089c <__aeabi_ddiv>
 8001756:	4603      	mov	r3, r0
 8001758:	460c      	mov	r4, r1
 800175a:	4638      	mov	r0, r7
 800175c:	461a      	mov	r2, r3
 800175e:	4623      	mov	r3, r4
 8001760:	494a      	ldr	r1, [pc, #296]	; (800188c <printStatus+0x36c>)
 8001762:	f008 fc53 	bl	800a00c <siprintf>
  		debugPrint(huart, buffer);
 8001766:	463b      	mov	r3, r7
 8001768:	4619      	mov	r1, r3
 800176a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800176c:	f7ff fd0e 	bl	800118c <debugPrint>
		memset(&buffer, '\0', sizeof(buffer));
 8001770:	463b      	mov	r3, r7
 8001772:	220f      	movs	r2, #15
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f007 ffe3 	bl	8009742 <memset>
		debugPrint(huart, "   ");
 800177c:	4941      	ldr	r1, [pc, #260]	; (8001884 <printStatus+0x364>)
 800177e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001780:	f7ff fd04 	bl	800118c <debugPrint>


		//Measured Equivalent Resistance[mOHM]
		//sprintf(buffer, "%hu", statusValues_1.measuredPower);
	  	//gcvt((statusValues_1.measuredPower/1.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.measuredEquivalentResistance/1000.0);
 8001784:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fef4 	bl	8000574 <__aeabi_i2d>
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	4b3a      	ldr	r3, [pc, #232]	; (800187c <printStatus+0x35c>)
 8001792:	f7ff f883 	bl	800089c <__aeabi_ddiv>
 8001796:	4603      	mov	r3, r0
 8001798:	460c      	mov	r4, r1
 800179a:	4638      	mov	r0, r7
 800179c:	461a      	mov	r2, r3
 800179e:	4623      	mov	r3, r4
 80017a0:	493a      	ldr	r1, [pc, #232]	; (800188c <printStatus+0x36c>)
 80017a2:	f008 fc33 	bl	800a00c <siprintf>
  		debugPrint(huart, buffer);
 80017a6:	463b      	mov	r3, r7
 80017a8:	4619      	mov	r1, r3
 80017aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80017ac:	f7ff fcee 	bl	800118c <debugPrint>
		memset(&buffer, '\0', sizeof(buffer));
 80017b0:	463b      	mov	r3, r7
 80017b2:	220f      	movs	r2, #15
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f007 ffc3 	bl	8009742 <memset>
		debugPrint(huart, "   ");
 80017bc:	4931      	ldr	r1, [pc, #196]	; (8001884 <printStatus+0x364>)
 80017be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80017c0:	f7ff fce4 	bl	800118c <debugPrint>


		//Amperehours[mAh]
		//sprintf(buffer, "%hu", statusValues_1.amperehours);
	  	//gcvt((statusValues_1.amperehours/1000000000.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.amperehours);
 80017c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fee6 	bl	8000598 <__aeabi_f2d>
 80017cc:	4603      	mov	r3, r0
 80017ce:	460c      	mov	r4, r1
 80017d0:	4638      	mov	r0, r7
 80017d2:	461a      	mov	r2, r3
 80017d4:	4623      	mov	r3, r4
 80017d6:	492d      	ldr	r1, [pc, #180]	; (800188c <printStatus+0x36c>)
 80017d8:	f008 fc18 	bl	800a00c <siprintf>
  		debugPrint(huart, buffer);
 80017dc:	463b      	mov	r3, r7
 80017de:	4619      	mov	r1, r3
 80017e0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80017e2:	f7ff fcd3 	bl	800118c <debugPrint>
		memset(&buffer, '\0', sizeof(buffer));
 80017e6:	463b      	mov	r3, r7
 80017e8:	220f      	movs	r2, #15
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f007 ffa8 	bl	8009742 <memset>
		debugPrint(huart, "   ");
 80017f2:	4924      	ldr	r1, [pc, #144]	; (8001884 <printStatus+0x364>)
 80017f4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80017f6:	f7ff fcc9 	bl	800118c <debugPrint>

		//Watthours[mWh]
		//sprintf(buffer, "%hu", statusValues_1.watthours);
	  	//gcvt((statusValues_1.watthours/1000000000.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.watthours);
 80017fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fecb 	bl	8000598 <__aeabi_f2d>
 8001802:	4603      	mov	r3, r0
 8001804:	460c      	mov	r4, r1
 8001806:	4638      	mov	r0, r7
 8001808:	461a      	mov	r2, r3
 800180a:	4623      	mov	r3, r4
 800180c:	491f      	ldr	r1, [pc, #124]	; (800188c <printStatus+0x36c>)
 800180e:	f008 fbfd 	bl	800a00c <siprintf>
  		debugPrint(huart, buffer);
 8001812:	463b      	mov	r3, r7
 8001814:	4619      	mov	r1, r3
 8001816:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001818:	f7ff fcb8 	bl	800118c <debugPrint>
		memset(&buffer, '\0', sizeof(buffer));
 800181c:	463b      	mov	r3, r7
 800181e:	220f      	movs	r2, #15
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f007 ff8d 	bl	8009742 <memset>
		debugPrint(huart, "   ");
 8001828:	4916      	ldr	r1, [pc, #88]	; (8001884 <printStatus+0x364>)
 800182a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800182c:	f7ff fcae 	bl	800118c <debugPrint>


  		sprintf(buffer, "%5.0f", statusValues_1.fanSpeed*1.0);
 8001830:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe9d 	bl	8000574 <__aeabi_i2d>
 800183a:	4603      	mov	r3, r0
 800183c:	460c      	mov	r4, r1
 800183e:	4638      	mov	r0, r7
 8001840:	461a      	mov	r2, r3
 8001842:	4623      	mov	r3, r4
 8001844:	4914      	ldr	r1, [pc, #80]	; (8001898 <printStatus+0x378>)
 8001846:	f008 fbe1 	bl	800a00c <siprintf>
  		debugPrint(huart, buffer);
 800184a:	463b      	mov	r3, r7
 800184c:	4619      	mov	r1, r3
 800184e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001850:	f7ff fc9c 	bl	800118c <debugPrint>
		memset(&buffer, '\0', sizeof(buffer));
 8001854:	463b      	mov	r3, r7
 8001856:	220f      	movs	r2, #15
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f007 ff71 	bl	8009742 <memset>
		debugPrintln(huart, "   ");
 8001860:	4908      	ldr	r1, [pc, #32]	; (8001884 <printStatus+0x364>)
 8001862:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001864:	f7ff fbb8 	bl	8000fd8 <debugPrintln>




}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001872:	b004      	add	sp, #16
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	0800c178 	.word	0x0800c178
 800187c:	408f4000 	.word	0x408f4000
 8001880:	0800c17c 	.word	0x0800c17c
 8001884:	0800c184 	.word	0x0800c184
 8001888:	40240000 	.word	0x40240000
 800188c:	0800c188 	.word	0x0800c188
 8001890:	0800c190 	.word	0x0800c190
 8001894:	0800c198 	.word	0x0800c198
 8001898:	0800c1a0 	.word	0x0800c1a0

0800189c <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)

{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]

 /* Set transmission flag: transfer complete */

txDone = true;
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_UART_TxCpltCallback+0x1c>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	601a      	str	r2, [r3, #0]

}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000004 	.word	0x20000004

080018bc <HAL_UART_RxCpltCallback>:

// This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, &byte, 1);//Restart the interrupt reception mode
 80018c4:	2201      	movs	r2, #1
 80018c6:	4923      	ldr	r1, [pc, #140]	; (8001954 <HAL_UART_RxCpltCallback+0x98>)
 80018c8:	4823      	ldr	r0, [pc, #140]	; (8001958 <HAL_UART_RxCpltCallback+0x9c>)
 80018ca:	f006 fc37 	bl	800813c <HAL_UART_Receive_IT>
	static int rx_index = 0;
	//if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) // Received character?
	if (huart->Instance == USART2)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a22      	ldr	r2, [pc, #136]	; (800195c <HAL_UART_RxCpltCallback+0xa0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d138      	bne.n	800194a <HAL_UART_RxCpltCallback+0x8e>
	{
		//char rx = HAL_UART_Receive_IT(&huart2, &byte, 1);
		//HAL_UART_Transmit(&huart2, &byte, 1, 10);
		rx = byte;
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <HAL_UART_RxCpltCallback+0x98>)
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_UART_RxCpltCallback+0xa4>)
 80018de:	701a      	strb	r2, [r3, #0]
		if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <HAL_UART_RxCpltCallback+0xa4>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b0d      	cmp	r3, #13
 80018e6:	d003      	beq.n	80018f0 <HAL_UART_RxCpltCallback+0x34>
 80018e8:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <HAL_UART_RxCpltCallback+0xa4>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b0a      	cmp	r3, #10
 80018ee:	d11b      	bne.n	8001928 <HAL_UART_RxCpltCallback+0x6c>
		{
			if (rx_index != 0) // Line has some content?
 80018f0:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <HAL_UART_RxCpltCallback+0xa8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d028      	beq.n	800194a <HAL_UART_RxCpltCallback+0x8e>
			{
				memcpy((void *)line_buffer, rx_buffer, rx_index); // Copy to static line buffer from dynamic receive buffer
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_UART_RxCpltCallback+0xa8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	491a      	ldr	r1, [pc, #104]	; (8001968 <HAL_UART_RxCpltCallback+0xac>)
 8001900:	481a      	ldr	r0, [pc, #104]	; (800196c <HAL_UART_RxCpltCallback+0xb0>)
 8001902:	f007 ff13 	bl	800972c <memcpy>
				line_buffer[rx_index] = 0; // Add terminating NUL
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_UART_RxCpltCallback+0xa8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a18      	ldr	r2, [pc, #96]	; (800196c <HAL_UART_RxCpltCallback+0xb0>)
 800190c:	2100      	movs	r1, #0
 800190e:	54d1      	strb	r1, [r2, r3]
				line_valid = 1; // flag new line valid for processing
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_UART_RxCpltCallback+0xb4>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]
				rx_index = 0; // Reset content pointer
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_UART_RxCpltCallback+0xa8>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
				memset(&rx_buffer, '\0', sizeof(rx_buffer));
 800191c:	2210      	movs	r2, #16
 800191e:	2100      	movs	r1, #0
 8001920:	4811      	ldr	r0, [pc, #68]	; (8001968 <HAL_UART_RxCpltCallback+0xac>)
 8001922:	f007 ff0e 	bl	8009742 <memset>
			if (rx_index != 0) // Line has some content?
 8001926:	e010      	b.n	800194a <HAL_UART_RxCpltCallback+0x8e>
			}
		}
		else
		{
			if (rx_index == LINEMAX) // If overflows pull back to start
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_UART_RxCpltCallback+0xa8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b10      	cmp	r3, #16
 800192e:	d102      	bne.n	8001936 <HAL_UART_RxCpltCallback+0x7a>
				rx_index = 0;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_UART_RxCpltCallback+0xa8>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
			rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_UART_RxCpltCallback+0xa8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	4909      	ldr	r1, [pc, #36]	; (8001964 <HAL_UART_RxCpltCallback+0xa8>)
 800193e:	600a      	str	r2, [r1, #0]
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_UART_RxCpltCallback+0xa4>)
 8001942:	7811      	ldrb	r1, [r2, #0]
 8001944:	4a08      	ldr	r2, [pc, #32]	; (8001968 <HAL_UART_RxCpltCallback+0xac>)
 8001946:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 8001948:	e7ff      	b.n	800194a <HAL_UART_RxCpltCallback+0x8e>
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000566 	.word	0x20000566
 8001958:	20000600 	.word	0x20000600
 800195c:	40004400 	.word	0x40004400
 8001960:	2000041c 	.word	0x2000041c
 8001964:	20000268 	.word	0x20000268
 8001968:	20000234 	.word	0x20000234
 800196c:	20000224 	.word	0x20000224
 8001970:	20000220 	.word	0x20000220
 8001974:	00000000 	.word	0x00000000

08001978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001978:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800197c:	b09e      	sub	sp, #120	; 0x78
 800197e:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
	//Connect ADDR pin to GND and I2C slave adress will be 0X48 .
	unsigned char ADSwrite[6];
	int16_t voltage[3];
	struct statusValues my_statusValues;        /* Declare Book1 of type Book */
	my_statusValues.amperehours=0;
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
	my_statusValues.watthours=0;
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	637b      	str	r3, [r7, #52]	; 0x34
	my_statusValues.setCurrent=0;
 800198c:	2300      	movs	r3, #0
 800198e:	837b      	strh	r3, [r7, #26]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001990:	f001 fcf9 	bl	8003386 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001994:	f000 fd6c 	bl	8002470 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001998:	f001 f96a 	bl	8002c70 <MX_GPIO_Init>
  MX_DMA_Init();
 800199c:	f001 f93e 	bl	8002c1c <MX_DMA_Init>
  MX_I2C1_Init();
 80019a0:	f000 fea0 	bl	80026e4 <MX_I2C1_Init>
  MX_TIM1_Init();
 80019a4:	f000 fede 	bl	8002764 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80019a8:	f001 f8ec 	bl	8002b84 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80019ac:	f001 f850 	bl	8002a50 <MX_TIM4_Init>
  MX_TIM2_Init();
 80019b0:	f000 ff88 	bl	80028c4 <MX_TIM2_Init>
  MX_ADC1_Init();
 80019b4:	f000 fdb8 	bl	8002528 <MX_ADC1_Init>
  MX_ADC2_Init();
 80019b8:	f000 fe2e 	bl	8002618 <MX_ADC2_Init>
  MX_TIM3_Init();
 80019bc:	f000 ffd0 	bl	8002960 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80019c0:	f001 f894 	bl	8002aec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 80019c4:	48c0      	ldr	r0, [pc, #768]	; (8001cc8 <main+0x350>)
 80019c6:	f005 f9d5 	bl	8006d74 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1); //Start Pwm signal on PB-6 Pin
 80019ca:	2100      	movs	r1, #0
 80019cc:	48be      	ldr	r0, [pc, #760]	; (8001cc8 <main+0x350>)
 80019ce:	f005 fa95 	bl	8006efc <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(&htim3);
 80019d2:	48be      	ldr	r0, [pc, #760]	; (8001ccc <main+0x354>)
 80019d4:	f005 f9ce 	bl	8006d74 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3); //Start Pwm signal on PB-6 Pin
 80019d8:	2108      	movs	r1, #8
 80019da:	48bc      	ldr	r0, [pc, #752]	; (8001ccc <main+0x354>)
 80019dc:	f005 fa8e 	bl	8006efc <HAL_TIM_PWM_Start>

	HAL_UART_Receive_IT(&huart2, &byte, 1);//Start the interrupt reception mode
 80019e0:	2201      	movs	r2, #1
 80019e2:	49bb      	ldr	r1, [pc, #748]	; (8001cd0 <main+0x358>)
 80019e4:	48bb      	ldr	r0, [pc, #748]	; (8001cd4 <main+0x35c>)
 80019e6:	f006 fba9 	bl	800813c <HAL_UART_Receive_IT>

    /* USER CODE BEGIN 3 */



	    for(int i=0; i< 3; i++){
 80019ea:	2300      	movs	r3, #0
 80019ec:	657b      	str	r3, [r7, #84]	; 0x54
 80019ee:	e059      	b.n	8001aa4 <main+0x12c>

	    	ADSwrite[0] = 0x01;
 80019f0:	2301      	movs	r3, #1
 80019f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	    				switch(i){
 80019f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d007      	beq.n	8001a0c <main+0x94>
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d009      	beq.n	8001a14 <main+0x9c>
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10b      	bne.n	8001a1c <main+0xa4>
	    					case(0):
	    						ADSwrite[1] = 0xC1; //11000001
 8001a04:	23c1      	movs	r3, #193	; 0xc1
 8001a06:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	    					break;
 8001a0a:	e007      	b.n	8001a1c <main+0xa4>
	    					case(1):
	    						ADSwrite[1] = 0xD1; //11010001
 8001a0c:	23d1      	movs	r3, #209	; 0xd1
 8001a0e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	    					break;
 8001a12:	e003      	b.n	8001a1c <main+0xa4>
	    					case(2):
								ADSwrite[1] = 0xF1;//ADSwrite[1] = 0xE1;
 8001a14:	23f1      	movs	r3, #241	; 0xf1
 8001a16:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	    					break;
 8001a1a:	bf00      	nop
	    					case(3):
	    						ADSwrite[1] = 0xF1;
	    					break;*/
	    				}

	    				ADSwrite[2] = 0x83; //10000011 LSB
 8001a1c:	2383      	movs	r3, #131	; 0x83
 8001a1e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	    				HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 8001a22:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001a26:	2364      	movs	r3, #100	; 0x64
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	2190      	movs	r1, #144	; 0x90
 8001a2e:	48aa      	ldr	r0, [pc, #680]	; (8001cd8 <main+0x360>)
 8001a30:	f003 fd0e 	bl	8005450 <HAL_I2C_Master_Transmit>
	    				ADSwrite[0] = 0x00;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	    				HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 8001a3a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001a3e:	2364      	movs	r3, #100	; 0x64
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2301      	movs	r3, #1
 8001a44:	2190      	movs	r1, #144	; 0x90
 8001a46:	48a4      	ldr	r0, [pc, #656]	; (8001cd8 <main+0x360>)
 8001a48:	f003 fd02 	bl	8005450 <HAL_I2C_Master_Transmit>
	    				HAL_Delay(10);//20
 8001a4c:	200a      	movs	r0, #10
 8001a4e:	f001 fd0b 	bl	8003468 <HAL_Delay>

	    				HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 8001a52:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001a56:	2364      	movs	r3, #100	; 0x64
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	2190      	movs	r1, #144	; 0x90
 8001a5e:	489e      	ldr	r0, [pc, #632]	; (8001cd8 <main+0x360>)
 8001a60:	f003 fdea 	bl	8005638 <HAL_I2C_Master_Receive>
	    				reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 8001a64:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	b21a      	sxth	r2, r3
 8001a6c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	4b99      	ldr	r3, [pc, #612]	; (8001cdc <main+0x364>)
 8001a78:	801a      	strh	r2, [r3, #0]
	    				if(reading < 0) {
 8001a7a:	4b98      	ldr	r3, [pc, #608]	; (8001cdc <main+0x364>)
 8001a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	da02      	bge.n	8001a8a <main+0x112>
	    					reading = 0;
 8001a84:	4b95      	ldr	r3, [pc, #596]	; (8001cdc <main+0x364>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	801a      	strh	r2, [r3, #0]
	    				}

	    				voltage[i] = reading;
 8001a8a:	4b94      	ldr	r3, [pc, #592]	; (8001cdc <main+0x364>)
 8001a8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8001a98:	440b      	add	r3, r1
 8001a9a:	f823 2c1c 	strh.w	r2, [r3, #-28]
	    for(int i=0; i< 3; i++){
 8001a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8001aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	dda2      	ble.n	80019f0 <main+0x78>
	    		}


	    // Get ADC value
	    HAL_ADC_Start(&hadc1);
 8001aaa:	488d      	ldr	r0, [pc, #564]	; (8001ce0 <main+0x368>)
 8001aac:	f002 f8b2 	bl	8003c14 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	488a      	ldr	r0, [pc, #552]	; (8001ce0 <main+0x368>)
 8001ab6:	f002 f969 	bl	8003d8c <HAL_ADC_PollForConversion>
	    my_statusValues.MOSFET1_Temp = adc2Temperature(HAL_ADC_GetValue(&hadc1),3500);
 8001aba:	4889      	ldr	r0, [pc, #548]	; (8001ce0 <main+0x368>)
 8001abc:	f002 fa36 	bl	8003f2c <HAL_ADC_GetValue>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fabe 	bl	8001048 <adc2Temperature>
 8001acc:	4603      	mov	r3, r0
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	84fb      	strh	r3, [r7, #38]	; 0x26

	    HAL_ADC_Start(&hadc2);
 8001ad2:	4884      	ldr	r0, [pc, #528]	; (8001ce4 <main+0x36c>)
 8001ad4:	f002 f89e 	bl	8003c14 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8001adc:	4881      	ldr	r0, [pc, #516]	; (8001ce4 <main+0x36c>)
 8001ade:	f002 f955 	bl	8003d8c <HAL_ADC_PollForConversion>
	    my_statusValues.MOSFET2_Temp = adc2Temperature(HAL_ADC_GetValue(&hadc2),3500);
 8001ae2:	4880      	ldr	r0, [pc, #512]	; (8001ce4 <main+0x36c>)
 8001ae4:	f002 fa22 	bl	8003f2c <HAL_ADC_GetValue>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff faaa 	bl	8001048 <adc2Temperature>
 8001af4:	4603      	mov	r3, r0
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	853b      	strh	r3, [r7, #40]	; 0x28

	    HAL_ADC_Start(&hadc2);
 8001afa:	487a      	ldr	r0, [pc, #488]	; (8001ce4 <main+0x36c>)
 8001afc:	f002 f88a 	bl	8003c14 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	4877      	ldr	r0, [pc, #476]	; (8001ce4 <main+0x36c>)
 8001b06:	f002 f941 	bl	8003d8c <HAL_ADC_PollForConversion>
	    my_statusValues.PCB_Temp = adc2Temperature(HAL_ADC_GetValue(&hadc2),3500);
 8001b0a:	4876      	ldr	r0, [pc, #472]	; (8001ce4 <main+0x36c>)
 8001b0c:	f002 fa0e 	bl	8003f2c <HAL_ADC_GetValue>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f640 51ac 	movw	r1, #3500	; 0xdac
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fa96 	bl	8001048 <adc2Temperature>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	857b      	strh	r3, [r7, #42]	; 0x2a



	my_statusValues.measuredVoltage = voltage[0] * voltageCompensationConstant;
 8001b22:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001b26:	ee07 3a90 	vmov	s15, r3
 8001b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b2e:	4b6e      	ldr	r3, [pc, #440]	; (8001ce8 <main+0x370>)
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b3c:	ee17 3a90 	vmov	r3, s15
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	847b      	strh	r3, [r7, #34]	; 0x22
	my_statusValues.measuredCurrent = voltage[1] * currentCompensationConstant;
 8001b44:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001b48:	ee07 3a90 	vmov	s15, r3
 8001b4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b50:	4b66      	ldr	r3, [pc, #408]	; (8001cec <main+0x374>)
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b5e:	ee17 3a90 	vmov	r3, s15
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	843b      	strh	r3, [r7, #32]
	my_statusValues.measuredEquivalentResistance = 1000*my_statusValues.measuredVoltage/my_statusValues.measuredCurrent;
 8001b66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b68:	461a      	mov	r2, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fb03 f302 	mul.w	r3, r3, r2
 8001b72:	8c3a      	ldrh	r2, [r7, #32]
 8001b74:	fb93 f3f2 	sdiv	r3, r3, r2
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	84bb      	strh	r3, [r7, #36]	; 0x24
	my_statusValues.HEATSINK_Temp = adc2Temperature(voltage[2],16628);
 8001b7c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001b80:	f244 01f4 	movw	r1, #16628	; 0x40f4
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fa5f 	bl	8001048 <adc2Temperature>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	833b      	strh	r3, [r7, #24]

	my_statusValues.measuredPower = (my_statusValues.measuredVoltage*my_statusValues.measuredCurrent)/1000;
 8001b90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b92:	8c3a      	ldrh	r2, [r7, #32]
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	4a55      	ldr	r2, [pc, #340]	; (8001cf0 <main+0x378>)
 8001b9a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b9e:	1192      	asrs	r2, r2, #6
 8001ba0:	17db      	asrs	r3, r3, #31
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
	my_statusValues.timestamp = (HAL_GetTick()-zeroTimeValue);
 8001ba6:	f001 fc53 	bl	8003450 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	4b51      	ldr	r3, [pc, #324]	; (8001cf4 <main+0x37c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	617b      	str	r3, [r7, #20]

	integrationTime = HAL_GetTick()-previousMillis_INTEGRATION;
 8001bb4:	f001 fc4c 	bl	8003450 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <main+0x380>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	4a4e      	ldr	r2, [pc, #312]	; (8001cfc <main+0x384>)
 8001bc2:	6013      	str	r3, [r2, #0]
	my_statusValues.amperehours = my_statusValues.amperehours + integrationTime * my_statusValues.measuredCurrent/3600000.0;
 8001bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fce6 	bl	8000598 <__aeabi_f2d>
 8001bcc:	4604      	mov	r4, r0
 8001bce:	460d      	mov	r5, r1
 8001bd0:	8c3b      	ldrh	r3, [r7, #32]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <main+0x384>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	fb03 f302 	mul.w	r3, r3, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fcb9 	bl	8000554 <__aeabi_ui2d>
 8001be2:	a337      	add	r3, pc, #220	; (adr r3, 8001cc0 <main+0x348>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fe58 	bl	800089c <__aeabi_ddiv>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	f7fe fb72 	bl	80002dc <__adddf3>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	4621      	mov	r1, r4
 8001c00:	f7ff f81a 	bl	8000c38 <__aeabi_d2f>
 8001c04:	4603      	mov	r3, r0
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
	my_statusValues.watthours = my_statusValues.watthours + (integrationTime * my_statusValues.measuredCurrent/3600000.0) * (my_statusValues.measuredVoltage /1000.0);
 8001c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fcc4 	bl	8000598 <__aeabi_f2d>
 8001c10:	4604      	mov	r4, r0
 8001c12:	460d      	mov	r5, r1
 8001c14:	8c3b      	ldrh	r3, [r7, #32]
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <main+0x384>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	fb03 f302 	mul.w	r3, r3, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fc97 	bl	8000554 <__aeabi_ui2d>
 8001c26:	a326      	add	r3, pc, #152	; (adr r3, 8001cc0 <main+0x348>)
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	f7fe fe36 	bl	800089c <__aeabi_ddiv>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4690      	mov	r8, r2
 8001c36:	4699      	mov	r9, r3
 8001c38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc9a 	bl	8000574 <__aeabi_i2d>
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <main+0x388>)
 8001c46:	f7fe fe29 	bl	800089c <__aeabi_ddiv>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4640      	mov	r0, r8
 8001c50:	4649      	mov	r1, r9
 8001c52:	f7fe fcf9 	bl	8000648 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	f7fe fb3d 	bl	80002dc <__adddf3>
 8001c62:	4603      	mov	r3, r0
 8001c64:	460c      	mov	r4, r1
 8001c66:	4618      	mov	r0, r3
 8001c68:	4621      	mov	r1, r4
 8001c6a:	f7fe ffe5 	bl	8000c38 <__aeabi_d2f>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
	previousMillis_INTEGRATION = HAL_GetTick();
 8001c72:	f001 fbed 	bl	8003450 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <main+0x380>)
 8001c7a:	601a      	str	r2, [r3, #0]



	//Set current by setting voltage drop over shunt
	MCP4725_write(&hi2c1, my_statusValues.setCurrent);
 8001c7c:	8b7b      	ldrh	r3, [r7, #26]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4815      	ldr	r0, [pc, #84]	; (8001cd8 <main+0x360>)
 8001c82:	f7ff fb93 	bl	80013ac <MCP4725_write>

if (line_valid==1){ // A new line has arrived
 8001c86:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <main+0x38c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	f040 8260 	bne.w	8002150 <main+0x7d8>
	BEEP(&htim3);
 8001c90:	480e      	ldr	r0, [pc, #56]	; (8001ccc <main+0x354>)
 8001c92:	f7ff fb77 	bl	8001384 <BEEP>
	line_valid = 0; // clear pending flag
 8001c96:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <main+0x38c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
	debugPrint(&huart2, "Sent command: ");
 8001c9c:	491a      	ldr	r1, [pc, #104]	; (8001d08 <main+0x390>)
 8001c9e:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <main+0x35c>)
 8001ca0:	f7ff fa74 	bl	800118c <debugPrint>
	debugPrintln(&huart2, line_buffer);
 8001ca4:	4919      	ldr	r1, [pc, #100]	; (8001d0c <main+0x394>)
 8001ca6:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <main+0x35c>)
 8001ca8:	f7ff f996 	bl	8000fd8 <debugPrintln>
	int i = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	653b      	str	r3, [r7, #80]	; 0x50
	char *p = strtok (line_buffer, " ");
 8001cb0:	4917      	ldr	r1, [pc, #92]	; (8001d10 <main+0x398>)
 8001cb2:	4816      	ldr	r0, [pc, #88]	; (8001d0c <main+0x394>)
 8001cb4:	f008 f9dc 	bl	800a070 <strtok>
 8001cb8:	64f8      	str	r0, [r7, #76]	; 0x4c
	char *array[4];

	while (p != NULL){
 8001cba:	e03a      	b.n	8001d32 <main+0x3ba>
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	414b7740 	.word	0x414b7740
 8001cc8:	20000568 	.word	0x20000568
 8001ccc:	20000420 	.word	0x20000420
 8001cd0:	20000566 	.word	0x20000566
 8001cd4:	20000600 	.word	0x20000600
 8001cd8:	200003d0 	.word	0x200003d0
 8001cdc:	20000564 	.word	0x20000564
 8001ce0:	2000046c 	.word	0x2000046c
 8001ce4:	20000364 	.word	0x20000364
 8001ce8:	20000010 	.word	0x20000010
 8001cec:	20000014 	.word	0x20000014
 8001cf0:	10624dd3 	.word	0x10624dd3
 8001cf4:	20000258 	.word	0x20000258
 8001cf8:	20000250 	.word	0x20000250
 8001cfc:	2000025c 	.word	0x2000025c
 8001d00:	408f4000 	.word	0x408f4000
 8001d04:	20000220 	.word	0x20000220
 8001d08:	0800c1a8 	.word	0x0800c1a8
 8001d0c:	20000224 	.word	0x20000224
 8001d10:	0800c1b8 	.word	0x0800c1b8
		array[i++] = p;
 8001d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	653a      	str	r2, [r7, #80]	; 0x50
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d20:	4413      	add	r3, r2
 8001d22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d24:	f843 2c54 	str.w	r2, [r3, #-84]
		p = strtok (NULL, " ");}
 8001d28:	49a7      	ldr	r1, [pc, #668]	; (8001fc8 <main+0x650>)
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f008 f9a0 	bl	800a070 <strtok>
 8001d30:	64f8      	str	r0, [r7, #76]	; 0x4c
	while (p != NULL){
 8001d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ed      	bne.n	8001d14 <main+0x39c>

	if((strncmp(array[0], "??" ,10) == 0) ||  (strncmp(array[0], "help" ,10) == 0) || (strncmp(array[0], "h" ,10) == 0)){
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	220a      	movs	r2, #10
 8001d3c:	49a3      	ldr	r1, [pc, #652]	; (8001fcc <main+0x654>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f008 f984 	bl	800a04c <strncmp>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d011      	beq.n	8001d6e <main+0x3f6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	220a      	movs	r2, #10
 8001d4e:	49a0      	ldr	r1, [pc, #640]	; (8001fd0 <main+0x658>)
 8001d50:	4618      	mov	r0, r3
 8001d52:	f008 f97b 	bl	800a04c <strncmp>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <main+0x3f6>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	220a      	movs	r2, #10
 8001d60:	499c      	ldr	r1, [pc, #624]	; (8001fd4 <main+0x65c>)
 8001d62:	4618      	mov	r0, r3
 8001d64:	f008 f972 	bl	800a04c <strncmp>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10f      	bne.n	8001d8e <main+0x416>
		printHELP(&huart2,my_statusValues);}
 8001d6e:	466d      	mov	r5, sp
 8001d70:	f107 0420 	add.w	r4, r7, #32
 8001d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d78:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d7c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d86:	4894      	ldr	r0, [pc, #592]	; (8001fd8 <main+0x660>)
 8001d88:	f7ff fa20 	bl	80011cc <printHELP>
	if((strncmp(array[0], "??" ,10) == 0) ||  (strncmp(array[0], "help" ,10) == 0) || (strncmp(array[0], "h" ,10) == 0)){
 8001d8c:	e1db      	b.n	8002146 <main+0x7ce>

	else if(strncmp(array[0], "fs" ,10) == 0){
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	220a      	movs	r2, #10
 8001d92:	4992      	ldr	r1, [pc, #584]	; (8001fdc <main+0x664>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f008 f959 	bl	800a04c <strncmp>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d134      	bne.n	8001e0a <main+0x492>
		if ((strncmp(array[1], "A" ,10) == 0) || (strncmp(array[1], "a" ,10) == 0)){
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	220a      	movs	r2, #10
 8001da4:	498e      	ldr	r1, [pc, #568]	; (8001fe0 <main+0x668>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f008 f950 	bl	800a04c <strncmp>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <main+0x44c>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	220a      	movs	r2, #10
 8001db6:	498b      	ldr	r1, [pc, #556]	; (8001fe4 <main+0x66c>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f008 f947 	bl	800a04c <strncmp>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d107      	bne.n	8001dd4 <main+0x45c>
			autoFanSpeedMode=true;
 8001dc4:	4b88      	ldr	r3, [pc, #544]	; (8001fe8 <main+0x670>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
			debugPrintln(&huart2, "Setting fan speed to Auto");}
 8001dca:	4988      	ldr	r1, [pc, #544]	; (8001fec <main+0x674>)
 8001dcc:	4882      	ldr	r0, [pc, #520]	; (8001fd8 <main+0x660>)
 8001dce:	f7ff f903 	bl	8000fd8 <debugPrintln>
 8001dd2:	e1b8      	b.n	8002146 <main+0x7ce>
		else
			{
			my_statusValues.fanSpeed = stringToInt(array[1]);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fb24 	bl	8001424 <stringToInt>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	873b      	strh	r3, [r7, #56]	; 0x38
			setFanSpeed(&huart2, &htim1, my_statusValues);
 8001de2:	466d      	mov	r5, sp
 8001de4:	f107 041c 	add.w	r4, r7, #28
 8001de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001df0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	cb0c      	ldmia	r3, {r2, r3}
 8001dfa:	497d      	ldr	r1, [pc, #500]	; (8001ff0 <main+0x678>)
 8001dfc:	4876      	ldr	r0, [pc, #472]	; (8001fd8 <main+0x660>)
 8001dfe:	f7ff fb43 	bl	8001488 <setFanSpeed>
			autoFanSpeedMode=false;
 8001e02:	4b79      	ldr	r3, [pc, #484]	; (8001fe8 <main+0x670>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e19d      	b.n	8002146 <main+0x7ce>
		}
	}

	else if(strncmp(array[0], "mv" ,10) == 0){
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	220a      	movs	r2, #10
 8001e0e:	4979      	ldr	r1, [pc, #484]	; (8001ff4 <main+0x67c>)
 8001e10:	4618      	mov	r0, r3
 8001e12:	f008 f91b 	bl	800a04c <strncmp>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d119      	bne.n	8001e50 <main+0x4d8>
		command_value = stringToInt(array[1]);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fb00 	bl	8001424 <stringToInt>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	4b73      	ldr	r3, [pc, #460]	; (8001ff8 <main+0x680>)
 8001e2a:	801a      	strh	r2, [r3, #0]
		minVolt = command_value;
 8001e2c:	4b72      	ldr	r3, [pc, #456]	; (8001ff8 <main+0x680>)
 8001e2e:	881a      	ldrh	r2, [r3, #0]
 8001e30:	4b72      	ldr	r3, [pc, #456]	; (8001ffc <main+0x684>)
 8001e32:	801a      	strh	r2, [r3, #0]
	  	debugPrint(&huart2, "Setting min voltage to: ");
 8001e34:	4972      	ldr	r1, [pc, #456]	; (8002000 <main+0x688>)
 8001e36:	4868      	ldr	r0, [pc, #416]	; (8001fd8 <main+0x660>)
 8001e38:	f7ff f9a8 	bl	800118c <debugPrint>
	  	debugPrint(&huart2, array[1]);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4865      	ldr	r0, [pc, #404]	; (8001fd8 <main+0x660>)
 8001e42:	f7ff f9a3 	bl	800118c <debugPrint>

	  	debugPrintln(&huart2, "mV");
 8001e46:	496f      	ldr	r1, [pc, #444]	; (8002004 <main+0x68c>)
 8001e48:	4863      	ldr	r0, [pc, #396]	; (8001fd8 <main+0x660>)
 8001e4a:	f7ff f8c5 	bl	8000fd8 <debugPrintln>
 8001e4e:	e17a      	b.n	8002146 <main+0x7ce>

		}

	else if(strncmp(array[0], "pm" ,10) == 0){
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	220a      	movs	r2, #10
 8001e54:	496c      	ldr	r1, [pc, #432]	; (8002008 <main+0x690>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f008 f8f8 	bl	800a04c <strncmp>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d138      	bne.n	8001ed4 <main+0x55c>
		command_value = stringToInt(array[1]);
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fadd 	bl	8001424 <stringToInt>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	4b62      	ldr	r3, [pc, #392]	; (8001ff8 <main+0x680>)
 8001e70:	801a      	strh	r2, [r3, #0]
		pulseLength = command_value;
 8001e72:	4b61      	ldr	r3, [pc, #388]	; (8001ff8 <main+0x680>)
 8001e74:	881a      	ldrh	r2, [r3, #0]
 8001e76:	4b65      	ldr	r3, [pc, #404]	; (800200c <main+0x694>)
 8001e78:	801a      	strh	r2, [r3, #0]
		command_value = stringToInt(array[2]);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fad1 	bl	8001424 <stringToInt>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b5c      	ldr	r3, [pc, #368]	; (8001ff8 <main+0x680>)
 8001e88:	801a      	strh	r2, [r3, #0]
		pulseCurrent = command_value;
 8001e8a:	4b5b      	ldr	r3, [pc, #364]	; (8001ff8 <main+0x680>)
 8001e8c:	881a      	ldrh	r2, [r3, #0]
 8001e8e:	4b60      	ldr	r3, [pc, #384]	; (8002010 <main+0x698>)
 8001e90:	801a      	strh	r2, [r3, #0]

	  	debugPrint(&huart2, "Setting Pulse Length to: ");
 8001e92:	4960      	ldr	r1, [pc, #384]	; (8002014 <main+0x69c>)
 8001e94:	4850      	ldr	r0, [pc, #320]	; (8001fd8 <main+0x660>)
 8001e96:	f7ff f979 	bl	800118c <debugPrint>
	  	debugPrint(&huart2, array[1]);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	484e      	ldr	r0, [pc, #312]	; (8001fd8 <main+0x660>)
 8001ea0:	f7ff f974 	bl	800118c <debugPrint>
	  	debugPrintln(&huart2, " ms");
 8001ea4:	495c      	ldr	r1, [pc, #368]	; (8002018 <main+0x6a0>)
 8001ea6:	484c      	ldr	r0, [pc, #304]	; (8001fd8 <main+0x660>)
 8001ea8:	f7ff f896 	bl	8000fd8 <debugPrintln>


	  	debugPrint(&huart2, "Setting Pulse Current to: ");
 8001eac:	495b      	ldr	r1, [pc, #364]	; (800201c <main+0x6a4>)
 8001eae:	484a      	ldr	r0, [pc, #296]	; (8001fd8 <main+0x660>)
 8001eb0:	f7ff f96c 	bl	800118c <debugPrint>
	  	debugPrint(&huart2, array[2]);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4847      	ldr	r0, [pc, #284]	; (8001fd8 <main+0x660>)
 8001eba:	f7ff f967 	bl	800118c <debugPrint>
	  	debugPrintln(&huart2, " mA");
 8001ebe:	4958      	ldr	r1, [pc, #352]	; (8002020 <main+0x6a8>)
 8001ec0:	4845      	ldr	r0, [pc, #276]	; (8001fd8 <main+0x660>)
 8001ec2:	f7ff f889 	bl	8000fd8 <debugPrintln>

		PULSE_MODE = true;
 8001ec6:	4b57      	ldr	r3, [pc, #348]	; (8002024 <main+0x6ac>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]
		reportStatus = true;
 8001ecc:	4b56      	ldr	r3, [pc, #344]	; (8002028 <main+0x6b0>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
 8001ed2:	e138      	b.n	8002146 <main+0x7ce>

		}


	else if(strncmp(array[0], "cc" ,10) == 0){
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	220a      	movs	r2, #10
 8001ed8:	4954      	ldr	r1, [pc, #336]	; (800202c <main+0x6b4>)
 8001eda:	4618      	mov	r0, r3
 8001edc:	f008 f8b6 	bl	800a04c <strncmp>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d121      	bne.n	8001f2a <main+0x5b2>
		if (stringToInt(array[1]) <= 20000){
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fa9b 	bl	8001424 <stringToInt>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	dc13      	bgt.n	8001f20 <main+0x5a8>
			my_statusValues.setCurrent = stringToInt(array[1]);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fa92 	bl	8001424 <stringToInt>
 8001f00:	4603      	mov	r3, r0
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	837b      	strh	r3, [r7, #26]
			reportStatus = true;
 8001f06:	4b48      	ldr	r3, [pc, #288]	; (8002028 <main+0x6b0>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
			CW_MODE = false;
 8001f0c:	4b48      	ldr	r3, [pc, #288]	; (8002030 <main+0x6b8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
			CR_MODE = false;
 8001f12:	4b48      	ldr	r3, [pc, #288]	; (8002034 <main+0x6bc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
			PULSE_MODE = false;
 8001f18:	4b42      	ldr	r3, [pc, #264]	; (8002024 <main+0x6ac>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
 8001f1e:	e112      	b.n	8002146 <main+0x7ce>
		}

		else{
			debugPrintln(&huart2, "Requested current is too high... Max current is 20 A");}
 8001f20:	4945      	ldr	r1, [pc, #276]	; (8002038 <main+0x6c0>)
 8001f22:	482d      	ldr	r0, [pc, #180]	; (8001fd8 <main+0x660>)
 8001f24:	f7ff f858 	bl	8000fd8 <debugPrintln>
 8001f28:	e10d      	b.n	8002146 <main+0x7ce>
		}

	else if(strncmp(array[0], "cp" ,10) == 0){
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	220a      	movs	r2, #10
 8001f2e:	4943      	ldr	r1, [pc, #268]	; (800203c <main+0x6c4>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f008 f88b 	bl	800a04c <strncmp>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d11b      	bne.n	8001f74 <main+0x5fc>
		my_statusValues.setPower = stringToInt(array[1]);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fa70 	bl	8001424 <stringToInt>
 8001f44:	4603      	mov	r3, r0
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	83bb      	strh	r3, [r7, #28]
		if (my_statusValues.setPower <= 250){
 8001f4a:	8bbb      	ldrh	r3, [r7, #28]
 8001f4c:	2bfa      	cmp	r3, #250	; 0xfa
 8001f4e:	d80c      	bhi.n	8001f6a <main+0x5f2>
			reportStatus = true;
 8001f50:	4b35      	ldr	r3, [pc, #212]	; (8002028 <main+0x6b0>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
			CW_MODE = true;
 8001f56:	4b36      	ldr	r3, [pc, #216]	; (8002030 <main+0x6b8>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	701a      	strb	r2, [r3, #0]
			CR_MODE = false;
 8001f5c:	4b35      	ldr	r3, [pc, #212]	; (8002034 <main+0x6bc>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
			PULSE_MODE = false;
 8001f62:	4b30      	ldr	r3, [pc, #192]	; (8002024 <main+0x6ac>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
 8001f68:	e0ed      	b.n	8002146 <main+0x7ce>
		}

		else{
			debugPrintln(&huart2, "Requested power is too high... Max power is 250 W");}
 8001f6a:	4935      	ldr	r1, [pc, #212]	; (8002040 <main+0x6c8>)
 8001f6c:	481a      	ldr	r0, [pc, #104]	; (8001fd8 <main+0x660>)
 8001f6e:	f7ff f833 	bl	8000fd8 <debugPrintln>
 8001f72:	e0e8      	b.n	8002146 <main+0x7ce>
		}




	else if(strncmp(array[0], "cr" ,10) == 0){
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	220a      	movs	r2, #10
 8001f78:	4932      	ldr	r1, [pc, #200]	; (8002044 <main+0x6cc>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f008 f866 	bl	800a04c <strncmp>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d162      	bne.n	800204c <main+0x6d4>


		  if (stringToInt(array[1]) > 0){
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fa4b 	bl	8001424 <stringToInt>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	dd07      	ble.n	8001fa4 <main+0x62c>
			  my_statusValues.setResistance = stringToInt(array[1]);
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fa44 	bl	8001424 <stringToInt>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	83fb      	strh	r3, [r7, #30]
 8001fa2:	e003      	b.n	8001fac <main+0x634>
		  }
		  else {
				debugPrintln(&huart2, "Hey, can't divide with Zero!");
 8001fa4:	4928      	ldr	r1, [pc, #160]	; (8002048 <main+0x6d0>)
 8001fa6:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <main+0x660>)
 8001fa8:	f7ff f816 	bl	8000fd8 <debugPrintln>

		  }

		reportStatus = true;
 8001fac:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <main+0x6b0>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
		CR_MODE = true;
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <main+0x6bc>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
		CW_MODE = false;
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <main+0x6b8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
		PULSE_MODE = false;
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <main+0x6ac>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e0bf      	b.n	8002146 <main+0x7ce>
 8001fc6:	bf00      	nop
 8001fc8:	0800c1b8 	.word	0x0800c1b8
 8001fcc:	0800c1bc 	.word	0x0800c1bc
 8001fd0:	0800c1c0 	.word	0x0800c1c0
 8001fd4:	0800c1c8 	.word	0x0800c1c8
 8001fd8:	20000600 	.word	0x20000600
 8001fdc:	0800c1cc 	.word	0x0800c1cc
 8001fe0:	0800c1d0 	.word	0x0800c1d0
 8001fe4:	0800c1d4 	.word	0x0800c1d4
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	0800c1d8 	.word	0x0800c1d8
 8001ff0:	20000568 	.word	0x20000568
 8001ff4:	0800c1f4 	.word	0x0800c1f4
 8001ff8:	20000244 	.word	0x20000244
 8001ffc:	20000260 	.word	0x20000260
 8002000:	0800c1f8 	.word	0x0800c1f8
 8002004:	0800c214 	.word	0x0800c214
 8002008:	0800c218 	.word	0x0800c218
 800200c:	20000262 	.word	0x20000262
 8002010:	20000264 	.word	0x20000264
 8002014:	0800c21c 	.word	0x0800c21c
 8002018:	0800c238 	.word	0x0800c238
 800201c:	0800c23c 	.word	0x0800c23c
 8002020:	0800c258 	.word	0x0800c258
 8002024:	20000249 	.word	0x20000249
 8002028:	20000246 	.word	0x20000246
 800202c:	0800c25c 	.word	0x0800c25c
 8002030:	20000247 	.word	0x20000247
 8002034:	20000248 	.word	0x20000248
 8002038:	0800c260 	.word	0x0800c260
 800203c:	0800c298 	.word	0x0800c298
 8002040:	0800c29c 	.word	0x0800c29c
 8002044:	0800c2d0 	.word	0x0800c2d0
 8002048:	0800c2d4 	.word	0x0800c2d4





	else if(strncmp(array[0], "status" ,10) == 0){
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	220a      	movs	r2, #10
 8002050:	4951      	ldr	r1, [pc, #324]	; (8002198 <main+0x820>)
 8002052:	4618      	mov	r0, r3
 8002054:	f007 fffa 	bl	800a04c <strncmp>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d110      	bne.n	8002080 <main+0x708>
		printStatus(my_statusValues, &huart2);}
 800205e:	4b4f      	ldr	r3, [pc, #316]	; (800219c <main+0x824>)
 8002060:	9306      	str	r3, [sp, #24]
 8002062:	466d      	mov	r5, sp
 8002064:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002070:	e885 0003 	stmia.w	r5, {r0, r1}
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800207a:	f7ff fa51 	bl	8001520 <printStatus>
 800207e:	e062      	b.n	8002146 <main+0x7ce>

	else if((strncmp(array[0], "stop" ,10) == 0) || strncmp(array[0], "s" ,10) == 0){
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	220a      	movs	r2, #10
 8002084:	4946      	ldr	r1, [pc, #280]	; (80021a0 <main+0x828>)
 8002086:	4618      	mov	r0, r3
 8002088:	f007 ffe0 	bl	800a04c <strncmp>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <main+0x72c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	220a      	movs	r2, #10
 8002096:	4943      	ldr	r1, [pc, #268]	; (80021a4 <main+0x82c>)
 8002098:	4618      	mov	r0, r3
 800209a:	f007 ffd7 	bl	800a04c <strncmp>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d112      	bne.n	80020ca <main+0x752>
		reportStatus = false;
 80020a4:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <main+0x830>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
		my_statusValues.setCurrent = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	837b      	strh	r3, [r7, #26]
		CW_MODE = false;
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <main+0x834>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
		CR_MODE = false;
 80020b4:	4b3e      	ldr	r3, [pc, #248]	; (80021b0 <main+0x838>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
		PULSE_MODE = false;
 80020ba:	4b3e      	ldr	r3, [pc, #248]	; (80021b4 <main+0x83c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
		debugPrintln(&huart2, "Received STOP, STOPPING.....");
 80020c0:	493d      	ldr	r1, [pc, #244]	; (80021b8 <main+0x840>)
 80020c2:	4836      	ldr	r0, [pc, #216]	; (800219c <main+0x824>)
 80020c4:	f7fe ff88 	bl	8000fd8 <debugPrintln>
 80020c8:	e03d      	b.n	8002146 <main+0x7ce>

	}

	else if(strncmp(array[0], "reset" ,10) == 0){
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	220a      	movs	r2, #10
 80020ce:	493b      	ldr	r1, [pc, #236]	; (80021bc <main+0x844>)
 80020d0:	4618      	mov	r0, r3
 80020d2:	f007 ffbb 	bl	800a04c <strncmp>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10f      	bne.n	80020fc <main+0x784>
		debugPrintln(&huart2, "Resetting mAh, mWh and time");
 80020dc:	4938      	ldr	r1, [pc, #224]	; (80021c0 <main+0x848>)
 80020de:	482f      	ldr	r0, [pc, #188]	; (800219c <main+0x824>)
 80020e0:	f7fe ff7a 	bl	8000fd8 <debugPrintln>
		my_statusValues.amperehours=0;
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	633b      	str	r3, [r7, #48]	; 0x30
		my_statusValues.watthours=0;
 80020ea:	f04f 0300 	mov.w	r3, #0
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34
		zeroTimeValue = HAL_GetTick();
 80020f0:	f001 f9ae 	bl	8003450 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <main+0x84c>)
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e024      	b.n	8002146 <main+0x7ce>
	}

	else if(strncmp(array[0], "log" ,10) == 0){
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	220a      	movs	r2, #10
 8002100:	4931      	ldr	r1, [pc, #196]	; (80021c8 <main+0x850>)
 8002102:	4618      	mov	r0, r3
 8002104:	f007 ffa2 	bl	800a04c <strncmp>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d108      	bne.n	8002120 <main+0x7a8>
		statusInterval=stringToInt(array[1]);}
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff f987 	bl	8001424 <stringToInt>
 8002116:	4603      	mov	r3, r0
 8002118:	461a      	mov	r2, r3
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <main+0x854>)
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	e012      	b.n	8002146 <main+0x7ce>

	else{
		debugPrintln(&huart2, "Unknown command..., showing HELP");
 8002120:	492b      	ldr	r1, [pc, #172]	; (80021d0 <main+0x858>)
 8002122:	481e      	ldr	r0, [pc, #120]	; (800219c <main+0x824>)
 8002124:	f7fe ff58 	bl	8000fd8 <debugPrintln>
		printHELP(&huart2,my_statusValues);}
 8002128:	466d      	mov	r5, sp
 800212a:	f107 0420 	add.w	r4, r7, #32
 800212e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002132:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002136:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800213a:	f107 0314 	add.w	r3, r7, #20
 800213e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002140:	4816      	ldr	r0, [pc, #88]	; (800219c <main+0x824>)
 8002142:	f7ff f843 	bl	80011cc <printHELP>
	memset(&line_buffer, '\0', sizeof(line_buffer));
 8002146:	2210      	movs	r2, #16
 8002148:	2100      	movs	r1, #0
 800214a:	4822      	ldr	r0, [pc, #136]	; (80021d4 <main+0x85c>)
 800214c:	f007 faf9 	bl	8009742 <memset>
}



	  HAL_GPIO_TogglePin(GPIOB, LED_Pin); //Toggle LED
 8002150:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002154:	4820      	ldr	r0, [pc, #128]	; (80021d8 <main+0x860>)
 8002156:	f003 f8d1 	bl	80052fc <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(GPIOA,  DISCHARGE_LED_Pin); //Toggle LED
	  //HAL_GPIO_TogglePin(GPIOB,  OVERTEMP_Pin);



	  if(PULSE_MODE){
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <main+0x83c>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d053      	beq.n	800220a <main+0x892>

		  if(HAL_GetTick() - previousMillis_PULSE >= pulseLength){
 8002162:	f001 f975 	bl	8003450 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <main+0x864>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	4a1c      	ldr	r2, [pc, #112]	; (80021e0 <main+0x868>)
 8002170:	8812      	ldrh	r2, [r2, #0]
 8002172:	4293      	cmp	r3, r2
 8002174:	d349      	bcc.n	800220a <main+0x892>


			  if (PULSE_TOGGLE){
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <main+0x86c>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d036      	beq.n	80021ec <main+0x874>
				  PULSE_TOGGLE = false;
 800217e:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <main+0x86c>)
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
				  my_statusValues.setCurrent = pulseCurrent;
 8002184:	4b18      	ldr	r3, [pc, #96]	; (80021e8 <main+0x870>)
 8002186:	881b      	ldrh	r3, [r3, #0]
 8002188:	837b      	strh	r3, [r7, #26]
				  HAL_GPIO_TogglePin(GPIOA, BILED_1_Pin); //Toggle LED
 800218a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800218e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002192:	f003 f8b3 	bl	80052fc <HAL_GPIO_TogglePin>
 8002196:	e033      	b.n	8002200 <main+0x888>
 8002198:	0800c2f4 	.word	0x0800c2f4
 800219c:	20000600 	.word	0x20000600
 80021a0:	0800c2fc 	.word	0x0800c2fc
 80021a4:	0800c304 	.word	0x0800c304
 80021a8:	20000246 	.word	0x20000246
 80021ac:	20000247 	.word	0x20000247
 80021b0:	20000248 	.word	0x20000248
 80021b4:	20000249 	.word	0x20000249
 80021b8:	0800c308 	.word	0x0800c308
 80021bc:	0800c328 	.word	0x0800c328
 80021c0:	0800c330 	.word	0x0800c330
 80021c4:	20000258 	.word	0x20000258
 80021c8:	0800c34c 	.word	0x0800c34c
 80021cc:	2000000c 	.word	0x2000000c
 80021d0:	0800c350 	.word	0x0800c350
 80021d4:	20000224 	.word	0x20000224
 80021d8:	48000400 	.word	0x48000400
 80021dc:	20000254 	.word	0x20000254
 80021e0:	20000262 	.word	0x20000262
 80021e4:	2000024a 	.word	0x2000024a
 80021e8:	20000264 	.word	0x20000264

			  }
			  else{
				  PULSE_TOGGLE = true;
 80021ec:	4b8a      	ldr	r3, [pc, #552]	; (8002418 <main+0xaa0>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
				  my_statusValues.setCurrent = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	837b      	strh	r3, [r7, #26]
				  HAL_GPIO_TogglePin(GPIOA, BILED_2_Pin); //Toggle LED
 80021f6:	2120      	movs	r1, #32
 80021f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021fc:	f003 f87e 	bl	80052fc <HAL_GPIO_TogglePin>

			  }

			  previousMillis_PULSE = HAL_GetTick();
 8002200:	f001 f926 	bl	8003450 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	4b85      	ldr	r3, [pc, #532]	; (800241c <main+0xaa4>)
 8002208:	601a      	str	r2, [r3, #0]





	  if(CW_MODE){
 800220a:	4b85      	ldr	r3, [pc, #532]	; (8002420 <main+0xaa8>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d01f      	beq.n	8002252 <main+0x8da>
		  my_statusValues.setCurrent = 1000000.0*my_statusValues.setPower/my_statusValues.measuredVoltage;
 8002212:	8bbb      	ldrh	r3, [r7, #28]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe f9ad 	bl	8000574 <__aeabi_i2d>
 800221a:	a37b      	add	r3, pc, #492	; (adr r3, 8002408 <main+0xa90>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	f7fe fa12 	bl	8000648 <__aeabi_dmul>
 8002224:	4603      	mov	r3, r0
 8002226:	460c      	mov	r4, r1
 8002228:	4625      	mov	r5, r4
 800222a:	461c      	mov	r4, r3
 800222c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f9a0 	bl	8000574 <__aeabi_i2d>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4620      	mov	r0, r4
 800223a:	4629      	mov	r1, r5
 800223c:	f7fe fb2e 	bl	800089c <__aeabi_ddiv>
 8002240:	4603      	mov	r3, r0
 8002242:	460c      	mov	r4, r1
 8002244:	4618      	mov	r0, r3
 8002246:	4621      	mov	r1, r4
 8002248:	f7fe fcd6 	bl	8000bf8 <__aeabi_d2uiz>
 800224c:	4603      	mov	r3, r0
 800224e:	b29b      	uxth	r3, r3
 8002250:	837b      	strh	r3, [r7, #26]

	  }

	  if(CR_MODE){
 8002252:	4b74      	ldr	r3, [pc, #464]	; (8002424 <main+0xaac>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <main+0x8f8>
		  my_statusValues.setCurrent = 1000*my_statusValues.measuredVoltage/my_statusValues.setResistance;
 800225a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800225c:	461a      	mov	r2, r3
 800225e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002262:	fb03 f302 	mul.w	r3, r3, r2
 8002266:	8bfa      	ldrh	r2, [r7, #30]
 8002268:	fb93 f3f2 	sdiv	r3, r3, r2
 800226c:	b29b      	uxth	r3, r3
 800226e:	837b      	strh	r3, [r7, #26]
	  }


	  if(reportStatus){
 8002270:	4b6d      	ldr	r3, [pc, #436]	; (8002428 <main+0xab0>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01e      	beq.n	80022b6 <main+0x93e>
		  if(HAL_GetTick() - previousMillis >= statusInterval){
 8002278:	f001 f8ea 	bl	8003450 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	4b6b      	ldr	r3, [pc, #428]	; (800242c <main+0xab4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1ad2      	subs	r2, r2, r3
 8002284:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <main+0xab8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d314      	bcc.n	80022b6 <main+0x93e>
			  printStatus(my_statusValues, &huart2);
 800228c:	4b69      	ldr	r3, [pc, #420]	; (8002434 <main+0xabc>)
 800228e:	9306      	str	r3, [sp, #24]
 8002290:	466d      	mov	r5, sp
 8002292:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800229e:	e885 0003 	stmia.w	r5, {r0, r1}
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a8:	f7ff f93a 	bl	8001520 <printStatus>
				previousMillis = HAL_GetTick();
 80022ac:	f001 f8d0 	bl	8003450 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b5e      	ldr	r3, [pc, #376]	; (800242c <main+0xab4>)
 80022b4:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if (autoFanSpeedMode){
 80022b6:	4b60      	ldr	r3, [pc, #384]	; (8002438 <main+0xac0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d03d      	beq.n	800233a <main+0x9c2>


		  my_statusValues.fanSpeed = 1.7*(my_statusValues.HEATSINK_Temp/10.0)-36;
 80022be:	8b3b      	ldrh	r3, [r7, #24]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe f957 	bl	8000574 <__aeabi_i2d>
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	4b5c      	ldr	r3, [pc, #368]	; (800243c <main+0xac4>)
 80022cc:	f7fe fae6 	bl	800089c <__aeabi_ddiv>
 80022d0:	4603      	mov	r3, r0
 80022d2:	460c      	mov	r4, r1
 80022d4:	4618      	mov	r0, r3
 80022d6:	4621      	mov	r1, r4
 80022d8:	a34d      	add	r3, pc, #308	; (adr r3, 8002410 <main+0xa98>)
 80022da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022de:	f7fe f9b3 	bl	8000648 <__aeabi_dmul>
 80022e2:	4603      	mov	r3, r0
 80022e4:	460c      	mov	r4, r1
 80022e6:	4618      	mov	r0, r3
 80022e8:	4621      	mov	r1, r4
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	4b54      	ldr	r3, [pc, #336]	; (8002440 <main+0xac8>)
 80022f0:	f7fd fff2 	bl	80002d8 <__aeabi_dsub>
 80022f4:	4603      	mov	r3, r0
 80022f6:	460c      	mov	r4, r1
 80022f8:	4618      	mov	r0, r3
 80022fa:	4621      	mov	r1, r4
 80022fc:	f7fe fc7c 	bl	8000bf8 <__aeabi_d2uiz>
 8002300:	4603      	mov	r3, r0
 8002302:	b29b      	uxth	r3, r3
 8002304:	873b      	strh	r3, [r7, #56]	; 0x38



			if (my_statusValues.fanSpeed <= 15){
 8002306:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002308:	2b0f      	cmp	r3, #15
 800230a:	d801      	bhi.n	8002310 <main+0x998>
				my_statusValues.fanSpeed = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	873b      	strh	r3, [r7, #56]	; 0x38
			}

			if (my_statusValues.fanSpeed >= 100){
 8002310:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002312:	2b63      	cmp	r3, #99	; 0x63
 8002314:	d901      	bls.n	800231a <main+0x9a2>
				my_statusValues.fanSpeed = 100;
 8002316:	2364      	movs	r3, #100	; 0x64
 8002318:	873b      	strh	r3, [r7, #56]	; 0x38
			}
			autoFanSpeed(my_statusValues, &htim1);
 800231a:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <main+0xacc>)
 800231c:	9306      	str	r3, [sp, #24]
 800231e:	466d      	mov	r5, sp
 8002320:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002326:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002328:	e894 0003 	ldmia.w	r4, {r0, r1}
 800232c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002336:	f7ff f8dd 	bl	80014f4 <autoFanSpeed>

	  }
	  if(my_statusValues.measuredVoltage<minVolt){
 800233a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800233c:	4b42      	ldr	r3, [pc, #264]	; (8002448 <main+0xad0>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d20b      	bcs.n	800235c <main+0x9e4>
			my_statusValues.setCurrent = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	837b      	strh	r3, [r7, #26]
			reportStatus = false;
 8002348:	4b37      	ldr	r3, [pc, #220]	; (8002428 <main+0xab0>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
			BEEP(&htim3);
 800234e:	483f      	ldr	r0, [pc, #252]	; (800244c <main+0xad4>)
 8002350:	f7ff f818 	bl	8001384 <BEEP>
		  	debugPrintln(&huart2, "Min voltage reached. Stopped discharge");
 8002354:	493e      	ldr	r1, [pc, #248]	; (8002450 <main+0xad8>)
 8002356:	4837      	ldr	r0, [pc, #220]	; (8002434 <main+0xabc>)
 8002358:	f7fe fe3e 	bl	8000fd8 <debugPrintln>
	  }


	  if(my_statusValues.measuredPower/1000>maxWatt){
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	4a3d      	ldr	r2, [pc, #244]	; (8002454 <main+0xadc>)
 8002360:	fba2 2303 	umull	r2, r3, r2, r3
 8002364:	099b      	lsrs	r3, r3, #6
 8002366:	4a3c      	ldr	r2, [pc, #240]	; (8002458 <main+0xae0>)
 8002368:	8812      	ldrh	r2, [r2, #0]
 800236a:	4293      	cmp	r3, r2
 800236c:	d90b      	bls.n	8002386 <main+0xa0e>
			my_statusValues.setCurrent = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	837b      	strh	r3, [r7, #26]
			reportStatus = false;
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <main+0xab0>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
			BEEP(&htim3);
 8002378:	4834      	ldr	r0, [pc, #208]	; (800244c <main+0xad4>)
 800237a:	f7ff f803 	bl	8001384 <BEEP>
			debugPrintln(&huart2, "OVERPOWER, Stopped discharge");
 800237e:	4937      	ldr	r1, [pc, #220]	; (800245c <main+0xae4>)
 8002380:	482c      	ldr	r0, [pc, #176]	; (8002434 <main+0xabc>)
 8002382:	f7fe fe29 	bl	8000fd8 <debugPrintln>
	  }

	  if(my_statusValues.measuredCurrent/1000>maxCurrent){
 8002386:	8c3b      	ldrh	r3, [r7, #32]
 8002388:	4a32      	ldr	r2, [pc, #200]	; (8002454 <main+0xadc>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	099b      	lsrs	r3, r3, #6
 8002390:	b29a      	uxth	r2, r3
 8002392:	4b33      	ldr	r3, [pc, #204]	; (8002460 <main+0xae8>)
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d90b      	bls.n	80023b2 <main+0xa3a>
			my_statusValues.setCurrent = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	837b      	strh	r3, [r7, #26]
			reportStatus = false;
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <main+0xab0>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
			BEEP(&htim3);
 80023a4:	4829      	ldr	r0, [pc, #164]	; (800244c <main+0xad4>)
 80023a6:	f7fe ffed 	bl	8001384 <BEEP>
			debugPrintln(&huart2, "OVERCURRENT, Stopped discharge");
 80023aa:	492e      	ldr	r1, [pc, #184]	; (8002464 <main+0xaec>)
 80023ac:	4821      	ldr	r0, [pc, #132]	; (8002434 <main+0xabc>)
 80023ae:	f7fe fe13 	bl	8000fd8 <debugPrintln>
	  }




	  if((my_statusValues.MOSFET1_Temp>maxTemp*10) || (my_statusValues.MOSFET2_Temp>maxTemp*10)){
 80023b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80023b4:	4619      	mov	r1, r3
 80023b6:	4b2c      	ldr	r3, [pc, #176]	; (8002468 <main+0xaf0>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4299      	cmp	r1, r3
 80023c6:	dc0b      	bgt.n	80023e0 <main+0xa68>
 80023c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023ca:	4619      	mov	r1, r3
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <main+0xaf0>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4299      	cmp	r1, r3
 80023dc:	f77f ab05 	ble.w	80019ea <main+0x72>
			my_statusValues.setCurrent = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	837b      	strh	r3, [r7, #26]
			reportStatus = false;
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <main+0xab0>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
			BEEP(&htim3);
 80023ea:	4818      	ldr	r0, [pc, #96]	; (800244c <main+0xad4>)
 80023ec:	f7fe ffca 	bl	8001384 <BEEP>
			HAL_Delay(50);
 80023f0:	2032      	movs	r0, #50	; 0x32
 80023f2:	f001 f839 	bl	8003468 <HAL_Delay>

			debugPrintln(&huart2, "OVERTEMP, Stopped discharge");
 80023f6:	491d      	ldr	r1, [pc, #116]	; (800246c <main+0xaf4>)
 80023f8:	480e      	ldr	r0, [pc, #56]	; (8002434 <main+0xabc>)
 80023fa:	f7fe fded 	bl	8000fd8 <debugPrintln>
  {
 80023fe:	f7ff baf4 	b.w	80019ea <main+0x72>
 8002402:	bf00      	nop
 8002404:	f3af 8000 	nop.w
 8002408:	00000000 	.word	0x00000000
 800240c:	412e8480 	.word	0x412e8480
 8002410:	33333333 	.word	0x33333333
 8002414:	3ffb3333 	.word	0x3ffb3333
 8002418:	2000024a 	.word	0x2000024a
 800241c:	20000254 	.word	0x20000254
 8002420:	20000247 	.word	0x20000247
 8002424:	20000248 	.word	0x20000248
 8002428:	20000246 	.word	0x20000246
 800242c:	2000024c 	.word	0x2000024c
 8002430:	2000000c 	.word	0x2000000c
 8002434:	20000600 	.word	0x20000600
 8002438:	20000008 	.word	0x20000008
 800243c:	40240000 	.word	0x40240000
 8002440:	40420000 	.word	0x40420000
 8002444:	20000568 	.word	0x20000568
 8002448:	20000260 	.word	0x20000260
 800244c:	20000420 	.word	0x20000420
 8002450:	0800c374 	.word	0x0800c374
 8002454:	10624dd3 	.word	0x10624dd3
 8002458:	2000001a 	.word	0x2000001a
 800245c:	0800c39c 	.word	0x0800c39c
 8002460:	2000001c 	.word	0x2000001c
 8002464:	0800c3bc 	.word	0x0800c3bc
 8002468:	20000018 	.word	0x20000018
 800246c:	0800c3dc 	.word	0x0800c3dc

08002470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b0a4      	sub	sp, #144	; 0x90
 8002474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002476:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800247a:	2238      	movs	r2, #56	; 0x38
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f007 f95f 	bl	8009742 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002484:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002494:	463b      	mov	r3, r7
 8002496:	2244      	movs	r2, #68	; 0x44
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f007 f951 	bl	8009742 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024a4:	f003 fc36 	bl	8005d14 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024a8:	2301      	movs	r3, #1
 80024aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 fcde 	bl	8005e7c <HAL_RCC_OscConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80024c6:	f000 fc43 	bl	8002d50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ca:	230f      	movs	r3, #15
 80024cc:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80024ce:	2302      	movs	r3, #2
 80024d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024da:	2300      	movs	r3, #0
 80024dc:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 ffe1 	bl	80064ac <HAL_RCC_ClockConfig>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80024f0:	f000 fc2e 	bl	8002d50 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80024f4:	f248 0343 	movw	r3, #32835	; 0x8043
 80024f8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024fe:	2300      	movs	r3, #0
 8002500:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002506:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800250c:	463b      	mov	r3, r7
 800250e:	4618      	mov	r0, r3
 8002510:	f004 f9e8 	bl	80068e4 <HAL_RCCEx_PeriphCLKConfig>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800251a:	f000 fc19 	bl	8002d50 <Error_Handler>
  }
}
 800251e:	bf00      	nop
 8002520:	3790      	adds	r7, #144	; 0x90
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	; 0x30
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800252e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	2220      	movs	r2, #32
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f007 f8fe 	bl	8009742 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002546:	4b32      	ldr	r3, [pc, #200]	; (8002610 <MX_ADC1_Init+0xe8>)
 8002548:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800254c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <MX_ADC1_Init+0xe8>)
 8002550:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002554:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002556:	4b2e      	ldr	r3, [pc, #184]	; (8002610 <MX_ADC1_Init+0xe8>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800255c:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <MX_ADC1_Init+0xe8>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002562:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <MX_ADC1_Init+0xe8>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <MX_ADC1_Init+0xe8>)
 800256a:	2200      	movs	r2, #0
 800256c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800256e:	4b28      	ldr	r3, [pc, #160]	; (8002610 <MX_ADC1_Init+0xe8>)
 8002570:	2204      	movs	r2, #4
 8002572:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <MX_ADC1_Init+0xe8>)
 8002576:	2200      	movs	r2, #0
 8002578:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800257a:	4b25      	ldr	r3, [pc, #148]	; (8002610 <MX_ADC1_Init+0xe8>)
 800257c:	2200      	movs	r2, #0
 800257e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <MX_ADC1_Init+0xe8>)
 8002582:	2201      	movs	r2, #1
 8002584:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002586:	4b22      	ldr	r3, [pc, #136]	; (8002610 <MX_ADC1_Init+0xe8>)
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <MX_ADC1_Init+0xe8>)
 8002590:	2200      	movs	r2, #0
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <MX_ADC1_Init+0xe8>)
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <MX_ADC1_Init+0xe8>)
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <MX_ADC1_Init+0xe8>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <MX_ADC1_Init+0xe8>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80025b0:	4817      	ldr	r0, [pc, #92]	; (8002610 <MX_ADC1_Init+0xe8>)
 80025b2:	f001 f9a7 	bl	8003904 <HAL_ADC_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80025bc:	f000 fbc8 	bl	8002d50 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80025c0:	2300      	movs	r3, #0
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80025c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c8:	4619      	mov	r1, r3
 80025ca:	4811      	ldr	r0, [pc, #68]	; (8002610 <MX_ADC1_Init+0xe8>)
 80025cc:	f002 f92c 	bl	8004828 <HAL_ADCEx_MultiModeConfigChannel>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80025d6:	f000 fbbb 	bl	8002d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <MX_ADC1_Init+0xec>)
 80025dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025de:	2306      	movs	r3, #6
 80025e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80025e2:	2300      	movs	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80025e6:	237f      	movs	r3, #127	; 0x7f
 80025e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80025ea:	2304      	movs	r3, #4
 80025ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	4806      	ldr	r0, [pc, #24]	; (8002610 <MX_ADC1_Init+0xe8>)
 80025f8:	f001 fca6 	bl	8003f48 <HAL_ADC_ConfigChannel>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002602:	f000 fba5 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002606:	bf00      	nop
 8002608:	3730      	adds	r7, #48	; 0x30
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2000046c 	.word	0x2000046c
 8002614:	08600004 	.word	0x08600004

08002618 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800261e:	463b      	mov	r3, r7
 8002620:	2220      	movs	r2, #32
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f007 f88c 	bl	8009742 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800262a:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <MX_ADC2_Init+0xc0>)
 800262c:	4a2b      	ldr	r2, [pc, #172]	; (80026dc <MX_ADC2_Init+0xc4>)
 800262e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002630:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <MX_ADC2_Init+0xc0>)
 8002632:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002636:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002638:	4b27      	ldr	r3, [pc, #156]	; (80026d8 <MX_ADC2_Init+0xc0>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <MX_ADC2_Init+0xc0>)
 8002640:	2200      	movs	r2, #0
 8002642:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002644:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <MX_ADC2_Init+0xc0>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800264a:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <MX_ADC2_Init+0xc0>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002650:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <MX_ADC2_Init+0xc0>)
 8002652:	2204      	movs	r2, #4
 8002654:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <MX_ADC2_Init+0xc0>)
 8002658:	2200      	movs	r2, #0
 800265a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <MX_ADC2_Init+0xc0>)
 800265e:	2200      	movs	r2, #0
 8002660:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <MX_ADC2_Init+0xc0>)
 8002664:	2201      	movs	r2, #1
 8002666:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002668:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <MX_ADC2_Init+0xc0>)
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <MX_ADC2_Init+0xc0>)
 8002672:	2200      	movs	r2, #0
 8002674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002676:	4b18      	ldr	r3, [pc, #96]	; (80026d8 <MX_ADC2_Init+0xc0>)
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <MX_ADC2_Init+0xc0>)
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <MX_ADC2_Init+0xc0>)
 8002686:	2200      	movs	r2, #0
 8002688:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800268a:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <MX_ADC2_Init+0xc0>)
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002692:	4811      	ldr	r0, [pc, #68]	; (80026d8 <MX_ADC2_Init+0xc0>)
 8002694:	f001 f936 	bl	8003904 <HAL_ADC_Init>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800269e:	f000 fb57 	bl	8002d50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <MX_ADC2_Init+0xc8>)
 80026a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026a6:	2306      	movs	r3, #6
 80026a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026ae:	237f      	movs	r3, #127	; 0x7f
 80026b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026b2:	2304      	movs	r3, #4
 80026b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80026ba:	463b      	mov	r3, r7
 80026bc:	4619      	mov	r1, r3
 80026be:	4806      	ldr	r0, [pc, #24]	; (80026d8 <MX_ADC2_Init+0xc0>)
 80026c0:	f001 fc42 	bl	8003f48 <HAL_ADC_ConfigChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80026ca:	f000 fb41 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000364 	.word	0x20000364
 80026dc:	50000100 	.word	0x50000100
 80026e0:	47520000 	.word	0x47520000

080026e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <MX_I2C1_Init+0x74>)
 80026ea:	4a1c      	ldr	r2, [pc, #112]	; (800275c <MX_I2C1_Init+0x78>)
 80026ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <MX_I2C1_Init+0x74>)
 80026f0:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <MX_I2C1_Init+0x7c>)
 80026f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <MX_I2C1_Init+0x74>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <MX_I2C1_Init+0x74>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <MX_I2C1_Init+0x74>)
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <MX_I2C1_Init+0x74>)
 8002708:	2200      	movs	r2, #0
 800270a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <MX_I2C1_Init+0x74>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <MX_I2C1_Init+0x74>)
 8002714:	2200      	movs	r2, #0
 8002716:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <MX_I2C1_Init+0x74>)
 800271a:	2200      	movs	r2, #0
 800271c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800271e:	480e      	ldr	r0, [pc, #56]	; (8002758 <MX_I2C1_Init+0x74>)
 8002720:	f002 fe06 	bl	8005330 <HAL_I2C_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800272a:	f000 fb11 	bl	8002d50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800272e:	2100      	movs	r1, #0
 8002730:	4809      	ldr	r0, [pc, #36]	; (8002758 <MX_I2C1_Init+0x74>)
 8002732:	f003 fa57 	bl	8005be4 <HAL_I2CEx_ConfigAnalogFilter>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800273c:	f000 fb08 	bl	8002d50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002740:	2100      	movs	r1, #0
 8002742:	4805      	ldr	r0, [pc, #20]	; (8002758 <MX_I2C1_Init+0x74>)
 8002744:	f003 fa99 	bl	8005c7a <HAL_I2CEx_ConfigDigitalFilter>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800274e:	f000 faff 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200003d0 	.word	0x200003d0
 800275c:	40005400 	.word	0x40005400
 8002760:	00506682 	.word	0x00506682

08002764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b09c      	sub	sp, #112	; 0x70
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002778:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002784:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
 8002794:	615a      	str	r2, [r3, #20]
 8002796:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	2234      	movs	r2, #52	; 0x34
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f006 ffcf 	bl	8009742 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027a4:	4b45      	ldr	r3, [pc, #276]	; (80028bc <MX_TIM1_Init+0x158>)
 80027a6:	4a46      	ldr	r2, [pc, #280]	; (80028c0 <MX_TIM1_Init+0x15c>)
 80027a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80027aa:	4b44      	ldr	r3, [pc, #272]	; (80028bc <MX_TIM1_Init+0x158>)
 80027ac:	220f      	movs	r2, #15
 80027ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b0:	4b42      	ldr	r3, [pc, #264]	; (80028bc <MX_TIM1_Init+0x158>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <MX_TIM1_Init+0x158>)
 80027b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027be:	4b3f      	ldr	r3, [pc, #252]	; (80028bc <MX_TIM1_Init+0x158>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027c4:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <MX_TIM1_Init+0x158>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027ca:	4b3c      	ldr	r3, [pc, #240]	; (80028bc <MX_TIM1_Init+0x158>)
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80027d0:	483a      	ldr	r0, [pc, #232]	; (80028bc <MX_TIM1_Init+0x158>)
 80027d2:	f004 fa77 	bl	8006cc4 <HAL_TIM_Base_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80027dc:	f000 fab8 	bl	8002d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027ea:	4619      	mov	r1, r3
 80027ec:	4833      	ldr	r0, [pc, #204]	; (80028bc <MX_TIM1_Init+0x158>)
 80027ee:	f004 fd95 	bl	800731c <HAL_TIM_ConfigClockSource>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80027f8:	f000 faaa 	bl	8002d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027fc:	482f      	ldr	r0, [pc, #188]	; (80028bc <MX_TIM1_Init+0x158>)
 80027fe:	f004 fb1b 	bl	8006e38 <HAL_TIM_PWM_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002808:	f000 faa2 	bl	8002d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280c:	2300      	movs	r3, #0
 800280e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002810:	2300      	movs	r3, #0
 8002812:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002818:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800281c:	4619      	mov	r1, r3
 800281e:	4827      	ldr	r0, [pc, #156]	; (80028bc <MX_TIM1_Init+0x158>)
 8002820:	f005 fa96 	bl	8007d50 <HAL_TIMEx_MasterConfigSynchronization>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800282a:	f000 fa91 	bl	8002d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800282e:	2360      	movs	r3, #96	; 0x60
 8002830:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002836:	2300      	movs	r3, #0
 8002838:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800283a:	2300      	movs	r3, #0
 800283c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800284a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800284e:	2200      	movs	r2, #0
 8002850:	4619      	mov	r1, r3
 8002852:	481a      	ldr	r0, [pc, #104]	; (80028bc <MX_TIM1_Init+0x158>)
 8002854:	f004 fc52 	bl	80070fc <HAL_TIM_PWM_ConfigChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800285e:	f000 fa77 	bl	8002d50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800287a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002880:	2300      	movs	r3, #0
 8002882:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002892:	2300      	movs	r3, #0
 8002894:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002896:	2300      	movs	r3, #0
 8002898:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	4619      	mov	r1, r3
 800289e:	4807      	ldr	r0, [pc, #28]	; (80028bc <MX_TIM1_Init+0x158>)
 80028a0:	f005 fad8 	bl	8007e54 <HAL_TIMEx_ConfigBreakDeadTime>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80028aa:	f000 fa51 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80028ae:	4803      	ldr	r0, [pc, #12]	; (80028bc <MX_TIM1_Init+0x158>)
 80028b0:	f000 fbb4 	bl	800301c <HAL_TIM_MspPostInit>

}
 80028b4:	bf00      	nop
 80028b6:	3770      	adds	r7, #112	; 0x70
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000568 	.word	0x20000568
 80028c0:	40012c00 	.word	0x40012c00

080028c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ca:	f107 0310 	add.w	r3, r7, #16
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <MX_TIM2_Init+0x98>)
 80028e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 610;
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <MX_TIM2_Init+0x98>)
 80028ec:	f240 2262 	movw	r2, #610	; 0x262
 80028f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <MX_TIM2_Init+0x98>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80028f8:	4b18      	ldr	r3, [pc, #96]	; (800295c <MX_TIM2_Init+0x98>)
 80028fa:	220a      	movs	r2, #10
 80028fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028fe:	4b17      	ldr	r3, [pc, #92]	; (800295c <MX_TIM2_Init+0x98>)
 8002900:	2200      	movs	r2, #0
 8002902:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002904:	4b15      	ldr	r3, [pc, #84]	; (800295c <MX_TIM2_Init+0x98>)
 8002906:	2280      	movs	r2, #128	; 0x80
 8002908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800290a:	4814      	ldr	r0, [pc, #80]	; (800295c <MX_TIM2_Init+0x98>)
 800290c:	f004 f9da 	bl	8006cc4 <HAL_TIM_Base_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002916:	f000 fa1b 	bl	8002d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800291a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800291e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002920:	f107 0310 	add.w	r3, r7, #16
 8002924:	4619      	mov	r1, r3
 8002926:	480d      	ldr	r0, [pc, #52]	; (800295c <MX_TIM2_Init+0x98>)
 8002928:	f004 fcf8 	bl	800731c <HAL_TIM_ConfigClockSource>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002932:	f000 fa0d 	bl	8002d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4806      	ldr	r0, [pc, #24]	; (800295c <MX_TIM2_Init+0x98>)
 8002944:	f005 fa04 	bl	8007d50 <HAL_TIMEx_MasterConfigSynchronization>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800294e:	f000 f9ff 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002952:	bf00      	nop
 8002954:	3720      	adds	r7, #32
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	200005b4 	.word	0x200005b4

08002960 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08e      	sub	sp, #56	; 0x38
 8002964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002980:	463b      	mov	r3, r7
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	60da      	str	r2, [r3, #12]
 800298c:	611a      	str	r2, [r3, #16]
 800298e:	615a      	str	r2, [r3, #20]
 8002990:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002992:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <MX_TIM3_Init+0xe8>)
 8002994:	4a2d      	ldr	r2, [pc, #180]	; (8002a4c <MX_TIM3_Init+0xec>)
 8002996:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500;
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <MX_TIM3_Init+0xe8>)
 800299a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800299e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a0:	4b29      	ldr	r3, [pc, #164]	; (8002a48 <MX_TIM3_Init+0xe8>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80029a6:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <MX_TIM3_Init+0xe8>)
 80029a8:	2264      	movs	r2, #100	; 0x64
 80029aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ac:	4b26      	ldr	r3, [pc, #152]	; (8002a48 <MX_TIM3_Init+0xe8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <MX_TIM3_Init+0xe8>)
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80029b8:	4823      	ldr	r0, [pc, #140]	; (8002a48 <MX_TIM3_Init+0xe8>)
 80029ba:	f004 f983 	bl	8006cc4 <HAL_TIM_Base_Init>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80029c4:	f000 f9c4 	bl	8002d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80029ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029d2:	4619      	mov	r1, r3
 80029d4:	481c      	ldr	r0, [pc, #112]	; (8002a48 <MX_TIM3_Init+0xe8>)
 80029d6:	f004 fca1 	bl	800731c <HAL_TIM_ConfigClockSource>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80029e0:	f000 f9b6 	bl	8002d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029e4:	4818      	ldr	r0, [pc, #96]	; (8002a48 <MX_TIM3_Init+0xe8>)
 80029e6:	f004 fa27 	bl	8006e38 <HAL_TIM_PWM_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80029f0:	f000 f9ae 	bl	8002d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f4:	2300      	movs	r3, #0
 80029f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	4619      	mov	r1, r3
 8002a02:	4811      	ldr	r0, [pc, #68]	; (8002a48 <MX_TIM3_Init+0xe8>)
 8002a04:	f005 f9a4 	bl	8007d50 <HAL_TIMEx_MasterConfigSynchronization>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002a0e:	f000 f99f 	bl	8002d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a12:	2360      	movs	r3, #96	; 0x60
 8002a14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a22:	463b      	mov	r3, r7
 8002a24:	2208      	movs	r2, #8
 8002a26:	4619      	mov	r1, r3
 8002a28:	4807      	ldr	r0, [pc, #28]	; (8002a48 <MX_TIM3_Init+0xe8>)
 8002a2a:	f004 fb67 	bl	80070fc <HAL_TIM_PWM_ConfigChannel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002a34:	f000 f98c 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a38:	4803      	ldr	r0, [pc, #12]	; (8002a48 <MX_TIM3_Init+0xe8>)
 8002a3a:	f000 faef 	bl	800301c <HAL_TIM_MspPostInit>

}
 8002a3e:	bf00      	nop
 8002a40:	3738      	adds	r7, #56	; 0x38
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000420 	.word	0x20000420
 8002a4c:	40000400 	.word	0x40000400

08002a50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a56:	f107 0310 	add.w	r3, r7, #16
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <MX_TIM4_Init+0x94>)
 8002a70:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <MX_TIM4_Init+0x98>)
 8002a72:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <MX_TIM4_Init+0x94>)
 8002a76:	2218      	movs	r2, #24
 8002a78:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <MX_TIM4_Init+0x94>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002a80:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <MX_TIM4_Init+0x94>)
 8002a82:	2263      	movs	r2, #99	; 0x63
 8002a84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <MX_TIM4_Init+0x94>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a8c:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <MX_TIM4_Init+0x94>)
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a92:	4814      	ldr	r0, [pc, #80]	; (8002ae4 <MX_TIM4_Init+0x94>)
 8002a94:	f004 f916 	bl	8006cc4 <HAL_TIM_Base_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002a9e:	f000 f957 	bl	8002d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	4619      	mov	r1, r3
 8002aae:	480d      	ldr	r0, [pc, #52]	; (8002ae4 <MX_TIM4_Init+0x94>)
 8002ab0:	f004 fc34 	bl	800731c <HAL_TIM_ConfigClockSource>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002aba:	f000 f949 	bl	8002d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ac6:	1d3b      	adds	r3, r7, #4
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <MX_TIM4_Init+0x94>)
 8002acc:	f005 f940 	bl	8007d50 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002ad6:	f000 f93b 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002ada:	bf00      	nop
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000308 	.word	0x20000308
 8002ae8:	40000800 	.word	0x40000800

08002aec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002af0:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002af2:	4a23      	ldr	r2, [pc, #140]	; (8002b80 <MX_USART1_UART_Init+0x94>)
 8002af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002afe:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b10:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b12:	220c      	movs	r2, #12
 8002b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b1c:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b22:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b34:	4811      	ldr	r0, [pc, #68]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b36:	f005 fa2d 	bl	8007f94 <HAL_UART_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b40:	f000 f906 	bl	8002d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b44:	2100      	movs	r1, #0
 8002b46:	480d      	ldr	r0, [pc, #52]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b48:	f006 fce1 	bl	800950e <HAL_UARTEx_SetTxFifoThreshold>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b52:	f000 f8fd 	bl	8002d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b56:	2100      	movs	r1, #0
 8002b58:	4808      	ldr	r0, [pc, #32]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b5a:	f006 fd16 	bl	800958a <HAL_UARTEx_SetRxFifoThreshold>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b64:	f000 f8f4 	bl	8002d50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b68:	4804      	ldr	r0, [pc, #16]	; (8002b7c <MX_USART1_UART_Init+0x90>)
 8002b6a:	f006 fc97 	bl	800949c <HAL_UARTEx_DisableFifoMode>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b74:	f000 f8ec 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	200004d8 	.word	0x200004d8
 8002b80:	40013800 	.word	0x40013800

08002b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b88:	4b22      	ldr	r3, [pc, #136]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002b8a:	4a23      	ldr	r2, [pc, #140]	; (8002c18 <MX_USART2_UART_Init+0x94>)
 8002b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b8e:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b96:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ba2:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002baa:	220c      	movs	r2, #12
 8002bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bae:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bc6:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bcc:	4811      	ldr	r0, [pc, #68]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002bce:	f005 f9e1 	bl	8007f94 <HAL_UART_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002bd8:	f000 f8ba 	bl	8002d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bdc:	2100      	movs	r1, #0
 8002bde:	480d      	ldr	r0, [pc, #52]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002be0:	f006 fc95 	bl	800950e <HAL_UARTEx_SetTxFifoThreshold>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002bea:	f000 f8b1 	bl	8002d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4808      	ldr	r0, [pc, #32]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002bf2:	f006 fcca 	bl	800958a <HAL_UARTEx_SetRxFifoThreshold>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002bfc:	f000 f8a8 	bl	8002d50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002c00:	4804      	ldr	r0, [pc, #16]	; (8002c14 <MX_USART2_UART_Init+0x90>)
 8002c02:	f006 fc4b 	bl	800949c <HAL_UARTEx_DisableFifoMode>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002c0c:	f000 f8a0 	bl	8002d50 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */
  //__HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);

  /* USER CODE END USART2_Init 2 */

}
 8002c10:	bf00      	nop
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	20000600 	.word	0x20000600
 8002c18:	40004400 	.word	0x40004400

08002c1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <MX_DMA_Init+0x50>)
 8002c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c26:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <MX_DMA_Init+0x50>)
 8002c28:	f043 0304 	orr.w	r3, r3, #4
 8002c2c:	6493      	str	r3, [r2, #72]	; 0x48
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <MX_DMA_Init+0x50>)
 8002c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	607b      	str	r3, [r7, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <MX_DMA_Init+0x50>)
 8002c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3e:	4a0b      	ldr	r2, [pc, #44]	; (8002c6c <MX_DMA_Init+0x50>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6493      	str	r3, [r2, #72]	; 0x48
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <MX_DMA_Init+0x50>)
 8002c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	200b      	movs	r0, #11
 8002c58:	f001 ff61 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002c5c:	200b      	movs	r0, #11
 8002c5e:	f001 ff78 	bl	8004b52 <HAL_NVIC_EnableIRQ>

}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000

08002c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c76:	f107 030c 	add.w	r3, r7, #12
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	60da      	str	r2, [r3, #12]
 8002c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c86:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <MX_GPIO_Init+0xd8>)
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8a:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <MX_GPIO_Init+0xd8>)
 8002c8c:	f043 0320 	orr.w	r3, r3, #32
 8002c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <MX_GPIO_Init+0xd8>)
 8002c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <MX_GPIO_Init+0xd8>)
 8002ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca2:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <MX_GPIO_Init+0xd8>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002caa:	4b27      	ldr	r3, [pc, #156]	; (8002d48 <MX_GPIO_Init+0xd8>)
 8002cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb6:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <MX_GPIO_Init+0xd8>)
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	4a23      	ldr	r2, [pc, #140]	; (8002d48 <MX_GPIO_Init+0xd8>)
 8002cbc:	f043 0302 	orr.w	r3, r3, #2
 8002cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cc2:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <MX_GPIO_Init+0xd8>)
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BILED_1_Pin|DISCHARGE_LED_Pin, GPIO_PIN_RESET);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd8:	f002 faf8 	bl	80052cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OVERTEMP_Pin|BILED_2_Pin|LED_Pin, GPIO_PIN_RESET);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002ce2:	481a      	ldr	r0, [pc, #104]	; (8002d4c <MX_GPIO_Init+0xdc>)
 8002ce4:	f002 faf2 	bl	80052cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FANIN_Pin */
  GPIO_InitStruct.Pin = FANIN_Pin;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FANIN_GPIO_Port, &GPIO_InitStruct);
 8002cf4:	f107 030c 	add.w	r3, r7, #12
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cfe:	f002 f963 	bl	8004fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BILED_1_Pin DISCHARGE_LED_Pin */
  GPIO_InitStruct.Pin = BILED_1_Pin|DISCHARGE_LED_Pin;
 8002d02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d14:	f107 030c 	add.w	r3, r7, #12
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d1e:	f002 f953 	bl	8004fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OVERTEMP_Pin BILED_2_Pin LED_Pin */
  GPIO_InitStruct.Pin = OVERTEMP_Pin|BILED_2_Pin|LED_Pin;
 8002d22:	f44f 7398 	mov.w	r3, #304	; 0x130
 8002d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d34:	f107 030c 	add.w	r3, r7, #12
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4804      	ldr	r0, [pc, #16]	; (8002d4c <MX_GPIO_Init+0xdc>)
 8002d3c:	f002 f944 	bl	8004fc8 <HAL_GPIO_Init>

}
 8002d40:	bf00      	nop
 8002d42:	3720      	adds	r7, #32
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	48000400 	.word	0x48000400

08002d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_MspInit+0x44>)
 8002d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6a:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <HAL_MspInit+0x44>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6613      	str	r3, [r2, #96]	; 0x60
 8002d72:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <HAL_MspInit+0x44>)
 8002d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <HAL_MspInit+0x44>)
 8002d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d82:	4a08      	ldr	r2, [pc, #32]	; (8002da4 <HAL_MspInit+0x44>)
 8002d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d88:	6593      	str	r3, [r2, #88]	; 0x58
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <HAL_MspInit+0x44>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002d96:	f003 f861 	bl	8005e5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000

08002da8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08c      	sub	sp, #48	; 0x30
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db0:	f107 031c 	add.w	r3, r7, #28
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc8:	d12e      	bne.n	8002e28 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002dca:	4b33      	ldr	r3, [pc, #204]	; (8002e98 <HAL_ADC_MspInit+0xf0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	4a31      	ldr	r2, [pc, #196]	; (8002e98 <HAL_ADC_MspInit+0xf0>)
 8002dd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002dd4:	4b30      	ldr	r3, [pc, #192]	; (8002e98 <HAL_ADC_MspInit+0xf0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d10b      	bne.n	8002df4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002ddc:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <HAL_ADC_MspInit+0xf4>)
 8002dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de0:	4a2e      	ldr	r2, [pc, #184]	; (8002e9c <HAL_ADC_MspInit+0xf4>)
 8002de2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002de6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002de8:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <HAL_ADC_MspInit+0xf4>)
 8002dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df4:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <HAL_ADC_MspInit+0xf4>)
 8002df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df8:	4a28      	ldr	r2, [pc, #160]	; (8002e9c <HAL_ADC_MspInit+0xf4>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e00:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <HAL_ADC_MspInit+0xf4>)
 8002e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = FET1_TEMP_Pin;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e10:	2303      	movs	r3, #3
 8002e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FET1_TEMP_GPIO_Port, &GPIO_InitStruct);
 8002e18:	f107 031c 	add.w	r3, r7, #28
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e22:	f002 f8d1 	bl	8004fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002e26:	e032      	b.n	8002e8e <HAL_ADC_MspInit+0xe6>
  else if(hadc->Instance==ADC2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ea0 <HAL_ADC_MspInit+0xf8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d12d      	bne.n	8002e8e <HAL_ADC_MspInit+0xe6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002e32:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <HAL_ADC_MspInit+0xf0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3301      	adds	r3, #1
 8002e38:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <HAL_ADC_MspInit+0xf0>)
 8002e3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002e3c:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <HAL_ADC_MspInit+0xf0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d10b      	bne.n	8002e5c <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002e44:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_ADC_MspInit+0xf4>)
 8002e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e48:	4a14      	ldr	r2, [pc, #80]	; (8002e9c <HAL_ADC_MspInit+0xf4>)
 8002e4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_ADC_MspInit+0xf4>)
 8002e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_ADC_MspInit+0xf4>)
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	4a0e      	ldr	r2, [pc, #56]	; (8002e9c <HAL_ADC_MspInit+0xf4>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_ADC_MspInit+0xf4>)
 8002e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FET2_TEMP_Pin|PCB_TEMP_Pin;
 8002e74:	2390      	movs	r3, #144	; 0x90
 8002e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	4619      	mov	r1, r3
 8002e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e8a:	f002 f89d 	bl	8004fc8 <HAL_GPIO_Init>
}
 8002e8e:	bf00      	nop
 8002e90:	3730      	adds	r7, #48	; 0x30
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	2000026c 	.word	0x2000026c
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	50000100 	.word	0x50000100

08002ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <HAL_I2C_MspInit+0xb8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d145      	bne.n	8002f52 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec6:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <HAL_I2C_MspInit+0xbc>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	4a25      	ldr	r2, [pc, #148]	; (8002f60 <HAL_I2C_MspInit+0xbc>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ed2:	4b23      	ldr	r3, [pc, #140]	; (8002f60 <HAL_I2C_MspInit+0xbc>)
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ede:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_I2C_MspInit+0xbc>)
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee2:	4a1f      	ldr	r2, [pc, #124]	; (8002f60 <HAL_I2C_MspInit+0xbc>)
 8002ee4:	f043 0302 	orr.w	r3, r3, #2
 8002ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <HAL_I2C_MspInit+0xbc>)
 8002eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002efc:	2312      	movs	r3, #18
 8002efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f00:	2301      	movs	r3, #1
 8002f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	2300      	movs	r3, #0
 8002f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f08:	2304      	movs	r3, #4
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f16:	f002 f857 	bl	8004fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f1e:	2312      	movs	r3, #18
 8002f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f22:	2301      	movs	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f2e:	f107 0314 	add.w	r3, r7, #20
 8002f32:	4619      	mov	r1, r3
 8002f34:	480b      	ldr	r0, [pc, #44]	; (8002f64 <HAL_I2C_MspInit+0xc0>)
 8002f36:	f002 f847 	bl	8004fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f3a:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_I2C_MspInit+0xbc>)
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3e:	4a08      	ldr	r2, [pc, #32]	; (8002f60 <HAL_I2C_MspInit+0xbc>)
 8002f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f44:	6593      	str	r3, [r2, #88]	; 0x58
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_I2C_MspInit+0xbc>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f52:	bf00      	nop
 8002f54:	3728      	adds	r7, #40	; 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40005400 	.word	0x40005400
 8002f60:	40021000 	.word	0x40021000
 8002f64:	48000400 	.word	0x48000400

08002f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a25      	ldr	r2, [pc, #148]	; (800300c <HAL_TIM_Base_MspInit+0xa4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10c      	bne.n	8002f94 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f7a:	4b25      	ldr	r3, [pc, #148]	; (8003010 <HAL_TIM_Base_MspInit+0xa8>)
 8002f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f7e:	4a24      	ldr	r2, [pc, #144]	; (8003010 <HAL_TIM_Base_MspInit+0xa8>)
 8002f80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f84:	6613      	str	r3, [r2, #96]	; 0x60
 8002f86:	4b22      	ldr	r3, [pc, #136]	; (8003010 <HAL_TIM_Base_MspInit+0xa8>)
 8002f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f92:	e034      	b.n	8002ffe <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f9e:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <HAL_TIM_Base_MspInit+0xa8>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	4a1b      	ldr	r2, [pc, #108]	; (8003010 <HAL_TIM_Base_MspInit+0xa8>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8002faa:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_TIM_Base_MspInit+0xa8>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]
}
 8002fb6:	e022      	b.n	8002ffe <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a15      	ldr	r2, [pc, #84]	; (8003014 <HAL_TIM_Base_MspInit+0xac>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d10c      	bne.n	8002fdc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fc2:	4b13      	ldr	r3, [pc, #76]	; (8003010 <HAL_TIM_Base_MspInit+0xa8>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <HAL_TIM_Base_MspInit+0xa8>)
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <HAL_TIM_Base_MspInit+0xa8>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
}
 8002fda:	e010      	b.n	8002ffe <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0d      	ldr	r2, [pc, #52]	; (8003018 <HAL_TIM_Base_MspInit+0xb0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d10b      	bne.n	8002ffe <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <HAL_TIM_Base_MspInit+0xa8>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fea:	4a09      	ldr	r2, [pc, #36]	; (8003010 <HAL_TIM_Base_MspInit+0xa8>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <HAL_TIM_Base_MspInit+0xa8>)
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
}
 8002ffe:	bf00      	nop
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40021000 	.word	0x40021000
 8003014:	40000400 	.word	0x40000400
 8003018:	40000800 	.word	0x40000800

0800301c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	; 0x28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a23      	ldr	r2, [pc, #140]	; (80030c8 <HAL_TIM_MspPostInit+0xac>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d11e      	bne.n	800307c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	4b23      	ldr	r3, [pc, #140]	; (80030cc <HAL_TIM_MspPostInit+0xb0>)
 8003040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003042:	4a22      	ldr	r2, [pc, #136]	; (80030cc <HAL_TIM_MspPostInit+0xb0>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800304a:	4b20      	ldr	r3, [pc, #128]	; (80030cc <HAL_TIM_MspPostInit+0xb0>)
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8003056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800305a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003064:	2300      	movs	r3, #0
 8003066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003068:	2306      	movs	r3, #6
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4619      	mov	r1, r3
 8003072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003076:	f001 ffa7 	bl	8004fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800307a:	e020      	b.n	80030be <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <HAL_TIM_MspPostInit+0xb4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d11b      	bne.n	80030be <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003086:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_TIM_MspPostInit+0xb0>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308a:	4a10      	ldr	r2, [pc, #64]	; (80030cc <HAL_TIM_MspPostInit+0xb0>)
 800308c:	f043 0302 	orr.w	r3, r3, #2
 8003090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003092:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <HAL_TIM_MspPostInit+0xb0>)
 8003094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800309e:	2301      	movs	r3, #1
 80030a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	2302      	movs	r3, #2
 80030a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a6:	2300      	movs	r3, #0
 80030a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030aa:	2300      	movs	r3, #0
 80030ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030ae:	2302      	movs	r3, #2
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80030b2:	f107 0314 	add.w	r3, r7, #20
 80030b6:	4619      	mov	r1, r3
 80030b8:	4806      	ldr	r0, [pc, #24]	; (80030d4 <HAL_TIM_MspPostInit+0xb8>)
 80030ba:	f001 ff85 	bl	8004fc8 <HAL_GPIO_Init>
}
 80030be:	bf00      	nop
 80030c0:	3728      	adds	r7, #40	; 0x28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40000400 	.word	0x40000400
 80030d4:	48000400 	.word	0x48000400

080030d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08c      	sub	sp, #48	; 0x30
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	605a      	str	r2, [r3, #4]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a48      	ldr	r2, [pc, #288]	; (8003218 <HAL_UART_MspInit+0x140>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d12a      	bne.n	8003150 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030fa:	4b48      	ldr	r3, [pc, #288]	; (800321c <HAL_UART_MspInit+0x144>)
 80030fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fe:	4a47      	ldr	r2, [pc, #284]	; (800321c <HAL_UART_MspInit+0x144>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003104:	6613      	str	r3, [r2, #96]	; 0x60
 8003106:	4b45      	ldr	r3, [pc, #276]	; (800321c <HAL_UART_MspInit+0x144>)
 8003108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003112:	4b42      	ldr	r3, [pc, #264]	; (800321c <HAL_UART_MspInit+0x144>)
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003116:	4a41      	ldr	r2, [pc, #260]	; (800321c <HAL_UART_MspInit+0x144>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800311e:	4b3f      	ldr	r3, [pc, #252]	; (800321c <HAL_UART_MspInit+0x144>)
 8003120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800312a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800312e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800313c:	2307      	movs	r3, #7
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	4619      	mov	r1, r3
 8003146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800314a:	f001 ff3d 	bl	8004fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800314e:	e05e      	b.n	800320e <HAL_UART_MspInit+0x136>
  else if(huart->Instance==USART2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a32      	ldr	r2, [pc, #200]	; (8003220 <HAL_UART_MspInit+0x148>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d159      	bne.n	800320e <HAL_UART_MspInit+0x136>
    __HAL_RCC_USART2_CLK_ENABLE();
 800315a:	4b30      	ldr	r3, [pc, #192]	; (800321c <HAL_UART_MspInit+0x144>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315e:	4a2f      	ldr	r2, [pc, #188]	; (800321c <HAL_UART_MspInit+0x144>)
 8003160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003164:	6593      	str	r3, [r2, #88]	; 0x58
 8003166:	4b2d      	ldr	r3, [pc, #180]	; (800321c <HAL_UART_MspInit+0x144>)
 8003168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003172:	4b2a      	ldr	r3, [pc, #168]	; (800321c <HAL_UART_MspInit+0x144>)
 8003174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003176:	4a29      	ldr	r2, [pc, #164]	; (800321c <HAL_UART_MspInit+0x144>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800317e:	4b27      	ldr	r3, [pc, #156]	; (800321c <HAL_UART_MspInit+0x144>)
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800318a:	230c      	movs	r3, #12
 800318c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2300      	movs	r3, #0
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800319a:	2307      	movs	r3, #7
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319e:	f107 031c 	add.w	r3, r7, #28
 80031a2:	4619      	mov	r1, r3
 80031a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a8:	f001 ff0e 	bl	8004fc8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_UART_MspInit+0x14c>)
 80031ae:	4a1e      	ldr	r2, [pc, #120]	; (8003228 <HAL_UART_MspInit+0x150>)
 80031b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80031b2:	4b1c      	ldr	r3, [pc, #112]	; (8003224 <HAL_UART_MspInit+0x14c>)
 80031b4:	221a      	movs	r2, #26
 80031b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031b8:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <HAL_UART_MspInit+0x14c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031be:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_UART_MspInit+0x14c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031c4:	4b17      	ldr	r3, [pc, #92]	; (8003224 <HAL_UART_MspInit+0x14c>)
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_UART_MspInit+0x14c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_UART_MspInit+0x14c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80031d6:	4b13      	ldr	r3, [pc, #76]	; (8003224 <HAL_UART_MspInit+0x14c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <HAL_UART_MspInit+0x14c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80031e2:	4810      	ldr	r0, [pc, #64]	; (8003224 <HAL_UART_MspInit+0x14c>)
 80031e4:	f001 fcd0 	bl	8004b88 <HAL_DMA_Init>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 80031ee:	f7ff fdaf 	bl	8002d50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <HAL_UART_MspInit+0x14c>)
 80031f6:	679a      	str	r2, [r3, #120]	; 0x78
 80031f8:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <HAL_UART_MspInit+0x14c>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031fe:	2200      	movs	r2, #0
 8003200:	2100      	movs	r1, #0
 8003202:	2026      	movs	r0, #38	; 0x26
 8003204:	f001 fc8b 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003208:	2026      	movs	r0, #38	; 0x26
 800320a:	f001 fca2 	bl	8004b52 <HAL_NVIC_EnableIRQ>
}
 800320e:	bf00      	nop
 8003210:	3730      	adds	r7, #48	; 0x30
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40013800 	.word	0x40013800
 800321c:	40021000 	.word	0x40021000
 8003220:	40004400 	.word	0x40004400
 8003224:	200002a8 	.word	0x200002a8
 8003228:	40020008 	.word	0x40020008

0800322c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800323e:	e7fe      	b.n	800323e <HardFault_Handler+0x4>

08003240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003244:	e7fe      	b.n	8003244 <MemManage_Handler+0x4>

08003246 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003246:	b480      	push	{r7}
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800324a:	e7fe      	b.n	800324a <BusFault_Handler+0x4>

0800324c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003250:	e7fe      	b.n	8003250 <UsageFault_Handler+0x4>

08003252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800326e:	b480      	push	{r7}
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003280:	f000 f8d4 	bl	800342c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003284:	bf00      	nop
 8003286:	bd80      	pop	{r7, pc}

08003288 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800328c:	4802      	ldr	r0, [pc, #8]	; (8003298 <DMA1_Channel1_IRQHandler+0x10>)
 800328e:	f001 fd8a 	bl	8004da6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	200002a8 	.word	0x200002a8

0800329c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80032a0:	4802      	ldr	r0, [pc, #8]	; (80032ac <USART2_IRQHandler+0x10>)
 80032a2:	f005 f823 	bl	80082ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000600 	.word	0x20000600

080032b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80032b8:	4b11      	ldr	r3, [pc, #68]	; (8003300 <_sbrk+0x50>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d102      	bne.n	80032c6 <_sbrk+0x16>
		heap_end = &end;
 80032c0:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <_sbrk+0x50>)
 80032c2:	4a10      	ldr	r2, [pc, #64]	; (8003304 <_sbrk+0x54>)
 80032c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80032c6:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <_sbrk+0x50>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <_sbrk+0x50>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4413      	add	r3, r2
 80032d4:	466a      	mov	r2, sp
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d907      	bls.n	80032ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80032da:	f006 f9fd 	bl	80096d8 <__errno>
 80032de:	4602      	mov	r2, r0
 80032e0:	230c      	movs	r3, #12
 80032e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80032e4:	f04f 33ff 	mov.w	r3, #4294967295
 80032e8:	e006      	b.n	80032f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <_sbrk+0x50>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	4a03      	ldr	r2, [pc, #12]	; (8003300 <_sbrk+0x50>)
 80032f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80032f6:	68fb      	ldr	r3, [r7, #12]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000270 	.word	0x20000270
 8003304:	20000698 	.word	0x20000698

08003308 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <SystemInit+0x28>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	4a07      	ldr	r2, [pc, #28]	; (8003330 <SystemInit+0x28>)
 8003314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <SystemInit+0x28>)
 800331e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003322:	609a      	str	r2, [r3, #8]
#endif
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003334:	480d      	ldr	r0, [pc, #52]	; (800336c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003336:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003338:	480d      	ldr	r0, [pc, #52]	; (8003370 <LoopForever+0x6>)
  ldr r1, =_edata
 800333a:	490e      	ldr	r1, [pc, #56]	; (8003374 <LoopForever+0xa>)
  ldr r2, =_sidata
 800333c:	4a0e      	ldr	r2, [pc, #56]	; (8003378 <LoopForever+0xe>)
  movs r3, #0
 800333e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003340:	e002      	b.n	8003348 <LoopCopyDataInit>

08003342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003346:	3304      	adds	r3, #4

08003348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800334a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800334c:	d3f9      	bcc.n	8003342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800334e:	4a0b      	ldr	r2, [pc, #44]	; (800337c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003350:	4c0b      	ldr	r4, [pc, #44]	; (8003380 <LoopForever+0x16>)
  movs r3, #0
 8003352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003354:	e001      	b.n	800335a <LoopFillZerobss>

08003356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003358:	3204      	adds	r2, #4

0800335a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800335a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800335c:	d3fb      	bcc.n	8003356 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800335e:	f7ff ffd3 	bl	8003308 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003362:	f006 f9bf 	bl	80096e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003366:	f7fe fb07 	bl	8001978 <main>

0800336a <LoopForever>:

LoopForever:
    b LoopForever
 800336a:	e7fe      	b.n	800336a <LoopForever>
  ldr   r0, =_estack
 800336c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003374:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003378:	0800c6ac 	.word	0x0800c6ac
  ldr r2, =_sbss
 800337c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003380:	20000694 	.word	0x20000694

08003384 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003384:	e7fe      	b.n	8003384 <ADC1_2_IRQHandler>

08003386 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003390:	2003      	movs	r0, #3
 8003392:	f001 fbb9 	bl	8004b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003396:	2000      	movs	r0, #0
 8003398:	f000 f80e 	bl	80033b8 <HAL_InitTick>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	71fb      	strb	r3, [r7, #7]
 80033a6:	e001      	b.n	80033ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033a8:	f7ff fcda 	bl	8002d60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033ac:	79fb      	ldrb	r3, [r7, #7]

}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80033c4:	4b16      	ldr	r3, [pc, #88]	; (8003420 <HAL_InitTick+0x68>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d022      	beq.n	8003412 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80033cc:	4b15      	ldr	r3, [pc, #84]	; (8003424 <HAL_InitTick+0x6c>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b13      	ldr	r3, [pc, #76]	; (8003420 <HAL_InitTick+0x68>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 fbc4 	bl	8004b6e <HAL_SYSTICK_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10f      	bne.n	800340c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	d809      	bhi.n	8003406 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033f2:	2200      	movs	r2, #0
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	f04f 30ff 	mov.w	r0, #4294967295
 80033fa:	f001 fb90 	bl	8004b1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <HAL_InitTick+0x70>)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	e007      	b.n	8003416 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
 800340a:	e004      	b.n	8003416 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
 8003410:	e001      	b.n	8003416 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003416:	7bfb      	ldrb	r3, [r7, #15]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000028 	.word	0x20000028
 8003424:	20000020 	.word	0x20000020
 8003428:	20000024 	.word	0x20000024

0800342c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_IncTick+0x1c>)
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_IncTick+0x20>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4413      	add	r3, r2
 800343a:	4a03      	ldr	r2, [pc, #12]	; (8003448 <HAL_IncTick+0x1c>)
 800343c:	6013      	str	r3, [r2, #0]
}
 800343e:	bf00      	nop
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	2000068c 	.word	0x2000068c
 800344c:	20000028 	.word	0x20000028

08003450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return uwTick;
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <HAL_GetTick+0x14>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	2000068c 	.word	0x2000068c

08003468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003470:	f7ff ffee 	bl	8003450 <HAL_GetTick>
 8003474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d004      	beq.n	800348c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_Delay+0x40>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4413      	add	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800348c:	bf00      	nop
 800348e:	f7ff ffdf 	bl	8003450 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	429a      	cmp	r2, r3
 800349c:	d8f7      	bhi.n	800348e <HAL_Delay+0x26>
  {
  }
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000028 	.word	0x20000028

080034ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	609a      	str	r2, [r3, #8]
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3360      	adds	r3, #96	; 0x60
 8003526:	461a      	mov	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <LL_ADC_SetOffset+0x44>)
 8003536:	4013      	ands	r3, r2
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	4313      	orrs	r3, r2
 8003544:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	03fff000 	.word	0x03fff000

0800355c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3360      	adds	r3, #96	; 0x60
 800356a:	461a      	mov	r2, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3360      	adds	r3, #96	; 0x60
 8003598:	461a      	mov	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80035be:	b480      	push	{r7}
 80035c0:	b087      	sub	sp, #28
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3360      	adds	r3, #96	; 0x60
 80035ce:	461a      	mov	r2, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80035e8:	bf00      	nop
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3360      	adds	r3, #96	; 0x60
 8003604:	461a      	mov	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	431a      	orrs	r2, r3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	615a      	str	r2, [r3, #20]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003664:	2301      	movs	r3, #1
 8003666:	e000      	b.n	800366a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003676:	b480      	push	{r7}
 8003678:	b087      	sub	sp, #28
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3330      	adds	r3, #48	; 0x30
 8003686:	461a      	mov	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	0a1b      	lsrs	r3, r3, #8
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	4413      	add	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	211f      	movs	r1, #31
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	401a      	ands	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	0e9b      	lsrs	r3, r3, #26
 80036ae:	f003 011f 	and.w	r1, r3, #31
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	431a      	orrs	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b087      	sub	sp, #28
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	3314      	adds	r3, #20
 80036de:	461a      	mov	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	0e5b      	lsrs	r3, r3, #25
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	4413      	add	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	0d1b      	lsrs	r3, r3, #20
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	2107      	movs	r1, #7
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	401a      	ands	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	0d1b      	lsrs	r3, r3, #20
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	431a      	orrs	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003718:	bf00      	nop
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373c:	43db      	mvns	r3, r3
 800373e:	401a      	ands	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f003 0318 	and.w	r3, r3, #24
 8003746:	4908      	ldr	r1, [pc, #32]	; (8003768 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003748:	40d9      	lsrs	r1, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	400b      	ands	r3, r1
 800374e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003752:	431a      	orrs	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800375a:	bf00      	nop
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	0007ffff 	.word	0x0007ffff

0800376c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 031f 	and.w	r3, r3, #31
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80037b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6093      	str	r3, [r2, #8]
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037dc:	d101      	bne.n	80037e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003804:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800382c:	d101      	bne.n	8003832 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003850:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003854:	f043 0201 	orr.w	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <LL_ADC_IsEnabled+0x18>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <LL_ADC_IsEnabled+0x1a>
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800389e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038a2:	f043 0204 	orr.w	r2, r3, #4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d101      	bne.n	80038ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d101      	bne.n	80038f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b089      	sub	sp, #36	; 0x24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003910:	2300      	movs	r3, #0
 8003912:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e16b      	b.n	8003bf6 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003928:	2b00      	cmp	r3, #0
 800392a:	d109      	bne.n	8003940 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff fa3b 	bl	8002da8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff3f 	bl	80037c8 <LL_ADC_IsDeepPowerDownEnabled>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d004      	beq.n	800395a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff25 	bl	80037a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff ff5a 	bl	8003818 <LL_ADC_IsInternalRegulatorEnabled>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d113      	bne.n	8003992 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff ff3e 	bl	80037f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003974:	4ba2      	ldr	r3, [pc, #648]	; (8003c00 <HAL_ADC_Init+0x2fc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	099b      	lsrs	r3, r3, #6
 800397a:	4aa2      	ldr	r2, [pc, #648]	; (8003c04 <HAL_ADC_Init+0x300>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	099b      	lsrs	r3, r3, #6
 8003982:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003984:	e002      	b.n	800398c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	3b01      	subs	r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f9      	bne.n	8003986 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ff3e 	bl	8003818 <LL_ADC_IsInternalRegulatorEnabled>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10d      	bne.n	80039be <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a6:	f043 0210 	orr.w	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b2:	f043 0201 	orr.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff ff77 	bl	80038b6 <LL_ADC_REG_IsConversionOngoing>
 80039c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f040 8106 	bne.w	8003be4 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f040 8102 	bne.w	8003be4 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039e8:	f043 0202 	orr.w	r2, r3, #2
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff37 	bl	8003868 <LL_ADC_IsEnabled>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d111      	bne.n	8003a24 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a04:	f7ff ff30 	bl	8003868 <LL_ADC_IsEnabled>
 8003a08:	4604      	mov	r4, r0
 8003a0a:	487f      	ldr	r0, [pc, #508]	; (8003c08 <HAL_ADC_Init+0x304>)
 8003a0c:	f7ff ff2c 	bl	8003868 <LL_ADC_IsEnabled>
 8003a10:	4603      	mov	r3, r0
 8003a12:	4323      	orrs	r3, r4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d105      	bne.n	8003a24 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	487b      	ldr	r0, [pc, #492]	; (8003c0c <HAL_ADC_Init+0x308>)
 8003a20:	f7ff fd44 	bl	80034ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7f5b      	ldrb	r3, [r3, #29]
 8003a28:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a2e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003a34:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003a3a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a42:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d106      	bne.n	8003a60 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	3b01      	subs	r3, #1
 8003a58:	045b      	lsls	r3, r3, #17
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d009      	beq.n	8003a7c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	4b63      	ldr	r3, [pc, #396]	; (8003c10 <HAL_ADC_Init+0x30c>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	69b9      	ldr	r1, [r7, #24]
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff ff03 	bl	80038b6 <LL_ADC_REG_IsConversionOngoing>
 8003ab0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff10 	bl	80038dc <LL_ADC_INJ_IsConversionOngoing>
 8003abc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d16d      	bne.n	8003ba0 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d16a      	bne.n	8003ba0 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ace:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ad6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae6:	f023 0302 	bic.w	r3, r3, #2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	69b9      	ldr	r1, [r7, #24]
 8003af0:	430b      	orrs	r3, r1
 8003af2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d017      	beq.n	8003b2c <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6911      	ldr	r1, [r2, #16]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	430b      	orrs	r3, r1
 8003b26:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003b2a:	e013      	b.n	8003b54 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691a      	ldr	r2, [r3, #16]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b50:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d118      	bne.n	8003b90 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b68:	f023 0304 	bic.w	r3, r3, #4
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b74:	4311      	orrs	r1, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b7a:	4311      	orrs	r1, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b80:	430a      	orrs	r2, r1
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	611a      	str	r2, [r3, #16]
 8003b8e:	e007      	b.n	8003ba0 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d10c      	bne.n	8003bc2 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f023 010f 	bic.w	r1, r3, #15
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	1e5a      	subs	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	631a      	str	r2, [r3, #48]	; 0x30
 8003bc0:	e007      	b.n	8003bd2 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 020f 	bic.w	r2, r2, #15
 8003bd0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd6:	f023 0303 	bic.w	r3, r3, #3
 8003bda:	f043 0201 	orr.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003be2:	e007      	b.n	8003bf4 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	f043 0210 	orr.w	r2, r3, #16
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3724      	adds	r7, #36	; 0x24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd90      	pop	{r4, r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000020 	.word	0x20000020
 8003c04:	053e2d63 	.word	0x053e2d63
 8003c08:	50000100 	.word	0x50000100
 8003c0c:	50000300 	.word	0x50000300
 8003c10:	fff04007 	.word	0xfff04007

08003c14 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c1c:	4859      	ldr	r0, [pc, #356]	; (8003d84 <HAL_ADC_Start+0x170>)
 8003c1e:	f7ff fda5 	bl	800376c <LL_ADC_GetMultimode>
 8003c22:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fe44 	bl	80038b6 <LL_ADC_REG_IsConversionOngoing>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f040 809f 	bne.w	8003d74 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_Start+0x30>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e09a      	b.n	8003d7a <HAL_ADC_Start+0x166>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fd6b 	bl	8004728 <ADC_Enable>
 8003c52:	4603      	mov	r3, r0
 8003c54:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f040 8086 	bne.w	8003d6a <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a44      	ldr	r2, [pc, #272]	; (8003d88 <HAL_ADC_Start+0x174>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d002      	beq.n	8003c82 <HAL_ADC_Start+0x6e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	e001      	b.n	8003c86 <HAL_ADC_Start+0x72>
 8003c82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d002      	beq.n	8003c94 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d105      	bne.n	8003ca0 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cac:	d106      	bne.n	8003cbc <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb2:	f023 0206 	bic.w	r2, r3, #6
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	661a      	str	r2, [r3, #96]	; 0x60
 8003cba:	e002      	b.n	8003cc2 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	221c      	movs	r2, #28
 8003cc8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2c      	ldr	r2, [pc, #176]	; (8003d88 <HAL_ADC_Start+0x174>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d002      	beq.n	8003ce2 <HAL_ADC_Start+0xce>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	e001      	b.n	8003ce6 <HAL_ADC_Start+0xd2>
 8003ce2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d008      	beq.n	8003d00 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	2b05      	cmp	r3, #5
 8003cf8:	d002      	beq.n	8003d00 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b09      	cmp	r3, #9
 8003cfe:	d114      	bne.n	8003d2a <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fdb3 	bl	800388e <LL_ADC_REG_StartConversion>
 8003d28:	e026      	b.n	8003d78 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a13      	ldr	r2, [pc, #76]	; (8003d88 <HAL_ADC_Start+0x174>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d002      	beq.n	8003d46 <HAL_ADC_Start+0x132>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	e001      	b.n	8003d4a <HAL_ADC_Start+0x136>
 8003d46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003d4a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00f      	beq.n	8003d78 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d68:	e006      	b.n	8003d78 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003d72:	e001      	b.n	8003d78 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
 8003d76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	50000300 	.word	0x50000300
 8003d88:	50000100 	.word	0x50000100

08003d8c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d96:	4863      	ldr	r0, [pc, #396]	; (8003f24 <HAL_ADC_PollForConversion+0x198>)
 8003d98:	f7ff fce8 	bl	800376c <LL_ADC_GetMultimode>
 8003d9c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d102      	bne.n	8003dac <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003da6:	2308      	movs	r3, #8
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	e02a      	b.n	8003e02 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d005      	beq.n	8003dbe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d002      	beq.n	8003dbe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b09      	cmp	r3, #9
 8003dbc:	d111      	bne.n	8003de2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	f043 0220 	orr.w	r2, r3, #32
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e09f      	b.n	8003f1c <HAL_ADC_PollForConversion+0x190>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003ddc:	2304      	movs	r3, #4
 8003dde:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003de0:	e00f      	b.n	8003e02 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003de2:	4850      	ldr	r0, [pc, #320]	; (8003f24 <HAL_ADC_PollForConversion+0x198>)
 8003de4:	f7ff fcd0 	bl	8003788 <LL_ADC_GetMultiDMATransfer>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d007      	beq.n	8003dfe <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df2:	f043 0220 	orr.w	r2, r3, #32
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e08e      	b.n	8003f1c <HAL_ADC_PollForConversion+0x190>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003dfe:	2304      	movs	r3, #4
 8003e00:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003e02:	f7ff fb25 	bl	8003450 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e08:	e01a      	b.n	8003e40 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d016      	beq.n	8003e40 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003e12:	f7ff fb1d 	bl	8003450 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d302      	bcc.n	8003e28 <HAL_ADC_PollForConversion+0x9c>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10b      	bne.n	8003e40 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	f043 0204 	orr.w	r2, r3, #4
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e06d      	b.n	8003f1c <HAL_ADC_PollForConversion+0x190>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0dd      	beq.n	8003e0a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fbf6 	bl	8003650 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d01c      	beq.n	8003ea4 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	7f5b      	ldrb	r3, [r3, #29]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d118      	bne.n	8003ea4 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d111      	bne.n	8003ea4 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	f043 0201 	orr.w	r2, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1f      	ldr	r2, [pc, #124]	; (8003f28 <HAL_ADC_PollForConversion+0x19c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d002      	beq.n	8003eb4 <HAL_ADC_PollForConversion+0x128>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	e001      	b.n	8003eb8 <HAL_ADC_PollForConversion+0x12c>
 8003eb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d008      	beq.n	8003ed2 <HAL_ADC_PollForConversion+0x146>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <HAL_ADC_PollForConversion+0x146>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b05      	cmp	r3, #5
 8003eca:	d002      	beq.n	8003ed2 <HAL_ADC_PollForConversion+0x146>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2b09      	cmp	r3, #9
 8003ed0:	d104      	bne.n	8003edc <HAL_ADC_PollForConversion+0x150>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	61bb      	str	r3, [r7, #24]
 8003eda:	e00d      	b.n	8003ef8 <HAL_ADC_PollForConversion+0x16c>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <HAL_ADC_PollForConversion+0x19c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d002      	beq.n	8003eec <HAL_ADC_PollForConversion+0x160>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	e001      	b.n	8003ef0 <HAL_ADC_PollForConversion+0x164>
 8003eec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ef0:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d104      	bne.n	8003f08 <HAL_ADC_PollForConversion+0x17c>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2208      	movs	r2, #8
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e008      	b.n	8003f1a <HAL_ADC_PollForConversion+0x18e>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_ADC_PollForConversion+0x18e>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	220c      	movs	r2, #12
 8003f18:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3720      	adds	r7, #32
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	50000300 	.word	0x50000300
 8003f28:	50000100 	.word	0x50000100

08003f2c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b0b6      	sub	sp, #216	; 0xd8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x22>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e3c7      	b.n	80046fa <HAL_ADC_ConfigChannel+0x7b2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fc9d 	bl	80038b6 <LL_ADC_REG_IsConversionOngoing>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f040 83ac 	bne.w	80046dc <HAL_ADC_ConfigChannel+0x794>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	f7ff fb70 	bl	8003676 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fc8b 	bl	80038b6 <LL_ADC_REG_IsConversionOngoing>
 8003fa0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fc97 	bl	80038dc <LL_ADC_INJ_IsConversionOngoing>
 8003fae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f040 81d9 	bne.w	800436e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f040 81d4 	bne.w	800436e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fce:	d10f      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f7ff fb77 	bl	80036ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fb1e 	bl	800362a <LL_ADC_SetSamplingTimeCommonConfig>
 8003fee:	e00e      	b.n	800400e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6819      	ldr	r1, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f7ff fb66 	bl	80036ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2100      	movs	r1, #0
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fb0e 	bl	800362a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	695a      	ldr	r2, [r3, #20]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	08db      	lsrs	r3, r3, #3
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b04      	cmp	r3, #4
 800402e:	d022      	beq.n	8004076 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6919      	ldr	r1, [r3, #16]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004040:	f7ff fa68 	bl	8003514 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6919      	ldr	r1, [r3, #16]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	461a      	mov	r2, r3
 8004052:	f7ff fab4 	bl	80035be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6919      	ldr	r1, [r3, #16]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	7f1b      	ldrb	r3, [r3, #28]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d102      	bne.n	800406c <HAL_ADC_ConfigChannel+0x124>
 8004066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800406a:	e000      	b.n	800406e <HAL_ADC_ConfigChannel+0x126>
 800406c:	2300      	movs	r3, #0
 800406e:	461a      	mov	r2, r3
 8004070:	f7ff fac0 	bl	80035f4 <LL_ADC_SetOffsetSaturation>
 8004074:	e17b      	b.n	800436e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fa6d 	bl	800355c <LL_ADC_GetOffsetChannel>
 8004082:	4603      	mov	r3, r0
 8004084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10a      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x15a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fa62 	bl	800355c <LL_ADC_GetOffsetChannel>
 8004098:	4603      	mov	r3, r0
 800409a:	0e9b      	lsrs	r3, r3, #26
 800409c:	f003 021f 	and.w	r2, r3, #31
 80040a0:	e01e      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x198>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fa57 	bl	800355c <LL_ADC_GetOffsetChannel>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040b8:	fa93 f3a3 	rbit	r3, r3
 80040bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80040d0:	2320      	movs	r3, #32
 80040d2:	e004      	b.n	80040de <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80040d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040d8:	fab3 f383 	clz	r3, r3
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d105      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x1b0>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	0e9b      	lsrs	r3, r3, #26
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	e018      	b.n	800412a <HAL_ADC_ConfigChannel+0x1e2>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004104:	fa93 f3a3 	rbit	r3, r3
 8004108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800410c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004114:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800411c:	2320      	movs	r3, #32
 800411e:	e004      	b.n	800412a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004120:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004124:	fab3 f383 	clz	r3, r3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	429a      	cmp	r2, r3
 800412c:	d106      	bne.n	800413c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff fa26 	bl	8003588 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2101      	movs	r1, #1
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fa0a 	bl	800355c <LL_ADC_GetOffsetChannel>
 8004148:	4603      	mov	r3, r0
 800414a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x220>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2101      	movs	r1, #1
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff f9ff 	bl	800355c <LL_ADC_GetOffsetChannel>
 800415e:	4603      	mov	r3, r0
 8004160:	0e9b      	lsrs	r3, r3, #26
 8004162:	f003 021f 	and.w	r2, r3, #31
 8004166:	e01e      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x25e>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2101      	movs	r1, #1
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff f9f4 	bl	800355c <LL_ADC_GetOffsetChannel>
 8004174:	4603      	mov	r3, r0
 8004176:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800418a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800418e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004196:	2320      	movs	r3, #32
 8004198:	e004      	b.n	80041a4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800419a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800419e:	fab3 f383 	clz	r3, r3
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d105      	bne.n	80041be <HAL_ADC_ConfigChannel+0x276>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	0e9b      	lsrs	r3, r3, #26
 80041b8:	f003 031f 	and.w	r3, r3, #31
 80041bc:	e018      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x2a8>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041ca:	fa93 f3a3 	rbit	r3, r3
 80041ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80041d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80041d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80041da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80041e2:	2320      	movs	r3, #32
 80041e4:	e004      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80041e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041ea:	fab3 f383 	clz	r3, r3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d106      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2200      	movs	r2, #0
 80041fa:	2101      	movs	r1, #1
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff f9c3 	bl	8003588 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2102      	movs	r1, #2
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff f9a7 	bl	800355c <LL_ADC_GetOffsetChannel>
 800420e:	4603      	mov	r3, r0
 8004210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10a      	bne.n	800422e <HAL_ADC_ConfigChannel+0x2e6>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2102      	movs	r1, #2
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff f99c 	bl	800355c <LL_ADC_GetOffsetChannel>
 8004224:	4603      	mov	r3, r0
 8004226:	0e9b      	lsrs	r3, r3, #26
 8004228:	f003 021f 	and.w	r2, r3, #31
 800422c:	e01e      	b.n	800426c <HAL_ADC_ConfigChannel+0x324>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2102      	movs	r1, #2
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff f991 	bl	800355c <LL_ADC_GetOffsetChannel>
 800423a:	4603      	mov	r3, r0
 800423c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004244:	fa93 f3a3 	rbit	r3, r3
 8004248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800424c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004250:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004254:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800425c:	2320      	movs	r3, #32
 800425e:	e004      	b.n	800426a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004260:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004264:	fab3 f383 	clz	r3, r3
 8004268:	b2db      	uxtb	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x33c>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	0e9b      	lsrs	r3, r3, #26
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	e016      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x36a>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004290:	fa93 f3a3 	rbit	r3, r3
 8004294:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004296:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800429c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80042a4:	2320      	movs	r3, #32
 80042a6:	e004      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80042a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042ac:	fab3 f383 	clz	r3, r3
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d106      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2200      	movs	r2, #0
 80042bc:	2102      	movs	r1, #2
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff f962 	bl	8003588 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2103      	movs	r1, #3
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff f946 	bl	800355c <LL_ADC_GetOffsetChannel>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x3a8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2103      	movs	r1, #3
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff f93b 	bl	800355c <LL_ADC_GetOffsetChannel>
 80042e6:	4603      	mov	r3, r0
 80042e8:	0e9b      	lsrs	r3, r3, #26
 80042ea:	f003 021f 	and.w	r2, r3, #31
 80042ee:	e017      	b.n	8004320 <HAL_ADC_ConfigChannel+0x3d8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2103      	movs	r1, #3
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff f930 	bl	800355c <LL_ADC_GetOffsetChannel>
 80042fc:	4603      	mov	r3, r0
 80042fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004302:	fa93 f3a3 	rbit	r3, r3
 8004306:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004308:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800430a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800430c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004312:	2320      	movs	r3, #32
 8004314:	e003      	b.n	800431e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004318:	fab3 f383 	clz	r3, r3
 800431c:	b2db      	uxtb	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <HAL_ADC_ConfigChannel+0x3f0>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	0e9b      	lsrs	r3, r3, #26
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	e011      	b.n	800435c <HAL_ADC_ConfigChannel+0x414>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004340:	fa93 f3a3 	rbit	r3, r3
 8004344:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004348:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800434a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004350:	2320      	movs	r3, #32
 8004352:	e003      	b.n	800435c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004356:	fab3 f383 	clz	r3, r3
 800435a:	b2db      	uxtb	r3, r3
 800435c:	429a      	cmp	r2, r3
 800435e:	d106      	bne.n	800436e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2200      	movs	r2, #0
 8004366:	2103      	movs	r1, #3
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff f90d 	bl	8003588 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff fa78 	bl	8003868 <LL_ADC_IsEnabled>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	f040 8140 	bne.w	8004600 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6818      	ldr	r0, [r3, #0]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	6819      	ldr	r1, [r3, #0]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	461a      	mov	r2, r3
 800438e:	f7ff f9c9 	bl	8003724 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	4a8f      	ldr	r2, [pc, #572]	; (80045d4 <HAL_ADC_ConfigChannel+0x68c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	f040 8131 	bne.w	8004600 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10b      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x47e>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	0e9b      	lsrs	r3, r3, #26
 80043b4:	3301      	adds	r3, #1
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	2b09      	cmp	r3, #9
 80043bc:	bf94      	ite	ls
 80043be:	2301      	movls	r3, #1
 80043c0:	2300      	movhi	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	e019      	b.n	80043fa <HAL_ADC_ConfigChannel+0x4b2>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ce:	fa93 f3a3 	rbit	r3, r3
 80043d2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80043d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80043d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80043de:	2320      	movs	r3, #32
 80043e0:	e003      	b.n	80043ea <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80043e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e4:	fab3 f383 	clz	r3, r3
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	2b09      	cmp	r3, #9
 80043f2:	bf94      	ite	ls
 80043f4:	2301      	movls	r3, #1
 80043f6:	2300      	movhi	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d079      	beq.n	80044f2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <HAL_ADC_ConfigChannel+0x4d2>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	0e9b      	lsrs	r3, r3, #26
 8004410:	3301      	adds	r3, #1
 8004412:	069b      	lsls	r3, r3, #26
 8004414:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004418:	e015      	b.n	8004446 <HAL_ADC_ConfigChannel+0x4fe>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800442c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004432:	2320      	movs	r3, #32
 8004434:	e003      	b.n	800443e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004438:	fab3 f383 	clz	r3, r3
 800443c:	b2db      	uxtb	r3, r3
 800443e:	3301      	adds	r3, #1
 8004440:	069b      	lsls	r3, r3, #26
 8004442:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x51e>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	0e9b      	lsrs	r3, r3, #26
 8004458:	3301      	adds	r3, #1
 800445a:	f003 031f 	and.w	r3, r3, #31
 800445e:	2101      	movs	r1, #1
 8004460:	fa01 f303 	lsl.w	r3, r1, r3
 8004464:	e017      	b.n	8004496 <HAL_ADC_ConfigChannel+0x54e>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800446e:	fa93 f3a3 	rbit	r3, r3
 8004472:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004476:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800447e:	2320      	movs	r3, #32
 8004480:	e003      	b.n	800448a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004484:	fab3 f383 	clz	r3, r3
 8004488:	b2db      	uxtb	r3, r3
 800448a:	3301      	adds	r3, #1
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	2101      	movs	r1, #1
 8004492:	fa01 f303 	lsl.w	r3, r1, r3
 8004496:	ea42 0103 	orr.w	r1, r2, r3
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x574>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	0e9b      	lsrs	r3, r3, #26
 80044ac:	3301      	adds	r3, #1
 80044ae:	f003 021f 	and.w	r2, r3, #31
 80044b2:	4613      	mov	r3, r2
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	4413      	add	r3, r2
 80044b8:	051b      	lsls	r3, r3, #20
 80044ba:	e018      	b.n	80044ee <HAL_ADC_ConfigChannel+0x5a6>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80044ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80044ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80044d4:	2320      	movs	r3, #32
 80044d6:	e003      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80044d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044da:	fab3 f383 	clz	r3, r3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	3301      	adds	r3, #1
 80044e2:	f003 021f 	and.w	r2, r3, #31
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044ee:	430b      	orrs	r3, r1
 80044f0:	e081      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d107      	bne.n	800450e <HAL_ADC_ConfigChannel+0x5c6>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	0e9b      	lsrs	r3, r3, #26
 8004504:	3301      	adds	r3, #1
 8004506:	069b      	lsls	r3, r3, #26
 8004508:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800450c:	e015      	b.n	800453a <HAL_ADC_ConfigChannel+0x5f2>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004516:	fa93 f3a3 	rbit	r3, r3
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004526:	2320      	movs	r3, #32
 8004528:	e003      	b.n	8004532 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	fab3 f383 	clz	r3, r3
 8004530:	b2db      	uxtb	r3, r3
 8004532:	3301      	adds	r3, #1
 8004534:	069b      	lsls	r3, r3, #26
 8004536:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004542:	2b00      	cmp	r3, #0
 8004544:	d109      	bne.n	800455a <HAL_ADC_ConfigChannel+0x612>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	0e9b      	lsrs	r3, r3, #26
 800454c:	3301      	adds	r3, #1
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	2101      	movs	r1, #1
 8004554:	fa01 f303 	lsl.w	r3, r1, r3
 8004558:	e017      	b.n	800458a <HAL_ADC_ConfigChannel+0x642>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	fa93 f3a3 	rbit	r3, r3
 8004566:	61fb      	str	r3, [r7, #28]
  return result;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004572:	2320      	movs	r3, #32
 8004574:	e003      	b.n	800457e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	fab3 f383 	clz	r3, r3
 800457c:	b2db      	uxtb	r3, r3
 800457e:	3301      	adds	r3, #1
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2101      	movs	r1, #1
 8004586:	fa01 f303 	lsl.w	r3, r1, r3
 800458a:	ea42 0103 	orr.w	r1, r2, r3
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10d      	bne.n	80045b6 <HAL_ADC_ConfigChannel+0x66e>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	0e9b      	lsrs	r3, r3, #26
 80045a0:	3301      	adds	r3, #1
 80045a2:	f003 021f 	and.w	r2, r3, #31
 80045a6:	4613      	mov	r3, r2
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4413      	add	r3, r2
 80045ac:	3b1e      	subs	r3, #30
 80045ae:	051b      	lsls	r3, r3, #20
 80045b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045b4:	e01e      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x6ac>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	fa93 f3a3 	rbit	r3, r3
 80045c2:	613b      	str	r3, [r7, #16]
  return result;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d104      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80045ce:	2320      	movs	r3, #32
 80045d0:	e006      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x698>
 80045d2:	bf00      	nop
 80045d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	3301      	adds	r3, #1
 80045e2:	f003 021f 	and.w	r2, r3, #31
 80045e6:	4613      	mov	r3, r2
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4413      	add	r3, r2
 80045ec:	3b1e      	subs	r3, #30
 80045ee:	051b      	lsls	r3, r3, #20
 80045f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045f4:	430b      	orrs	r3, r1
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	6892      	ldr	r2, [r2, #8]
 80045fa:	4619      	mov	r1, r3
 80045fc:	f7ff f867 	bl	80036ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b3f      	ldr	r3, [pc, #252]	; (8004704 <HAL_ADC_ConfigChannel+0x7bc>)
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d070      	beq.n	80046ee <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800460c:	483e      	ldr	r0, [pc, #248]	; (8004708 <HAL_ADC_ConfigChannel+0x7c0>)
 800460e:	f7fe ff73 	bl	80034f8 <LL_ADC_GetCommonPathInternalCh>
 8004612:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a3c      	ldr	r2, [pc, #240]	; (800470c <HAL_ADC_ConfigChannel+0x7c4>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d004      	beq.n	800462a <HAL_ADC_ConfigChannel+0x6e2>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a3a      	ldr	r2, [pc, #232]	; (8004710 <HAL_ADC_ConfigChannel+0x7c8>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d126      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x730>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800462a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800462e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d120      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x730>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800463e:	d156      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004644:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004648:	4619      	mov	r1, r3
 800464a:	482f      	ldr	r0, [pc, #188]	; (8004708 <HAL_ADC_ConfigChannel+0x7c0>)
 800464c:	f7fe ff41 	bl	80034d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004650:	4b30      	ldr	r3, [pc, #192]	; (8004714 <HAL_ADC_ConfigChannel+0x7cc>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	099b      	lsrs	r3, r3, #6
 8004656:	4a30      	ldr	r2, [pc, #192]	; (8004718 <HAL_ADC_ConfigChannel+0x7d0>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	099a      	lsrs	r2, r3, #6
 800465e:	4613      	mov	r3, r2
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004668:	e002      	b.n	8004670 <HAL_ADC_ConfigChannel+0x728>
          {
            wait_loop_index--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3b01      	subs	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f9      	bne.n	800466a <HAL_ADC_ConfigChannel+0x722>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004676:	e03a      	b.n	80046ee <HAL_ADC_ConfigChannel+0x7a6>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a27      	ldr	r2, [pc, #156]	; (800471c <HAL_ADC_ConfigChannel+0x7d4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d113      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x762>
 8004682:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10d      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x762>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a23      	ldr	r2, [pc, #140]	; (8004720 <HAL_ADC_ConfigChannel+0x7d8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d02a      	beq.n	80046ee <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004698:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800469c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046a0:	4619      	mov	r1, r3
 80046a2:	4819      	ldr	r0, [pc, #100]	; (8004708 <HAL_ADC_ConfigChannel+0x7c0>)
 80046a4:	f7fe ff15 	bl	80034d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046a8:	e021      	b.n	80046ee <HAL_ADC_ConfigChannel+0x7a6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1d      	ldr	r2, [pc, #116]	; (8004724 <HAL_ADC_ConfigChannel+0x7dc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d11c      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d116      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a16      	ldr	r2, [pc, #88]	; (8004720 <HAL_ADC_ConfigChannel+0x7d8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d011      	beq.n	80046ee <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046d2:	4619      	mov	r1, r3
 80046d4:	480c      	ldr	r0, [pc, #48]	; (8004708 <HAL_ADC_ConfigChannel+0x7c0>)
 80046d6:	f7fe fefc 	bl	80034d2 <LL_ADC_SetCommonPathInternalCh>
 80046da:	e008      	b.n	80046ee <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e0:	f043 0220 	orr.w	r2, r3, #32
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80046f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	37d8      	adds	r7, #216	; 0xd8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	80080000 	.word	0x80080000
 8004708:	50000300 	.word	0x50000300
 800470c:	c3210000 	.word	0xc3210000
 8004710:	90c00010 	.word	0x90c00010
 8004714:	20000020 	.word	0x20000020
 8004718:	053e2d63 	.word	0x053e2d63
 800471c:	c7520000 	.word	0xc7520000
 8004720:	50000100 	.word	0x50000100
 8004724:	cb840000 	.word	0xcb840000

08004728 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff f897 	bl	8003868 <LL_ADC_IsEnabled>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d146      	bne.n	80047ce <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <ADC_Enable+0xb0>)
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00d      	beq.n	800476a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004752:	f043 0210 	orr.w	r2, r3, #16
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475e:	f043 0201 	orr.w	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e032      	b.n	80047d0 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff f866 	bl	8003840 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004774:	f7fe fe6c 	bl	8003450 <HAL_GetTick>
 8004778:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800477a:	e021      	b.n	80047c0 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff f871 	bl	8003868 <LL_ADC_IsEnabled>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff f855 	bl	8003840 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004796:	f7fe fe5b 	bl	8003450 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d90d      	bls.n	80047c0 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a8:	f043 0210 	orr.w	r2, r3, #16
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b4:	f043 0201 	orr.w	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e007      	b.n	80047d0 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d1d6      	bne.n	800477c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	8000003f 	.word	0x8000003f

080047dc <LL_ADC_IsEnabled>:
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <LL_ADC_IsEnabled+0x18>
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <LL_ADC_IsEnabled+0x1a>
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_ADC_REG_IsConversionOngoing>:
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b04      	cmp	r3, #4
 8004814:	d101      	bne.n	800481a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b0a1      	sub	sp, #132	; 0x84
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004842:	2302      	movs	r3, #2
 8004844:	e087      	b.n	8004956 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004856:	d102      	bne.n	800485e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8004858:	4b41      	ldr	r3, [pc, #260]	; (8004960 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 800485a:	60bb      	str	r3, [r7, #8]
 800485c:	e001      	b.n	8004862 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486c:	f043 0220 	orr.w	r2, r3, #32
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e06a      	b.n	8004956 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff ffbd 	bl	8004802 <LL_ADC_REG_IsConversionOngoing>
 8004888:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff ffb7 	bl	8004802 <LL_ADC_REG_IsConversionOngoing>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d14c      	bne.n	8004934 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800489a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800489c:	2b00      	cmp	r3, #0
 800489e:	d149      	bne.n	8004934 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048a0:	4b30      	ldr	r3, [pc, #192]	; (8004964 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80048a2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d028      	beq.n	80048fe <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80048ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	6859      	ldr	r1, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048be:	035b      	lsls	r3, r3, #13
 80048c0:	430b      	orrs	r3, r1
 80048c2:	431a      	orrs	r2, r3
 80048c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80048cc:	f7ff ff86 	bl	80047dc <LL_ADC_IsEnabled>
 80048d0:	4604      	mov	r4, r0
 80048d2:	4823      	ldr	r0, [pc, #140]	; (8004960 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80048d4:	f7ff ff82 	bl	80047dc <LL_ADC_IsEnabled>
 80048d8:	4603      	mov	r3, r0
 80048da:	4323      	orrs	r3, r4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d133      	bne.n	8004948 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80048e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80048e8:	f023 030f 	bic.w	r3, r3, #15
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	6811      	ldr	r1, [r2, #0]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	6892      	ldr	r2, [r2, #8]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	431a      	orrs	r2, r3
 80048f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048fa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048fc:	e024      	b.n	8004948 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80048fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004908:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800490a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800490e:	f7ff ff65 	bl	80047dc <LL_ADC_IsEnabled>
 8004912:	4604      	mov	r4, r0
 8004914:	4812      	ldr	r0, [pc, #72]	; (8004960 <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8004916:	f7ff ff61 	bl	80047dc <LL_ADC_IsEnabled>
 800491a:	4603      	mov	r3, r0
 800491c:	4323      	orrs	r3, r4
 800491e:	2b00      	cmp	r3, #0
 8004920:	d112      	bne.n	8004948 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800492a:	f023 030f 	bic.w	r3, r3, #15
 800492e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004930:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004932:	e009      	b.n	8004948 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004946:	e000      	b.n	800494a <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004948:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004952:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004956:	4618      	mov	r0, r3
 8004958:	3784      	adds	r7, #132	; 0x84
 800495a:	46bd      	mov	sp, r7
 800495c:	bd90      	pop	{r4, r7, pc}
 800495e:	bf00      	nop
 8004960:	50000100 	.word	0x50000100
 8004964:	50000300 	.word	0x50000300

08004968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <__NVIC_SetPriorityGrouping+0x44>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004984:	4013      	ands	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800499a:	4a04      	ldr	r2, [pc, #16]	; (80049ac <__NVIC_SetPriorityGrouping+0x44>)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	60d3      	str	r3, [r2, #12]
}
 80049a0:	bf00      	nop
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	e000ed00 	.word	0xe000ed00

080049b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b4:	4b04      	ldr	r3, [pc, #16]	; (80049c8 <__NVIC_GetPriorityGrouping+0x18>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	0a1b      	lsrs	r3, r3, #8
 80049ba:	f003 0307 	and.w	r3, r3, #7
}
 80049be:	4618      	mov	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	e000ed00 	.word	0xe000ed00

080049cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	db0b      	blt.n	80049f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	f003 021f 	and.w	r2, r3, #31
 80049e4:	4907      	ldr	r1, [pc, #28]	; (8004a04 <__NVIC_EnableIRQ+0x38>)
 80049e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2001      	movs	r0, #1
 80049ee:	fa00 f202 	lsl.w	r2, r0, r2
 80049f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	e000e100 	.word	0xe000e100

08004a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	6039      	str	r1, [r7, #0]
 8004a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	db0a      	blt.n	8004a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	490c      	ldr	r1, [pc, #48]	; (8004a54 <__NVIC_SetPriority+0x4c>)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	0112      	lsls	r2, r2, #4
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a30:	e00a      	b.n	8004a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	4908      	ldr	r1, [pc, #32]	; (8004a58 <__NVIC_SetPriority+0x50>)
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	3b04      	subs	r3, #4
 8004a40:	0112      	lsls	r2, r2, #4
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	440b      	add	r3, r1
 8004a46:	761a      	strb	r2, [r3, #24]
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	e000e100 	.word	0xe000e100
 8004a58:	e000ed00 	.word	0xe000ed00

08004a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b089      	sub	sp, #36	; 0x24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f1c3 0307 	rsb	r3, r3, #7
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	bf28      	it	cs
 8004a7a:	2304      	movcs	r3, #4
 8004a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3304      	adds	r3, #4
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d902      	bls.n	8004a8c <NVIC_EncodePriority+0x30>
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3b03      	subs	r3, #3
 8004a8a:	e000      	b.n	8004a8e <NVIC_EncodePriority+0x32>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004aae:	43d9      	mvns	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab4:	4313      	orrs	r3, r2
         );
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3724      	adds	r7, #36	; 0x24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad4:	d301      	bcc.n	8004ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e00f      	b.n	8004afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ada:	4a0a      	ldr	r2, [pc, #40]	; (8004b04 <SysTick_Config+0x40>)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ae2:	210f      	movs	r1, #15
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	f7ff ff8e 	bl	8004a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <SysTick_Config+0x40>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004af2:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <SysTick_Config+0x40>)
 8004af4:	2207      	movs	r2, #7
 8004af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	e000e010 	.word	0xe000e010

08004b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff ff29 	bl	8004968 <__NVIC_SetPriorityGrouping>
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	4603      	mov	r3, r0
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b2c:	f7ff ff40 	bl	80049b0 <__NVIC_GetPriorityGrouping>
 8004b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	6978      	ldr	r0, [r7, #20]
 8004b38:	f7ff ff90 	bl	8004a5c <NVIC_EncodePriority>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff5f 	bl	8004a08 <__NVIC_SetPriority>
}
 8004b4a:	bf00      	nop
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff ff33 	bl	80049cc <__NVIC_EnableIRQ>
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ffa4 	bl	8004ac4 <SysTick_Config>
 8004b7c:	4603      	mov	r3, r0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e08d      	b.n	8004cb6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	4b47      	ldr	r3, [pc, #284]	; (8004cc0 <HAL_DMA_Init+0x138>)
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d80f      	bhi.n	8004bc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	4b45      	ldr	r3, [pc, #276]	; (8004cc4 <HAL_DMA_Init+0x13c>)
 8004bae:	4413      	add	r3, r2
 8004bb0:	4a45      	ldr	r2, [pc, #276]	; (8004cc8 <HAL_DMA_Init+0x140>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	009a      	lsls	r2, r3, #2
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a42      	ldr	r2, [pc, #264]	; (8004ccc <HAL_DMA_Init+0x144>)
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40
 8004bc4:	e00e      	b.n	8004be4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	4b40      	ldr	r3, [pc, #256]	; (8004cd0 <HAL_DMA_Init+0x148>)
 8004bce:	4413      	add	r3, r2
 8004bd0:	4a3d      	ldr	r2, [pc, #244]	; (8004cc8 <HAL_DMA_Init+0x140>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	091b      	lsrs	r3, r3, #4
 8004bd8:	009a      	lsls	r2, r3, #2
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a3c      	ldr	r2, [pc, #240]	; (8004cd4 <HAL_DMA_Init+0x14c>)
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f964 	bl	8004f04 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c44:	d102      	bne.n	8004c4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c60:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d010      	beq.n	8004c8c <HAL_DMA_Init+0x104>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d80c      	bhi.n	8004c8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f984 	bl	8004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c88:	605a      	str	r2, [r3, #4]
 8004c8a:	e008      	b.n	8004c9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40020407 	.word	0x40020407
 8004cc4:	bffdfff8 	.word	0xbffdfff8
 8004cc8:	cccccccd 	.word	0xcccccccd
 8004ccc:	40020000 	.word	0x40020000
 8004cd0:	bffdfbf8 	.word	0xbffdfbf8
 8004cd4:	40020400 	.word	0x40020400

08004cd8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d00d      	beq.n	8004d0c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
 8004d0a:	e047      	b.n	8004d9c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 020e 	bic.w	r2, r2, #14
 8004d1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	f003 021f 	and.w	r2, r3, #31
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	2101      	movs	r1, #1
 8004d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d4e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004d58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00c      	beq.n	8004d7c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	4798      	blx	r3
    }
  }
  return status;
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	f003 031f 	and.w	r3, r3, #31
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	409a      	lsls	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d026      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x7a>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d021      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d107      	bne.n	8004dfa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0204 	bic.w	r2, r2, #4
 8004df8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	f003 021f 	and.w	r2, r3, #31
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	2104      	movs	r1, #4
 8004e08:	fa01 f202 	lsl.w	r2, r1, r2
 8004e0c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d071      	beq.n	8004efa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004e1e:	e06c      	b.n	8004efa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e24:	f003 031f 	and.w	r3, r3, #31
 8004e28:	2202      	movs	r2, #2
 8004e2a:	409a      	lsls	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d02e      	beq.n	8004e92 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d029      	beq.n	8004e92 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10b      	bne.n	8004e64 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 020a 	bic.w	r2, r2, #10
 8004e5a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e68:	f003 021f 	and.w	r2, r3, #31
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	2102      	movs	r1, #2
 8004e72:	fa01 f202 	lsl.w	r2, r1, r2
 8004e76:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d038      	beq.n	8004efa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004e90:	e033      	b.n	8004efa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	f003 031f 	and.w	r3, r3, #31
 8004e9a:	2208      	movs	r2, #8
 8004e9c:	409a      	lsls	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d02a      	beq.n	8004efc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d025      	beq.n	8004efc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 020e 	bic.w	r2, r2, #14
 8004ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	f003 021f 	and.w	r2, r3, #31
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	2101      	movs	r1, #1
 8004ece:	fa01 f202 	lsl.w	r2, r1, r2
 8004ed2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d004      	beq.n	8004efc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
}
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	4b16      	ldr	r3, [pc, #88]	; (8004f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d802      	bhi.n	8004f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004f18:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	e001      	b.n	8004f22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004f1e:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004f20:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	3b08      	subs	r3, #8
 8004f2e:	4a12      	ldr	r2, [pc, #72]	; (8004f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004f30:	fba2 2303 	umull	r2, r3, r2, r3
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3c:	089b      	lsrs	r3, r3, #2
 8004f3e:	009a      	lsls	r2, r3, #2
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4413      	add	r3, r2
 8004f44:	461a      	mov	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a0b      	ldr	r2, [pc, #44]	; (8004f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004f4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	2201      	movs	r2, #1
 8004f58:	409a      	lsls	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40020407 	.word	0x40020407
 8004f70:	40020800 	.word	0x40020800
 8004f74:	40020820 	.word	0x40020820
 8004f78:	cccccccd 	.word	0xcccccccd
 8004f7c:	40020880 	.word	0x40020880

08004f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a08      	ldr	r2, [pc, #32]	; (8004fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004fa2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	2201      	movs	r2, #1
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004fb4:	bf00      	nop
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	1000823f 	.word	0x1000823f
 8004fc4:	40020940 	.word	0x40020940

08004fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004fd6:	e15a      	b.n	800528e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	2101      	movs	r1, #1
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 814c 	beq.w	8005288 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d00b      	beq.n	8005010 <HAL_GPIO_Init+0x48>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d007      	beq.n	8005010 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005004:	2b11      	cmp	r3, #17
 8005006:	d003      	beq.n	8005010 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	2b12      	cmp	r3, #18
 800500e:	d130      	bne.n	8005072 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	2203      	movs	r2, #3
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4013      	ands	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005046:	2201      	movs	r2, #1
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	091b      	lsrs	r3, r3, #4
 800505c:	f003 0201 	and.w	r2, r3, #1
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	2203      	movs	r2, #3
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43db      	mvns	r3, r3
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4013      	ands	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d003      	beq.n	80050b2 <HAL_GPIO_Init+0xea>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b12      	cmp	r3, #18
 80050b0:	d123      	bne.n	80050fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	08da      	lsrs	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3208      	adds	r2, #8
 80050ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	220f      	movs	r2, #15
 80050ca:	fa02 f303 	lsl.w	r3, r2, r3
 80050ce:	43db      	mvns	r3, r3
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4013      	ands	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f003 0307 	and.w	r3, r3, #7
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	08da      	lsrs	r2, r3, #3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3208      	adds	r2, #8
 80050f4:	6939      	ldr	r1, [r7, #16]
 80050f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	2203      	movs	r2, #3
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	43db      	mvns	r3, r3
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4013      	ands	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f003 0203 	and.w	r2, r3, #3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	4313      	orrs	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 80a6 	beq.w	8005288 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800513c:	4b5b      	ldr	r3, [pc, #364]	; (80052ac <HAL_GPIO_Init+0x2e4>)
 800513e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005140:	4a5a      	ldr	r2, [pc, #360]	; (80052ac <HAL_GPIO_Init+0x2e4>)
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	6613      	str	r3, [r2, #96]	; 0x60
 8005148:	4b58      	ldr	r3, [pc, #352]	; (80052ac <HAL_GPIO_Init+0x2e4>)
 800514a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005154:	4a56      	ldr	r2, [pc, #344]	; (80052b0 <HAL_GPIO_Init+0x2e8>)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	089b      	lsrs	r3, r3, #2
 800515a:	3302      	adds	r3, #2
 800515c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	220f      	movs	r2, #15
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	43db      	mvns	r3, r3
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4013      	ands	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800517e:	d01f      	beq.n	80051c0 <HAL_GPIO_Init+0x1f8>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a4c      	ldr	r2, [pc, #304]	; (80052b4 <HAL_GPIO_Init+0x2ec>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d019      	beq.n	80051bc <HAL_GPIO_Init+0x1f4>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a4b      	ldr	r2, [pc, #300]	; (80052b8 <HAL_GPIO_Init+0x2f0>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d013      	beq.n	80051b8 <HAL_GPIO_Init+0x1f0>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a4a      	ldr	r2, [pc, #296]	; (80052bc <HAL_GPIO_Init+0x2f4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d00d      	beq.n	80051b4 <HAL_GPIO_Init+0x1ec>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a49      	ldr	r2, [pc, #292]	; (80052c0 <HAL_GPIO_Init+0x2f8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d007      	beq.n	80051b0 <HAL_GPIO_Init+0x1e8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a48      	ldr	r2, [pc, #288]	; (80052c4 <HAL_GPIO_Init+0x2fc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d101      	bne.n	80051ac <HAL_GPIO_Init+0x1e4>
 80051a8:	2305      	movs	r3, #5
 80051aa:	e00a      	b.n	80051c2 <HAL_GPIO_Init+0x1fa>
 80051ac:	2306      	movs	r3, #6
 80051ae:	e008      	b.n	80051c2 <HAL_GPIO_Init+0x1fa>
 80051b0:	2304      	movs	r3, #4
 80051b2:	e006      	b.n	80051c2 <HAL_GPIO_Init+0x1fa>
 80051b4:	2303      	movs	r3, #3
 80051b6:	e004      	b.n	80051c2 <HAL_GPIO_Init+0x1fa>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e002      	b.n	80051c2 <HAL_GPIO_Init+0x1fa>
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <HAL_GPIO_Init+0x1fa>
 80051c0:	2300      	movs	r3, #0
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	f002 0203 	and.w	r2, r2, #3
 80051c8:	0092      	lsls	r2, r2, #2
 80051ca:	4093      	lsls	r3, r2
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051d2:	4937      	ldr	r1, [pc, #220]	; (80052b0 <HAL_GPIO_Init+0x2e8>)
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	089b      	lsrs	r3, r3, #2
 80051d8:	3302      	adds	r3, #2
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80051e0:	4b39      	ldr	r3, [pc, #228]	; (80052c8 <HAL_GPIO_Init+0x300>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	43db      	mvns	r3, r3
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	4013      	ands	r3, r2
 80051ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005204:	4a30      	ldr	r2, [pc, #192]	; (80052c8 <HAL_GPIO_Init+0x300>)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800520a:	4b2f      	ldr	r3, [pc, #188]	; (80052c8 <HAL_GPIO_Init+0x300>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	43db      	mvns	r3, r3
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4013      	ands	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d003      	beq.n	800522e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800522e:	4a26      	ldr	r2, [pc, #152]	; (80052c8 <HAL_GPIO_Init+0x300>)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005234:	4b24      	ldr	r3, [pc, #144]	; (80052c8 <HAL_GPIO_Init+0x300>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	43db      	mvns	r3, r3
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4013      	ands	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005258:	4a1b      	ldr	r2, [pc, #108]	; (80052c8 <HAL_GPIO_Init+0x300>)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800525e:	4b1a      	ldr	r3, [pc, #104]	; (80052c8 <HAL_GPIO_Init+0x300>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	43db      	mvns	r3, r3
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4013      	ands	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005282:	4a11      	ldr	r2, [pc, #68]	; (80052c8 <HAL_GPIO_Init+0x300>)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	3301      	adds	r3, #1
 800528c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	fa22 f303 	lsr.w	r3, r2, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	f47f ae9d 	bne.w	8004fd8 <HAL_GPIO_Init+0x10>
  }
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000
 80052b0:	40010000 	.word	0x40010000
 80052b4:	48000400 	.word	0x48000400
 80052b8:	48000800 	.word	0x48000800
 80052bc:	48000c00 	.word	0x48000c00
 80052c0:	48001000 	.word	0x48001000
 80052c4:	48001400 	.word	0x48001400
 80052c8:	40010400 	.word	0x40010400

080052cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	807b      	strh	r3, [r7, #2]
 80052d8:	4613      	mov	r3, r2
 80052da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052dc:	787b      	ldrb	r3, [r7, #1]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80052e2:	887a      	ldrh	r2, [r7, #2]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052e8:	e002      	b.n	80052f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052ea:	887a      	ldrh	r2, [r7, #2]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800530e:	887a      	ldrh	r2, [r7, #2]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4013      	ands	r3, r2
 8005314:	041a      	lsls	r2, r3, #16
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	43d9      	mvns	r1, r3
 800531a:	887b      	ldrh	r3, [r7, #2]
 800531c:	400b      	ands	r3, r1
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	619a      	str	r2, [r3, #24]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e081      	b.n	8005446 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fd fda4 	bl	8002ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2224      	movs	r2, #36	; 0x24
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0201 	bic.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005380:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689a      	ldr	r2, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005390:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d107      	bne.n	80053aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053a6:	609a      	str	r2, [r3, #8]
 80053a8:	e006      	b.n	80053b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d104      	bne.n	80053ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	ea42 0103 	orr.w	r1, r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	021a      	lsls	r2, r3, #8
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69d9      	ldr	r1, [r3, #28]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	607a      	str	r2, [r7, #4]
 800545a:	461a      	mov	r2, r3
 800545c:	460b      	mov	r3, r1
 800545e:	817b      	strh	r3, [r7, #10]
 8005460:	4613      	mov	r3, r2
 8005462:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b20      	cmp	r3, #32
 800546e:	f040 80da 	bne.w	8005626 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_I2C_Master_Transmit+0x30>
 800547c:	2302      	movs	r3, #2
 800547e:	e0d3      	b.n	8005628 <HAL_I2C_Master_Transmit+0x1d8>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005488:	f7fd ffe2 	bl	8003450 <HAL_GetTick>
 800548c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	2319      	movs	r3, #25
 8005494:	2201      	movs	r2, #1
 8005496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f9e6 	bl	800586c <I2C_WaitOnFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e0be      	b.n	8005628 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2221      	movs	r2, #33	; 0x21
 80054ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2210      	movs	r2, #16
 80054b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	893a      	ldrh	r2, [r7, #8]
 80054ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	2bff      	cmp	r3, #255	; 0xff
 80054da:	d90e      	bls.n	80054fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	22ff      	movs	r2, #255	; 0xff
 80054e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	8979      	ldrh	r1, [r7, #10]
 80054ea:	4b51      	ldr	r3, [pc, #324]	; (8005630 <HAL_I2C_Master_Transmit+0x1e0>)
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 fb48 	bl	8005b88 <I2C_TransferConfig>
 80054f8:	e06c      	b.n	80055d4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005508:	b2da      	uxtb	r2, r3
 800550a:	8979      	ldrh	r1, [r7, #10]
 800550c:	4b48      	ldr	r3, [pc, #288]	; (8005630 <HAL_I2C_Master_Transmit+0x1e0>)
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 fb37 	bl	8005b88 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800551a:	e05b      	b.n	80055d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	6a39      	ldr	r1, [r7, #32]
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f9e3 	bl	80058ec <I2C_WaitOnTXISFlagUntilTimeout>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e07b      	b.n	8005628 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d034      	beq.n	80055d4 <HAL_I2C_Master_Transmit+0x184>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d130      	bne.n	80055d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	2200      	movs	r2, #0
 800557a:	2180      	movs	r1, #128	; 0x80
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f975 	bl	800586c <I2C_WaitOnFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e04d      	b.n	8005628 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	2bff      	cmp	r3, #255	; 0xff
 8005594:	d90e      	bls.n	80055b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	22ff      	movs	r2, #255	; 0xff
 800559a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	8979      	ldrh	r1, [r7, #10]
 80055a4:	2300      	movs	r3, #0
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 faeb 	bl	8005b88 <I2C_TransferConfig>
 80055b2:	e00f      	b.n	80055d4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	8979      	ldrh	r1, [r7, #10]
 80055c6:	2300      	movs	r3, #0
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fada 	bl	8005b88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d19e      	bne.n	800551c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	6a39      	ldr	r1, [r7, #32]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f9c2 	bl	800596c <I2C_WaitOnSTOPFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e01a      	b.n	8005628 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2220      	movs	r2, #32
 80055f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6859      	ldr	r1, [r3, #4]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <HAL_I2C_Master_Transmit+0x1e4>)
 8005606:	400b      	ands	r3, r1
 8005608:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	e000      	b.n	8005628 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005626:	2302      	movs	r3, #2
  }
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	80002000 	.word	0x80002000
 8005634:	fe00e800 	.word	0xfe00e800

08005638 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	461a      	mov	r2, r3
 8005644:	460b      	mov	r3, r1
 8005646:	817b      	strh	r3, [r7, #10]
 8005648:	4613      	mov	r3, r2
 800564a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b20      	cmp	r3, #32
 8005656:	f040 80db 	bne.w	8005810 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_I2C_Master_Receive+0x30>
 8005664:	2302      	movs	r3, #2
 8005666:	e0d4      	b.n	8005812 <HAL_I2C_Master_Receive+0x1da>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005670:	f7fd feee 	bl	8003450 <HAL_GetTick>
 8005674:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	2319      	movs	r3, #25
 800567c:	2201      	movs	r2, #1
 800567e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f8f2 	bl	800586c <I2C_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0bf      	b.n	8005812 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2222      	movs	r2, #34	; 0x22
 8005696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2210      	movs	r2, #16
 800569e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	893a      	ldrh	r2, [r7, #8]
 80056b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2bff      	cmp	r3, #255	; 0xff
 80056c2:	d90e      	bls.n	80056e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	22ff      	movs	r2, #255	; 0xff
 80056c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	8979      	ldrh	r1, [r7, #10]
 80056d2:	4b52      	ldr	r3, [pc, #328]	; (800581c <HAL_I2C_Master_Receive+0x1e4>)
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fa54 	bl	8005b88 <I2C_TransferConfig>
 80056e0:	e06d      	b.n	80057be <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	8979      	ldrh	r1, [r7, #10]
 80056f4:	4b49      	ldr	r3, [pc, #292]	; (800581c <HAL_I2C_Master_Receive+0x1e4>)
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 fa43 	bl	8005b88 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005702:	e05c      	b.n	80057be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	6a39      	ldr	r1, [r7, #32]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f96b 	bl	80059e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e07c      	b.n	8005812 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005734:	3b01      	subs	r3, #1
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	3b01      	subs	r3, #1
 8005744:	b29a      	uxth	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d034      	beq.n	80057be <HAL_I2C_Master_Receive+0x186>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005758:	2b00      	cmp	r3, #0
 800575a:	d130      	bne.n	80057be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	2200      	movs	r2, #0
 8005764:	2180      	movs	r1, #128	; 0x80
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 f880 	bl	800586c <I2C_WaitOnFlagUntilTimeout>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e04d      	b.n	8005812 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577a:	b29b      	uxth	r3, r3
 800577c:	2bff      	cmp	r3, #255	; 0xff
 800577e:	d90e      	bls.n	800579e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	22ff      	movs	r2, #255	; 0xff
 8005784:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578a:	b2da      	uxtb	r2, r3
 800578c:	8979      	ldrh	r1, [r7, #10]
 800578e:	2300      	movs	r3, #0
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f9f6 	bl	8005b88 <I2C_TransferConfig>
 800579c:	e00f      	b.n	80057be <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	8979      	ldrh	r1, [r7, #10]
 80057b0:	2300      	movs	r3, #0
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f9e5 	bl	8005b88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d19d      	bne.n	8005704 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	6a39      	ldr	r1, [r7, #32]
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f8cd 	bl	800596c <I2C_WaitOnSTOPFlagUntilTimeout>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e01a      	b.n	8005812 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2220      	movs	r2, #32
 80057e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6859      	ldr	r1, [r3, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <HAL_I2C_Master_Receive+0x1e8>)
 80057f0:	400b      	ands	r3, r1
 80057f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	e000      	b.n	8005812 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005810:	2302      	movs	r3, #2
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	80002400 	.word	0x80002400
 8005820:	fe00e800 	.word	0xfe00e800

08005824 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b02      	cmp	r3, #2
 8005838:	d103      	bne.n	8005842 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2200      	movs	r2, #0
 8005840:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b01      	cmp	r3, #1
 800584e:	d007      	beq.n	8005860 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0201 	orr.w	r2, r2, #1
 800585e:	619a      	str	r2, [r3, #24]
  }
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	4613      	mov	r3, r2
 800587a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800587c:	e022      	b.n	80058c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005884:	d01e      	beq.n	80058c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005886:	f7fd fde3 	bl	8003450 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d302      	bcc.n	800589c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d113      	bne.n	80058c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e00f      	b.n	80058e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699a      	ldr	r2, [r3, #24]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	4013      	ands	r3, r2
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	bf0c      	ite	eq
 80058d4:	2301      	moveq	r3, #1
 80058d6:	2300      	movne	r3, #0
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	79fb      	ldrb	r3, [r7, #7]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d0cd      	beq.n	800587e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058f8:	e02c      	b.n	8005954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f8dc 	bl	8005abc <I2C_IsAcknowledgeFailed>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e02a      	b.n	8005964 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d01e      	beq.n	8005954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005916:	f7fd fd9b 	bl	8003450 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	d302      	bcc.n	800592c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d113      	bne.n	8005954 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005930:	f043 0220 	orr.w	r2, r3, #32
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e007      	b.n	8005964 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b02      	cmp	r3, #2
 8005960:	d1cb      	bne.n	80058fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005978:	e028      	b.n	80059cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	68b9      	ldr	r1, [r7, #8]
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 f89c 	bl	8005abc <I2C_IsAcknowledgeFailed>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e026      	b.n	80059dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598e:	f7fd fd5f 	bl	8003450 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	429a      	cmp	r2, r3
 800599c:	d302      	bcc.n	80059a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d113      	bne.n	80059cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a8:	f043 0220 	orr.w	r2, r3, #32
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e007      	b.n	80059dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d1cf      	bne.n	800597a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059f0:	e055      	b.n	8005a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	68b9      	ldr	r1, [r7, #8]
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 f860 	bl	8005abc <I2C_IsAcknowledgeFailed>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e053      	b.n	8005aae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d129      	bne.n	8005a68 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d105      	bne.n	8005a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e03f      	b.n	8005aae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2220      	movs	r2, #32
 8005a34:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6859      	ldr	r1, [r3, #4]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005a42:	400b      	ands	r3, r1
 8005a44:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e022      	b.n	8005aae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a68:	f7fd fcf2 	bl	8003450 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d302      	bcc.n	8005a7e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10f      	bne.n	8005a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f043 0220 	orr.w	r2, r3, #32
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e007      	b.n	8005aae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d1a2      	bne.n	80059f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	fe00e800 	.word	0xfe00e800

08005abc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	f003 0310 	and.w	r3, r3, #16
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d151      	bne.n	8005b7a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ad6:	e022      	b.n	8005b1e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ade:	d01e      	beq.n	8005b1e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae0:	f7fd fcb6 	bl	8003450 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d302      	bcc.n	8005af6 <I2C_IsAcknowledgeFailed+0x3a>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d113      	bne.n	8005b1e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afa:	f043 0220 	orr.w	r2, r3, #32
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2220      	movs	r2, #32
 8005b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e02e      	b.n	8005b7c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f003 0320 	and.w	r3, r3, #32
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d1d5      	bne.n	8005ad8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2210      	movs	r2, #16
 8005b32:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2220      	movs	r2, #32
 8005b3a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f7ff fe71 	bl	8005824 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6859      	ldr	r1, [r3, #4]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	4b0d      	ldr	r3, [pc, #52]	; (8005b84 <I2C_IsAcknowledgeFailed+0xc8>)
 8005b4e:	400b      	ands	r3, r1
 8005b50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b56:	f043 0204 	orr.w	r2, r3, #4
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	fe00e800 	.word	0xfe00e800

08005b88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	607b      	str	r3, [r7, #4]
 8005b92:	460b      	mov	r3, r1
 8005b94:	817b      	strh	r3, [r7, #10]
 8005b96:	4613      	mov	r3, r2
 8005b98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	0d5b      	lsrs	r3, r3, #21
 8005ba4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ba8:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <I2C_TransferConfig+0x58>)
 8005baa:	430b      	orrs	r3, r1
 8005bac:	43db      	mvns	r3, r3
 8005bae:	ea02 0103 	and.w	r1, r2, r3
 8005bb2:	897b      	ldrh	r3, [r7, #10]
 8005bb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005bb8:	7a7b      	ldrb	r3, [r7, #9]
 8005bba:	041b      	lsls	r3, r3, #16
 8005bbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	03ff63ff 	.word	0x03ff63ff

08005be4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d138      	bne.n	8005c6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e032      	b.n	8005c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2224      	movs	r2, #36	; 0x24
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0201 	bic.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6819      	ldr	r1, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e000      	b.n	8005c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c6c:	2302      	movs	r3, #2
  }
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b085      	sub	sp, #20
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	d139      	bne.n	8005d04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d101      	bne.n	8005c9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	e033      	b.n	8005d06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2224      	movs	r2, #36	; 0x24
 8005caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0201 	bic.w	r2, r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ccc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	021b      	lsls	r3, r3, #8
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d00:	2300      	movs	r3, #0
 8005d02:	e000      	b.n	8005d06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d04:	2302      	movs	r3, #2
  }
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
	...

08005d14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d141      	bne.n	8005da6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d22:	4b4b      	ldr	r3, [pc, #300]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2e:	d131      	bne.n	8005d94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d30:	4b47      	ldr	r3, [pc, #284]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d36:	4a46      	ldr	r2, [pc, #280]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d40:	4b43      	ldr	r3, [pc, #268]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d48:	4a41      	ldr	r2, [pc, #260]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d50:	4b40      	ldr	r3, [pc, #256]	; (8005e54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2232      	movs	r2, #50	; 0x32
 8005d56:	fb02 f303 	mul.w	r3, r2, r3
 8005d5a:	4a3f      	ldr	r2, [pc, #252]	; (8005e58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d60:	0c9b      	lsrs	r3, r3, #18
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d66:	e002      	b.n	8005d6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d6e:	4b38      	ldr	r3, [pc, #224]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7a:	d102      	bne.n	8005d82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f2      	bne.n	8005d68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d82:	4b33      	ldr	r3, [pc, #204]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8e:	d158      	bne.n	8005e42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e057      	b.n	8005e44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d94:	4b2e      	ldr	r3, [pc, #184]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d9a:	4a2d      	ldr	r2, [pc, #180]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005da0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005da4:	e04d      	b.n	8005e42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dac:	d141      	bne.n	8005e32 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005dae:	4b28      	ldr	r3, [pc, #160]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dba:	d131      	bne.n	8005e20 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dbc:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dc2:	4a23      	ldr	r2, [pc, #140]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005dcc:	4b20      	ldr	r3, [pc, #128]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005dd4:	4a1e      	ldr	r2, [pc, #120]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ddc:	4b1d      	ldr	r3, [pc, #116]	; (8005e54 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2232      	movs	r2, #50	; 0x32
 8005de2:	fb02 f303 	mul.w	r3, r2, r3
 8005de6:	4a1c      	ldr	r2, [pc, #112]	; (8005e58 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005de8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dec:	0c9b      	lsrs	r3, r3, #18
 8005dee:	3301      	adds	r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005df2:	e002      	b.n	8005dfa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3b01      	subs	r3, #1
 8005df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dfa:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e06:	d102      	bne.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f2      	bne.n	8005df4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e0e:	4b10      	ldr	r3, [pc, #64]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1a:	d112      	bne.n	8005e42 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e011      	b.n	8005e44 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e20:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e26:	4a0a      	ldr	r2, [pc, #40]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005e30:	e007      	b.n	8005e42 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e32:	4b07      	ldr	r3, [pc, #28]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e3a:	4a05      	ldr	r2, [pc, #20]	; (8005e50 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e40:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	40007000 	.word	0x40007000
 8005e54:	20000020 	.word	0x20000020
 8005e58:	431bde83 	.word	0x431bde83

08005e5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	4a04      	ldr	r2, [pc, #16]	; (8005e78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e6a:	6093      	str	r3, [r2, #8]
}
 8005e6c:	bf00      	nop
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40007000 	.word	0x40007000

08005e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e308      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d075      	beq.n	8005f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e9a:	4ba3      	ldr	r3, [pc, #652]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 030c 	and.w	r3, r3, #12
 8005ea2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ea4:	4ba0      	ldr	r3, [pc, #640]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	2b0c      	cmp	r3, #12
 8005eb2:	d102      	bne.n	8005eba <HAL_RCC_OscConfig+0x3e>
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d002      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x44>
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d10b      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ec0:	4b99      	ldr	r3, [pc, #612]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d05b      	beq.n	8005f84 <HAL_RCC_OscConfig+0x108>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d157      	bne.n	8005f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e2e3      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee0:	d106      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x74>
 8005ee2:	4b91      	ldr	r3, [pc, #580]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a90      	ldr	r2, [pc, #576]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	e01d      	b.n	8005f2c <HAL_RCC_OscConfig+0xb0>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ef8:	d10c      	bne.n	8005f14 <HAL_RCC_OscConfig+0x98>
 8005efa:	4b8b      	ldr	r3, [pc, #556]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a8a      	ldr	r2, [pc, #552]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	4b88      	ldr	r3, [pc, #544]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a87      	ldr	r2, [pc, #540]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	e00b      	b.n	8005f2c <HAL_RCC_OscConfig+0xb0>
 8005f14:	4b84      	ldr	r3, [pc, #528]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a83      	ldr	r2, [pc, #524]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	4b81      	ldr	r3, [pc, #516]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a80      	ldr	r2, [pc, #512]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d013      	beq.n	8005f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f34:	f7fd fa8c 	bl	8003450 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f3c:	f7fd fa88 	bl	8003450 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b64      	cmp	r3, #100	; 0x64
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e2a8      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f4e:	4b76      	ldr	r3, [pc, #472]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f0      	beq.n	8005f3c <HAL_RCC_OscConfig+0xc0>
 8005f5a:	e014      	b.n	8005f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f5c:	f7fd fa78 	bl	8003450 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f64:	f7fd fa74 	bl	8003450 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b64      	cmp	r3, #100	; 0x64
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e294      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f76:	4b6c      	ldr	r3, [pc, #432]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f0      	bne.n	8005f64 <HAL_RCC_OscConfig+0xe8>
 8005f82:	e000      	b.n	8005f86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d075      	beq.n	800607e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f92:	4b65      	ldr	r3, [pc, #404]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 030c 	and.w	r3, r3, #12
 8005f9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f9c:	4b62      	ldr	r3, [pc, #392]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f003 0303 	and.w	r3, r3, #3
 8005fa4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b0c      	cmp	r3, #12
 8005faa:	d102      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x136>
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d002      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x13c>
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d11f      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fb8:	4b5b      	ldr	r3, [pc, #364]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x154>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e267      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fd0:	4b55      	ldr	r3, [pc, #340]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	061b      	lsls	r3, r3, #24
 8005fde:	4952      	ldr	r1, [pc, #328]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005fe4:	4b51      	ldr	r3, [pc, #324]	; (800612c <HAL_RCC_OscConfig+0x2b0>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fd f9e5 	bl	80033b8 <HAL_InitTick>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d043      	beq.n	800607c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e253      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d023      	beq.n	8006048 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006000:	4b49      	ldr	r3, [pc, #292]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a48      	ldr	r2, [pc, #288]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8006006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600c:	f7fd fa20 	bl	8003450 <HAL_GetTick>
 8006010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006014:	f7fd fa1c 	bl	8003450 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e23c      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006026:	4b40      	ldr	r3, [pc, #256]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0f0      	beq.n	8006014 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006032:	4b3d      	ldr	r3, [pc, #244]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	061b      	lsls	r3, r3, #24
 8006040:	4939      	ldr	r1, [pc, #228]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8006042:	4313      	orrs	r3, r2
 8006044:	604b      	str	r3, [r1, #4]
 8006046:	e01a      	b.n	800607e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006048:	4b37      	ldr	r3, [pc, #220]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a36      	ldr	r2, [pc, #216]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 800604e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7fd f9fc 	bl	8003450 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800605c:	f7fd f9f8 	bl	8003450 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e218      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800606e:	4b2e      	ldr	r3, [pc, #184]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f0      	bne.n	800605c <HAL_RCC_OscConfig+0x1e0>
 800607a:	e000      	b.n	800607e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800607c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d03c      	beq.n	8006104 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d01c      	beq.n	80060cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006092:	4b25      	ldr	r3, [pc, #148]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8006094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006098:	4a23      	ldr	r2, [pc, #140]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a2:	f7fd f9d5 	bl	8003450 <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060aa:	f7fd f9d1 	bl	8003450 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e1f1      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060bc:	4b1a      	ldr	r3, [pc, #104]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 80060be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0ef      	beq.n	80060aa <HAL_RCC_OscConfig+0x22e>
 80060ca:	e01b      	b.n	8006104 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060cc:	4b16      	ldr	r3, [pc, #88]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 80060ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060d2:	4a15      	ldr	r2, [pc, #84]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060dc:	f7fd f9b8 	bl	8003450 <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060e4:	f7fd f9b4 	bl	8003450 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e1d4      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060f6:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 80060f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1ef      	bne.n	80060e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 80ab 	beq.w	8006268 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006112:	2300      	movs	r3, #0
 8006114:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006116:	4b04      	ldr	r3, [pc, #16]	; (8006128 <HAL_RCC_OscConfig+0x2ac>)
 8006118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <HAL_RCC_OscConfig+0x2b4>
 8006122:	2301      	movs	r3, #1
 8006124:	e005      	b.n	8006132 <HAL_RCC_OscConfig+0x2b6>
 8006126:	bf00      	nop
 8006128:	40021000 	.word	0x40021000
 800612c:	20000024 	.word	0x20000024
 8006130:	2300      	movs	r3, #0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00d      	beq.n	8006152 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006136:	4baf      	ldr	r3, [pc, #700]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 8006138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613a:	4aae      	ldr	r2, [pc, #696]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 800613c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006140:	6593      	str	r3, [r2, #88]	; 0x58
 8006142:	4bac      	ldr	r3, [pc, #688]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 8006144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800614e:	2301      	movs	r3, #1
 8006150:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006152:	4ba9      	ldr	r3, [pc, #676]	; (80063f8 <HAL_RCC_OscConfig+0x57c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615a:	2b00      	cmp	r3, #0
 800615c:	d118      	bne.n	8006190 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800615e:	4ba6      	ldr	r3, [pc, #664]	; (80063f8 <HAL_RCC_OscConfig+0x57c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4aa5      	ldr	r2, [pc, #660]	; (80063f8 <HAL_RCC_OscConfig+0x57c>)
 8006164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800616a:	f7fd f971 	bl	8003450 <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006170:	e008      	b.n	8006184 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006172:	f7fd f96d 	bl	8003450 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e18d      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006184:	4b9c      	ldr	r3, [pc, #624]	; (80063f8 <HAL_RCC_OscConfig+0x57c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0f0      	beq.n	8006172 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d108      	bne.n	80061aa <HAL_RCC_OscConfig+0x32e>
 8006198:	4b96      	ldr	r3, [pc, #600]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 800619a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619e:	4a95      	ldr	r2, [pc, #596]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80061a0:	f043 0301 	orr.w	r3, r3, #1
 80061a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061a8:	e024      	b.n	80061f4 <HAL_RCC_OscConfig+0x378>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b05      	cmp	r3, #5
 80061b0:	d110      	bne.n	80061d4 <HAL_RCC_OscConfig+0x358>
 80061b2:	4b90      	ldr	r3, [pc, #576]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b8:	4a8e      	ldr	r2, [pc, #568]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80061ba:	f043 0304 	orr.w	r3, r3, #4
 80061be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061c2:	4b8c      	ldr	r3, [pc, #560]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80061c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061c8:	4a8a      	ldr	r2, [pc, #552]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80061ca:	f043 0301 	orr.w	r3, r3, #1
 80061ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061d2:	e00f      	b.n	80061f4 <HAL_RCC_OscConfig+0x378>
 80061d4:	4b87      	ldr	r3, [pc, #540]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	4a86      	ldr	r2, [pc, #536]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061e4:	4b83      	ldr	r3, [pc, #524]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ea:	4a82      	ldr	r2, [pc, #520]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80061ec:	f023 0304 	bic.w	r3, r3, #4
 80061f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d016      	beq.n	800622a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061fc:	f7fd f928 	bl	8003450 <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006202:	e00a      	b.n	800621a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006204:	f7fd f924 	bl	8003450 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006212:	4293      	cmp	r3, r2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e142      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800621a:	4b76      	ldr	r3, [pc, #472]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 800621c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0ed      	beq.n	8006204 <HAL_RCC_OscConfig+0x388>
 8006228:	e015      	b.n	8006256 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622a:	f7fd f911 	bl	8003450 <HAL_GetTick>
 800622e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006230:	e00a      	b.n	8006248 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006232:	f7fd f90d 	bl	8003450 <HAL_GetTick>
 8006236:	4602      	mov	r2, r0
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006240:	4293      	cmp	r3, r2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e12b      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006248:	4b6a      	ldr	r3, [pc, #424]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 800624a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1ed      	bne.n	8006232 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006256:	7ffb      	ldrb	r3, [r7, #31]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d105      	bne.n	8006268 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800625c:	4b65      	ldr	r3, [pc, #404]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 800625e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006260:	4a64      	ldr	r2, [pc, #400]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 8006262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006266:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b00      	cmp	r3, #0
 8006272:	d03c      	beq.n	80062ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01c      	beq.n	80062b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800627c:	4b5d      	ldr	r3, [pc, #372]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 800627e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006282:	4a5c      	ldr	r2, [pc, #368]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 8006284:	f043 0301 	orr.w	r3, r3, #1
 8006288:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800628c:	f7fd f8e0 	bl	8003450 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006294:	f7fd f8dc 	bl	8003450 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e0fc      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062a6:	4b53      	ldr	r3, [pc, #332]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80062a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0ef      	beq.n	8006294 <HAL_RCC_OscConfig+0x418>
 80062b4:	e01b      	b.n	80062ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062b6:	4b4f      	ldr	r3, [pc, #316]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80062b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062bc:	4a4d      	ldr	r2, [pc, #308]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80062be:	f023 0301 	bic.w	r3, r3, #1
 80062c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062c6:	f7fd f8c3 	bl	8003450 <HAL_GetTick>
 80062ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062cc:	e008      	b.n	80062e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062ce:	f7fd f8bf 	bl	8003450 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e0df      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062e0:	4b44      	ldr	r3, [pc, #272]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80062e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1ef      	bne.n	80062ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 80d3 	beq.w	800649e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062f8:	4b3e      	ldr	r3, [pc, #248]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f003 030c 	and.w	r3, r3, #12
 8006300:	2b0c      	cmp	r3, #12
 8006302:	f000 808d 	beq.w	8006420 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d15a      	bne.n	80063c4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800630e:	4b39      	ldr	r3, [pc, #228]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a38      	ldr	r2, [pc, #224]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 8006314:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631a:	f7fd f899 	bl	8003450 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006320:	e008      	b.n	8006334 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006322:	f7fd f895 	bl	8003450 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e0b5      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006334:	4b2f      	ldr	r3, [pc, #188]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1f0      	bne.n	8006322 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006340:	4b2c      	ldr	r3, [pc, #176]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	4b2d      	ldr	r3, [pc, #180]	; (80063fc <HAL_RCC_OscConfig+0x580>)
 8006346:	4013      	ands	r3, r2
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6a11      	ldr	r1, [r2, #32]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006350:	3a01      	subs	r2, #1
 8006352:	0112      	lsls	r2, r2, #4
 8006354:	4311      	orrs	r1, r2
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800635a:	0212      	lsls	r2, r2, #8
 800635c:	4311      	orrs	r1, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006362:	0852      	lsrs	r2, r2, #1
 8006364:	3a01      	subs	r2, #1
 8006366:	0552      	lsls	r2, r2, #21
 8006368:	4311      	orrs	r1, r2
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800636e:	0852      	lsrs	r2, r2, #1
 8006370:	3a01      	subs	r2, #1
 8006372:	0652      	lsls	r2, r2, #25
 8006374:	4311      	orrs	r1, r2
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800637a:	06d2      	lsls	r2, r2, #27
 800637c:	430a      	orrs	r2, r1
 800637e:	491d      	ldr	r1, [pc, #116]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 8006380:	4313      	orrs	r3, r2
 8006382:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006384:	4b1b      	ldr	r3, [pc, #108]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1a      	ldr	r2, [pc, #104]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 800638a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800638e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006390:	4b18      	ldr	r3, [pc, #96]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	4a17      	ldr	r2, [pc, #92]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 8006396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800639a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639c:	f7fd f858 	bl	8003450 <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063a4:	f7fd f854 	bl	8003450 <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e074      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063b6:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d0f0      	beq.n	80063a4 <HAL_RCC_OscConfig+0x528>
 80063c2:	e06c      	b.n	800649e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c4:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a0a      	ldr	r2, [pc, #40]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80063ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80063d0:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	4a07      	ldr	r2, [pc, #28]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80063d6:	f023 0303 	bic.w	r3, r3, #3
 80063da:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4a04      	ldr	r2, [pc, #16]	; (80063f4 <HAL_RCC_OscConfig+0x578>)
 80063e2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80063e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ec:	f7fd f830 	bl	8003450 <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063f2:	e00e      	b.n	8006412 <HAL_RCC_OscConfig+0x596>
 80063f4:	40021000 	.word	0x40021000
 80063f8:	40007000 	.word	0x40007000
 80063fc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006400:	f7fd f826 	bl	8003450 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e046      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006412:	4b25      	ldr	r3, [pc, #148]	; (80064a8 <HAL_RCC_OscConfig+0x62c>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f0      	bne.n	8006400 <HAL_RCC_OscConfig+0x584>
 800641e:	e03e      	b.n	800649e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e039      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800642c:	4b1e      	ldr	r3, [pc, #120]	; (80064a8 <HAL_RCC_OscConfig+0x62c>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f003 0203 	and.w	r2, r3, #3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	429a      	cmp	r2, r3
 800643e:	d12c      	bne.n	800649a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	3b01      	subs	r3, #1
 800644c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644e:	429a      	cmp	r2, r3
 8006450:	d123      	bne.n	800649a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800645e:	429a      	cmp	r2, r3
 8006460:	d11b      	bne.n	800649a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800646e:	429a      	cmp	r2, r3
 8006470:	d113      	bne.n	800649a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	085b      	lsrs	r3, r3, #1
 800647e:	3b01      	subs	r3, #1
 8006480:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006482:	429a      	cmp	r2, r3
 8006484:	d109      	bne.n	800649a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	3b01      	subs	r3, #1
 8006494:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006496:	429a      	cmp	r2, r3
 8006498:	d001      	beq.n	800649e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e000      	b.n	80064a0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800649e:	2300      	movs	r3, #0
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3720      	adds	r7, #32
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	40021000 	.word	0x40021000

080064ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e11e      	b.n	8006702 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064c4:	4b91      	ldr	r3, [pc, #580]	; (800670c <HAL_RCC_ClockConfig+0x260>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d910      	bls.n	80064f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d2:	4b8e      	ldr	r3, [pc, #568]	; (800670c <HAL_RCC_ClockConfig+0x260>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f023 020f 	bic.w	r2, r3, #15
 80064da:	498c      	ldr	r1, [pc, #560]	; (800670c <HAL_RCC_ClockConfig+0x260>)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	4313      	orrs	r3, r2
 80064e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e2:	4b8a      	ldr	r3, [pc, #552]	; (800670c <HAL_RCC_ClockConfig+0x260>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d001      	beq.n	80064f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e106      	b.n	8006702 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0301 	and.w	r3, r3, #1
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d073      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b03      	cmp	r3, #3
 8006506:	d129      	bne.n	800655c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006508:	4b81      	ldr	r3, [pc, #516]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e0f4      	b.n	8006702 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006518:	f000 f99e 	bl	8006858 <RCC_GetSysClockFreqFromPLLSource>
 800651c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	4a7c      	ldr	r2, [pc, #496]	; (8006714 <HAL_RCC_ClockConfig+0x268>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d93f      	bls.n	80065a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006526:	4b7a      	ldr	r3, [pc, #488]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d009      	beq.n	8006546 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800653a:	2b00      	cmp	r3, #0
 800653c:	d033      	beq.n	80065a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006542:	2b00      	cmp	r3, #0
 8006544:	d12f      	bne.n	80065a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006546:	4b72      	ldr	r3, [pc, #456]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800654e:	4a70      	ldr	r2, [pc, #448]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 8006550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006554:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006556:	2380      	movs	r3, #128	; 0x80
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	e024      	b.n	80065a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b02      	cmp	r3, #2
 8006562:	d107      	bne.n	8006574 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006564:	4b6a      	ldr	r3, [pc, #424]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d109      	bne.n	8006584 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e0c6      	b.n	8006702 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006574:	4b66      	ldr	r3, [pc, #408]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e0be      	b.n	8006702 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006584:	f000 f8ce 	bl	8006724 <HAL_RCC_GetSysClockFreq>
 8006588:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	4a61      	ldr	r2, [pc, #388]	; (8006714 <HAL_RCC_ClockConfig+0x268>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d909      	bls.n	80065a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006592:	4b5f      	ldr	r3, [pc, #380]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800659a:	4a5d      	ldr	r2, [pc, #372]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 800659c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80065a2:	2380      	movs	r3, #128	; 0x80
 80065a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065a6:	4b5a      	ldr	r3, [pc, #360]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f023 0203 	bic.w	r2, r3, #3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	4957      	ldr	r1, [pc, #348]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065b8:	f7fc ff4a 	bl	8003450 <HAL_GetTick>
 80065bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065be:	e00a      	b.n	80065d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c0:	f7fc ff46 	bl	8003450 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e095      	b.n	8006702 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065d6:	4b4e      	ldr	r3, [pc, #312]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 020c 	and.w	r2, r3, #12
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d1eb      	bne.n	80065c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d023      	beq.n	800663c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006600:	4b43      	ldr	r3, [pc, #268]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	4a42      	ldr	r2, [pc, #264]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 8006606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800660a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006618:	4b3d      	ldr	r3, [pc, #244]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006620:	4a3b      	ldr	r2, [pc, #236]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 8006622:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006626:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006628:	4b39      	ldr	r3, [pc, #228]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	4936      	ldr	r1, [pc, #216]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 8006636:	4313      	orrs	r3, r2
 8006638:	608b      	str	r3, [r1, #8]
 800663a:	e008      	b.n	800664e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b80      	cmp	r3, #128	; 0x80
 8006640:	d105      	bne.n	800664e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006642:	4b33      	ldr	r3, [pc, #204]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	4a32      	ldr	r2, [pc, #200]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 8006648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800664c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800664e:	4b2f      	ldr	r3, [pc, #188]	; (800670c <HAL_RCC_ClockConfig+0x260>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d21d      	bcs.n	8006698 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665c:	4b2b      	ldr	r3, [pc, #172]	; (800670c <HAL_RCC_ClockConfig+0x260>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f023 020f 	bic.w	r2, r3, #15
 8006664:	4929      	ldr	r1, [pc, #164]	; (800670c <HAL_RCC_ClockConfig+0x260>)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	4313      	orrs	r3, r2
 800666a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800666c:	f7fc fef0 	bl	8003450 <HAL_GetTick>
 8006670:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006672:	e00a      	b.n	800668a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006674:	f7fc feec 	bl	8003450 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006682:	4293      	cmp	r3, r2
 8006684:	d901      	bls.n	800668a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e03b      	b.n	8006702 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800668a:	4b20      	ldr	r3, [pc, #128]	; (800670c <HAL_RCC_ClockConfig+0x260>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d1ed      	bne.n	8006674 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d008      	beq.n	80066b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066a4:	4b1a      	ldr	r3, [pc, #104]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	4917      	ldr	r1, [pc, #92]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0308 	and.w	r3, r3, #8
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d009      	beq.n	80066d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066c2:	4b13      	ldr	r3, [pc, #76]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	490f      	ldr	r1, [pc, #60]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066d6:	f000 f825 	bl	8006724 <HAL_RCC_GetSysClockFreq>
 80066da:	4601      	mov	r1, r0
 80066dc:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <HAL_RCC_ClockConfig+0x264>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	091b      	lsrs	r3, r3, #4
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	4a0c      	ldr	r2, [pc, #48]	; (8006718 <HAL_RCC_ClockConfig+0x26c>)
 80066e8:	5cd3      	ldrb	r3, [r2, r3]
 80066ea:	f003 031f 	and.w	r3, r3, #31
 80066ee:	fa21 f303 	lsr.w	r3, r1, r3
 80066f2:	4a0a      	ldr	r2, [pc, #40]	; (800671c <HAL_RCC_ClockConfig+0x270>)
 80066f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80066f6:	4b0a      	ldr	r3, [pc, #40]	; (8006720 <HAL_RCC_ClockConfig+0x274>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fc fe5c 	bl	80033b8 <HAL_InitTick>
 8006700:	4603      	mov	r3, r0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3718      	adds	r7, #24
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	40022000 	.word	0x40022000
 8006710:	40021000 	.word	0x40021000
 8006714:	04c4b400 	.word	0x04c4b400
 8006718:	0800c408 	.word	0x0800c408
 800671c:	20000020 	.word	0x20000020
 8006720:	20000024 	.word	0x20000024

08006724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006724:	b480      	push	{r7}
 8006726:	b087      	sub	sp, #28
 8006728:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800672a:	4b2c      	ldr	r3, [pc, #176]	; (80067dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 030c 	and.w	r3, r3, #12
 8006732:	2b04      	cmp	r3, #4
 8006734:	d102      	bne.n	800673c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006736:	4b2a      	ldr	r3, [pc, #168]	; (80067e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006738:	613b      	str	r3, [r7, #16]
 800673a:	e047      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800673c:	4b27      	ldr	r3, [pc, #156]	; (80067dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f003 030c 	and.w	r3, r3, #12
 8006744:	2b08      	cmp	r3, #8
 8006746:	d102      	bne.n	800674e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006748:	4b26      	ldr	r3, [pc, #152]	; (80067e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800674a:	613b      	str	r3, [r7, #16]
 800674c:	e03e      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800674e:	4b23      	ldr	r3, [pc, #140]	; (80067dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f003 030c 	and.w	r3, r3, #12
 8006756:	2b0c      	cmp	r3, #12
 8006758:	d136      	bne.n	80067c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800675a:	4b20      	ldr	r3, [pc, #128]	; (80067dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006764:	4b1d      	ldr	r3, [pc, #116]	; (80067dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	091b      	lsrs	r3, r3, #4
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	3301      	adds	r3, #1
 8006770:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2b03      	cmp	r3, #3
 8006776:	d10c      	bne.n	8006792 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006778:	4a1a      	ldr	r2, [pc, #104]	; (80067e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006780:	4a16      	ldr	r2, [pc, #88]	; (80067dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006782:	68d2      	ldr	r2, [r2, #12]
 8006784:	0a12      	lsrs	r2, r2, #8
 8006786:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800678a:	fb02 f303 	mul.w	r3, r2, r3
 800678e:	617b      	str	r3, [r7, #20]
      break;
 8006790:	e00c      	b.n	80067ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006792:	4a13      	ldr	r2, [pc, #76]	; (80067e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	fbb2 f3f3 	udiv	r3, r2, r3
 800679a:	4a10      	ldr	r2, [pc, #64]	; (80067dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800679c:	68d2      	ldr	r2, [r2, #12]
 800679e:	0a12      	lsrs	r2, r2, #8
 80067a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067a4:	fb02 f303 	mul.w	r3, r2, r3
 80067a8:	617b      	str	r3, [r7, #20]
      break;
 80067aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067ac:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	0e5b      	lsrs	r3, r3, #25
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	3301      	adds	r3, #1
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	e001      	b.n	80067cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80067cc:	693b      	ldr	r3, [r7, #16]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40021000 	.word	0x40021000
 80067e0:	00f42400 	.word	0x00f42400
 80067e4:	016e3600 	.word	0x016e3600

080067e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067ec:	4b03      	ldr	r3, [pc, #12]	; (80067fc <HAL_RCC_GetHCLKFreq+0x14>)
 80067ee:	681b      	ldr	r3, [r3, #0]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	20000020 	.word	0x20000020

08006800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006804:	f7ff fff0 	bl	80067e8 <HAL_RCC_GetHCLKFreq>
 8006808:	4601      	mov	r1, r0
 800680a:	4b06      	ldr	r3, [pc, #24]	; (8006824 <HAL_RCC_GetPCLK1Freq+0x24>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	0a1b      	lsrs	r3, r3, #8
 8006810:	f003 0307 	and.w	r3, r3, #7
 8006814:	4a04      	ldr	r2, [pc, #16]	; (8006828 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006816:	5cd3      	ldrb	r3, [r2, r3]
 8006818:	f003 031f 	and.w	r3, r3, #31
 800681c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006820:	4618      	mov	r0, r3
 8006822:	bd80      	pop	{r7, pc}
 8006824:	40021000 	.word	0x40021000
 8006828:	0800c418 	.word	0x0800c418

0800682c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006830:	f7ff ffda 	bl	80067e8 <HAL_RCC_GetHCLKFreq>
 8006834:	4601      	mov	r1, r0
 8006836:	4b06      	ldr	r3, [pc, #24]	; (8006850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	0adb      	lsrs	r3, r3, #11
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	4a04      	ldr	r2, [pc, #16]	; (8006854 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006842:	5cd3      	ldrb	r3, [r2, r3]
 8006844:	f003 031f 	and.w	r3, r3, #31
 8006848:	fa21 f303 	lsr.w	r3, r1, r3
}
 800684c:	4618      	mov	r0, r3
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40021000 	.word	0x40021000
 8006854:	0800c418 	.word	0x0800c418

08006858 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800685e:	4b1e      	ldr	r3, [pc, #120]	; (80068d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f003 0303 	and.w	r3, r3, #3
 8006866:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006868:	4b1b      	ldr	r3, [pc, #108]	; (80068d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	3301      	adds	r3, #1
 8006874:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	2b03      	cmp	r3, #3
 800687a:	d10c      	bne.n	8006896 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800687c:	4a17      	ldr	r2, [pc, #92]	; (80068dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	fbb2 f3f3 	udiv	r3, r2, r3
 8006884:	4a14      	ldr	r2, [pc, #80]	; (80068d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006886:	68d2      	ldr	r2, [r2, #12]
 8006888:	0a12      	lsrs	r2, r2, #8
 800688a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800688e:	fb02 f303 	mul.w	r3, r2, r3
 8006892:	617b      	str	r3, [r7, #20]
    break;
 8006894:	e00c      	b.n	80068b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006896:	4a12      	ldr	r2, [pc, #72]	; (80068e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	fbb2 f3f3 	udiv	r3, r2, r3
 800689e:	4a0e      	ldr	r2, [pc, #56]	; (80068d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068a0:	68d2      	ldr	r2, [r2, #12]
 80068a2:	0a12      	lsrs	r2, r2, #8
 80068a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068a8:	fb02 f303 	mul.w	r3, r2, r3
 80068ac:	617b      	str	r3, [r7, #20]
    break;
 80068ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068b0:	4b09      	ldr	r3, [pc, #36]	; (80068d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	0e5b      	lsrs	r3, r3, #25
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	3301      	adds	r3, #1
 80068bc:	005b      	lsls	r3, r3, #1
 80068be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80068ca:	687b      	ldr	r3, [r7, #4]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	40021000 	.word	0x40021000
 80068dc:	016e3600 	.word	0x016e3600
 80068e0:	00f42400 	.word	0x00f42400

080068e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068ec:	2300      	movs	r3, #0
 80068ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068f0:	2300      	movs	r3, #0
 80068f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 8098 	beq.w	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006902:	2300      	movs	r3, #0
 8006904:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006906:	4b43      	ldr	r3, [pc, #268]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800690a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10d      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006912:	4b40      	ldr	r3, [pc, #256]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006916:	4a3f      	ldr	r2, [pc, #252]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691c:	6593      	str	r3, [r2, #88]	; 0x58
 800691e:	4b3d      	ldr	r3, [pc, #244]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006926:	60bb      	str	r3, [r7, #8]
 8006928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800692a:	2301      	movs	r3, #1
 800692c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800692e:	4b3a      	ldr	r3, [pc, #232]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a39      	ldr	r2, [pc, #228]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006938:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800693a:	f7fc fd89 	bl	8003450 <HAL_GetTick>
 800693e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006940:	e009      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006942:	f7fc fd85 	bl	8003450 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d902      	bls.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	74fb      	strb	r3, [r7, #19]
        break;
 8006954:	e005      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006956:	4b30      	ldr	r3, [pc, #192]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0ef      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006962:	7cfb      	ldrb	r3, [r7, #19]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d159      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006968:	4b2a      	ldr	r3, [pc, #168]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006972:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d01e      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	429a      	cmp	r2, r3
 8006982:	d019      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006984:	4b23      	ldr	r3, [pc, #140]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006990:	4b20      	ldr	r3, [pc, #128]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006996:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800699c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069a0:	4b1c      	ldr	r3, [pc, #112]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a6:	4a1b      	ldr	r2, [pc, #108]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069b0:	4a18      	ldr	r2, [pc, #96]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d016      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c2:	f7fc fd45 	bl	8003450 <HAL_GetTick>
 80069c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069c8:	e00b      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ca:	f7fc fd41 	bl	8003450 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d8:	4293      	cmp	r3, r2
 80069da:	d902      	bls.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	74fb      	strb	r3, [r7, #19]
            break;
 80069e0:	e006      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069e2:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d0ec      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80069f0:	7cfb      	ldrb	r3, [r7, #19]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069f6:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	4903      	ldr	r1, [pc, #12]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006a0c:	e008      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a0e:	7cfb      	ldrb	r3, [r7, #19]
 8006a10:	74bb      	strb	r3, [r7, #18]
 8006a12:	e005      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a14:	40021000 	.word	0x40021000
 8006a18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1c:	7cfb      	ldrb	r3, [r7, #19]
 8006a1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a20:	7c7b      	ldrb	r3, [r7, #17]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d105      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a26:	4ba6      	ldr	r3, [pc, #664]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2a:	4aa5      	ldr	r2, [pc, #660]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a3e:	4ba0      	ldr	r3, [pc, #640]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a44:	f023 0203 	bic.w	r2, r3, #3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	499c      	ldr	r1, [pc, #624]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00a      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a60:	4b97      	ldr	r3, [pc, #604]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a66:	f023 020c 	bic.w	r2, r3, #12
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	4994      	ldr	r1, [pc, #592]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0304 	and.w	r3, r3, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a82:	4b8f      	ldr	r3, [pc, #572]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	498b      	ldr	r1, [pc, #556]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0308 	and.w	r3, r3, #8
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006aa4:	4b86      	ldr	r3, [pc, #536]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	4983      	ldr	r1, [pc, #524]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ac6:	4b7e      	ldr	r3, [pc, #504]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006acc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	497a      	ldr	r1, [pc, #488]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00a      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ae8:	4b75      	ldr	r3, [pc, #468]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	4972      	ldr	r1, [pc, #456]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b0a:	4b6d      	ldr	r3, [pc, #436]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	4969      	ldr	r1, [pc, #420]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b2c:	4b64      	ldr	r3, [pc, #400]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	4961      	ldr	r1, [pc, #388]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b4e:	4b5c      	ldr	r3, [pc, #368]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	4958      	ldr	r1, [pc, #352]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d015      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b70:	4b53      	ldr	r3, [pc, #332]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7e:	4950      	ldr	r1, [pc, #320]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b8e:	d105      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b90:	4b4b      	ldr	r3, [pc, #300]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	4a4a      	ldr	r2, [pc, #296]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d015      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ba8:	4b45      	ldr	r3, [pc, #276]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	4942      	ldr	r1, [pc, #264]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bc6:	d105      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bc8:	4b3d      	ldr	r3, [pc, #244]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4a3c      	ldr	r2, [pc, #240]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bd2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d015      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006be0:	4b37      	ldr	r3, [pc, #220]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bee:	4934      	ldr	r1, [pc, #208]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bfe:	d105      	bne.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c00:	4b2f      	ldr	r3, [pc, #188]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4a2e      	ldr	r2, [pc, #184]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d015      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c18:	4b29      	ldr	r3, [pc, #164]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c26:	4926      	ldr	r1, [pc, #152]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c36:	d105      	bne.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c38:	4b21      	ldr	r3, [pc, #132]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	4a20      	ldr	r2, [pc, #128]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d015      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c50:	4b1b      	ldr	r3, [pc, #108]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	4918      	ldr	r1, [pc, #96]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c6e:	d105      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c70:	4b13      	ldr	r3, [pc, #76]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	4a12      	ldr	r2, [pc, #72]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d015      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c88:	4b0d      	ldr	r3, [pc, #52]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c96:	490a      	ldr	r1, [pc, #40]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ca6:	d105      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ca8:	4b05      	ldr	r3, [pc, #20]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4a04      	ldr	r2, [pc, #16]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006cb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40021000 	.word	0x40021000

08006cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e049      	b.n	8006d6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7fc f93c 	bl	8002f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4619      	mov	r1, r3
 8006d02:	4610      	mov	r0, r2
 8006d04:	f000 fbdc 	bl	80074c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d001      	beq.n	8006d8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e042      	b.n	8006e12 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a21      	ldr	r2, [pc, #132]	; (8006e20 <HAL_TIM_Base_Start+0xac>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d018      	beq.n	8006dd0 <HAL_TIM_Base_Start+0x5c>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da6:	d013      	beq.n	8006dd0 <HAL_TIM_Base_Start+0x5c>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a1d      	ldr	r2, [pc, #116]	; (8006e24 <HAL_TIM_Base_Start+0xb0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00e      	beq.n	8006dd0 <HAL_TIM_Base_Start+0x5c>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a1c      	ldr	r2, [pc, #112]	; (8006e28 <HAL_TIM_Base_Start+0xb4>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d009      	beq.n	8006dd0 <HAL_TIM_Base_Start+0x5c>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a1a      	ldr	r2, [pc, #104]	; (8006e2c <HAL_TIM_Base_Start+0xb8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d004      	beq.n	8006dd0 <HAL_TIM_Base_Start+0x5c>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a19      	ldr	r2, [pc, #100]	; (8006e30 <HAL_TIM_Base_Start+0xbc>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d115      	bne.n	8006dfc <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
 8006dd6:	4b17      	ldr	r3, [pc, #92]	; (8006e34 <HAL_TIM_Base_Start+0xc0>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b06      	cmp	r3, #6
 8006de0:	d015      	beq.n	8006e0e <HAL_TIM_Base_Start+0x9a>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de8:	d011      	beq.n	8006e0e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0201 	orr.w	r2, r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfa:	e008      	b.n	8006e0e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0201 	orr.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	e000      	b.n	8006e10 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40012c00 	.word	0x40012c00
 8006e24:	40000400 	.word	0x40000400
 8006e28:	40000800 	.word	0x40000800
 8006e2c:	40013400 	.word	0x40013400
 8006e30:	40014000 	.word	0x40014000
 8006e34:	00010007 	.word	0x00010007

08006e38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e049      	b.n	8006ede <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d106      	bne.n	8006e64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f841 	bl	8006ee6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4619      	mov	r1, r3
 8006e76:	4610      	mov	r0, r2
 8006e78:	f000 fb22 	bl	80074c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006eee:	bf00      	nop
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
	...

08006efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d109      	bne.n	8006f20 <HAL_TIM_PWM_Start+0x24>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	bf14      	ite	ne
 8006f18:	2301      	movne	r3, #1
 8006f1a:	2300      	moveq	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	e03c      	b.n	8006f9a <HAL_TIM_PWM_Start+0x9e>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d109      	bne.n	8006f3a <HAL_TIM_PWM_Start+0x3e>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	bf14      	ite	ne
 8006f32:	2301      	movne	r3, #1
 8006f34:	2300      	moveq	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	e02f      	b.n	8006f9a <HAL_TIM_PWM_Start+0x9e>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d109      	bne.n	8006f54 <HAL_TIM_PWM_Start+0x58>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	e022      	b.n	8006f9a <HAL_TIM_PWM_Start+0x9e>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b0c      	cmp	r3, #12
 8006f58:	d109      	bne.n	8006f6e <HAL_TIM_PWM_Start+0x72>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	bf14      	ite	ne
 8006f66:	2301      	movne	r3, #1
 8006f68:	2300      	moveq	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	e015      	b.n	8006f9a <HAL_TIM_PWM_Start+0x9e>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b10      	cmp	r3, #16
 8006f72:	d109      	bne.n	8006f88 <HAL_TIM_PWM_Start+0x8c>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	bf14      	ite	ne
 8006f80:	2301      	movne	r3, #1
 8006f82:	2300      	moveq	r3, #0
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	e008      	b.n	8006f9a <HAL_TIM_PWM_Start+0x9e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	bf14      	ite	ne
 8006f94:	2301      	movne	r3, #1
 8006f96:	2300      	moveq	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e097      	b.n	80070d2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <HAL_TIM_PWM_Start+0xb6>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fb0:	e023      	b.n	8006ffa <HAL_TIM_PWM_Start+0xfe>
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d104      	bne.n	8006fc2 <HAL_TIM_PWM_Start+0xc6>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fc0:	e01b      	b.n	8006ffa <HAL_TIM_PWM_Start+0xfe>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d104      	bne.n	8006fd2 <HAL_TIM_PWM_Start+0xd6>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fd0:	e013      	b.n	8006ffa <HAL_TIM_PWM_Start+0xfe>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b0c      	cmp	r3, #12
 8006fd6:	d104      	bne.n	8006fe2 <HAL_TIM_PWM_Start+0xe6>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006fe0:	e00b      	b.n	8006ffa <HAL_TIM_PWM_Start+0xfe>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b10      	cmp	r3, #16
 8006fe6:	d104      	bne.n	8006ff2 <HAL_TIM_PWM_Start+0xf6>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ff0:	e003      	b.n	8006ffa <HAL_TIM_PWM_Start+0xfe>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2201      	movs	r2, #1
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f000 fe7e 	bl	8007d04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a33      	ldr	r2, [pc, #204]	; (80070dc <HAL_TIM_PWM_Start+0x1e0>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d013      	beq.n	800703a <HAL_TIM_PWM_Start+0x13e>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a32      	ldr	r2, [pc, #200]	; (80070e0 <HAL_TIM_PWM_Start+0x1e4>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d00e      	beq.n	800703a <HAL_TIM_PWM_Start+0x13e>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a30      	ldr	r2, [pc, #192]	; (80070e4 <HAL_TIM_PWM_Start+0x1e8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d009      	beq.n	800703a <HAL_TIM_PWM_Start+0x13e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a2f      	ldr	r2, [pc, #188]	; (80070e8 <HAL_TIM_PWM_Start+0x1ec>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d004      	beq.n	800703a <HAL_TIM_PWM_Start+0x13e>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a2d      	ldr	r2, [pc, #180]	; (80070ec <HAL_TIM_PWM_Start+0x1f0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d101      	bne.n	800703e <HAL_TIM_PWM_Start+0x142>
 800703a:	2301      	movs	r3, #1
 800703c:	e000      	b.n	8007040 <HAL_TIM_PWM_Start+0x144>
 800703e:	2300      	movs	r3, #0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d007      	beq.n	8007054 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007052:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a20      	ldr	r2, [pc, #128]	; (80070dc <HAL_TIM_PWM_Start+0x1e0>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d018      	beq.n	8007090 <HAL_TIM_PWM_Start+0x194>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007066:	d013      	beq.n	8007090 <HAL_TIM_PWM_Start+0x194>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a20      	ldr	r2, [pc, #128]	; (80070f0 <HAL_TIM_PWM_Start+0x1f4>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00e      	beq.n	8007090 <HAL_TIM_PWM_Start+0x194>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a1f      	ldr	r2, [pc, #124]	; (80070f4 <HAL_TIM_PWM_Start+0x1f8>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d009      	beq.n	8007090 <HAL_TIM_PWM_Start+0x194>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a17      	ldr	r2, [pc, #92]	; (80070e0 <HAL_TIM_PWM_Start+0x1e4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <HAL_TIM_PWM_Start+0x194>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a16      	ldr	r2, [pc, #88]	; (80070e4 <HAL_TIM_PWM_Start+0x1e8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d115      	bne.n	80070bc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	4b18      	ldr	r3, [pc, #96]	; (80070f8 <HAL_TIM_PWM_Start+0x1fc>)
 8007098:	4013      	ands	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b06      	cmp	r3, #6
 80070a0:	d015      	beq.n	80070ce <HAL_TIM_PWM_Start+0x1d2>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a8:	d011      	beq.n	80070ce <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0201 	orr.w	r2, r2, #1
 80070b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ba:	e008      	b.n	80070ce <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	e000      	b.n	80070d0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	40012c00 	.word	0x40012c00
 80070e0:	40013400 	.word	0x40013400
 80070e4:	40014000 	.word	0x40014000
 80070e8:	40014400 	.word	0x40014400
 80070ec:	40014800 	.word	0x40014800
 80070f0:	40000400 	.word	0x40000400
 80070f4:	40000800 	.word	0x40000800
 80070f8:	00010007 	.word	0x00010007

080070fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007112:	2302      	movs	r3, #2
 8007114:	e0fd      	b.n	8007312 <HAL_TIM_PWM_ConfigChannel+0x216>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b14      	cmp	r3, #20
 8007122:	f200 80f0 	bhi.w	8007306 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007181 	.word	0x08007181
 8007130:	08007307 	.word	0x08007307
 8007134:	08007307 	.word	0x08007307
 8007138:	08007307 	.word	0x08007307
 800713c:	080071c1 	.word	0x080071c1
 8007140:	08007307 	.word	0x08007307
 8007144:	08007307 	.word	0x08007307
 8007148:	08007307 	.word	0x08007307
 800714c:	08007203 	.word	0x08007203
 8007150:	08007307 	.word	0x08007307
 8007154:	08007307 	.word	0x08007307
 8007158:	08007307 	.word	0x08007307
 800715c:	08007243 	.word	0x08007243
 8007160:	08007307 	.word	0x08007307
 8007164:	08007307 	.word	0x08007307
 8007168:	08007307 	.word	0x08007307
 800716c:	08007285 	.word	0x08007285
 8007170:	08007307 	.word	0x08007307
 8007174:	08007307 	.word	0x08007307
 8007178:	08007307 	.word	0x08007307
 800717c:	080072c5 	.word	0x080072c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68b9      	ldr	r1, [r7, #8]
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fa2a 	bl	80075e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0208 	orr.w	r2, r2, #8
 800719a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699a      	ldr	r2, [r3, #24]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0204 	bic.w	r2, r2, #4
 80071aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6999      	ldr	r1, [r3, #24]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	691a      	ldr	r2, [r3, #16]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	619a      	str	r2, [r3, #24]
      break;
 80071be:	e0a3      	b.n	8007308 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68b9      	ldr	r1, [r7, #8]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 fa9a 	bl	8007700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699a      	ldr	r2, [r3, #24]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6999      	ldr	r1, [r3, #24]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	021a      	lsls	r2, r3, #8
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	619a      	str	r2, [r3, #24]
      break;
 8007200:	e082      	b.n	8007308 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fb03 	bl	8007814 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	69da      	ldr	r2, [r3, #28]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f042 0208 	orr.w	r2, r2, #8
 800721c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69da      	ldr	r2, [r3, #28]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0204 	bic.w	r2, r2, #4
 800722c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69d9      	ldr	r1, [r3, #28]
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	691a      	ldr	r2, [r3, #16]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	61da      	str	r2, [r3, #28]
      break;
 8007240:	e062      	b.n	8007308 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	4618      	mov	r0, r3
 800724a:	f000 fb6b 	bl	8007924 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69da      	ldr	r2, [r3, #28]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800725c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	69da      	ldr	r2, [r3, #28]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800726c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69d9      	ldr	r1, [r3, #28]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	021a      	lsls	r2, r3, #8
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	61da      	str	r2, [r3, #28]
      break;
 8007282:	e041      	b.n	8007308 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fbd4 	bl	8007a38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0208 	orr.w	r2, r2, #8
 800729e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0204 	bic.w	r2, r2, #4
 80072ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	691a      	ldr	r2, [r3, #16]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80072c2:	e021      	b.n	8007308 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fc18 	bl	8007b00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	021a      	lsls	r2, r3, #8
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	430a      	orrs	r2, r1
 8007302:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007304:	e000      	b.n	8007308 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8007306:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop

0800731c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <HAL_TIM_ConfigClockSource+0x18>
 8007330:	2302      	movs	r3, #2
 8007332:	e0b9      	b.n	80074a8 <HAL_TIM_ConfigClockSource+0x18c>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007352:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007356:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800735e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b70      	cmp	r3, #112	; 0x70
 800736e:	d02e      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0xb2>
 8007370:	2b70      	cmp	r3, #112	; 0x70
 8007372:	d812      	bhi.n	800739a <HAL_TIM_ConfigClockSource+0x7e>
 8007374:	2b30      	cmp	r3, #48	; 0x30
 8007376:	f000 8084 	beq.w	8007482 <HAL_TIM_ConfigClockSource+0x166>
 800737a:	2b30      	cmp	r3, #48	; 0x30
 800737c:	d806      	bhi.n	800738c <HAL_TIM_ConfigClockSource+0x70>
 800737e:	2b10      	cmp	r3, #16
 8007380:	d07f      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x166>
 8007382:	2b20      	cmp	r3, #32
 8007384:	d07d      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x166>
 8007386:	2b00      	cmp	r3, #0
 8007388:	d07b      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x166>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800738a:	e084      	b.n	8007496 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800738c:	2b50      	cmp	r3, #80	; 0x50
 800738e:	d048      	beq.n	8007422 <HAL_TIM_ConfigClockSource+0x106>
 8007390:	2b60      	cmp	r3, #96	; 0x60
 8007392:	d056      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x126>
 8007394:	2b40      	cmp	r3, #64	; 0x40
 8007396:	d064      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8007398:	e07d      	b.n	8007496 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 800739a:	4a45      	ldr	r2, [pc, #276]	; (80074b0 <HAL_TIM_ConfigClockSource+0x194>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d070      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x166>
 80073a0:	4a43      	ldr	r2, [pc, #268]	; (80074b0 <HAL_TIM_ConfigClockSource+0x194>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d809      	bhi.n	80073ba <HAL_TIM_ConfigClockSource+0x9e>
 80073a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073aa:	d027      	beq.n	80073fc <HAL_TIM_ConfigClockSource+0xe0>
 80073ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80073b0:	d067      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x166>
 80073b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b6:	d06d      	beq.n	8007494 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80073b8:	e06d      	b.n	8007496 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 80073ba:	4a3e      	ldr	r2, [pc, #248]	; (80074b4 <HAL_TIM_ConfigClockSource+0x198>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d060      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x166>
 80073c0:	4a3d      	ldr	r2, [pc, #244]	; (80074b8 <HAL_TIM_ConfigClockSource+0x19c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d05d      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x166>
 80073c6:	4a3d      	ldr	r2, [pc, #244]	; (80074bc <HAL_TIM_ConfigClockSource+0x1a0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d05a      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x166>
      break;
 80073cc:	e063      	b.n	8007496 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	6899      	ldr	r1, [r3, #8]
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f000 fc71 	bl	8007cc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	609a      	str	r2, [r3, #8]
      break;
 80073fa:	e04c      	b.n	8007496 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	6899      	ldr	r1, [r3, #8]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f000 fc5a 	bl	8007cc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689a      	ldr	r2, [r3, #8]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800741e:	609a      	str	r2, [r3, #8]
      break;
 8007420:	e039      	b.n	8007496 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6818      	ldr	r0, [r3, #0]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6859      	ldr	r1, [r3, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	461a      	mov	r2, r3
 8007430:	f000 fbcc 	bl	8007bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2150      	movs	r1, #80	; 0x50
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fc25 	bl	8007c8a <TIM_ITRx_SetConfig>
      break;
 8007440:	e029      	b.n	8007496 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6818      	ldr	r0, [r3, #0]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	6859      	ldr	r1, [r3, #4]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	461a      	mov	r2, r3
 8007450:	f000 fbeb 	bl	8007c2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2160      	movs	r1, #96	; 0x60
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fc15 	bl	8007c8a <TIM_ITRx_SetConfig>
      break;
 8007460:	e019      	b.n	8007496 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6818      	ldr	r0, [r3, #0]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	6859      	ldr	r1, [r3, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	461a      	mov	r2, r3
 8007470:	f000 fbac 	bl	8007bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2140      	movs	r1, #64	; 0x40
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fc05 	bl	8007c8a <TIM_ITRx_SetConfig>
      break;
 8007480:	e009      	b.n	8007496 <HAL_TIM_ConfigClockSource+0x17a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4619      	mov	r1, r3
 800748c:	4610      	mov	r0, r2
 800748e:	f000 fbfc 	bl	8007c8a <TIM_ITRx_SetConfig>
        break;
 8007492:	e000      	b.n	8007496 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8007494:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	00100020 	.word	0x00100020
 80074b4:	00100040 	.word	0x00100040
 80074b8:	00100070 	.word	0x00100070
 80074bc:	00100030 	.word	0x00100030

080074c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a3c      	ldr	r2, [pc, #240]	; (80075c4 <TIM_Base_SetConfig+0x104>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00f      	beq.n	80074f8 <TIM_Base_SetConfig+0x38>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074de:	d00b      	beq.n	80074f8 <TIM_Base_SetConfig+0x38>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a39      	ldr	r2, [pc, #228]	; (80075c8 <TIM_Base_SetConfig+0x108>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d007      	beq.n	80074f8 <TIM_Base_SetConfig+0x38>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a38      	ldr	r2, [pc, #224]	; (80075cc <TIM_Base_SetConfig+0x10c>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d003      	beq.n	80074f8 <TIM_Base_SetConfig+0x38>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a37      	ldr	r2, [pc, #220]	; (80075d0 <TIM_Base_SetConfig+0x110>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d108      	bne.n	800750a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a2d      	ldr	r2, [pc, #180]	; (80075c4 <TIM_Base_SetConfig+0x104>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d01b      	beq.n	800754a <TIM_Base_SetConfig+0x8a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007518:	d017      	beq.n	800754a <TIM_Base_SetConfig+0x8a>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a2a      	ldr	r2, [pc, #168]	; (80075c8 <TIM_Base_SetConfig+0x108>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d013      	beq.n	800754a <TIM_Base_SetConfig+0x8a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a29      	ldr	r2, [pc, #164]	; (80075cc <TIM_Base_SetConfig+0x10c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00f      	beq.n	800754a <TIM_Base_SetConfig+0x8a>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a28      	ldr	r2, [pc, #160]	; (80075d0 <TIM_Base_SetConfig+0x110>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d00b      	beq.n	800754a <TIM_Base_SetConfig+0x8a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a27      	ldr	r2, [pc, #156]	; (80075d4 <TIM_Base_SetConfig+0x114>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d007      	beq.n	800754a <TIM_Base_SetConfig+0x8a>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a26      	ldr	r2, [pc, #152]	; (80075d8 <TIM_Base_SetConfig+0x118>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d003      	beq.n	800754a <TIM_Base_SetConfig+0x8a>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a25      	ldr	r2, [pc, #148]	; (80075dc <TIM_Base_SetConfig+0x11c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d108      	bne.n	800755c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	4313      	orrs	r3, r2
 800755a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	4313      	orrs	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a10      	ldr	r2, [pc, #64]	; (80075c4 <TIM_Base_SetConfig+0x104>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d00f      	beq.n	80075a8 <TIM_Base_SetConfig+0xe8>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a11      	ldr	r2, [pc, #68]	; (80075d0 <TIM_Base_SetConfig+0x110>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d00b      	beq.n	80075a8 <TIM_Base_SetConfig+0xe8>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a10      	ldr	r2, [pc, #64]	; (80075d4 <TIM_Base_SetConfig+0x114>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d007      	beq.n	80075a8 <TIM_Base_SetConfig+0xe8>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a0f      	ldr	r2, [pc, #60]	; (80075d8 <TIM_Base_SetConfig+0x118>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d003      	beq.n	80075a8 <TIM_Base_SetConfig+0xe8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a0e      	ldr	r2, [pc, #56]	; (80075dc <TIM_Base_SetConfig+0x11c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d103      	bne.n	80075b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	691a      	ldr	r2, [r3, #16]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	615a      	str	r2, [r3, #20]
}
 80075b6:	bf00      	nop
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40012c00 	.word	0x40012c00
 80075c8:	40000400 	.word	0x40000400
 80075cc:	40000800 	.word	0x40000800
 80075d0:	40013400 	.word	0x40013400
 80075d4:	40014000 	.word	0x40014000
 80075d8:	40014400 	.word	0x40014400
 80075dc:	40014800 	.word	0x40014800

080075e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	f023 0201 	bic.w	r2, r3, #1
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800760e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 0303 	bic.w	r3, r3, #3
 800761a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	4313      	orrs	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f023 0302 	bic.w	r3, r3, #2
 800762c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	4313      	orrs	r3, r2
 8007636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a2c      	ldr	r2, [pc, #176]	; (80076ec <TIM_OC1_SetConfig+0x10c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00f      	beq.n	8007660 <TIM_OC1_SetConfig+0x80>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a2b      	ldr	r2, [pc, #172]	; (80076f0 <TIM_OC1_SetConfig+0x110>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d00b      	beq.n	8007660 <TIM_OC1_SetConfig+0x80>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a2a      	ldr	r2, [pc, #168]	; (80076f4 <TIM_OC1_SetConfig+0x114>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d007      	beq.n	8007660 <TIM_OC1_SetConfig+0x80>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a29      	ldr	r2, [pc, #164]	; (80076f8 <TIM_OC1_SetConfig+0x118>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d003      	beq.n	8007660 <TIM_OC1_SetConfig+0x80>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a28      	ldr	r2, [pc, #160]	; (80076fc <TIM_OC1_SetConfig+0x11c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d10c      	bne.n	800767a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f023 0308 	bic.w	r3, r3, #8
 8007666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	4313      	orrs	r3, r2
 8007670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f023 0304 	bic.w	r3, r3, #4
 8007678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a1b      	ldr	r2, [pc, #108]	; (80076ec <TIM_OC1_SetConfig+0x10c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00f      	beq.n	80076a2 <TIM_OC1_SetConfig+0xc2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a1a      	ldr	r2, [pc, #104]	; (80076f0 <TIM_OC1_SetConfig+0x110>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00b      	beq.n	80076a2 <TIM_OC1_SetConfig+0xc2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a19      	ldr	r2, [pc, #100]	; (80076f4 <TIM_OC1_SetConfig+0x114>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d007      	beq.n	80076a2 <TIM_OC1_SetConfig+0xc2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a18      	ldr	r2, [pc, #96]	; (80076f8 <TIM_OC1_SetConfig+0x118>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d003      	beq.n	80076a2 <TIM_OC1_SetConfig+0xc2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a17      	ldr	r2, [pc, #92]	; (80076fc <TIM_OC1_SetConfig+0x11c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d111      	bne.n	80076c6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	621a      	str	r2, [r3, #32]
}
 80076e0:	bf00      	nop
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	40012c00 	.word	0x40012c00
 80076f0:	40013400 	.word	0x40013400
 80076f4:	40014000 	.word	0x40014000
 80076f8:	40014400 	.word	0x40014400
 80076fc:	40014800 	.word	0x40014800

08007700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	f023 0210 	bic.w	r2, r3, #16
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800772e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800773a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4313      	orrs	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f023 0320 	bic.w	r3, r3, #32
 800774e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4313      	orrs	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a28      	ldr	r2, [pc, #160]	; (8007800 <TIM_OC2_SetConfig+0x100>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d003      	beq.n	800776c <TIM_OC2_SetConfig+0x6c>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a27      	ldr	r2, [pc, #156]	; (8007804 <TIM_OC2_SetConfig+0x104>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d10d      	bne.n	8007788 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	4313      	orrs	r3, r2
 800777e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a1d      	ldr	r2, [pc, #116]	; (8007800 <TIM_OC2_SetConfig+0x100>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00f      	beq.n	80077b0 <TIM_OC2_SetConfig+0xb0>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a1c      	ldr	r2, [pc, #112]	; (8007804 <TIM_OC2_SetConfig+0x104>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00b      	beq.n	80077b0 <TIM_OC2_SetConfig+0xb0>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	4a1b      	ldr	r2, [pc, #108]	; (8007808 <TIM_OC2_SetConfig+0x108>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d007      	beq.n	80077b0 <TIM_OC2_SetConfig+0xb0>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	4a1a      	ldr	r2, [pc, #104]	; (800780c <TIM_OC2_SetConfig+0x10c>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d003      	beq.n	80077b0 <TIM_OC2_SetConfig+0xb0>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a19      	ldr	r2, [pc, #100]	; (8007810 <TIM_OC2_SetConfig+0x110>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d113      	bne.n	80077d8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	695b      	ldr	r3, [r3, #20]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	693a      	ldr	r2, [r7, #16]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685a      	ldr	r2, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	621a      	str	r2, [r3, #32]
}
 80077f2:	bf00      	nop
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40012c00 	.word	0x40012c00
 8007804:	40013400 	.word	0x40013400
 8007808:	40014000 	.word	0x40014000
 800780c:	40014400 	.word	0x40014400
 8007810:	40014800 	.word	0x40014800

08007814 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0303 	bic.w	r3, r3, #3
 800784e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4313      	orrs	r3, r2
 8007858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	021b      	lsls	r3, r3, #8
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	4313      	orrs	r3, r2
 800786c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a27      	ldr	r2, [pc, #156]	; (8007910 <TIM_OC3_SetConfig+0xfc>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d003      	beq.n	800787e <TIM_OC3_SetConfig+0x6a>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a26      	ldr	r2, [pc, #152]	; (8007914 <TIM_OC3_SetConfig+0x100>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d10d      	bne.n	800789a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	021b      	lsls	r3, r3, #8
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	4313      	orrs	r3, r2
 8007890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a1c      	ldr	r2, [pc, #112]	; (8007910 <TIM_OC3_SetConfig+0xfc>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d00f      	beq.n	80078c2 <TIM_OC3_SetConfig+0xae>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a1b      	ldr	r2, [pc, #108]	; (8007914 <TIM_OC3_SetConfig+0x100>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d00b      	beq.n	80078c2 <TIM_OC3_SetConfig+0xae>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a1a      	ldr	r2, [pc, #104]	; (8007918 <TIM_OC3_SetConfig+0x104>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d007      	beq.n	80078c2 <TIM_OC3_SetConfig+0xae>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a19      	ldr	r2, [pc, #100]	; (800791c <TIM_OC3_SetConfig+0x108>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d003      	beq.n	80078c2 <TIM_OC3_SetConfig+0xae>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a18      	ldr	r2, [pc, #96]	; (8007920 <TIM_OC3_SetConfig+0x10c>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d113      	bne.n	80078ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	4313      	orrs	r3, r2
 80078dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	621a      	str	r2, [r3, #32]
}
 8007904:	bf00      	nop
 8007906:	371c      	adds	r7, #28
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	40012c00 	.word	0x40012c00
 8007914:	40013400 	.word	0x40013400
 8007918:	40014000 	.word	0x40014000
 800791c:	40014400 	.word	0x40014400
 8007920:	40014800 	.word	0x40014800

08007924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800795e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	021b      	lsls	r3, r3, #8
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	031b      	lsls	r3, r3, #12
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	4313      	orrs	r3, r2
 800797e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a28      	ldr	r2, [pc, #160]	; (8007a24 <TIM_OC4_SetConfig+0x100>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d003      	beq.n	8007990 <TIM_OC4_SetConfig+0x6c>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a27      	ldr	r2, [pc, #156]	; (8007a28 <TIM_OC4_SetConfig+0x104>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d10d      	bne.n	80079ac <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	031b      	lsls	r3, r3, #12
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a1d      	ldr	r2, [pc, #116]	; (8007a24 <TIM_OC4_SetConfig+0x100>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00f      	beq.n	80079d4 <TIM_OC4_SetConfig+0xb0>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a1c      	ldr	r2, [pc, #112]	; (8007a28 <TIM_OC4_SetConfig+0x104>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d00b      	beq.n	80079d4 <TIM_OC4_SetConfig+0xb0>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a1b      	ldr	r2, [pc, #108]	; (8007a2c <TIM_OC4_SetConfig+0x108>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d007      	beq.n	80079d4 <TIM_OC4_SetConfig+0xb0>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a1a      	ldr	r2, [pc, #104]	; (8007a30 <TIM_OC4_SetConfig+0x10c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d003      	beq.n	80079d4 <TIM_OC4_SetConfig+0xb0>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a19      	ldr	r2, [pc, #100]	; (8007a34 <TIM_OC4_SetConfig+0x110>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d113      	bne.n	80079fc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	019b      	lsls	r3, r3, #6
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	019b      	lsls	r3, r3, #6
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	621a      	str	r2, [r3, #32]
}
 8007a16:	bf00      	nop
 8007a18:	371c      	adds	r7, #28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40012c00 	.word	0x40012c00
 8007a28:	40013400 	.word	0x40013400
 8007a2c:	40014000 	.word	0x40014000
 8007a30:	40014400 	.word	0x40014400
 8007a34:	40014800 	.word	0x40014800

08007a38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	041b      	lsls	r3, r3, #16
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a17      	ldr	r2, [pc, #92]	; (8007aec <TIM_OC5_SetConfig+0xb4>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d00f      	beq.n	8007ab2 <TIM_OC5_SetConfig+0x7a>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a16      	ldr	r2, [pc, #88]	; (8007af0 <TIM_OC5_SetConfig+0xb8>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d00b      	beq.n	8007ab2 <TIM_OC5_SetConfig+0x7a>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a15      	ldr	r2, [pc, #84]	; (8007af4 <TIM_OC5_SetConfig+0xbc>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d007      	beq.n	8007ab2 <TIM_OC5_SetConfig+0x7a>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a14      	ldr	r2, [pc, #80]	; (8007af8 <TIM_OC5_SetConfig+0xc0>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d003      	beq.n	8007ab2 <TIM_OC5_SetConfig+0x7a>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a13      	ldr	r2, [pc, #76]	; (8007afc <TIM_OC5_SetConfig+0xc4>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d109      	bne.n	8007ac6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	021b      	lsls	r3, r3, #8
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	621a      	str	r2, [r3, #32]
}
 8007ae0:	bf00      	nop
 8007ae2:	371c      	adds	r7, #28
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	40012c00 	.word	0x40012c00
 8007af0:	40013400 	.word	0x40013400
 8007af4:	40014000 	.word	0x40014000
 8007af8:	40014400 	.word	0x40014400
 8007afc:	40014800 	.word	0x40014800

08007b00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6a1b      	ldr	r3, [r3, #32]
 8007b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	021b      	lsls	r3, r3, #8
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	051b      	lsls	r3, r3, #20
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a18      	ldr	r2, [pc, #96]	; (8007bb8 <TIM_OC6_SetConfig+0xb8>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d00f      	beq.n	8007b7c <TIM_OC6_SetConfig+0x7c>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a17      	ldr	r2, [pc, #92]	; (8007bbc <TIM_OC6_SetConfig+0xbc>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00b      	beq.n	8007b7c <TIM_OC6_SetConfig+0x7c>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4a16      	ldr	r2, [pc, #88]	; (8007bc0 <TIM_OC6_SetConfig+0xc0>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d007      	beq.n	8007b7c <TIM_OC6_SetConfig+0x7c>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a15      	ldr	r2, [pc, #84]	; (8007bc4 <TIM_OC6_SetConfig+0xc4>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <TIM_OC6_SetConfig+0x7c>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a14      	ldr	r2, [pc, #80]	; (8007bc8 <TIM_OC6_SetConfig+0xc8>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d109      	bne.n	8007b90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	029b      	lsls	r3, r3, #10
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	621a      	str	r2, [r3, #32]
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	40012c00 	.word	0x40012c00
 8007bbc:	40013400 	.word	0x40013400
 8007bc0:	40014000 	.word	0x40014000
 8007bc4:	40014400 	.word	0x40014400
 8007bc8:	40014800 	.word	0x40014800

08007bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	f023 0201 	bic.w	r2, r3, #1
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f023 030a 	bic.w	r3, r3, #10
 8007c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	621a      	str	r2, [r3, #32]
}
 8007c1e:	bf00      	nop
 8007c20:	371c      	adds	r7, #28
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b087      	sub	sp, #28
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	f023 0210 	bic.w	r2, r3, #16
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	031b      	lsls	r3, r3, #12
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	621a      	str	r2, [r3, #32]
}
 8007c7e:	bf00      	nop
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b085      	sub	sp, #20
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	f043 0307 	orr.w	r3, r3, #7
 8007cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	609a      	str	r2, [r3, #8]
}
 8007cb8:	bf00      	nop
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	021a      	lsls	r2, r3, #8
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	609a      	str	r2, [r3, #8]
}
 8007cf8:	bf00      	nop
 8007cfa:	371c      	adds	r7, #28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f003 031f 	and.w	r3, r3, #31
 8007d16:	2201      	movs	r2, #1
 8007d18:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6a1a      	ldr	r2, [r3, #32]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	43db      	mvns	r3, r3
 8007d26:	401a      	ands	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	6a1a      	ldr	r2, [r3, #32]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	f003 031f 	and.w	r3, r3, #31
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	fa01 f303 	lsl.w	r3, r1, r3
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	621a      	str	r2, [r3, #32]
}
 8007d42:	bf00      	nop
 8007d44:	371c      	adds	r7, #28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
	...

08007d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d101      	bne.n	8007d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d64:	2302      	movs	r3, #2
 8007d66:	e065      	b.n	8007e34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a2c      	ldr	r2, [pc, #176]	; (8007e40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d004      	beq.n	8007d9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a2b      	ldr	r2, [pc, #172]	; (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d108      	bne.n	8007dae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007da2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a1b      	ldr	r2, [pc, #108]	; (8007e40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d018      	beq.n	8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dde:	d013      	beq.n	8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00e      	beq.n	8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a17      	ldr	r2, [pc, #92]	; (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d009      	beq.n	8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a12      	ldr	r2, [pc, #72]	; (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d004      	beq.n	8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a13      	ldr	r2, [pc, #76]	; (8007e50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d10c      	bne.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	40012c00 	.word	0x40012c00
 8007e44:	40013400 	.word	0x40013400
 8007e48:	40000400 	.word	0x40000400
 8007e4c:	40000800 	.word	0x40000800
 8007e50:	40014000 	.word	0x40014000

08007e54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d101      	bne.n	8007e70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	e087      	b.n	8007f80 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	041b      	lsls	r3, r3, #16
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a27      	ldr	r2, [pc, #156]	; (8007f8c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d004      	beq.n	8007efe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a25      	ldr	r2, [pc, #148]	; (8007f90 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d106      	bne.n	8007f0c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a1e      	ldr	r2, [pc, #120]	; (8007f8c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d004      	beq.n	8007f20 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1d      	ldr	r2, [pc, #116]	; (8007f90 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d126      	bne.n	8007f6e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2a:	051b      	lsls	r3, r3, #20
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a0e      	ldr	r2, [pc, #56]	; (8007f8c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d004      	beq.n	8007f60 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a0d      	ldr	r2, [pc, #52]	; (8007f90 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d106      	bne.n	8007f6e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	40012c00 	.word	0x40012c00
 8007f90:	40013400 	.word	0x40013400

08007f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e042      	b.n	800802c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d106      	bne.n	8007fbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7fb f88d 	bl	80030d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2224      	movs	r2, #36	; 0x24
 8007fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0201 	bic.w	r2, r2, #1
 8007fd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fb12 	bl	8008600 <UART_SetConfig>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d101      	bne.n	8007fe6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e022      	b.n	800802c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fdae 	bl	8008b50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689a      	ldr	r2, [r3, #8]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0201 	orr.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fe35 	bl	8008c94 <UART_CheckIdleState>
 800802a:	4603      	mov	r3, r0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	4613      	mov	r3, r2
 8008040:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008048:	2b20      	cmp	r3, #32
 800804a:	d168      	bne.n	800811e <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <HAL_UART_Transmit_IT+0x24>
 8008052:	88fb      	ldrh	r3, [r7, #6]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e061      	b.n	8008120 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008062:	2b01      	cmp	r3, #1
 8008064:	d101      	bne.n	800806a <HAL_UART_Transmit_IT+0x36>
 8008066:	2302      	movs	r3, #2
 8008068:	e05a      	b.n	8008120 <HAL_UART_Transmit_IT+0xec>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	88fa      	ldrh	r2, [r7, #6]
 800807c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	88fa      	ldrh	r2, [r7, #6]
 8008084:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2221      	movs	r2, #33	; 0x21
 800809a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080a6:	d11c      	bne.n	80080e2 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b0:	d107      	bne.n	80080c2 <HAL_UART_Transmit_IT+0x8e>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d103      	bne.n	80080c2 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	4a1b      	ldr	r2, [pc, #108]	; (800812c <HAL_UART_Transmit_IT+0xf8>)
 80080be:	671a      	str	r2, [r3, #112]	; 0x70
 80080c0:	e002      	b.n	80080c8 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	4a1a      	ldr	r2, [pc, #104]	; (8008130 <HAL_UART_Transmit_IT+0xfc>)
 80080c6:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689a      	ldr	r2, [r3, #8]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80080de:	609a      	str	r2, [r3, #8]
 80080e0:	e01b      	b.n	800811a <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ea:	d107      	bne.n	80080fc <HAL_UART_Transmit_IT+0xc8>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d103      	bne.n	80080fc <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4a0f      	ldr	r2, [pc, #60]	; (8008134 <HAL_UART_Transmit_IT+0x100>)
 80080f8:	671a      	str	r2, [r3, #112]	; 0x70
 80080fa:	e002      	b.n	8008102 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4a0e      	ldr	r2, [pc, #56]	; (8008138 <HAL_UART_Transmit_IT+0x104>)
 8008100:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008118:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	e000      	b.n	8008120 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800811e:	2302      	movs	r3, #2
  }
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	08009023 	.word	0x08009023
 8008130:	08008f89 	.word	0x08008f89
 8008134:	08008f0b 	.word	0x08008f0b
 8008138:	08008e97 	.word	0x08008e97

0800813c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008150:	2b20      	cmp	r3, #32
 8008152:	f040 80bc 	bne.w	80082ce <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <HAL_UART_Receive_IT+0x26>
 800815c:	88fb      	ldrh	r3, [r7, #6]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e0b4      	b.n	80082d0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800816c:	2b01      	cmp	r3, #1
 800816e:	d101      	bne.n	8008174 <HAL_UART_Receive_IT+0x38>
 8008170:	2302      	movs	r3, #2
 8008172:	e0ad      	b.n	80082d0 <HAL_UART_Receive_IT+0x194>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	88fa      	ldrh	r2, [r7, #6]
 8008186:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	88fa      	ldrh	r2, [r7, #6]
 800818e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081a0:	d10e      	bne.n	80081c0 <HAL_UART_Receive_IT+0x84>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d105      	bne.n	80081b6 <HAL_UART_Receive_IT+0x7a>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 80081b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80081b4:	e02d      	b.n	8008212 <HAL_UART_Receive_IT+0xd6>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	22ff      	movs	r2, #255	; 0xff
 80081ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80081be:	e028      	b.n	8008212 <HAL_UART_Receive_IT+0xd6>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10d      	bne.n	80081e4 <HAL_UART_Receive_IT+0xa8>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d104      	bne.n	80081da <HAL_UART_Receive_IT+0x9e>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	22ff      	movs	r2, #255	; 0xff
 80081d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80081d8:	e01b      	b.n	8008212 <HAL_UART_Receive_IT+0xd6>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	227f      	movs	r2, #127	; 0x7f
 80081de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80081e2:	e016      	b.n	8008212 <HAL_UART_Receive_IT+0xd6>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081ec:	d10d      	bne.n	800820a <HAL_UART_Receive_IT+0xce>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d104      	bne.n	8008200 <HAL_UART_Receive_IT+0xc4>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	227f      	movs	r2, #127	; 0x7f
 80081fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80081fe:	e008      	b.n	8008212 <HAL_UART_Receive_IT+0xd6>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	223f      	movs	r2, #63	; 0x3f
 8008204:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008208:	e003      	b.n	8008212 <HAL_UART_Receive_IT+0xd6>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2222      	movs	r2, #34	; 0x22
 800821e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f042 0201 	orr.w	r2, r2, #1
 8008230:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800823a:	d12a      	bne.n	8008292 <HAL_UART_Receive_IT+0x156>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008242:	88fa      	ldrh	r2, [r7, #6]
 8008244:	429a      	cmp	r2, r3
 8008246:	d324      	bcc.n	8008292 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008250:	d107      	bne.n	8008262 <HAL_UART_Receive_IT+0x126>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d103      	bne.n	8008262 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	4a1f      	ldr	r2, [pc, #124]	; (80082dc <HAL_UART_Receive_IT+0x1a0>)
 800825e:	66da      	str	r2, [r3, #108]	; 0x6c
 8008260:	e002      	b.n	8008268 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4a1e      	ldr	r2, [pc, #120]	; (80082e0 <HAL_UART_Receive_IT+0x1a4>)
 8008266:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800827e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800828e:	609a      	str	r2, [r3, #8]
 8008290:	e01b      	b.n	80082ca <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829a:	d107      	bne.n	80082ac <HAL_UART_Receive_IT+0x170>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d103      	bne.n	80082ac <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4a0f      	ldr	r2, [pc, #60]	; (80082e4 <HAL_UART_Receive_IT+0x1a8>)
 80082a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80082aa:	e002      	b.n	80082b2 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	4a0e      	ldr	r2, [pc, #56]	; (80082e8 <HAL_UART_Receive_IT+0x1ac>)
 80082b0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80082c8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	e000      	b.n	80082d0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80082ce:	2302      	movs	r3, #2
  }
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	08009359 	.word	0x08009359
 80082e0:	08009251 	.word	0x08009251
 80082e4:	080091a5 	.word	0x080091a5
 80082e8:	080090fb 	.word	0x080090fb

080082ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800830c:	69fa      	ldr	r2, [r7, #28]
 800830e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008312:	4013      	ands	r3, r2
 8008314:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d118      	bne.n	800834e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	f003 0320 	and.w	r3, r3, #32
 8008322:	2b00      	cmp	r3, #0
 8008324:	d013      	beq.n	800834e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	f003 0320 	and.w	r3, r3, #32
 800832c:	2b00      	cmp	r3, #0
 800832e:	d104      	bne.n	800833a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d009      	beq.n	800834e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 8145 	beq.w	80085ce <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	4798      	blx	r3
      }
      return;
 800834c:	e13f      	b.n	80085ce <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 80e8 	beq.w	8008526 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	4ba1      	ldr	r3, [pc, #644]	; (80085e0 <HAL_UART_IRQHandler+0x2f4>)
 800835a:	4013      	ands	r3, r2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d105      	bne.n	800836c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	4ba0      	ldr	r3, [pc, #640]	; (80085e4 <HAL_UART_IRQHandler+0x2f8>)
 8008364:	4013      	ands	r3, r2
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 80dd 	beq.w	8008526 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d010      	beq.n	8008398 <HAL_UART_IRQHandler+0xac>
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2201      	movs	r2, #1
 8008386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800838e:	f043 0201 	orr.w	r2, r3, #1
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d010      	beq.n	80083c4 <HAL_UART_IRQHandler+0xd8>
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00b      	beq.n	80083c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2202      	movs	r2, #2
 80083b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ba:	f043 0204 	orr.w	r2, r3, #4
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	f003 0304 	and.w	r3, r3, #4
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d010      	beq.n	80083f0 <HAL_UART_IRQHandler+0x104>
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00b      	beq.n	80083f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2204      	movs	r2, #4
 80083de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e6:	f043 0202 	orr.w	r2, r3, #2
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	f003 0308 	and.w	r3, r3, #8
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d015      	beq.n	8008426 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	f003 0320 	and.w	r3, r3, #32
 8008400:	2b00      	cmp	r3, #0
 8008402:	d104      	bne.n	800840e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	4b76      	ldr	r3, [pc, #472]	; (80085e0 <HAL_UART_IRQHandler+0x2f4>)
 8008408:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00b      	beq.n	8008426 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2208      	movs	r2, #8
 8008414:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800841c:	f043 0208 	orr.w	r2, r3, #8
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800842c:	2b00      	cmp	r3, #0
 800842e:	d011      	beq.n	8008454 <HAL_UART_IRQHandler+0x168>
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00c      	beq.n	8008454 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800844a:	f043 0220 	orr.w	r2, r3, #32
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 80b9 	beq.w	80085d2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b00      	cmp	r3, #0
 8008468:	d011      	beq.n	800848e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	f003 0320 	and.w	r3, r3, #32
 8008470:	2b00      	cmp	r3, #0
 8008472:	d104      	bne.n	800847e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d007      	beq.n	800848e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008494:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a0:	2b40      	cmp	r3, #64	; 0x40
 80084a2:	d004      	beq.n	80084ae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d031      	beq.n	8008512 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fcb8 	bl	8008e24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084be:	2b40      	cmp	r3, #64	; 0x40
 80084c0:	d123      	bne.n	800850a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084d0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d013      	beq.n	8008502 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084de:	4a42      	ldr	r2, [pc, #264]	; (80085e8 <HAL_UART_IRQHandler+0x2fc>)
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fc fbf6 	bl	8004cd8 <HAL_DMA_Abort_IT>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d017      	beq.n	8008522 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80084fc:	4610      	mov	r0, r2
 80084fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008500:	e00f      	b.n	8008522 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f872 	bl	80085ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008508:	e00b      	b.n	8008522 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 f86e 	bl	80085ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008510:	e007      	b.n	8008522 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f86a 	bl	80085ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8008520:	e057      	b.n	80085d2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008522:	bf00      	nop
    return;
 8008524:	e055      	b.n	80085d2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00d      	beq.n	800854c <HAL_UART_IRQHandler+0x260>
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d008      	beq.n	800854c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008542:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 ff8b 	bl	8009460 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800854a:	e045      	b.n	80085d8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008552:	2b00      	cmp	r3, #0
 8008554:	d012      	beq.n	800857c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800855c:	2b00      	cmp	r3, #0
 800855e:	d104      	bne.n	800856a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d008      	beq.n	800857c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800856e:	2b00      	cmp	r3, #0
 8008570:	d031      	beq.n	80085d6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	4798      	blx	r3
    }
    return;
 800857a:	e02c      	b.n	80085d6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008582:	2b00      	cmp	r3, #0
 8008584:	d008      	beq.n	8008598 <HAL_UART_IRQHandler+0x2ac>
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fd98 	bl	80090c6 <UART_EndTransmit_IT>
    return;
 8008596:	e01f      	b.n	80085d8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d008      	beq.n	80085b4 <HAL_UART_IRQHandler+0x2c8>
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d003      	beq.n	80085b4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 ff6b 	bl	8009488 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085b2:	e011      	b.n	80085d8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00c      	beq.n	80085d8 <HAL_UART_IRQHandler+0x2ec>
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	da09      	bge.n	80085d8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 ff55 	bl	8009474 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085ca:	bf00      	nop
 80085cc:	e004      	b.n	80085d8 <HAL_UART_IRQHandler+0x2ec>
      return;
 80085ce:	bf00      	nop
 80085d0:	e002      	b.n	80085d8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80085d2:	bf00      	nop
 80085d4:	e000      	b.n	80085d8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80085d6:	bf00      	nop
  }
}
 80085d8:	3720      	adds	r7, #32
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	10000001 	.word	0x10000001
 80085e4:	04000120 	.word	0x04000120
 80085e8:	08008e6b 	.word	0x08008e6b

080085ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008600:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8008604:	b088      	sub	sp, #32
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	431a      	orrs	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	695b      	ldr	r3, [r3, #20]
 800861c:	431a      	orrs	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	4313      	orrs	r3, r2
 8008624:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800862a:	69fa      	ldr	r2, [r7, #28]
 800862c:	4313      	orrs	r3, r2
 800862e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	4bb0      	ldr	r3, [pc, #704]	; (80088f8 <UART_SetConfig+0x2f8>)
 8008638:	4013      	ands	r3, r2
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	69f9      	ldr	r1, [r7, #28]
 8008640:	430b      	orrs	r3, r1
 8008642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4aa5      	ldr	r2, [pc, #660]	; (80088fc <UART_SetConfig+0x2fc>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d004      	beq.n	8008674 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	4313      	orrs	r3, r2
 8008672:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800867e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	69f9      	ldr	r1, [r7, #28]
 8008688:	430b      	orrs	r3, r1
 800868a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	f023 010f 	bic.w	r1, r3, #15
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a96      	ldr	r2, [pc, #600]	; (8008900 <UART_SetConfig+0x300>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d121      	bne.n	80086f0 <UART_SetConfig+0xf0>
 80086ac:	4b95      	ldr	r3, [pc, #596]	; (8008904 <UART_SetConfig+0x304>)
 80086ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d816      	bhi.n	80086e8 <UART_SetConfig+0xe8>
 80086ba:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <UART_SetConfig+0xc0>)
 80086bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c0:	080086d1 	.word	0x080086d1
 80086c4:	080086dd 	.word	0x080086dd
 80086c8:	080086d7 	.word	0x080086d7
 80086cc:	080086e3 	.word	0x080086e3
 80086d0:	2301      	movs	r3, #1
 80086d2:	76fb      	strb	r3, [r7, #27]
 80086d4:	e0be      	b.n	8008854 <UART_SetConfig+0x254>
 80086d6:	2302      	movs	r3, #2
 80086d8:	76fb      	strb	r3, [r7, #27]
 80086da:	e0bb      	b.n	8008854 <UART_SetConfig+0x254>
 80086dc:	2304      	movs	r3, #4
 80086de:	76fb      	strb	r3, [r7, #27]
 80086e0:	e0b8      	b.n	8008854 <UART_SetConfig+0x254>
 80086e2:	2308      	movs	r3, #8
 80086e4:	76fb      	strb	r3, [r7, #27]
 80086e6:	e0b5      	b.n	8008854 <UART_SetConfig+0x254>
 80086e8:	2310      	movs	r3, #16
 80086ea:	76fb      	strb	r3, [r7, #27]
 80086ec:	bf00      	nop
 80086ee:	e0b1      	b.n	8008854 <UART_SetConfig+0x254>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a84      	ldr	r2, [pc, #528]	; (8008908 <UART_SetConfig+0x308>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d134      	bne.n	8008764 <UART_SetConfig+0x164>
 80086fa:	4b82      	ldr	r3, [pc, #520]	; (8008904 <UART_SetConfig+0x304>)
 80086fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008700:	f003 030c 	and.w	r3, r3, #12
 8008704:	2b0c      	cmp	r3, #12
 8008706:	d829      	bhi.n	800875c <UART_SetConfig+0x15c>
 8008708:	a201      	add	r2, pc, #4	; (adr r2, 8008710 <UART_SetConfig+0x110>)
 800870a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870e:	bf00      	nop
 8008710:	08008745 	.word	0x08008745
 8008714:	0800875d 	.word	0x0800875d
 8008718:	0800875d 	.word	0x0800875d
 800871c:	0800875d 	.word	0x0800875d
 8008720:	08008751 	.word	0x08008751
 8008724:	0800875d 	.word	0x0800875d
 8008728:	0800875d 	.word	0x0800875d
 800872c:	0800875d 	.word	0x0800875d
 8008730:	0800874b 	.word	0x0800874b
 8008734:	0800875d 	.word	0x0800875d
 8008738:	0800875d 	.word	0x0800875d
 800873c:	0800875d 	.word	0x0800875d
 8008740:	08008757 	.word	0x08008757
 8008744:	2300      	movs	r3, #0
 8008746:	76fb      	strb	r3, [r7, #27]
 8008748:	e084      	b.n	8008854 <UART_SetConfig+0x254>
 800874a:	2302      	movs	r3, #2
 800874c:	76fb      	strb	r3, [r7, #27]
 800874e:	e081      	b.n	8008854 <UART_SetConfig+0x254>
 8008750:	2304      	movs	r3, #4
 8008752:	76fb      	strb	r3, [r7, #27]
 8008754:	e07e      	b.n	8008854 <UART_SetConfig+0x254>
 8008756:	2308      	movs	r3, #8
 8008758:	76fb      	strb	r3, [r7, #27]
 800875a:	e07b      	b.n	8008854 <UART_SetConfig+0x254>
 800875c:	2310      	movs	r3, #16
 800875e:	76fb      	strb	r3, [r7, #27]
 8008760:	bf00      	nop
 8008762:	e077      	b.n	8008854 <UART_SetConfig+0x254>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a68      	ldr	r2, [pc, #416]	; (800890c <UART_SetConfig+0x30c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d120      	bne.n	80087b0 <UART_SetConfig+0x1b0>
 800876e:	4b65      	ldr	r3, [pc, #404]	; (8008904 <UART_SetConfig+0x304>)
 8008770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008774:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008778:	2b10      	cmp	r3, #16
 800877a:	d00f      	beq.n	800879c <UART_SetConfig+0x19c>
 800877c:	2b10      	cmp	r3, #16
 800877e:	d802      	bhi.n	8008786 <UART_SetConfig+0x186>
 8008780:	2b00      	cmp	r3, #0
 8008782:	d005      	beq.n	8008790 <UART_SetConfig+0x190>
 8008784:	e010      	b.n	80087a8 <UART_SetConfig+0x1a8>
 8008786:	2b20      	cmp	r3, #32
 8008788:	d005      	beq.n	8008796 <UART_SetConfig+0x196>
 800878a:	2b30      	cmp	r3, #48	; 0x30
 800878c:	d009      	beq.n	80087a2 <UART_SetConfig+0x1a2>
 800878e:	e00b      	b.n	80087a8 <UART_SetConfig+0x1a8>
 8008790:	2300      	movs	r3, #0
 8008792:	76fb      	strb	r3, [r7, #27]
 8008794:	e05e      	b.n	8008854 <UART_SetConfig+0x254>
 8008796:	2302      	movs	r3, #2
 8008798:	76fb      	strb	r3, [r7, #27]
 800879a:	e05b      	b.n	8008854 <UART_SetConfig+0x254>
 800879c:	2304      	movs	r3, #4
 800879e:	76fb      	strb	r3, [r7, #27]
 80087a0:	e058      	b.n	8008854 <UART_SetConfig+0x254>
 80087a2:	2308      	movs	r3, #8
 80087a4:	76fb      	strb	r3, [r7, #27]
 80087a6:	e055      	b.n	8008854 <UART_SetConfig+0x254>
 80087a8:	2310      	movs	r3, #16
 80087aa:	76fb      	strb	r3, [r7, #27]
 80087ac:	bf00      	nop
 80087ae:	e051      	b.n	8008854 <UART_SetConfig+0x254>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a56      	ldr	r2, [pc, #344]	; (8008910 <UART_SetConfig+0x310>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d120      	bne.n	80087fc <UART_SetConfig+0x1fc>
 80087ba:	4b52      	ldr	r3, [pc, #328]	; (8008904 <UART_SetConfig+0x304>)
 80087bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80087c4:	2b40      	cmp	r3, #64	; 0x40
 80087c6:	d00f      	beq.n	80087e8 <UART_SetConfig+0x1e8>
 80087c8:	2b40      	cmp	r3, #64	; 0x40
 80087ca:	d802      	bhi.n	80087d2 <UART_SetConfig+0x1d2>
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <UART_SetConfig+0x1dc>
 80087d0:	e010      	b.n	80087f4 <UART_SetConfig+0x1f4>
 80087d2:	2b80      	cmp	r3, #128	; 0x80
 80087d4:	d005      	beq.n	80087e2 <UART_SetConfig+0x1e2>
 80087d6:	2bc0      	cmp	r3, #192	; 0xc0
 80087d8:	d009      	beq.n	80087ee <UART_SetConfig+0x1ee>
 80087da:	e00b      	b.n	80087f4 <UART_SetConfig+0x1f4>
 80087dc:	2300      	movs	r3, #0
 80087de:	76fb      	strb	r3, [r7, #27]
 80087e0:	e038      	b.n	8008854 <UART_SetConfig+0x254>
 80087e2:	2302      	movs	r3, #2
 80087e4:	76fb      	strb	r3, [r7, #27]
 80087e6:	e035      	b.n	8008854 <UART_SetConfig+0x254>
 80087e8:	2304      	movs	r3, #4
 80087ea:	76fb      	strb	r3, [r7, #27]
 80087ec:	e032      	b.n	8008854 <UART_SetConfig+0x254>
 80087ee:	2308      	movs	r3, #8
 80087f0:	76fb      	strb	r3, [r7, #27]
 80087f2:	e02f      	b.n	8008854 <UART_SetConfig+0x254>
 80087f4:	2310      	movs	r3, #16
 80087f6:	76fb      	strb	r3, [r7, #27]
 80087f8:	bf00      	nop
 80087fa:	e02b      	b.n	8008854 <UART_SetConfig+0x254>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a3e      	ldr	r2, [pc, #248]	; (80088fc <UART_SetConfig+0x2fc>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d124      	bne.n	8008850 <UART_SetConfig+0x250>
 8008806:	4b3f      	ldr	r3, [pc, #252]	; (8008904 <UART_SetConfig+0x304>)
 8008808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800880c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008814:	d012      	beq.n	800883c <UART_SetConfig+0x23c>
 8008816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800881a:	d802      	bhi.n	8008822 <UART_SetConfig+0x222>
 800881c:	2b00      	cmp	r3, #0
 800881e:	d007      	beq.n	8008830 <UART_SetConfig+0x230>
 8008820:	e012      	b.n	8008848 <UART_SetConfig+0x248>
 8008822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008826:	d006      	beq.n	8008836 <UART_SetConfig+0x236>
 8008828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800882c:	d009      	beq.n	8008842 <UART_SetConfig+0x242>
 800882e:	e00b      	b.n	8008848 <UART_SetConfig+0x248>
 8008830:	2300      	movs	r3, #0
 8008832:	76fb      	strb	r3, [r7, #27]
 8008834:	e00e      	b.n	8008854 <UART_SetConfig+0x254>
 8008836:	2302      	movs	r3, #2
 8008838:	76fb      	strb	r3, [r7, #27]
 800883a:	e00b      	b.n	8008854 <UART_SetConfig+0x254>
 800883c:	2304      	movs	r3, #4
 800883e:	76fb      	strb	r3, [r7, #27]
 8008840:	e008      	b.n	8008854 <UART_SetConfig+0x254>
 8008842:	2308      	movs	r3, #8
 8008844:	76fb      	strb	r3, [r7, #27]
 8008846:	e005      	b.n	8008854 <UART_SetConfig+0x254>
 8008848:	2310      	movs	r3, #16
 800884a:	76fb      	strb	r3, [r7, #27]
 800884c:	bf00      	nop
 800884e:	e001      	b.n	8008854 <UART_SetConfig+0x254>
 8008850:	2310      	movs	r3, #16
 8008852:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a28      	ldr	r2, [pc, #160]	; (80088fc <UART_SetConfig+0x2fc>)
 800885a:	4293      	cmp	r3, r2
 800885c:	f040 80a1 	bne.w	80089a2 <UART_SetConfig+0x3a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008860:	7efb      	ldrb	r3, [r7, #27]
 8008862:	2b08      	cmp	r3, #8
 8008864:	d823      	bhi.n	80088ae <UART_SetConfig+0x2ae>
 8008866:	a201      	add	r2, pc, #4	; (adr r2, 800886c <UART_SetConfig+0x26c>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	08008891 	.word	0x08008891
 8008870:	080088af 	.word	0x080088af
 8008874:	08008899 	.word	0x08008899
 8008878:	080088af 	.word	0x080088af
 800887c:	0800889f 	.word	0x0800889f
 8008880:	080088af 	.word	0x080088af
 8008884:	080088af 	.word	0x080088af
 8008888:	080088af 	.word	0x080088af
 800888c:	080088a7 	.word	0x080088a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008890:	f7fd ffb6 	bl	8006800 <HAL_RCC_GetPCLK1Freq>
 8008894:	6178      	str	r0, [r7, #20]
        break;
 8008896:	e00f      	b.n	80088b8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008898:	4b1e      	ldr	r3, [pc, #120]	; (8008914 <UART_SetConfig+0x314>)
 800889a:	617b      	str	r3, [r7, #20]
        break;
 800889c:	e00c      	b.n	80088b8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800889e:	f7fd ff41 	bl	8006724 <HAL_RCC_GetSysClockFreq>
 80088a2:	6178      	str	r0, [r7, #20]
        break;
 80088a4:	e008      	b.n	80088b8 <UART_SetConfig+0x2b8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088aa:	617b      	str	r3, [r7, #20]
        break;
 80088ac:	e004      	b.n	80088b8 <UART_SetConfig+0x2b8>
      default:
        pclk = 0U;
 80088ae:	2300      	movs	r3, #0
 80088b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	76bb      	strb	r3, [r7, #26]
        break;
 80088b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 8130 	beq.w	8008b20 <UART_SetConfig+0x520>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	4a14      	ldr	r2, [pc, #80]	; (8008918 <UART_SetConfig+0x318>)
 80088c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ca:	461a      	mov	r2, r3
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80088d2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	4613      	mov	r3, r2
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	4413      	add	r3, r2
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d305      	bcc.n	80088f0 <UART_SetConfig+0x2f0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d915      	bls.n	800891c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	76bb      	strb	r3, [r7, #26]
 80088f4:	e114      	b.n	8008b20 <UART_SetConfig+0x520>
 80088f6:	bf00      	nop
 80088f8:	cfff69f3 	.word	0xcfff69f3
 80088fc:	40008000 	.word	0x40008000
 8008900:	40013800 	.word	0x40013800
 8008904:	40021000 	.word	0x40021000
 8008908:	40004400 	.word	0x40004400
 800890c:	40004800 	.word	0x40004800
 8008910:	40004c00 	.word	0x40004c00
 8008914:	00f42400 	.word	0x00f42400
 8008918:	0800c420 	.word	0x0800c420
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	4618      	mov	r0, r3
 8008920:	f04f 0100 	mov.w	r1, #0
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	4a87      	ldr	r2, [pc, #540]	; (8008b48 <UART_SetConfig+0x548>)
 800892a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800892e:	b29b      	uxth	r3, r3
 8008930:	f04f 0400 	mov.w	r4, #0
 8008934:	461a      	mov	r2, r3
 8008936:	4623      	mov	r3, r4
 8008938:	f7f8 f9ce 	bl	8000cd8 <__aeabi_uldivmod>
 800893c:	4603      	mov	r3, r0
 800893e:	460c      	mov	r4, r1
 8008940:	4619      	mov	r1, r3
 8008942:	4622      	mov	r2, r4
 8008944:	f04f 0300 	mov.w	r3, #0
 8008948:	f04f 0400 	mov.w	r4, #0
 800894c:	0214      	lsls	r4, r2, #8
 800894e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008952:	020b      	lsls	r3, r1, #8
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	6852      	ldr	r2, [r2, #4]
 8008958:	0852      	lsrs	r2, r2, #1
 800895a:	4611      	mov	r1, r2
 800895c:	f04f 0200 	mov.w	r2, #0
 8008960:	eb13 0b01 	adds.w	fp, r3, r1
 8008964:	eb44 0c02 	adc.w	ip, r4, r2
 8008968:	4658      	mov	r0, fp
 800896a:	4661      	mov	r1, ip
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f04f 0400 	mov.w	r4, #0
 8008974:	461a      	mov	r2, r3
 8008976:	4623      	mov	r3, r4
 8008978:	f7f8 f9ae 	bl	8000cd8 <__aeabi_uldivmod>
 800897c:	4603      	mov	r3, r0
 800897e:	460c      	mov	r4, r1
 8008980:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008988:	d308      	bcc.n	800899c <UART_SetConfig+0x39c>
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008990:	d204      	bcs.n	800899c <UART_SetConfig+0x39c>
        {
          huart->Instance->BRR = usartdiv;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	60da      	str	r2, [r3, #12]
 800899a:	e0c1      	b.n	8008b20 <UART_SetConfig+0x520>
        }
        else
        {
          ret = HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	76bb      	strb	r3, [r7, #26]
 80089a0:	e0be      	b.n	8008b20 <UART_SetConfig+0x520>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089aa:	d164      	bne.n	8008a76 <UART_SetConfig+0x476>
  {
    switch (clocksource)
 80089ac:	7efb      	ldrb	r3, [r7, #27]
 80089ae:	2b08      	cmp	r3, #8
 80089b0:	d827      	bhi.n	8008a02 <UART_SetConfig+0x402>
 80089b2:	a201      	add	r2, pc, #4	; (adr r2, 80089b8 <UART_SetConfig+0x3b8>)
 80089b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b8:	080089dd 	.word	0x080089dd
 80089bc:	080089e5 	.word	0x080089e5
 80089c0:	080089ed 	.word	0x080089ed
 80089c4:	08008a03 	.word	0x08008a03
 80089c8:	080089f3 	.word	0x080089f3
 80089cc:	08008a03 	.word	0x08008a03
 80089d0:	08008a03 	.word	0x08008a03
 80089d4:	08008a03 	.word	0x08008a03
 80089d8:	080089fb 	.word	0x080089fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089dc:	f7fd ff10 	bl	8006800 <HAL_RCC_GetPCLK1Freq>
 80089e0:	6178      	str	r0, [r7, #20]
        break;
 80089e2:	e013      	b.n	8008a0c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089e4:	f7fd ff22 	bl	800682c <HAL_RCC_GetPCLK2Freq>
 80089e8:	6178      	str	r0, [r7, #20]
        break;
 80089ea:	e00f      	b.n	8008a0c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089ec:	4b57      	ldr	r3, [pc, #348]	; (8008b4c <UART_SetConfig+0x54c>)
 80089ee:	617b      	str	r3, [r7, #20]
        break;
 80089f0:	e00c      	b.n	8008a0c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089f2:	f7fd fe97 	bl	8006724 <HAL_RCC_GetSysClockFreq>
 80089f6:	6178      	str	r0, [r7, #20]
        break;
 80089f8:	e008      	b.n	8008a0c <UART_SetConfig+0x40c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089fe:	617b      	str	r3, [r7, #20]
        break;
 8008a00:	e004      	b.n	8008a0c <UART_SetConfig+0x40c>
      default:
        pclk = 0U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	76bb      	strb	r3, [r7, #26]
        break;
 8008a0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 8086 	beq.w	8008b20 <UART_SetConfig+0x520>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	4a4b      	ldr	r2, [pc, #300]	; (8008b48 <UART_SetConfig+0x548>)
 8008a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a26:	005a      	lsls	r2, r3, #1
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	085b      	lsrs	r3, r3, #1
 8008a2e:	441a      	add	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	2b0f      	cmp	r3, #15
 8008a40:	d916      	bls.n	8008a70 <UART_SetConfig+0x470>
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a48:	d212      	bcs.n	8008a70 <UART_SetConfig+0x470>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f023 030f 	bic.w	r3, r3, #15
 8008a52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	085b      	lsrs	r3, r3, #1
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	f003 0307 	and.w	r3, r3, #7
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	89fb      	ldrh	r3, [r7, #14]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	89fa      	ldrh	r2, [r7, #14]
 8008a6c:	60da      	str	r2, [r3, #12]
 8008a6e:	e057      	b.n	8008b20 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	76bb      	strb	r3, [r7, #26]
 8008a74:	e054      	b.n	8008b20 <UART_SetConfig+0x520>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a76:	7efb      	ldrb	r3, [r7, #27]
 8008a78:	2b08      	cmp	r3, #8
 8008a7a:	d828      	bhi.n	8008ace <UART_SetConfig+0x4ce>
 8008a7c:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <UART_SetConfig+0x484>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008aa9 	.word	0x08008aa9
 8008a88:	08008ab1 	.word	0x08008ab1
 8008a8c:	08008ab9 	.word	0x08008ab9
 8008a90:	08008acf 	.word	0x08008acf
 8008a94:	08008abf 	.word	0x08008abf
 8008a98:	08008acf 	.word	0x08008acf
 8008a9c:	08008acf 	.word	0x08008acf
 8008aa0:	08008acf 	.word	0x08008acf
 8008aa4:	08008ac7 	.word	0x08008ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aa8:	f7fd feaa 	bl	8006800 <HAL_RCC_GetPCLK1Freq>
 8008aac:	6178      	str	r0, [r7, #20]
        break;
 8008aae:	e013      	b.n	8008ad8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ab0:	f7fd febc 	bl	800682c <HAL_RCC_GetPCLK2Freq>
 8008ab4:	6178      	str	r0, [r7, #20]
        break;
 8008ab6:	e00f      	b.n	8008ad8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ab8:	4b24      	ldr	r3, [pc, #144]	; (8008b4c <UART_SetConfig+0x54c>)
 8008aba:	617b      	str	r3, [r7, #20]
        break;
 8008abc:	e00c      	b.n	8008ad8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008abe:	f7fd fe31 	bl	8006724 <HAL_RCC_GetSysClockFreq>
 8008ac2:	6178      	str	r0, [r7, #20]
        break;
 8008ac4:	e008      	b.n	8008ad8 <UART_SetConfig+0x4d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008aca:	617b      	str	r3, [r7, #20]
        break;
 8008acc:	e004      	b.n	8008ad8 <UART_SetConfig+0x4d8>
      default:
        pclk = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	76bb      	strb	r3, [r7, #26]
        break;
 8008ad6:	bf00      	nop
    }

    if (pclk != 0U)
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d020      	beq.n	8008b20 <UART_SetConfig+0x520>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae2:	4a19      	ldr	r2, [pc, #100]	; (8008b48 <UART_SetConfig+0x548>)
 8008ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	fbb3 f2f2 	udiv	r2, r3, r2
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	085b      	lsrs	r3, r3, #1
 8008af6:	441a      	add	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	2b0f      	cmp	r3, #15
 8008b08:	d908      	bls.n	8008b1c <UART_SetConfig+0x51c>
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b10:	d204      	bcs.n	8008b1c <UART_SetConfig+0x51c>
      {
        huart->Instance->BRR = usartdiv;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	60da      	str	r2, [r3, #12]
 8008b1a:	e001      	b.n	8008b20 <UART_SetConfig+0x520>
      }
      else
      {
        ret = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008b3c:	7ebb      	ldrb	r3, [r7, #26]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3720      	adds	r7, #32
 8008b42:	46bd      	mov	sp, r7
 8008b44:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008b48:	0800c420 	.word	0x0800c420
 8008b4c:	00f42400 	.word	0x00f42400

08008b50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00a      	beq.n	8008b7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b7e:	f003 0302 	and.w	r3, r3, #2
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d00a      	beq.n	8008b9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00a      	beq.n	8008bbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc2:	f003 0308 	and.w	r3, r3, #8
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00a      	beq.n	8008be0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be4:	f003 0310 	and.w	r3, r3, #16
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00a      	beq.n	8008c02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c06:	f003 0320 	and.w	r3, r3, #32
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d01a      	beq.n	8008c66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c4e:	d10a      	bne.n	8008c66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	430a      	orrs	r2, r1
 8008c64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00a      	beq.n	8008c88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	430a      	orrs	r2, r1
 8008c86:	605a      	str	r2, [r3, #4]
  }
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af02      	add	r7, sp, #8
 8008c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ca4:	f7fa fbd4 	bl	8003450 <HAL_GetTick>
 8008ca8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0308 	and.w	r3, r3, #8
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	d10e      	bne.n	8008cd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f82c 	bl	8008d24 <UART_WaitOnFlagUntilTimeout>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e022      	b.n	8008d1c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b04      	cmp	r3, #4
 8008ce2:	d10e      	bne.n	8008d02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ce8:	9300      	str	r3, [sp, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f816 	bl	8008d24 <UART_WaitOnFlagUntilTimeout>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e00c      	b.n	8008d1c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2220      	movs	r2, #32
 8008d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	603b      	str	r3, [r7, #0]
 8008d30:	4613      	mov	r3, r2
 8008d32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d34:	e062      	b.n	8008dfc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3c:	d05e      	beq.n	8008dfc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d3e:	f7fa fb87 	bl	8003450 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d302      	bcc.n	8008d54 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d11d      	bne.n	8008d90 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d62:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689a      	ldr	r2, [r3, #8]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f022 0201 	bic.w	r2, r2, #1
 8008d72:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2220      	movs	r2, #32
 8008d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2220      	movs	r2, #32
 8008d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e045      	b.n	8008e1c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0304 	and.w	r3, r3, #4
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d02e      	beq.n	8008dfc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dac:	d126      	bne.n	8008dfc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008db6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008dc6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689a      	ldr	r2, [r3, #8]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f022 0201 	bic.w	r2, r2, #1
 8008dd6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2220      	movs	r2, #32
 8008ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e00f      	b.n	8008e1c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	69da      	ldr	r2, [r3, #28]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	4013      	ands	r3, r2
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	bf0c      	ite	eq
 8008e0c:	2301      	moveq	r3, #1
 8008e0e:	2300      	movne	r3, #0
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	461a      	mov	r2, r3
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d08d      	beq.n	8008d36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e3a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	6812      	ldr	r2, [r2, #0]
 8008e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e4a:	f023 0301 	bic.w	r3, r3, #1
 8008e4e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2220      	movs	r2, #32
 8008e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008e5e:	bf00      	nop
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b084      	sub	sp, #16
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f7ff fbaf 	bl	80085ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e8e:	bf00      	nop
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ea4:	2b21      	cmp	r3, #33	; 0x21
 8008ea6:	d12a      	bne.n	8008efe <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d110      	bne.n	8008ed6 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ec2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ed2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8008ed4:	e013      	b.n	8008efe <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eda:	781a      	ldrb	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008efe:	bf00      	nop
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b085      	sub	sp, #20
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f18:	2b21      	cmp	r3, #33	; 0x21
 8008f1a:	d12f      	bne.n	8008f7c <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d110      	bne.n	8008f4a <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f36:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f46:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008f48:	e018      	b.n	8008f7c <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	461a      	mov	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f5e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f64:	1c9a      	adds	r2, r3, #2
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	3b01      	subs	r3, #1
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8008f7c:	bf00      	nop
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f96:	2b21      	cmp	r3, #33	; 0x21
 8008f98:	d13d      	bne.n	8009016 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008fa0:	81fb      	strh	r3, [r7, #14]
 8008fa2:	e035      	b.n	8009010 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d111      	bne.n	8008fd4 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689a      	ldr	r2, [r3, #8]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8008fbe:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fce:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8008fd0:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8008fd2:	e020      	b.n	8009016 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d013      	beq.n	800900a <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe6:	781a      	ldrb	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	3b01      	subs	r3, #1
 8009002:	b29a      	uxth	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800900a:	89fb      	ldrh	r3, [r7, #14]
 800900c:	3b01      	subs	r3, #1
 800900e:	81fb      	strh	r3, [r7, #14]
 8009010:	89fb      	ldrh	r3, [r7, #14]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1c6      	bne.n	8008fa4 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8009016:	bf00      	nop
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009022:	b480      	push	{r7}
 8009024:	b085      	sub	sp, #20
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009030:	2b21      	cmp	r3, #33	; 0x21
 8009032:	d142      	bne.n	80090ba <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800903a:	81fb      	strh	r3, [r7, #14]
 800903c:	e03a      	b.n	80090b4 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009044:	b29b      	uxth	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d111      	bne.n	800906e <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009058:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009068:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800906a:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 800906c:	e025      	b.n	80090ba <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	69db      	ldr	r3, [r3, #28]
 8009074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009078:	2b00      	cmp	r3, #0
 800907a:	d018      	beq.n	80090ae <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009080:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009090:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009096:	1c9a      	adds	r2, r3, #2
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	3b01      	subs	r3, #1
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80090ae:	89fb      	ldrh	r3, [r7, #14]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	81fb      	strh	r3, [r7, #14]
 80090b4:	89fb      	ldrh	r3, [r7, #14]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1c1      	bne.n	800903e <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 80090ba:	bf00      	nop
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b082      	sub	sp, #8
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090dc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7f8 fbd5 	bl	800189c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090f2:	bf00      	nop
 80090f4:	3708      	adds	r7, #8
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b084      	sub	sp, #16
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009108:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009110:	2b22      	cmp	r3, #34	; 0x22
 8009112:	d13b      	bne.n	800918c <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800911c:	89bb      	ldrh	r3, [r7, #12]
 800911e:	b2d9      	uxtb	r1, r3
 8009120:	89fb      	ldrh	r3, [r7, #14]
 8009122:	b2da      	uxtb	r2, r3
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009128:	400a      	ands	r2, r1
 800912a:	b2d2      	uxtb	r2, r2
 800912c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800913e:	b29b      	uxth	r3, r3
 8009140:	3b01      	subs	r3, #1
 8009142:	b29a      	uxth	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009150:	b29b      	uxth	r3, r3
 8009152:	2b00      	cmp	r3, #0
 8009154:	d122      	bne.n	800919c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009164:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689a      	ldr	r2, [r3, #8]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0201 	bic.w	r2, r2, #1
 8009174:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2220      	movs	r2, #32
 800917a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7f8 fb99 	bl	80018bc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800918a:	e007      	b.n	800919c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	699a      	ldr	r2, [r3, #24]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0208 	orr.w	r2, r2, #8
 800919a:	619a      	str	r2, [r3, #24]
}
 800919c:	bf00      	nop
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80091b2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ba:	2b22      	cmp	r3, #34	; 0x22
 80091bc:	d13b      	bne.n	8009236 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ca:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80091cc:	89ba      	ldrh	r2, [r7, #12]
 80091ce:	89fb      	ldrh	r3, [r7, #14]
 80091d0:	4013      	ands	r3, r2
 80091d2:	b29a      	uxth	r2, r3
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091dc:	1c9a      	adds	r2, r3, #2
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	3b01      	subs	r3, #1
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d122      	bne.n	8009246 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800920e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689a      	ldr	r2, [r3, #8]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f022 0201 	bic.w	r2, r2, #1
 800921e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2220      	movs	r2, #32
 8009224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7f8 fb44 	bl	80018bc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009234:	e007      	b.n	8009246 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	699a      	ldr	r2, [r3, #24]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f042 0208 	orr.w	r2, r2, #8
 8009244:	619a      	str	r2, [r3, #24]
}
 8009246:	bf00      	nop
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800925e:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009266:	2b22      	cmp	r3, #34	; 0x22
 8009268:	d168      	bne.n	800933c <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009270:	81fb      	strh	r3, [r7, #14]
 8009272:	e03f      	b.n	80092f4 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800927c:	893b      	ldrh	r3, [r7, #8]
 800927e:	b2d9      	uxtb	r1, r3
 8009280:	89bb      	ldrh	r3, [r7, #12]
 8009282:	b2da      	uxtb	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009288:	400a      	ands	r2, r1
 800928a:	b2d2      	uxtb	r2, r2
 800928c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800929e:	b29b      	uxth	r3, r3
 80092a0:	3b01      	subs	r3, #1
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d11b      	bne.n	80092ee <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092c4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	6812      	ldr	r2, [r2, #0]
 80092d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092d4:	f023 0301 	bic.w	r3, r3, #1
 80092d8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2220      	movs	r2, #32
 80092de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7f8 fae7 	bl	80018bc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80092ee:	89fb      	ldrh	r3, [r7, #14]
 80092f0:	3b01      	subs	r3, #1
 80092f2:	81fb      	strh	r3, [r7, #14]
 80092f4:	89fb      	ldrh	r3, [r7, #14]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1bc      	bne.n	8009274 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009300:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009302:	897b      	ldrh	r3, [r7, #10]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d021      	beq.n	800934c <UART_RxISR_8BIT_FIFOEN+0xfc>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800930e:	897a      	ldrh	r2, [r7, #10]
 8009310:	429a      	cmp	r2, r3
 8009312:	d21b      	bcs.n	800934c <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689a      	ldr	r2, [r3, #8]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009322:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a0b      	ldr	r2, [pc, #44]	; (8009354 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8009328:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f042 0220 	orr.w	r2, r2, #32
 8009338:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800933a:	e007      	b.n	800934c <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	699a      	ldr	r2, [r3, #24]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f042 0208 	orr.w	r2, r2, #8
 800934a:	619a      	str	r2, [r3, #24]
}
 800934c:	bf00      	nop
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	080090fb 	.word	0x080090fb

08009358 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b086      	sub	sp, #24
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009366:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800936e:	2b22      	cmp	r3, #34	; 0x22
 8009370:	d168      	bne.n	8009444 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009378:	82fb      	strh	r3, [r7, #22]
 800937a:	e03f      	b.n	80093fc <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009388:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800938a:	8a3a      	ldrh	r2, [r7, #16]
 800938c:	8abb      	ldrh	r3, [r7, #20]
 800938e:	4013      	ands	r3, r2
 8009390:	b29a      	uxth	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800939a:	1c9a      	adds	r2, r3, #2
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	3b01      	subs	r3, #1
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d11b      	bne.n	80093f6 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093cc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	6812      	ldr	r2, [r2, #0]
 80093d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093dc:	f023 0301 	bic.w	r3, r3, #1
 80093e0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2220      	movs	r2, #32
 80093e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7f8 fa63 	bl	80018bc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80093f6:	8afb      	ldrh	r3, [r7, #22]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	82fb      	strh	r3, [r7, #22]
 80093fc:	8afb      	ldrh	r3, [r7, #22]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1bc      	bne.n	800937c <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009408:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800940a:	8a7b      	ldrh	r3, [r7, #18]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d021      	beq.n	8009454 <UART_RxISR_16BIT_FIFOEN+0xfc>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009416:	8a7a      	ldrh	r2, [r7, #18]
 8009418:	429a      	cmp	r2, r3
 800941a:	d21b      	bcs.n	8009454 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800942a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a0b      	ldr	r2, [pc, #44]	; (800945c <UART_RxISR_16BIT_FIFOEN+0x104>)
 8009430:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f042 0220 	orr.w	r2, r2, #32
 8009440:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009442:	e007      	b.n	8009454 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	699a      	ldr	r2, [r3, #24]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f042 0208 	orr.w	r2, r2, #8
 8009452:	619a      	str	r2, [r3, #24]
}
 8009454:	bf00      	nop
 8009456:	3718      	adds	r7, #24
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	080091a5 	.word	0x080091a5

08009460 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800947c:	bf00      	nop
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d101      	bne.n	80094b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80094ae:	2302      	movs	r3, #2
 80094b0:	e027      	b.n	8009502 <HAL_UARTEx_DisableFifoMode+0x66>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2224      	movs	r2, #36	; 0x24
 80094be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f022 0201 	bic.w	r2, r2, #1
 80094d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80094e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2220      	movs	r2, #32
 80094f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800951e:	2b01      	cmp	r3, #1
 8009520:	d101      	bne.n	8009526 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009522:	2302      	movs	r3, #2
 8009524:	e02d      	b.n	8009582 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2224      	movs	r2, #36	; 0x24
 8009532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f022 0201 	bic.w	r2, r2, #1
 800954c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f850 	bl	8009608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2220      	movs	r2, #32
 8009574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800959a:	2b01      	cmp	r3, #1
 800959c:	d101      	bne.n	80095a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800959e:	2302      	movs	r3, #2
 80095a0:	e02d      	b.n	80095fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2224      	movs	r2, #36	; 0x24
 80095ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0201 	bic.w	r2, r2, #1
 80095c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	683a      	ldr	r2, [r7, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f812 	bl	8009608 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
	...

08009608 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009608:	b480      	push	{r7}
 800960a:	b089      	sub	sp, #36	; 0x24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009610:	4a2f      	ldr	r2, [pc, #188]	; (80096d0 <UARTEx_SetNbDataToProcess+0xc8>)
 8009612:	f107 0314 	add.w	r3, r7, #20
 8009616:	e892 0003 	ldmia.w	r2, {r0, r1}
 800961a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800961e:	4a2d      	ldr	r2, [pc, #180]	; (80096d4 <UARTEx_SetNbDataToProcess+0xcc>)
 8009620:	f107 030c 	add.w	r3, r7, #12
 8009624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009628:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009630:	2b00      	cmp	r3, #0
 8009632:	d108      	bne.n	8009646 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2201      	movs	r2, #1
 8009640:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009644:	e03d      	b.n	80096c2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009646:	2308      	movs	r3, #8
 8009648:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800964a:	2308      	movs	r3, #8
 800964c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	0e5b      	lsrs	r3, r3, #25
 8009656:	b2db      	uxtb	r3, r3
 8009658:	f003 0307 	and.w	r3, r3, #7
 800965c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	0f5b      	lsrs	r3, r3, #29
 8009666:	b2db      	uxtb	r3, r3
 8009668:	f003 0307 	and.w	r3, r3, #7
 800966c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800966e:	7fbb      	ldrb	r3, [r7, #30]
 8009670:	7f3a      	ldrb	r2, [r7, #28]
 8009672:	f107 0120 	add.w	r1, r7, #32
 8009676:	440a      	add	r2, r1
 8009678:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800967c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009680:	7f3a      	ldrb	r2, [r7, #28]
 8009682:	f107 0120 	add.w	r1, r7, #32
 8009686:	440a      	add	r2, r1
 8009688:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800968c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009690:	b29a      	uxth	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009698:	7ffb      	ldrb	r3, [r7, #31]
 800969a:	7f7a      	ldrb	r2, [r7, #29]
 800969c:	f107 0120 	add.w	r1, r7, #32
 80096a0:	440a      	add	r2, r1
 80096a2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80096a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096aa:	7f7a      	ldrb	r2, [r7, #29]
 80096ac:	f107 0120 	add.w	r1, r7, #32
 80096b0:	440a      	add	r2, r1
 80096b2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80096c2:	bf00      	nop
 80096c4:	3724      	adds	r7, #36	; 0x24
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	0800c3f8 	.word	0x0800c3f8
 80096d4:	0800c400 	.word	0x0800c400

080096d8 <__errno>:
 80096d8:	4b01      	ldr	r3, [pc, #4]	; (80096e0 <__errno+0x8>)
 80096da:	6818      	ldr	r0, [r3, #0]
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	2000002c 	.word	0x2000002c

080096e4 <__libc_init_array>:
 80096e4:	b570      	push	{r4, r5, r6, lr}
 80096e6:	4e0d      	ldr	r6, [pc, #52]	; (800971c <__libc_init_array+0x38>)
 80096e8:	4c0d      	ldr	r4, [pc, #52]	; (8009720 <__libc_init_array+0x3c>)
 80096ea:	1ba4      	subs	r4, r4, r6
 80096ec:	10a4      	asrs	r4, r4, #2
 80096ee:	2500      	movs	r5, #0
 80096f0:	42a5      	cmp	r5, r4
 80096f2:	d109      	bne.n	8009708 <__libc_init_array+0x24>
 80096f4:	4e0b      	ldr	r6, [pc, #44]	; (8009724 <__libc_init_array+0x40>)
 80096f6:	4c0c      	ldr	r4, [pc, #48]	; (8009728 <__libc_init_array+0x44>)
 80096f8:	f002 fb02 	bl	800bd00 <_init>
 80096fc:	1ba4      	subs	r4, r4, r6
 80096fe:	10a4      	asrs	r4, r4, #2
 8009700:	2500      	movs	r5, #0
 8009702:	42a5      	cmp	r5, r4
 8009704:	d105      	bne.n	8009712 <__libc_init_array+0x2e>
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800970c:	4798      	blx	r3
 800970e:	3501      	adds	r5, #1
 8009710:	e7ee      	b.n	80096f0 <__libc_init_array+0xc>
 8009712:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009716:	4798      	blx	r3
 8009718:	3501      	adds	r5, #1
 800971a:	e7f2      	b.n	8009702 <__libc_init_array+0x1e>
 800971c:	0800c6a4 	.word	0x0800c6a4
 8009720:	0800c6a4 	.word	0x0800c6a4
 8009724:	0800c6a4 	.word	0x0800c6a4
 8009728:	0800c6a8 	.word	0x0800c6a8

0800972c <memcpy>:
 800972c:	b510      	push	{r4, lr}
 800972e:	1e43      	subs	r3, r0, #1
 8009730:	440a      	add	r2, r1
 8009732:	4291      	cmp	r1, r2
 8009734:	d100      	bne.n	8009738 <memcpy+0xc>
 8009736:	bd10      	pop	{r4, pc}
 8009738:	f811 4b01 	ldrb.w	r4, [r1], #1
 800973c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009740:	e7f7      	b.n	8009732 <memcpy+0x6>

08009742 <memset>:
 8009742:	4402      	add	r2, r0
 8009744:	4603      	mov	r3, r0
 8009746:	4293      	cmp	r3, r2
 8009748:	d100      	bne.n	800974c <memset+0xa>
 800974a:	4770      	bx	lr
 800974c:	f803 1b01 	strb.w	r1, [r3], #1
 8009750:	e7f9      	b.n	8009746 <memset+0x4>

08009752 <__cvt>:
 8009752:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009756:	ec55 4b10 	vmov	r4, r5, d0
 800975a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800975c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009760:	2d00      	cmp	r5, #0
 8009762:	460e      	mov	r6, r1
 8009764:	4691      	mov	r9, r2
 8009766:	4619      	mov	r1, r3
 8009768:	bfb8      	it	lt
 800976a:	4622      	movlt	r2, r4
 800976c:	462b      	mov	r3, r5
 800976e:	f027 0720 	bic.w	r7, r7, #32
 8009772:	bfbb      	ittet	lt
 8009774:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009778:	461d      	movlt	r5, r3
 800977a:	2300      	movge	r3, #0
 800977c:	232d      	movlt	r3, #45	; 0x2d
 800977e:	bfb8      	it	lt
 8009780:	4614      	movlt	r4, r2
 8009782:	2f46      	cmp	r7, #70	; 0x46
 8009784:	700b      	strb	r3, [r1, #0]
 8009786:	d004      	beq.n	8009792 <__cvt+0x40>
 8009788:	2f45      	cmp	r7, #69	; 0x45
 800978a:	d100      	bne.n	800978e <__cvt+0x3c>
 800978c:	3601      	adds	r6, #1
 800978e:	2102      	movs	r1, #2
 8009790:	e000      	b.n	8009794 <__cvt+0x42>
 8009792:	2103      	movs	r1, #3
 8009794:	ab03      	add	r3, sp, #12
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	ab02      	add	r3, sp, #8
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	4632      	mov	r2, r6
 800979e:	4653      	mov	r3, sl
 80097a0:	ec45 4b10 	vmov	d0, r4, r5
 80097a4:	f000 fd44 	bl	800a230 <_dtoa_r>
 80097a8:	2f47      	cmp	r7, #71	; 0x47
 80097aa:	4680      	mov	r8, r0
 80097ac:	d102      	bne.n	80097b4 <__cvt+0x62>
 80097ae:	f019 0f01 	tst.w	r9, #1
 80097b2:	d026      	beq.n	8009802 <__cvt+0xb0>
 80097b4:	2f46      	cmp	r7, #70	; 0x46
 80097b6:	eb08 0906 	add.w	r9, r8, r6
 80097ba:	d111      	bne.n	80097e0 <__cvt+0x8e>
 80097bc:	f898 3000 	ldrb.w	r3, [r8]
 80097c0:	2b30      	cmp	r3, #48	; 0x30
 80097c2:	d10a      	bne.n	80097da <__cvt+0x88>
 80097c4:	2200      	movs	r2, #0
 80097c6:	2300      	movs	r3, #0
 80097c8:	4620      	mov	r0, r4
 80097ca:	4629      	mov	r1, r5
 80097cc:	f7f7 f9a4 	bl	8000b18 <__aeabi_dcmpeq>
 80097d0:	b918      	cbnz	r0, 80097da <__cvt+0x88>
 80097d2:	f1c6 0601 	rsb	r6, r6, #1
 80097d6:	f8ca 6000 	str.w	r6, [sl]
 80097da:	f8da 3000 	ldr.w	r3, [sl]
 80097de:	4499      	add	r9, r3
 80097e0:	2200      	movs	r2, #0
 80097e2:	2300      	movs	r3, #0
 80097e4:	4620      	mov	r0, r4
 80097e6:	4629      	mov	r1, r5
 80097e8:	f7f7 f996 	bl	8000b18 <__aeabi_dcmpeq>
 80097ec:	b938      	cbnz	r0, 80097fe <__cvt+0xac>
 80097ee:	2230      	movs	r2, #48	; 0x30
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	454b      	cmp	r3, r9
 80097f4:	d205      	bcs.n	8009802 <__cvt+0xb0>
 80097f6:	1c59      	adds	r1, r3, #1
 80097f8:	9103      	str	r1, [sp, #12]
 80097fa:	701a      	strb	r2, [r3, #0]
 80097fc:	e7f8      	b.n	80097f0 <__cvt+0x9e>
 80097fe:	f8cd 900c 	str.w	r9, [sp, #12]
 8009802:	9b03      	ldr	r3, [sp, #12]
 8009804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009806:	eba3 0308 	sub.w	r3, r3, r8
 800980a:	4640      	mov	r0, r8
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	b004      	add	sp, #16
 8009810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009814 <__exponent>:
 8009814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009816:	2900      	cmp	r1, #0
 8009818:	4604      	mov	r4, r0
 800981a:	bfba      	itte	lt
 800981c:	4249      	neglt	r1, r1
 800981e:	232d      	movlt	r3, #45	; 0x2d
 8009820:	232b      	movge	r3, #43	; 0x2b
 8009822:	2909      	cmp	r1, #9
 8009824:	f804 2b02 	strb.w	r2, [r4], #2
 8009828:	7043      	strb	r3, [r0, #1]
 800982a:	dd20      	ble.n	800986e <__exponent+0x5a>
 800982c:	f10d 0307 	add.w	r3, sp, #7
 8009830:	461f      	mov	r7, r3
 8009832:	260a      	movs	r6, #10
 8009834:	fb91 f5f6 	sdiv	r5, r1, r6
 8009838:	fb06 1115 	mls	r1, r6, r5, r1
 800983c:	3130      	adds	r1, #48	; 0x30
 800983e:	2d09      	cmp	r5, #9
 8009840:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009844:	f103 32ff 	add.w	r2, r3, #4294967295
 8009848:	4629      	mov	r1, r5
 800984a:	dc09      	bgt.n	8009860 <__exponent+0x4c>
 800984c:	3130      	adds	r1, #48	; 0x30
 800984e:	3b02      	subs	r3, #2
 8009850:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009854:	42bb      	cmp	r3, r7
 8009856:	4622      	mov	r2, r4
 8009858:	d304      	bcc.n	8009864 <__exponent+0x50>
 800985a:	1a10      	subs	r0, r2, r0
 800985c:	b003      	add	sp, #12
 800985e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009860:	4613      	mov	r3, r2
 8009862:	e7e7      	b.n	8009834 <__exponent+0x20>
 8009864:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009868:	f804 2b01 	strb.w	r2, [r4], #1
 800986c:	e7f2      	b.n	8009854 <__exponent+0x40>
 800986e:	2330      	movs	r3, #48	; 0x30
 8009870:	4419      	add	r1, r3
 8009872:	7083      	strb	r3, [r0, #2]
 8009874:	1d02      	adds	r2, r0, #4
 8009876:	70c1      	strb	r1, [r0, #3]
 8009878:	e7ef      	b.n	800985a <__exponent+0x46>
	...

0800987c <_printf_float>:
 800987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	b08d      	sub	sp, #52	; 0x34
 8009882:	460c      	mov	r4, r1
 8009884:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009888:	4616      	mov	r6, r2
 800988a:	461f      	mov	r7, r3
 800988c:	4605      	mov	r5, r0
 800988e:	f001 fa87 	bl	800ada0 <_localeconv_r>
 8009892:	6803      	ldr	r3, [r0, #0]
 8009894:	9304      	str	r3, [sp, #16]
 8009896:	4618      	mov	r0, r3
 8009898:	f7f6 fcc2 	bl	8000220 <strlen>
 800989c:	2300      	movs	r3, #0
 800989e:	930a      	str	r3, [sp, #40]	; 0x28
 80098a0:	f8d8 3000 	ldr.w	r3, [r8]
 80098a4:	9005      	str	r0, [sp, #20]
 80098a6:	3307      	adds	r3, #7
 80098a8:	f023 0307 	bic.w	r3, r3, #7
 80098ac:	f103 0208 	add.w	r2, r3, #8
 80098b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80098b4:	f8d4 b000 	ldr.w	fp, [r4]
 80098b8:	f8c8 2000 	str.w	r2, [r8]
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80098c4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80098c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098cc:	9307      	str	r3, [sp, #28]
 80098ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80098d2:	f04f 32ff 	mov.w	r2, #4294967295
 80098d6:	4ba7      	ldr	r3, [pc, #668]	; (8009b74 <_printf_float+0x2f8>)
 80098d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098dc:	f7f7 f94e 	bl	8000b7c <__aeabi_dcmpun>
 80098e0:	bb70      	cbnz	r0, 8009940 <_printf_float+0xc4>
 80098e2:	f04f 32ff 	mov.w	r2, #4294967295
 80098e6:	4ba3      	ldr	r3, [pc, #652]	; (8009b74 <_printf_float+0x2f8>)
 80098e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098ec:	f7f7 f928 	bl	8000b40 <__aeabi_dcmple>
 80098f0:	bb30      	cbnz	r0, 8009940 <_printf_float+0xc4>
 80098f2:	2200      	movs	r2, #0
 80098f4:	2300      	movs	r3, #0
 80098f6:	4640      	mov	r0, r8
 80098f8:	4649      	mov	r1, r9
 80098fa:	f7f7 f917 	bl	8000b2c <__aeabi_dcmplt>
 80098fe:	b110      	cbz	r0, 8009906 <_printf_float+0x8a>
 8009900:	232d      	movs	r3, #45	; 0x2d
 8009902:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009906:	4a9c      	ldr	r2, [pc, #624]	; (8009b78 <_printf_float+0x2fc>)
 8009908:	4b9c      	ldr	r3, [pc, #624]	; (8009b7c <_printf_float+0x300>)
 800990a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800990e:	bf8c      	ite	hi
 8009910:	4690      	movhi	r8, r2
 8009912:	4698      	movls	r8, r3
 8009914:	2303      	movs	r3, #3
 8009916:	f02b 0204 	bic.w	r2, fp, #4
 800991a:	6123      	str	r3, [r4, #16]
 800991c:	6022      	str	r2, [r4, #0]
 800991e:	f04f 0900 	mov.w	r9, #0
 8009922:	9700      	str	r7, [sp, #0]
 8009924:	4633      	mov	r3, r6
 8009926:	aa0b      	add	r2, sp, #44	; 0x2c
 8009928:	4621      	mov	r1, r4
 800992a:	4628      	mov	r0, r5
 800992c:	f000 f9e6 	bl	8009cfc <_printf_common>
 8009930:	3001      	adds	r0, #1
 8009932:	f040 808d 	bne.w	8009a50 <_printf_float+0x1d4>
 8009936:	f04f 30ff 	mov.w	r0, #4294967295
 800993a:	b00d      	add	sp, #52	; 0x34
 800993c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009940:	4642      	mov	r2, r8
 8009942:	464b      	mov	r3, r9
 8009944:	4640      	mov	r0, r8
 8009946:	4649      	mov	r1, r9
 8009948:	f7f7 f918 	bl	8000b7c <__aeabi_dcmpun>
 800994c:	b110      	cbz	r0, 8009954 <_printf_float+0xd8>
 800994e:	4a8c      	ldr	r2, [pc, #560]	; (8009b80 <_printf_float+0x304>)
 8009950:	4b8c      	ldr	r3, [pc, #560]	; (8009b84 <_printf_float+0x308>)
 8009952:	e7da      	b.n	800990a <_printf_float+0x8e>
 8009954:	6861      	ldr	r1, [r4, #4]
 8009956:	1c4b      	adds	r3, r1, #1
 8009958:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800995c:	a80a      	add	r0, sp, #40	; 0x28
 800995e:	d13e      	bne.n	80099de <_printf_float+0x162>
 8009960:	2306      	movs	r3, #6
 8009962:	6063      	str	r3, [r4, #4]
 8009964:	2300      	movs	r3, #0
 8009966:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800996a:	ab09      	add	r3, sp, #36	; 0x24
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	ec49 8b10 	vmov	d0, r8, r9
 8009972:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009976:	6022      	str	r2, [r4, #0]
 8009978:	f8cd a004 	str.w	sl, [sp, #4]
 800997c:	6861      	ldr	r1, [r4, #4]
 800997e:	4628      	mov	r0, r5
 8009980:	f7ff fee7 	bl	8009752 <__cvt>
 8009984:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009988:	2b47      	cmp	r3, #71	; 0x47
 800998a:	4680      	mov	r8, r0
 800998c:	d109      	bne.n	80099a2 <_printf_float+0x126>
 800998e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009990:	1cd8      	adds	r0, r3, #3
 8009992:	db02      	blt.n	800999a <_printf_float+0x11e>
 8009994:	6862      	ldr	r2, [r4, #4]
 8009996:	4293      	cmp	r3, r2
 8009998:	dd47      	ble.n	8009a2a <_printf_float+0x1ae>
 800999a:	f1aa 0a02 	sub.w	sl, sl, #2
 800999e:	fa5f fa8a 	uxtb.w	sl, sl
 80099a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80099a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099a8:	d824      	bhi.n	80099f4 <_printf_float+0x178>
 80099aa:	3901      	subs	r1, #1
 80099ac:	4652      	mov	r2, sl
 80099ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80099b2:	9109      	str	r1, [sp, #36]	; 0x24
 80099b4:	f7ff ff2e 	bl	8009814 <__exponent>
 80099b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099ba:	1813      	adds	r3, r2, r0
 80099bc:	2a01      	cmp	r2, #1
 80099be:	4681      	mov	r9, r0
 80099c0:	6123      	str	r3, [r4, #16]
 80099c2:	dc02      	bgt.n	80099ca <_printf_float+0x14e>
 80099c4:	6822      	ldr	r2, [r4, #0]
 80099c6:	07d1      	lsls	r1, r2, #31
 80099c8:	d501      	bpl.n	80099ce <_printf_float+0x152>
 80099ca:	3301      	adds	r3, #1
 80099cc:	6123      	str	r3, [r4, #16]
 80099ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d0a5      	beq.n	8009922 <_printf_float+0xa6>
 80099d6:	232d      	movs	r3, #45	; 0x2d
 80099d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099dc:	e7a1      	b.n	8009922 <_printf_float+0xa6>
 80099de:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80099e2:	f000 8177 	beq.w	8009cd4 <_printf_float+0x458>
 80099e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80099ea:	d1bb      	bne.n	8009964 <_printf_float+0xe8>
 80099ec:	2900      	cmp	r1, #0
 80099ee:	d1b9      	bne.n	8009964 <_printf_float+0xe8>
 80099f0:	2301      	movs	r3, #1
 80099f2:	e7b6      	b.n	8009962 <_printf_float+0xe6>
 80099f4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80099f8:	d119      	bne.n	8009a2e <_printf_float+0x1b2>
 80099fa:	2900      	cmp	r1, #0
 80099fc:	6863      	ldr	r3, [r4, #4]
 80099fe:	dd0c      	ble.n	8009a1a <_printf_float+0x19e>
 8009a00:	6121      	str	r1, [r4, #16]
 8009a02:	b913      	cbnz	r3, 8009a0a <_printf_float+0x18e>
 8009a04:	6822      	ldr	r2, [r4, #0]
 8009a06:	07d2      	lsls	r2, r2, #31
 8009a08:	d502      	bpl.n	8009a10 <_printf_float+0x194>
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	440b      	add	r3, r1
 8009a0e:	6123      	str	r3, [r4, #16]
 8009a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a12:	65a3      	str	r3, [r4, #88]	; 0x58
 8009a14:	f04f 0900 	mov.w	r9, #0
 8009a18:	e7d9      	b.n	80099ce <_printf_float+0x152>
 8009a1a:	b913      	cbnz	r3, 8009a22 <_printf_float+0x1a6>
 8009a1c:	6822      	ldr	r2, [r4, #0]
 8009a1e:	07d0      	lsls	r0, r2, #31
 8009a20:	d501      	bpl.n	8009a26 <_printf_float+0x1aa>
 8009a22:	3302      	adds	r3, #2
 8009a24:	e7f3      	b.n	8009a0e <_printf_float+0x192>
 8009a26:	2301      	movs	r3, #1
 8009a28:	e7f1      	b.n	8009a0e <_printf_float+0x192>
 8009a2a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009a2e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009a32:	4293      	cmp	r3, r2
 8009a34:	db05      	blt.n	8009a42 <_printf_float+0x1c6>
 8009a36:	6822      	ldr	r2, [r4, #0]
 8009a38:	6123      	str	r3, [r4, #16]
 8009a3a:	07d1      	lsls	r1, r2, #31
 8009a3c:	d5e8      	bpl.n	8009a10 <_printf_float+0x194>
 8009a3e:	3301      	adds	r3, #1
 8009a40:	e7e5      	b.n	8009a0e <_printf_float+0x192>
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	bfd4      	ite	le
 8009a46:	f1c3 0302 	rsble	r3, r3, #2
 8009a4a:	2301      	movgt	r3, #1
 8009a4c:	4413      	add	r3, r2
 8009a4e:	e7de      	b.n	8009a0e <_printf_float+0x192>
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	055a      	lsls	r2, r3, #21
 8009a54:	d407      	bmi.n	8009a66 <_printf_float+0x1ea>
 8009a56:	6923      	ldr	r3, [r4, #16]
 8009a58:	4642      	mov	r2, r8
 8009a5a:	4631      	mov	r1, r6
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	47b8      	blx	r7
 8009a60:	3001      	adds	r0, #1
 8009a62:	d12b      	bne.n	8009abc <_printf_float+0x240>
 8009a64:	e767      	b.n	8009936 <_printf_float+0xba>
 8009a66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009a6a:	f240 80dc 	bls.w	8009c26 <_printf_float+0x3aa>
 8009a6e:	2200      	movs	r2, #0
 8009a70:	2300      	movs	r3, #0
 8009a72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a76:	f7f7 f84f 	bl	8000b18 <__aeabi_dcmpeq>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d033      	beq.n	8009ae6 <_printf_float+0x26a>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	4a41      	ldr	r2, [pc, #260]	; (8009b88 <_printf_float+0x30c>)
 8009a82:	4631      	mov	r1, r6
 8009a84:	4628      	mov	r0, r5
 8009a86:	47b8      	blx	r7
 8009a88:	3001      	adds	r0, #1
 8009a8a:	f43f af54 	beq.w	8009936 <_printf_float+0xba>
 8009a8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a92:	429a      	cmp	r2, r3
 8009a94:	db02      	blt.n	8009a9c <_printf_float+0x220>
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	07d8      	lsls	r0, r3, #31
 8009a9a:	d50f      	bpl.n	8009abc <_printf_float+0x240>
 8009a9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009aa0:	4631      	mov	r1, r6
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	47b8      	blx	r7
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	f43f af45 	beq.w	8009936 <_printf_float+0xba>
 8009aac:	f04f 0800 	mov.w	r8, #0
 8009ab0:	f104 091a 	add.w	r9, r4, #26
 8009ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	4543      	cmp	r3, r8
 8009aba:	dc09      	bgt.n	8009ad0 <_printf_float+0x254>
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	079b      	lsls	r3, r3, #30
 8009ac0:	f100 8103 	bmi.w	8009cca <_printf_float+0x44e>
 8009ac4:	68e0      	ldr	r0, [r4, #12]
 8009ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ac8:	4298      	cmp	r0, r3
 8009aca:	bfb8      	it	lt
 8009acc:	4618      	movlt	r0, r3
 8009ace:	e734      	b.n	800993a <_printf_float+0xbe>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	464a      	mov	r2, r9
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	47b8      	blx	r7
 8009ada:	3001      	adds	r0, #1
 8009adc:	f43f af2b 	beq.w	8009936 <_printf_float+0xba>
 8009ae0:	f108 0801 	add.w	r8, r8, #1
 8009ae4:	e7e6      	b.n	8009ab4 <_printf_float+0x238>
 8009ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	dc2b      	bgt.n	8009b44 <_printf_float+0x2c8>
 8009aec:	2301      	movs	r3, #1
 8009aee:	4a26      	ldr	r2, [pc, #152]	; (8009b88 <_printf_float+0x30c>)
 8009af0:	4631      	mov	r1, r6
 8009af2:	4628      	mov	r0, r5
 8009af4:	47b8      	blx	r7
 8009af6:	3001      	adds	r0, #1
 8009af8:	f43f af1d 	beq.w	8009936 <_printf_float+0xba>
 8009afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009afe:	b923      	cbnz	r3, 8009b0a <_printf_float+0x28e>
 8009b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b02:	b913      	cbnz	r3, 8009b0a <_printf_float+0x28e>
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	07d9      	lsls	r1, r3, #31
 8009b08:	d5d8      	bpl.n	8009abc <_printf_float+0x240>
 8009b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b0e:	4631      	mov	r1, r6
 8009b10:	4628      	mov	r0, r5
 8009b12:	47b8      	blx	r7
 8009b14:	3001      	adds	r0, #1
 8009b16:	f43f af0e 	beq.w	8009936 <_printf_float+0xba>
 8009b1a:	f04f 0900 	mov.w	r9, #0
 8009b1e:	f104 0a1a 	add.w	sl, r4, #26
 8009b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b24:	425b      	negs	r3, r3
 8009b26:	454b      	cmp	r3, r9
 8009b28:	dc01      	bgt.n	8009b2e <_printf_float+0x2b2>
 8009b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b2c:	e794      	b.n	8009a58 <_printf_float+0x1dc>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	4652      	mov	r2, sl
 8009b32:	4631      	mov	r1, r6
 8009b34:	4628      	mov	r0, r5
 8009b36:	47b8      	blx	r7
 8009b38:	3001      	adds	r0, #1
 8009b3a:	f43f aefc 	beq.w	8009936 <_printf_float+0xba>
 8009b3e:	f109 0901 	add.w	r9, r9, #1
 8009b42:	e7ee      	b.n	8009b22 <_printf_float+0x2a6>
 8009b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	bfa8      	it	ge
 8009b4c:	461a      	movge	r2, r3
 8009b4e:	2a00      	cmp	r2, #0
 8009b50:	4691      	mov	r9, r2
 8009b52:	dd07      	ble.n	8009b64 <_printf_float+0x2e8>
 8009b54:	4613      	mov	r3, r2
 8009b56:	4631      	mov	r1, r6
 8009b58:	4642      	mov	r2, r8
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	f43f aee9 	beq.w	8009936 <_printf_float+0xba>
 8009b64:	f104 031a 	add.w	r3, r4, #26
 8009b68:	f04f 0b00 	mov.w	fp, #0
 8009b6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b70:	9306      	str	r3, [sp, #24]
 8009b72:	e015      	b.n	8009ba0 <_printf_float+0x324>
 8009b74:	7fefffff 	.word	0x7fefffff
 8009b78:	0800c43c 	.word	0x0800c43c
 8009b7c:	0800c438 	.word	0x0800c438
 8009b80:	0800c444 	.word	0x0800c444
 8009b84:	0800c440 	.word	0x0800c440
 8009b88:	0800c448 	.word	0x0800c448
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	9a06      	ldr	r2, [sp, #24]
 8009b90:	4631      	mov	r1, r6
 8009b92:	4628      	mov	r0, r5
 8009b94:	47b8      	blx	r7
 8009b96:	3001      	adds	r0, #1
 8009b98:	f43f aecd 	beq.w	8009936 <_printf_float+0xba>
 8009b9c:	f10b 0b01 	add.w	fp, fp, #1
 8009ba0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009ba4:	ebaa 0309 	sub.w	r3, sl, r9
 8009ba8:	455b      	cmp	r3, fp
 8009baa:	dcef      	bgt.n	8009b8c <_printf_float+0x310>
 8009bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	44d0      	add	r8, sl
 8009bb4:	db15      	blt.n	8009be2 <_printf_float+0x366>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	07da      	lsls	r2, r3, #31
 8009bba:	d412      	bmi.n	8009be2 <_printf_float+0x366>
 8009bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bc0:	eba3 020a 	sub.w	r2, r3, sl
 8009bc4:	eba3 0a01 	sub.w	sl, r3, r1
 8009bc8:	4592      	cmp	sl, r2
 8009bca:	bfa8      	it	ge
 8009bcc:	4692      	movge	sl, r2
 8009bce:	f1ba 0f00 	cmp.w	sl, #0
 8009bd2:	dc0e      	bgt.n	8009bf2 <_printf_float+0x376>
 8009bd4:	f04f 0800 	mov.w	r8, #0
 8009bd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009bdc:	f104 091a 	add.w	r9, r4, #26
 8009be0:	e019      	b.n	8009c16 <_printf_float+0x39a>
 8009be2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009be6:	4631      	mov	r1, r6
 8009be8:	4628      	mov	r0, r5
 8009bea:	47b8      	blx	r7
 8009bec:	3001      	adds	r0, #1
 8009bee:	d1e5      	bne.n	8009bbc <_printf_float+0x340>
 8009bf0:	e6a1      	b.n	8009936 <_printf_float+0xba>
 8009bf2:	4653      	mov	r3, sl
 8009bf4:	4642      	mov	r2, r8
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47b8      	blx	r7
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	d1e9      	bne.n	8009bd4 <_printf_float+0x358>
 8009c00:	e699      	b.n	8009936 <_printf_float+0xba>
 8009c02:	2301      	movs	r3, #1
 8009c04:	464a      	mov	r2, r9
 8009c06:	4631      	mov	r1, r6
 8009c08:	4628      	mov	r0, r5
 8009c0a:	47b8      	blx	r7
 8009c0c:	3001      	adds	r0, #1
 8009c0e:	f43f ae92 	beq.w	8009936 <_printf_float+0xba>
 8009c12:	f108 0801 	add.w	r8, r8, #1
 8009c16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c1a:	1a9b      	subs	r3, r3, r2
 8009c1c:	eba3 030a 	sub.w	r3, r3, sl
 8009c20:	4543      	cmp	r3, r8
 8009c22:	dcee      	bgt.n	8009c02 <_printf_float+0x386>
 8009c24:	e74a      	b.n	8009abc <_printf_float+0x240>
 8009c26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c28:	2a01      	cmp	r2, #1
 8009c2a:	dc01      	bgt.n	8009c30 <_printf_float+0x3b4>
 8009c2c:	07db      	lsls	r3, r3, #31
 8009c2e:	d53a      	bpl.n	8009ca6 <_printf_float+0x42a>
 8009c30:	2301      	movs	r3, #1
 8009c32:	4642      	mov	r2, r8
 8009c34:	4631      	mov	r1, r6
 8009c36:	4628      	mov	r0, r5
 8009c38:	47b8      	blx	r7
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	f43f ae7b 	beq.w	8009936 <_printf_float+0xba>
 8009c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c44:	4631      	mov	r1, r6
 8009c46:	4628      	mov	r0, r5
 8009c48:	47b8      	blx	r7
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	f108 0801 	add.w	r8, r8, #1
 8009c50:	f43f ae71 	beq.w	8009936 <_printf_float+0xba>
 8009c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c56:	2200      	movs	r2, #0
 8009c58:	f103 3aff 	add.w	sl, r3, #4294967295
 8009c5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c60:	2300      	movs	r3, #0
 8009c62:	f7f6 ff59 	bl	8000b18 <__aeabi_dcmpeq>
 8009c66:	b9c8      	cbnz	r0, 8009c9c <_printf_float+0x420>
 8009c68:	4653      	mov	r3, sl
 8009c6a:	4642      	mov	r2, r8
 8009c6c:	4631      	mov	r1, r6
 8009c6e:	4628      	mov	r0, r5
 8009c70:	47b8      	blx	r7
 8009c72:	3001      	adds	r0, #1
 8009c74:	d10e      	bne.n	8009c94 <_printf_float+0x418>
 8009c76:	e65e      	b.n	8009936 <_printf_float+0xba>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	4652      	mov	r2, sl
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4628      	mov	r0, r5
 8009c80:	47b8      	blx	r7
 8009c82:	3001      	adds	r0, #1
 8009c84:	f43f ae57 	beq.w	8009936 <_printf_float+0xba>
 8009c88:	f108 0801 	add.w	r8, r8, #1
 8009c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	4543      	cmp	r3, r8
 8009c92:	dcf1      	bgt.n	8009c78 <_printf_float+0x3fc>
 8009c94:	464b      	mov	r3, r9
 8009c96:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c9a:	e6de      	b.n	8009a5a <_printf_float+0x1de>
 8009c9c:	f04f 0800 	mov.w	r8, #0
 8009ca0:	f104 0a1a 	add.w	sl, r4, #26
 8009ca4:	e7f2      	b.n	8009c8c <_printf_float+0x410>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e7df      	b.n	8009c6a <_printf_float+0x3ee>
 8009caa:	2301      	movs	r3, #1
 8009cac:	464a      	mov	r2, r9
 8009cae:	4631      	mov	r1, r6
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	47b8      	blx	r7
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	f43f ae3e 	beq.w	8009936 <_printf_float+0xba>
 8009cba:	f108 0801 	add.w	r8, r8, #1
 8009cbe:	68e3      	ldr	r3, [r4, #12]
 8009cc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cc2:	1a9b      	subs	r3, r3, r2
 8009cc4:	4543      	cmp	r3, r8
 8009cc6:	dcf0      	bgt.n	8009caa <_printf_float+0x42e>
 8009cc8:	e6fc      	b.n	8009ac4 <_printf_float+0x248>
 8009cca:	f04f 0800 	mov.w	r8, #0
 8009cce:	f104 0919 	add.w	r9, r4, #25
 8009cd2:	e7f4      	b.n	8009cbe <_printf_float+0x442>
 8009cd4:	2900      	cmp	r1, #0
 8009cd6:	f43f ae8b 	beq.w	80099f0 <_printf_float+0x174>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009ce0:	ab09      	add	r3, sp, #36	; 0x24
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	ec49 8b10 	vmov	d0, r8, r9
 8009ce8:	6022      	str	r2, [r4, #0]
 8009cea:	f8cd a004 	str.w	sl, [sp, #4]
 8009cee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f7ff fd2d 	bl	8009752 <__cvt>
 8009cf8:	4680      	mov	r8, r0
 8009cfa:	e648      	b.n	800998e <_printf_float+0x112>

08009cfc <_printf_common>:
 8009cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d00:	4691      	mov	r9, r2
 8009d02:	461f      	mov	r7, r3
 8009d04:	688a      	ldr	r2, [r1, #8]
 8009d06:	690b      	ldr	r3, [r1, #16]
 8009d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	bfb8      	it	lt
 8009d10:	4613      	movlt	r3, r2
 8009d12:	f8c9 3000 	str.w	r3, [r9]
 8009d16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	b112      	cbz	r2, 8009d26 <_printf_common+0x2a>
 8009d20:	3301      	adds	r3, #1
 8009d22:	f8c9 3000 	str.w	r3, [r9]
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	0699      	lsls	r1, r3, #26
 8009d2a:	bf42      	ittt	mi
 8009d2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009d30:	3302      	addmi	r3, #2
 8009d32:	f8c9 3000 	strmi.w	r3, [r9]
 8009d36:	6825      	ldr	r5, [r4, #0]
 8009d38:	f015 0506 	ands.w	r5, r5, #6
 8009d3c:	d107      	bne.n	8009d4e <_printf_common+0x52>
 8009d3e:	f104 0a19 	add.w	sl, r4, #25
 8009d42:	68e3      	ldr	r3, [r4, #12]
 8009d44:	f8d9 2000 	ldr.w	r2, [r9]
 8009d48:	1a9b      	subs	r3, r3, r2
 8009d4a:	42ab      	cmp	r3, r5
 8009d4c:	dc28      	bgt.n	8009da0 <_printf_common+0xa4>
 8009d4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009d52:	6822      	ldr	r2, [r4, #0]
 8009d54:	3300      	adds	r3, #0
 8009d56:	bf18      	it	ne
 8009d58:	2301      	movne	r3, #1
 8009d5a:	0692      	lsls	r2, r2, #26
 8009d5c:	d42d      	bmi.n	8009dba <_printf_common+0xbe>
 8009d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d62:	4639      	mov	r1, r7
 8009d64:	4630      	mov	r0, r6
 8009d66:	47c0      	blx	r8
 8009d68:	3001      	adds	r0, #1
 8009d6a:	d020      	beq.n	8009dae <_printf_common+0xb2>
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	68e5      	ldr	r5, [r4, #12]
 8009d70:	f8d9 2000 	ldr.w	r2, [r9]
 8009d74:	f003 0306 	and.w	r3, r3, #6
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	bf08      	it	eq
 8009d7c:	1aad      	subeq	r5, r5, r2
 8009d7e:	68a3      	ldr	r3, [r4, #8]
 8009d80:	6922      	ldr	r2, [r4, #16]
 8009d82:	bf0c      	ite	eq
 8009d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d88:	2500      	movne	r5, #0
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	bfc4      	itt	gt
 8009d8e:	1a9b      	subgt	r3, r3, r2
 8009d90:	18ed      	addgt	r5, r5, r3
 8009d92:	f04f 0900 	mov.w	r9, #0
 8009d96:	341a      	adds	r4, #26
 8009d98:	454d      	cmp	r5, r9
 8009d9a:	d11a      	bne.n	8009dd2 <_printf_common+0xd6>
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e008      	b.n	8009db2 <_printf_common+0xb6>
 8009da0:	2301      	movs	r3, #1
 8009da2:	4652      	mov	r2, sl
 8009da4:	4639      	mov	r1, r7
 8009da6:	4630      	mov	r0, r6
 8009da8:	47c0      	blx	r8
 8009daa:	3001      	adds	r0, #1
 8009dac:	d103      	bne.n	8009db6 <_printf_common+0xba>
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295
 8009db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009db6:	3501      	adds	r5, #1
 8009db8:	e7c3      	b.n	8009d42 <_printf_common+0x46>
 8009dba:	18e1      	adds	r1, r4, r3
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	2030      	movs	r0, #48	; 0x30
 8009dc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dc4:	4422      	add	r2, r4
 8009dc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009dca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dce:	3302      	adds	r3, #2
 8009dd0:	e7c5      	b.n	8009d5e <_printf_common+0x62>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	4630      	mov	r0, r6
 8009dda:	47c0      	blx	r8
 8009ddc:	3001      	adds	r0, #1
 8009dde:	d0e6      	beq.n	8009dae <_printf_common+0xb2>
 8009de0:	f109 0901 	add.w	r9, r9, #1
 8009de4:	e7d8      	b.n	8009d98 <_printf_common+0x9c>
	...

08009de8 <_printf_i>:
 8009de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009df0:	460c      	mov	r4, r1
 8009df2:	7e09      	ldrb	r1, [r1, #24]
 8009df4:	b085      	sub	sp, #20
 8009df6:	296e      	cmp	r1, #110	; 0x6e
 8009df8:	4617      	mov	r7, r2
 8009dfa:	4606      	mov	r6, r0
 8009dfc:	4698      	mov	r8, r3
 8009dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e00:	f000 80b3 	beq.w	8009f6a <_printf_i+0x182>
 8009e04:	d822      	bhi.n	8009e4c <_printf_i+0x64>
 8009e06:	2963      	cmp	r1, #99	; 0x63
 8009e08:	d036      	beq.n	8009e78 <_printf_i+0x90>
 8009e0a:	d80a      	bhi.n	8009e22 <_printf_i+0x3a>
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	f000 80b9 	beq.w	8009f84 <_printf_i+0x19c>
 8009e12:	2958      	cmp	r1, #88	; 0x58
 8009e14:	f000 8083 	beq.w	8009f1e <_printf_i+0x136>
 8009e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009e20:	e032      	b.n	8009e88 <_printf_i+0xa0>
 8009e22:	2964      	cmp	r1, #100	; 0x64
 8009e24:	d001      	beq.n	8009e2a <_printf_i+0x42>
 8009e26:	2969      	cmp	r1, #105	; 0x69
 8009e28:	d1f6      	bne.n	8009e18 <_printf_i+0x30>
 8009e2a:	6820      	ldr	r0, [r4, #0]
 8009e2c:	6813      	ldr	r3, [r2, #0]
 8009e2e:	0605      	lsls	r5, r0, #24
 8009e30:	f103 0104 	add.w	r1, r3, #4
 8009e34:	d52a      	bpl.n	8009e8c <_printf_i+0xa4>
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6011      	str	r1, [r2, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	da03      	bge.n	8009e46 <_printf_i+0x5e>
 8009e3e:	222d      	movs	r2, #45	; 0x2d
 8009e40:	425b      	negs	r3, r3
 8009e42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009e46:	486f      	ldr	r0, [pc, #444]	; (800a004 <_printf_i+0x21c>)
 8009e48:	220a      	movs	r2, #10
 8009e4a:	e039      	b.n	8009ec0 <_printf_i+0xd8>
 8009e4c:	2973      	cmp	r1, #115	; 0x73
 8009e4e:	f000 809d 	beq.w	8009f8c <_printf_i+0x1a4>
 8009e52:	d808      	bhi.n	8009e66 <_printf_i+0x7e>
 8009e54:	296f      	cmp	r1, #111	; 0x6f
 8009e56:	d020      	beq.n	8009e9a <_printf_i+0xb2>
 8009e58:	2970      	cmp	r1, #112	; 0x70
 8009e5a:	d1dd      	bne.n	8009e18 <_printf_i+0x30>
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	f043 0320 	orr.w	r3, r3, #32
 8009e62:	6023      	str	r3, [r4, #0]
 8009e64:	e003      	b.n	8009e6e <_printf_i+0x86>
 8009e66:	2975      	cmp	r1, #117	; 0x75
 8009e68:	d017      	beq.n	8009e9a <_printf_i+0xb2>
 8009e6a:	2978      	cmp	r1, #120	; 0x78
 8009e6c:	d1d4      	bne.n	8009e18 <_printf_i+0x30>
 8009e6e:	2378      	movs	r3, #120	; 0x78
 8009e70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e74:	4864      	ldr	r0, [pc, #400]	; (800a008 <_printf_i+0x220>)
 8009e76:	e055      	b.n	8009f24 <_printf_i+0x13c>
 8009e78:	6813      	ldr	r3, [r2, #0]
 8009e7a:	1d19      	adds	r1, r3, #4
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6011      	str	r1, [r2, #0]
 8009e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e08c      	b.n	8009fa6 <_printf_i+0x1be>
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6011      	str	r1, [r2, #0]
 8009e90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e94:	bf18      	it	ne
 8009e96:	b21b      	sxthne	r3, r3
 8009e98:	e7cf      	b.n	8009e3a <_printf_i+0x52>
 8009e9a:	6813      	ldr	r3, [r2, #0]
 8009e9c:	6825      	ldr	r5, [r4, #0]
 8009e9e:	1d18      	adds	r0, r3, #4
 8009ea0:	6010      	str	r0, [r2, #0]
 8009ea2:	0628      	lsls	r0, r5, #24
 8009ea4:	d501      	bpl.n	8009eaa <_printf_i+0xc2>
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	e002      	b.n	8009eb0 <_printf_i+0xc8>
 8009eaa:	0668      	lsls	r0, r5, #25
 8009eac:	d5fb      	bpl.n	8009ea6 <_printf_i+0xbe>
 8009eae:	881b      	ldrh	r3, [r3, #0]
 8009eb0:	4854      	ldr	r0, [pc, #336]	; (800a004 <_printf_i+0x21c>)
 8009eb2:	296f      	cmp	r1, #111	; 0x6f
 8009eb4:	bf14      	ite	ne
 8009eb6:	220a      	movne	r2, #10
 8009eb8:	2208      	moveq	r2, #8
 8009eba:	2100      	movs	r1, #0
 8009ebc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ec0:	6865      	ldr	r5, [r4, #4]
 8009ec2:	60a5      	str	r5, [r4, #8]
 8009ec4:	2d00      	cmp	r5, #0
 8009ec6:	f2c0 8095 	blt.w	8009ff4 <_printf_i+0x20c>
 8009eca:	6821      	ldr	r1, [r4, #0]
 8009ecc:	f021 0104 	bic.w	r1, r1, #4
 8009ed0:	6021      	str	r1, [r4, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d13d      	bne.n	8009f52 <_printf_i+0x16a>
 8009ed6:	2d00      	cmp	r5, #0
 8009ed8:	f040 808e 	bne.w	8009ff8 <_printf_i+0x210>
 8009edc:	4665      	mov	r5, ip
 8009ede:	2a08      	cmp	r2, #8
 8009ee0:	d10b      	bne.n	8009efa <_printf_i+0x112>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	07db      	lsls	r3, r3, #31
 8009ee6:	d508      	bpl.n	8009efa <_printf_i+0x112>
 8009ee8:	6923      	ldr	r3, [r4, #16]
 8009eea:	6862      	ldr	r2, [r4, #4]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	bfde      	ittt	le
 8009ef0:	2330      	movle	r3, #48	; 0x30
 8009ef2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ef6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009efa:	ebac 0305 	sub.w	r3, ip, r5
 8009efe:	6123      	str	r3, [r4, #16]
 8009f00:	f8cd 8000 	str.w	r8, [sp]
 8009f04:	463b      	mov	r3, r7
 8009f06:	aa03      	add	r2, sp, #12
 8009f08:	4621      	mov	r1, r4
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f7ff fef6 	bl	8009cfc <_printf_common>
 8009f10:	3001      	adds	r0, #1
 8009f12:	d14d      	bne.n	8009fb0 <_printf_i+0x1c8>
 8009f14:	f04f 30ff 	mov.w	r0, #4294967295
 8009f18:	b005      	add	sp, #20
 8009f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f1e:	4839      	ldr	r0, [pc, #228]	; (800a004 <_printf_i+0x21c>)
 8009f20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009f24:	6813      	ldr	r3, [r2, #0]
 8009f26:	6821      	ldr	r1, [r4, #0]
 8009f28:	1d1d      	adds	r5, r3, #4
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6015      	str	r5, [r2, #0]
 8009f2e:	060a      	lsls	r2, r1, #24
 8009f30:	d50b      	bpl.n	8009f4a <_printf_i+0x162>
 8009f32:	07ca      	lsls	r2, r1, #31
 8009f34:	bf44      	itt	mi
 8009f36:	f041 0120 	orrmi.w	r1, r1, #32
 8009f3a:	6021      	strmi	r1, [r4, #0]
 8009f3c:	b91b      	cbnz	r3, 8009f46 <_printf_i+0x15e>
 8009f3e:	6822      	ldr	r2, [r4, #0]
 8009f40:	f022 0220 	bic.w	r2, r2, #32
 8009f44:	6022      	str	r2, [r4, #0]
 8009f46:	2210      	movs	r2, #16
 8009f48:	e7b7      	b.n	8009eba <_printf_i+0xd2>
 8009f4a:	064d      	lsls	r5, r1, #25
 8009f4c:	bf48      	it	mi
 8009f4e:	b29b      	uxthmi	r3, r3
 8009f50:	e7ef      	b.n	8009f32 <_printf_i+0x14a>
 8009f52:	4665      	mov	r5, ip
 8009f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f58:	fb02 3311 	mls	r3, r2, r1, r3
 8009f5c:	5cc3      	ldrb	r3, [r0, r3]
 8009f5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009f62:	460b      	mov	r3, r1
 8009f64:	2900      	cmp	r1, #0
 8009f66:	d1f5      	bne.n	8009f54 <_printf_i+0x16c>
 8009f68:	e7b9      	b.n	8009ede <_printf_i+0xf6>
 8009f6a:	6813      	ldr	r3, [r2, #0]
 8009f6c:	6825      	ldr	r5, [r4, #0]
 8009f6e:	6961      	ldr	r1, [r4, #20]
 8009f70:	1d18      	adds	r0, r3, #4
 8009f72:	6010      	str	r0, [r2, #0]
 8009f74:	0628      	lsls	r0, r5, #24
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	d501      	bpl.n	8009f7e <_printf_i+0x196>
 8009f7a:	6019      	str	r1, [r3, #0]
 8009f7c:	e002      	b.n	8009f84 <_printf_i+0x19c>
 8009f7e:	066a      	lsls	r2, r5, #25
 8009f80:	d5fb      	bpl.n	8009f7a <_printf_i+0x192>
 8009f82:	8019      	strh	r1, [r3, #0]
 8009f84:	2300      	movs	r3, #0
 8009f86:	6123      	str	r3, [r4, #16]
 8009f88:	4665      	mov	r5, ip
 8009f8a:	e7b9      	b.n	8009f00 <_printf_i+0x118>
 8009f8c:	6813      	ldr	r3, [r2, #0]
 8009f8e:	1d19      	adds	r1, r3, #4
 8009f90:	6011      	str	r1, [r2, #0]
 8009f92:	681d      	ldr	r5, [r3, #0]
 8009f94:	6862      	ldr	r2, [r4, #4]
 8009f96:	2100      	movs	r1, #0
 8009f98:	4628      	mov	r0, r5
 8009f9a:	f7f6 f949 	bl	8000230 <memchr>
 8009f9e:	b108      	cbz	r0, 8009fa4 <_printf_i+0x1bc>
 8009fa0:	1b40      	subs	r0, r0, r5
 8009fa2:	6060      	str	r0, [r4, #4]
 8009fa4:	6863      	ldr	r3, [r4, #4]
 8009fa6:	6123      	str	r3, [r4, #16]
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fae:	e7a7      	b.n	8009f00 <_printf_i+0x118>
 8009fb0:	6923      	ldr	r3, [r4, #16]
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	47c0      	blx	r8
 8009fba:	3001      	adds	r0, #1
 8009fbc:	d0aa      	beq.n	8009f14 <_printf_i+0x12c>
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	079b      	lsls	r3, r3, #30
 8009fc2:	d413      	bmi.n	8009fec <_printf_i+0x204>
 8009fc4:	68e0      	ldr	r0, [r4, #12]
 8009fc6:	9b03      	ldr	r3, [sp, #12]
 8009fc8:	4298      	cmp	r0, r3
 8009fca:	bfb8      	it	lt
 8009fcc:	4618      	movlt	r0, r3
 8009fce:	e7a3      	b.n	8009f18 <_printf_i+0x130>
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	464a      	mov	r2, r9
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	47c0      	blx	r8
 8009fda:	3001      	adds	r0, #1
 8009fdc:	d09a      	beq.n	8009f14 <_printf_i+0x12c>
 8009fde:	3501      	adds	r5, #1
 8009fe0:	68e3      	ldr	r3, [r4, #12]
 8009fe2:	9a03      	ldr	r2, [sp, #12]
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	42ab      	cmp	r3, r5
 8009fe8:	dcf2      	bgt.n	8009fd0 <_printf_i+0x1e8>
 8009fea:	e7eb      	b.n	8009fc4 <_printf_i+0x1dc>
 8009fec:	2500      	movs	r5, #0
 8009fee:	f104 0919 	add.w	r9, r4, #25
 8009ff2:	e7f5      	b.n	8009fe0 <_printf_i+0x1f8>
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1ac      	bne.n	8009f52 <_printf_i+0x16a>
 8009ff8:	7803      	ldrb	r3, [r0, #0]
 8009ffa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ffe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a002:	e76c      	b.n	8009ede <_printf_i+0xf6>
 800a004:	0800c44a 	.word	0x0800c44a
 800a008:	0800c45b 	.word	0x0800c45b

0800a00c <siprintf>:
 800a00c:	b40e      	push	{r1, r2, r3}
 800a00e:	b500      	push	{lr}
 800a010:	b09c      	sub	sp, #112	; 0x70
 800a012:	ab1d      	add	r3, sp, #116	; 0x74
 800a014:	9002      	str	r0, [sp, #8]
 800a016:	9006      	str	r0, [sp, #24]
 800a018:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a01c:	4809      	ldr	r0, [pc, #36]	; (800a044 <siprintf+0x38>)
 800a01e:	9107      	str	r1, [sp, #28]
 800a020:	9104      	str	r1, [sp, #16]
 800a022:	4909      	ldr	r1, [pc, #36]	; (800a048 <siprintf+0x3c>)
 800a024:	f853 2b04 	ldr.w	r2, [r3], #4
 800a028:	9105      	str	r1, [sp, #20]
 800a02a:	6800      	ldr	r0, [r0, #0]
 800a02c:	9301      	str	r3, [sp, #4]
 800a02e:	a902      	add	r1, sp, #8
 800a030:	f001 fab8 	bl	800b5a4 <_svfiprintf_r>
 800a034:	9b02      	ldr	r3, [sp, #8]
 800a036:	2200      	movs	r2, #0
 800a038:	701a      	strb	r2, [r3, #0]
 800a03a:	b01c      	add	sp, #112	; 0x70
 800a03c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a040:	b003      	add	sp, #12
 800a042:	4770      	bx	lr
 800a044:	2000002c 	.word	0x2000002c
 800a048:	ffff0208 	.word	0xffff0208

0800a04c <strncmp>:
 800a04c:	b510      	push	{r4, lr}
 800a04e:	b16a      	cbz	r2, 800a06c <strncmp+0x20>
 800a050:	3901      	subs	r1, #1
 800a052:	1884      	adds	r4, r0, r2
 800a054:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a058:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d103      	bne.n	800a068 <strncmp+0x1c>
 800a060:	42a0      	cmp	r0, r4
 800a062:	d001      	beq.n	800a068 <strncmp+0x1c>
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1f5      	bne.n	800a054 <strncmp+0x8>
 800a068:	1a98      	subs	r0, r3, r2
 800a06a:	bd10      	pop	{r4, pc}
 800a06c:	4610      	mov	r0, r2
 800a06e:	e7fc      	b.n	800a06a <strncmp+0x1e>

0800a070 <strtok>:
 800a070:	4b13      	ldr	r3, [pc, #76]	; (800a0c0 <strtok+0x50>)
 800a072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a076:	681d      	ldr	r5, [r3, #0]
 800a078:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800a07a:	4606      	mov	r6, r0
 800a07c:	460f      	mov	r7, r1
 800a07e:	b9b4      	cbnz	r4, 800a0ae <strtok+0x3e>
 800a080:	2050      	movs	r0, #80	; 0x50
 800a082:	f000 fe9b 	bl	800adbc <malloc>
 800a086:	65a8      	str	r0, [r5, #88]	; 0x58
 800a088:	e9c0 4400 	strd	r4, r4, [r0]
 800a08c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a090:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a094:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a098:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a09c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a0a0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a0a4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a0a8:	6184      	str	r4, [r0, #24]
 800a0aa:	7704      	strb	r4, [r0, #28]
 800a0ac:	6244      	str	r4, [r0, #36]	; 0x24
 800a0ae:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800a0b0:	4639      	mov	r1, r7
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ba:	f000 b803 	b.w	800a0c4 <__strtok_r>
 800a0be:	bf00      	nop
 800a0c0:	2000002c 	.word	0x2000002c

0800a0c4 <__strtok_r>:
 800a0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0c6:	b918      	cbnz	r0, 800a0d0 <__strtok_r+0xc>
 800a0c8:	6810      	ldr	r0, [r2, #0]
 800a0ca:	b908      	cbnz	r0, 800a0d0 <__strtok_r+0xc>
 800a0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ce:	4620      	mov	r0, r4
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	460f      	mov	r7, r1
 800a0d4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a0d8:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a0dc:	b91e      	cbnz	r6, 800a0e6 <__strtok_r+0x22>
 800a0de:	b96d      	cbnz	r5, 800a0fc <__strtok_r+0x38>
 800a0e0:	6015      	str	r5, [r2, #0]
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	e7f2      	b.n	800a0cc <__strtok_r+0x8>
 800a0e6:	42b5      	cmp	r5, r6
 800a0e8:	d1f6      	bne.n	800a0d8 <__strtok_r+0x14>
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1ef      	bne.n	800a0ce <__strtok_r+0xa>
 800a0ee:	6014      	str	r4, [r2, #0]
 800a0f0:	7003      	strb	r3, [r0, #0]
 800a0f2:	e7eb      	b.n	800a0cc <__strtok_r+0x8>
 800a0f4:	462b      	mov	r3, r5
 800a0f6:	e00d      	b.n	800a114 <__strtok_r+0x50>
 800a0f8:	b926      	cbnz	r6, 800a104 <__strtok_r+0x40>
 800a0fa:	461c      	mov	r4, r3
 800a0fc:	4623      	mov	r3, r4
 800a0fe:	460f      	mov	r7, r1
 800a100:	f813 5b01 	ldrb.w	r5, [r3], #1
 800a104:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a108:	42b5      	cmp	r5, r6
 800a10a:	d1f5      	bne.n	800a0f8 <__strtok_r+0x34>
 800a10c:	2d00      	cmp	r5, #0
 800a10e:	d0f1      	beq.n	800a0f4 <__strtok_r+0x30>
 800a110:	2100      	movs	r1, #0
 800a112:	7021      	strb	r1, [r4, #0]
 800a114:	6013      	str	r3, [r2, #0]
 800a116:	e7d9      	b.n	800a0cc <__strtok_r+0x8>

0800a118 <quorem>:
 800a118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	6903      	ldr	r3, [r0, #16]
 800a11e:	690c      	ldr	r4, [r1, #16]
 800a120:	42a3      	cmp	r3, r4
 800a122:	4680      	mov	r8, r0
 800a124:	f2c0 8082 	blt.w	800a22c <quorem+0x114>
 800a128:	3c01      	subs	r4, #1
 800a12a:	f101 0714 	add.w	r7, r1, #20
 800a12e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a132:	f100 0614 	add.w	r6, r0, #20
 800a136:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a13a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a13e:	eb06 030c 	add.w	r3, r6, ip
 800a142:	3501      	adds	r5, #1
 800a144:	eb07 090c 	add.w	r9, r7, ip
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	fbb0 f5f5 	udiv	r5, r0, r5
 800a14e:	b395      	cbz	r5, 800a1b6 <quorem+0x9e>
 800a150:	f04f 0a00 	mov.w	sl, #0
 800a154:	4638      	mov	r0, r7
 800a156:	46b6      	mov	lr, r6
 800a158:	46d3      	mov	fp, sl
 800a15a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a15e:	b293      	uxth	r3, r2
 800a160:	fb05 a303 	mla	r3, r5, r3, sl
 800a164:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a168:	b29b      	uxth	r3, r3
 800a16a:	ebab 0303 	sub.w	r3, fp, r3
 800a16e:	0c12      	lsrs	r2, r2, #16
 800a170:	f8de b000 	ldr.w	fp, [lr]
 800a174:	fb05 a202 	mla	r2, r5, r2, sl
 800a178:	fa13 f38b 	uxtah	r3, r3, fp
 800a17c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a180:	fa1f fb82 	uxth.w	fp, r2
 800a184:	f8de 2000 	ldr.w	r2, [lr]
 800a188:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a18c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a190:	b29b      	uxth	r3, r3
 800a192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a196:	4581      	cmp	r9, r0
 800a198:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a19c:	f84e 3b04 	str.w	r3, [lr], #4
 800a1a0:	d2db      	bcs.n	800a15a <quorem+0x42>
 800a1a2:	f856 300c 	ldr.w	r3, [r6, ip]
 800a1a6:	b933      	cbnz	r3, 800a1b6 <quorem+0x9e>
 800a1a8:	9b01      	ldr	r3, [sp, #4]
 800a1aa:	3b04      	subs	r3, #4
 800a1ac:	429e      	cmp	r6, r3
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	d330      	bcc.n	800a214 <quorem+0xfc>
 800a1b2:	f8c8 4010 	str.w	r4, [r8, #16]
 800a1b6:	4640      	mov	r0, r8
 800a1b8:	f001 f81e 	bl	800b1f8 <__mcmp>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	db25      	blt.n	800a20c <quorem+0xf4>
 800a1c0:	3501      	adds	r5, #1
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f04f 0c00 	mov.w	ip, #0
 800a1c8:	f857 2b04 	ldr.w	r2, [r7], #4
 800a1cc:	f8d0 e000 	ldr.w	lr, [r0]
 800a1d0:	b293      	uxth	r3, r2
 800a1d2:	ebac 0303 	sub.w	r3, ip, r3
 800a1d6:	0c12      	lsrs	r2, r2, #16
 800a1d8:	fa13 f38e 	uxtah	r3, r3, lr
 800a1dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1ea:	45b9      	cmp	r9, r7
 800a1ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1f0:	f840 3b04 	str.w	r3, [r0], #4
 800a1f4:	d2e8      	bcs.n	800a1c8 <quorem+0xb0>
 800a1f6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a1fa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a1fe:	b92a      	cbnz	r2, 800a20c <quorem+0xf4>
 800a200:	3b04      	subs	r3, #4
 800a202:	429e      	cmp	r6, r3
 800a204:	461a      	mov	r2, r3
 800a206:	d30b      	bcc.n	800a220 <quorem+0x108>
 800a208:	f8c8 4010 	str.w	r4, [r8, #16]
 800a20c:	4628      	mov	r0, r5
 800a20e:	b003      	add	sp, #12
 800a210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a214:	6812      	ldr	r2, [r2, #0]
 800a216:	3b04      	subs	r3, #4
 800a218:	2a00      	cmp	r2, #0
 800a21a:	d1ca      	bne.n	800a1b2 <quorem+0x9a>
 800a21c:	3c01      	subs	r4, #1
 800a21e:	e7c5      	b.n	800a1ac <quorem+0x94>
 800a220:	6812      	ldr	r2, [r2, #0]
 800a222:	3b04      	subs	r3, #4
 800a224:	2a00      	cmp	r2, #0
 800a226:	d1ef      	bne.n	800a208 <quorem+0xf0>
 800a228:	3c01      	subs	r4, #1
 800a22a:	e7ea      	b.n	800a202 <quorem+0xea>
 800a22c:	2000      	movs	r0, #0
 800a22e:	e7ee      	b.n	800a20e <quorem+0xf6>

0800a230 <_dtoa_r>:
 800a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a234:	ec57 6b10 	vmov	r6, r7, d0
 800a238:	b097      	sub	sp, #92	; 0x5c
 800a23a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a23c:	9106      	str	r1, [sp, #24]
 800a23e:	4604      	mov	r4, r0
 800a240:	920b      	str	r2, [sp, #44]	; 0x2c
 800a242:	9312      	str	r3, [sp, #72]	; 0x48
 800a244:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a248:	e9cd 6700 	strd	r6, r7, [sp]
 800a24c:	b93d      	cbnz	r5, 800a25e <_dtoa_r+0x2e>
 800a24e:	2010      	movs	r0, #16
 800a250:	f000 fdb4 	bl	800adbc <malloc>
 800a254:	6260      	str	r0, [r4, #36]	; 0x24
 800a256:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a25a:	6005      	str	r5, [r0, #0]
 800a25c:	60c5      	str	r5, [r0, #12]
 800a25e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a260:	6819      	ldr	r1, [r3, #0]
 800a262:	b151      	cbz	r1, 800a27a <_dtoa_r+0x4a>
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	604a      	str	r2, [r1, #4]
 800a268:	2301      	movs	r3, #1
 800a26a:	4093      	lsls	r3, r2
 800a26c:	608b      	str	r3, [r1, #8]
 800a26e:	4620      	mov	r0, r4
 800a270:	f000 fde0 	bl	800ae34 <_Bfree>
 800a274:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	1e3b      	subs	r3, r7, #0
 800a27c:	bfbb      	ittet	lt
 800a27e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a282:	9301      	strlt	r3, [sp, #4]
 800a284:	2300      	movge	r3, #0
 800a286:	2201      	movlt	r2, #1
 800a288:	bfac      	ite	ge
 800a28a:	f8c8 3000 	strge.w	r3, [r8]
 800a28e:	f8c8 2000 	strlt.w	r2, [r8]
 800a292:	4baf      	ldr	r3, [pc, #700]	; (800a550 <_dtoa_r+0x320>)
 800a294:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a298:	ea33 0308 	bics.w	r3, r3, r8
 800a29c:	d114      	bne.n	800a2c8 <_dtoa_r+0x98>
 800a29e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2a4:	6013      	str	r3, [r2, #0]
 800a2a6:	9b00      	ldr	r3, [sp, #0]
 800a2a8:	b923      	cbnz	r3, 800a2b4 <_dtoa_r+0x84>
 800a2aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	f000 8542 	beq.w	800ad38 <_dtoa_r+0xb08>
 800a2b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a564 <_dtoa_r+0x334>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f000 8544 	beq.w	800ad48 <_dtoa_r+0xb18>
 800a2c0:	f10b 0303 	add.w	r3, fp, #3
 800a2c4:	f000 bd3e 	b.w	800ad44 <_dtoa_r+0xb14>
 800a2c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	f7f6 fc20 	bl	8000b18 <__aeabi_dcmpeq>
 800a2d8:	4681      	mov	r9, r0
 800a2da:	b168      	cbz	r0, 800a2f8 <_dtoa_r+0xc8>
 800a2dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2de:	2301      	movs	r3, #1
 800a2e0:	6013      	str	r3, [r2, #0]
 800a2e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f000 8524 	beq.w	800ad32 <_dtoa_r+0xb02>
 800a2ea:	4b9a      	ldr	r3, [pc, #616]	; (800a554 <_dtoa_r+0x324>)
 800a2ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2ee:	f103 3bff 	add.w	fp, r3, #4294967295
 800a2f2:	6013      	str	r3, [r2, #0]
 800a2f4:	f000 bd28 	b.w	800ad48 <_dtoa_r+0xb18>
 800a2f8:	aa14      	add	r2, sp, #80	; 0x50
 800a2fa:	a915      	add	r1, sp, #84	; 0x54
 800a2fc:	ec47 6b10 	vmov	d0, r6, r7
 800a300:	4620      	mov	r0, r4
 800a302:	f000 fff0 	bl	800b2e6 <__d2b>
 800a306:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a30a:	9004      	str	r0, [sp, #16]
 800a30c:	2d00      	cmp	r5, #0
 800a30e:	d07c      	beq.n	800a40a <_dtoa_r+0x1da>
 800a310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a314:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a318:	46b2      	mov	sl, r6
 800a31a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a31e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a322:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a326:	2200      	movs	r2, #0
 800a328:	4b8b      	ldr	r3, [pc, #556]	; (800a558 <_dtoa_r+0x328>)
 800a32a:	4650      	mov	r0, sl
 800a32c:	4659      	mov	r1, fp
 800a32e:	f7f5 ffd3 	bl	80002d8 <__aeabi_dsub>
 800a332:	a381      	add	r3, pc, #516	; (adr r3, 800a538 <_dtoa_r+0x308>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	f7f6 f986 	bl	8000648 <__aeabi_dmul>
 800a33c:	a380      	add	r3, pc, #512	; (adr r3, 800a540 <_dtoa_r+0x310>)
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	f7f5 ffcb 	bl	80002dc <__adddf3>
 800a346:	4606      	mov	r6, r0
 800a348:	4628      	mov	r0, r5
 800a34a:	460f      	mov	r7, r1
 800a34c:	f7f6 f912 	bl	8000574 <__aeabi_i2d>
 800a350:	a37d      	add	r3, pc, #500	; (adr r3, 800a548 <_dtoa_r+0x318>)
 800a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a356:	f7f6 f977 	bl	8000648 <__aeabi_dmul>
 800a35a:	4602      	mov	r2, r0
 800a35c:	460b      	mov	r3, r1
 800a35e:	4630      	mov	r0, r6
 800a360:	4639      	mov	r1, r7
 800a362:	f7f5 ffbb 	bl	80002dc <__adddf3>
 800a366:	4606      	mov	r6, r0
 800a368:	460f      	mov	r7, r1
 800a36a:	f7f6 fc1d 	bl	8000ba8 <__aeabi_d2iz>
 800a36e:	2200      	movs	r2, #0
 800a370:	4682      	mov	sl, r0
 800a372:	2300      	movs	r3, #0
 800a374:	4630      	mov	r0, r6
 800a376:	4639      	mov	r1, r7
 800a378:	f7f6 fbd8 	bl	8000b2c <__aeabi_dcmplt>
 800a37c:	b148      	cbz	r0, 800a392 <_dtoa_r+0x162>
 800a37e:	4650      	mov	r0, sl
 800a380:	f7f6 f8f8 	bl	8000574 <__aeabi_i2d>
 800a384:	4632      	mov	r2, r6
 800a386:	463b      	mov	r3, r7
 800a388:	f7f6 fbc6 	bl	8000b18 <__aeabi_dcmpeq>
 800a38c:	b908      	cbnz	r0, 800a392 <_dtoa_r+0x162>
 800a38e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a392:	f1ba 0f16 	cmp.w	sl, #22
 800a396:	d859      	bhi.n	800a44c <_dtoa_r+0x21c>
 800a398:	4970      	ldr	r1, [pc, #448]	; (800a55c <_dtoa_r+0x32c>)
 800a39a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a39e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3a6:	f7f6 fbdf 	bl	8000b68 <__aeabi_dcmpgt>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d050      	beq.n	800a450 <_dtoa_r+0x220>
 800a3ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3b8:	1b5d      	subs	r5, r3, r5
 800a3ba:	f1b5 0801 	subs.w	r8, r5, #1
 800a3be:	bf49      	itett	mi
 800a3c0:	f1c5 0301 	rsbmi	r3, r5, #1
 800a3c4:	2300      	movpl	r3, #0
 800a3c6:	9305      	strmi	r3, [sp, #20]
 800a3c8:	f04f 0800 	movmi.w	r8, #0
 800a3cc:	bf58      	it	pl
 800a3ce:	9305      	strpl	r3, [sp, #20]
 800a3d0:	f1ba 0f00 	cmp.w	sl, #0
 800a3d4:	db3e      	blt.n	800a454 <_dtoa_r+0x224>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	44d0      	add	r8, sl
 800a3da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a3de:	9307      	str	r3, [sp, #28]
 800a3e0:	9b06      	ldr	r3, [sp, #24]
 800a3e2:	2b09      	cmp	r3, #9
 800a3e4:	f200 8090 	bhi.w	800a508 <_dtoa_r+0x2d8>
 800a3e8:	2b05      	cmp	r3, #5
 800a3ea:	bfc4      	itt	gt
 800a3ec:	3b04      	subgt	r3, #4
 800a3ee:	9306      	strgt	r3, [sp, #24]
 800a3f0:	9b06      	ldr	r3, [sp, #24]
 800a3f2:	f1a3 0302 	sub.w	r3, r3, #2
 800a3f6:	bfcc      	ite	gt
 800a3f8:	2500      	movgt	r5, #0
 800a3fa:	2501      	movle	r5, #1
 800a3fc:	2b03      	cmp	r3, #3
 800a3fe:	f200 808f 	bhi.w	800a520 <_dtoa_r+0x2f0>
 800a402:	e8df f003 	tbb	[pc, r3]
 800a406:	7f7d      	.short	0x7f7d
 800a408:	7131      	.short	0x7131
 800a40a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a40e:	441d      	add	r5, r3
 800a410:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a414:	2820      	cmp	r0, #32
 800a416:	dd13      	ble.n	800a440 <_dtoa_r+0x210>
 800a418:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a41c:	9b00      	ldr	r3, [sp, #0]
 800a41e:	fa08 f800 	lsl.w	r8, r8, r0
 800a422:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a426:	fa23 f000 	lsr.w	r0, r3, r0
 800a42a:	ea48 0000 	orr.w	r0, r8, r0
 800a42e:	f7f6 f891 	bl	8000554 <__aeabi_ui2d>
 800a432:	2301      	movs	r3, #1
 800a434:	4682      	mov	sl, r0
 800a436:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a43a:	3d01      	subs	r5, #1
 800a43c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a43e:	e772      	b.n	800a326 <_dtoa_r+0xf6>
 800a440:	9b00      	ldr	r3, [sp, #0]
 800a442:	f1c0 0020 	rsb	r0, r0, #32
 800a446:	fa03 f000 	lsl.w	r0, r3, r0
 800a44a:	e7f0      	b.n	800a42e <_dtoa_r+0x1fe>
 800a44c:	2301      	movs	r3, #1
 800a44e:	e7b1      	b.n	800a3b4 <_dtoa_r+0x184>
 800a450:	900f      	str	r0, [sp, #60]	; 0x3c
 800a452:	e7b0      	b.n	800a3b6 <_dtoa_r+0x186>
 800a454:	9b05      	ldr	r3, [sp, #20]
 800a456:	eba3 030a 	sub.w	r3, r3, sl
 800a45a:	9305      	str	r3, [sp, #20]
 800a45c:	f1ca 0300 	rsb	r3, sl, #0
 800a460:	9307      	str	r3, [sp, #28]
 800a462:	2300      	movs	r3, #0
 800a464:	930e      	str	r3, [sp, #56]	; 0x38
 800a466:	e7bb      	b.n	800a3e0 <_dtoa_r+0x1b0>
 800a468:	2301      	movs	r3, #1
 800a46a:	930a      	str	r3, [sp, #40]	; 0x28
 800a46c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a46e:	2b00      	cmp	r3, #0
 800a470:	dd59      	ble.n	800a526 <_dtoa_r+0x2f6>
 800a472:	9302      	str	r3, [sp, #8]
 800a474:	4699      	mov	r9, r3
 800a476:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a478:	2200      	movs	r2, #0
 800a47a:	6072      	str	r2, [r6, #4]
 800a47c:	2204      	movs	r2, #4
 800a47e:	f102 0014 	add.w	r0, r2, #20
 800a482:	4298      	cmp	r0, r3
 800a484:	6871      	ldr	r1, [r6, #4]
 800a486:	d953      	bls.n	800a530 <_dtoa_r+0x300>
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 fc9f 	bl	800adcc <_Balloc>
 800a48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a490:	6030      	str	r0, [r6, #0]
 800a492:	f1b9 0f0e 	cmp.w	r9, #14
 800a496:	f8d3 b000 	ldr.w	fp, [r3]
 800a49a:	f200 80e6 	bhi.w	800a66a <_dtoa_r+0x43a>
 800a49e:	2d00      	cmp	r5, #0
 800a4a0:	f000 80e3 	beq.w	800a66a <_dtoa_r+0x43a>
 800a4a4:	ed9d 7b00 	vldr	d7, [sp]
 800a4a8:	f1ba 0f00 	cmp.w	sl, #0
 800a4ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a4b0:	dd74      	ble.n	800a59c <_dtoa_r+0x36c>
 800a4b2:	4a2a      	ldr	r2, [pc, #168]	; (800a55c <_dtoa_r+0x32c>)
 800a4b4:	f00a 030f 	and.w	r3, sl, #15
 800a4b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a4bc:	ed93 7b00 	vldr	d7, [r3]
 800a4c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a4c4:	06f0      	lsls	r0, r6, #27
 800a4c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a4ca:	d565      	bpl.n	800a598 <_dtoa_r+0x368>
 800a4cc:	4b24      	ldr	r3, [pc, #144]	; (800a560 <_dtoa_r+0x330>)
 800a4ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4d6:	f7f6 f9e1 	bl	800089c <__aeabi_ddiv>
 800a4da:	e9cd 0100 	strd	r0, r1, [sp]
 800a4de:	f006 060f 	and.w	r6, r6, #15
 800a4e2:	2503      	movs	r5, #3
 800a4e4:	4f1e      	ldr	r7, [pc, #120]	; (800a560 <_dtoa_r+0x330>)
 800a4e6:	e04c      	b.n	800a582 <_dtoa_r+0x352>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a4ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4ee:	4453      	add	r3, sl
 800a4f0:	f103 0901 	add.w	r9, r3, #1
 800a4f4:	9302      	str	r3, [sp, #8]
 800a4f6:	464b      	mov	r3, r9
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	bfb8      	it	lt
 800a4fc:	2301      	movlt	r3, #1
 800a4fe:	e7ba      	b.n	800a476 <_dtoa_r+0x246>
 800a500:	2300      	movs	r3, #0
 800a502:	e7b2      	b.n	800a46a <_dtoa_r+0x23a>
 800a504:	2300      	movs	r3, #0
 800a506:	e7f0      	b.n	800a4ea <_dtoa_r+0x2ba>
 800a508:	2501      	movs	r5, #1
 800a50a:	2300      	movs	r3, #0
 800a50c:	9306      	str	r3, [sp, #24]
 800a50e:	950a      	str	r5, [sp, #40]	; 0x28
 800a510:	f04f 33ff 	mov.w	r3, #4294967295
 800a514:	9302      	str	r3, [sp, #8]
 800a516:	4699      	mov	r9, r3
 800a518:	2200      	movs	r2, #0
 800a51a:	2312      	movs	r3, #18
 800a51c:	920b      	str	r2, [sp, #44]	; 0x2c
 800a51e:	e7aa      	b.n	800a476 <_dtoa_r+0x246>
 800a520:	2301      	movs	r3, #1
 800a522:	930a      	str	r3, [sp, #40]	; 0x28
 800a524:	e7f4      	b.n	800a510 <_dtoa_r+0x2e0>
 800a526:	2301      	movs	r3, #1
 800a528:	9302      	str	r3, [sp, #8]
 800a52a:	4699      	mov	r9, r3
 800a52c:	461a      	mov	r2, r3
 800a52e:	e7f5      	b.n	800a51c <_dtoa_r+0x2ec>
 800a530:	3101      	adds	r1, #1
 800a532:	6071      	str	r1, [r6, #4]
 800a534:	0052      	lsls	r2, r2, #1
 800a536:	e7a2      	b.n	800a47e <_dtoa_r+0x24e>
 800a538:	636f4361 	.word	0x636f4361
 800a53c:	3fd287a7 	.word	0x3fd287a7
 800a540:	8b60c8b3 	.word	0x8b60c8b3
 800a544:	3fc68a28 	.word	0x3fc68a28
 800a548:	509f79fb 	.word	0x509f79fb
 800a54c:	3fd34413 	.word	0x3fd34413
 800a550:	7ff00000 	.word	0x7ff00000
 800a554:	0800c449 	.word	0x0800c449
 800a558:	3ff80000 	.word	0x3ff80000
 800a55c:	0800c4a8 	.word	0x0800c4a8
 800a560:	0800c480 	.word	0x0800c480
 800a564:	0800c475 	.word	0x0800c475
 800a568:	07f1      	lsls	r1, r6, #31
 800a56a:	d508      	bpl.n	800a57e <_dtoa_r+0x34e>
 800a56c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a570:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a574:	f7f6 f868 	bl	8000648 <__aeabi_dmul>
 800a578:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a57c:	3501      	adds	r5, #1
 800a57e:	1076      	asrs	r6, r6, #1
 800a580:	3708      	adds	r7, #8
 800a582:	2e00      	cmp	r6, #0
 800a584:	d1f0      	bne.n	800a568 <_dtoa_r+0x338>
 800a586:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a58a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a58e:	f7f6 f985 	bl	800089c <__aeabi_ddiv>
 800a592:	e9cd 0100 	strd	r0, r1, [sp]
 800a596:	e01a      	b.n	800a5ce <_dtoa_r+0x39e>
 800a598:	2502      	movs	r5, #2
 800a59a:	e7a3      	b.n	800a4e4 <_dtoa_r+0x2b4>
 800a59c:	f000 80a0 	beq.w	800a6e0 <_dtoa_r+0x4b0>
 800a5a0:	f1ca 0600 	rsb	r6, sl, #0
 800a5a4:	4b9f      	ldr	r3, [pc, #636]	; (800a824 <_dtoa_r+0x5f4>)
 800a5a6:	4fa0      	ldr	r7, [pc, #640]	; (800a828 <_dtoa_r+0x5f8>)
 800a5a8:	f006 020f 	and.w	r2, r6, #15
 800a5ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5b8:	f7f6 f846 	bl	8000648 <__aeabi_dmul>
 800a5bc:	e9cd 0100 	strd	r0, r1, [sp]
 800a5c0:	1136      	asrs	r6, r6, #4
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	2502      	movs	r5, #2
 800a5c6:	2e00      	cmp	r6, #0
 800a5c8:	d17f      	bne.n	800a6ca <_dtoa_r+0x49a>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d1e1      	bne.n	800a592 <_dtoa_r+0x362>
 800a5ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f000 8087 	beq.w	800a6e4 <_dtoa_r+0x4b4>
 800a5d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	4b93      	ldr	r3, [pc, #588]	; (800a82c <_dtoa_r+0x5fc>)
 800a5de:	4630      	mov	r0, r6
 800a5e0:	4639      	mov	r1, r7
 800a5e2:	f7f6 faa3 	bl	8000b2c <__aeabi_dcmplt>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d07c      	beq.n	800a6e4 <_dtoa_r+0x4b4>
 800a5ea:	f1b9 0f00 	cmp.w	r9, #0
 800a5ee:	d079      	beq.n	800a6e4 <_dtoa_r+0x4b4>
 800a5f0:	9b02      	ldr	r3, [sp, #8]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	dd35      	ble.n	800a662 <_dtoa_r+0x432>
 800a5f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a5fa:	9308      	str	r3, [sp, #32]
 800a5fc:	4639      	mov	r1, r7
 800a5fe:	2200      	movs	r2, #0
 800a600:	4b8b      	ldr	r3, [pc, #556]	; (800a830 <_dtoa_r+0x600>)
 800a602:	4630      	mov	r0, r6
 800a604:	f7f6 f820 	bl	8000648 <__aeabi_dmul>
 800a608:	e9cd 0100 	strd	r0, r1, [sp]
 800a60c:	9f02      	ldr	r7, [sp, #8]
 800a60e:	3501      	adds	r5, #1
 800a610:	4628      	mov	r0, r5
 800a612:	f7f5 ffaf 	bl	8000574 <__aeabi_i2d>
 800a616:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a61a:	f7f6 f815 	bl	8000648 <__aeabi_dmul>
 800a61e:	2200      	movs	r2, #0
 800a620:	4b84      	ldr	r3, [pc, #528]	; (800a834 <_dtoa_r+0x604>)
 800a622:	f7f5 fe5b 	bl	80002dc <__adddf3>
 800a626:	4605      	mov	r5, r0
 800a628:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a62c:	2f00      	cmp	r7, #0
 800a62e:	d15d      	bne.n	800a6ec <_dtoa_r+0x4bc>
 800a630:	2200      	movs	r2, #0
 800a632:	4b81      	ldr	r3, [pc, #516]	; (800a838 <_dtoa_r+0x608>)
 800a634:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a638:	f7f5 fe4e 	bl	80002d8 <__aeabi_dsub>
 800a63c:	462a      	mov	r2, r5
 800a63e:	4633      	mov	r3, r6
 800a640:	e9cd 0100 	strd	r0, r1, [sp]
 800a644:	f7f6 fa90 	bl	8000b68 <__aeabi_dcmpgt>
 800a648:	2800      	cmp	r0, #0
 800a64a:	f040 8288 	bne.w	800ab5e <_dtoa_r+0x92e>
 800a64e:	462a      	mov	r2, r5
 800a650:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a654:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a658:	f7f6 fa68 	bl	8000b2c <__aeabi_dcmplt>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	f040 827c 	bne.w	800ab5a <_dtoa_r+0x92a>
 800a662:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a666:	e9cd 2300 	strd	r2, r3, [sp]
 800a66a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f2c0 8150 	blt.w	800a912 <_dtoa_r+0x6e2>
 800a672:	f1ba 0f0e 	cmp.w	sl, #14
 800a676:	f300 814c 	bgt.w	800a912 <_dtoa_r+0x6e2>
 800a67a:	4b6a      	ldr	r3, [pc, #424]	; (800a824 <_dtoa_r+0x5f4>)
 800a67c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a680:	ed93 7b00 	vldr	d7, [r3]
 800a684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a686:	2b00      	cmp	r3, #0
 800a688:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a68c:	f280 80d8 	bge.w	800a840 <_dtoa_r+0x610>
 800a690:	f1b9 0f00 	cmp.w	r9, #0
 800a694:	f300 80d4 	bgt.w	800a840 <_dtoa_r+0x610>
 800a698:	f040 825e 	bne.w	800ab58 <_dtoa_r+0x928>
 800a69c:	2200      	movs	r2, #0
 800a69e:	4b66      	ldr	r3, [pc, #408]	; (800a838 <_dtoa_r+0x608>)
 800a6a0:	ec51 0b17 	vmov	r0, r1, d7
 800a6a4:	f7f5 ffd0 	bl	8000648 <__aeabi_dmul>
 800a6a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6ac:	f7f6 fa52 	bl	8000b54 <__aeabi_dcmpge>
 800a6b0:	464f      	mov	r7, r9
 800a6b2:	464e      	mov	r6, r9
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	f040 8234 	bne.w	800ab22 <_dtoa_r+0x8f2>
 800a6ba:	2331      	movs	r3, #49	; 0x31
 800a6bc:	f10b 0501 	add.w	r5, fp, #1
 800a6c0:	f88b 3000 	strb.w	r3, [fp]
 800a6c4:	f10a 0a01 	add.w	sl, sl, #1
 800a6c8:	e22f      	b.n	800ab2a <_dtoa_r+0x8fa>
 800a6ca:	07f2      	lsls	r2, r6, #31
 800a6cc:	d505      	bpl.n	800a6da <_dtoa_r+0x4aa>
 800a6ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6d2:	f7f5 ffb9 	bl	8000648 <__aeabi_dmul>
 800a6d6:	3501      	adds	r5, #1
 800a6d8:	2301      	movs	r3, #1
 800a6da:	1076      	asrs	r6, r6, #1
 800a6dc:	3708      	adds	r7, #8
 800a6de:	e772      	b.n	800a5c6 <_dtoa_r+0x396>
 800a6e0:	2502      	movs	r5, #2
 800a6e2:	e774      	b.n	800a5ce <_dtoa_r+0x39e>
 800a6e4:	f8cd a020 	str.w	sl, [sp, #32]
 800a6e8:	464f      	mov	r7, r9
 800a6ea:	e791      	b.n	800a610 <_dtoa_r+0x3e0>
 800a6ec:	4b4d      	ldr	r3, [pc, #308]	; (800a824 <_dtoa_r+0x5f4>)
 800a6ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a6f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d047      	beq.n	800a78c <_dtoa_r+0x55c>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	2000      	movs	r0, #0
 800a702:	494e      	ldr	r1, [pc, #312]	; (800a83c <_dtoa_r+0x60c>)
 800a704:	f7f6 f8ca 	bl	800089c <__aeabi_ddiv>
 800a708:	462a      	mov	r2, r5
 800a70a:	4633      	mov	r3, r6
 800a70c:	f7f5 fde4 	bl	80002d8 <__aeabi_dsub>
 800a710:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a714:	465d      	mov	r5, fp
 800a716:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a71a:	f7f6 fa45 	bl	8000ba8 <__aeabi_d2iz>
 800a71e:	4606      	mov	r6, r0
 800a720:	f7f5 ff28 	bl	8000574 <__aeabi_i2d>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a72c:	f7f5 fdd4 	bl	80002d8 <__aeabi_dsub>
 800a730:	3630      	adds	r6, #48	; 0x30
 800a732:	f805 6b01 	strb.w	r6, [r5], #1
 800a736:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a73a:	e9cd 0100 	strd	r0, r1, [sp]
 800a73e:	f7f6 f9f5 	bl	8000b2c <__aeabi_dcmplt>
 800a742:	2800      	cmp	r0, #0
 800a744:	d163      	bne.n	800a80e <_dtoa_r+0x5de>
 800a746:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a74a:	2000      	movs	r0, #0
 800a74c:	4937      	ldr	r1, [pc, #220]	; (800a82c <_dtoa_r+0x5fc>)
 800a74e:	f7f5 fdc3 	bl	80002d8 <__aeabi_dsub>
 800a752:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a756:	f7f6 f9e9 	bl	8000b2c <__aeabi_dcmplt>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	f040 80b7 	bne.w	800a8ce <_dtoa_r+0x69e>
 800a760:	eba5 030b 	sub.w	r3, r5, fp
 800a764:	429f      	cmp	r7, r3
 800a766:	f77f af7c 	ble.w	800a662 <_dtoa_r+0x432>
 800a76a:	2200      	movs	r2, #0
 800a76c:	4b30      	ldr	r3, [pc, #192]	; (800a830 <_dtoa_r+0x600>)
 800a76e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a772:	f7f5 ff69 	bl	8000648 <__aeabi_dmul>
 800a776:	2200      	movs	r2, #0
 800a778:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a77c:	4b2c      	ldr	r3, [pc, #176]	; (800a830 <_dtoa_r+0x600>)
 800a77e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a782:	f7f5 ff61 	bl	8000648 <__aeabi_dmul>
 800a786:	e9cd 0100 	strd	r0, r1, [sp]
 800a78a:	e7c4      	b.n	800a716 <_dtoa_r+0x4e6>
 800a78c:	462a      	mov	r2, r5
 800a78e:	4633      	mov	r3, r6
 800a790:	f7f5 ff5a 	bl	8000648 <__aeabi_dmul>
 800a794:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a798:	eb0b 0507 	add.w	r5, fp, r7
 800a79c:	465e      	mov	r6, fp
 800a79e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7a2:	f7f6 fa01 	bl	8000ba8 <__aeabi_d2iz>
 800a7a6:	4607      	mov	r7, r0
 800a7a8:	f7f5 fee4 	bl	8000574 <__aeabi_i2d>
 800a7ac:	3730      	adds	r7, #48	; 0x30
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7b6:	f7f5 fd8f 	bl	80002d8 <__aeabi_dsub>
 800a7ba:	f806 7b01 	strb.w	r7, [r6], #1
 800a7be:	42ae      	cmp	r6, r5
 800a7c0:	e9cd 0100 	strd	r0, r1, [sp]
 800a7c4:	f04f 0200 	mov.w	r2, #0
 800a7c8:	d126      	bne.n	800a818 <_dtoa_r+0x5e8>
 800a7ca:	4b1c      	ldr	r3, [pc, #112]	; (800a83c <_dtoa_r+0x60c>)
 800a7cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7d0:	f7f5 fd84 	bl	80002dc <__adddf3>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7dc:	f7f6 f9c4 	bl	8000b68 <__aeabi_dcmpgt>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	d174      	bne.n	800a8ce <_dtoa_r+0x69e>
 800a7e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	4914      	ldr	r1, [pc, #80]	; (800a83c <_dtoa_r+0x60c>)
 800a7ec:	f7f5 fd74 	bl	80002d8 <__aeabi_dsub>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7f8:	f7f6 f998 	bl	8000b2c <__aeabi_dcmplt>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	f43f af30 	beq.w	800a662 <_dtoa_r+0x432>
 800a802:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a806:	2b30      	cmp	r3, #48	; 0x30
 800a808:	f105 32ff 	add.w	r2, r5, #4294967295
 800a80c:	d002      	beq.n	800a814 <_dtoa_r+0x5e4>
 800a80e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a812:	e04a      	b.n	800a8aa <_dtoa_r+0x67a>
 800a814:	4615      	mov	r5, r2
 800a816:	e7f4      	b.n	800a802 <_dtoa_r+0x5d2>
 800a818:	4b05      	ldr	r3, [pc, #20]	; (800a830 <_dtoa_r+0x600>)
 800a81a:	f7f5 ff15 	bl	8000648 <__aeabi_dmul>
 800a81e:	e9cd 0100 	strd	r0, r1, [sp]
 800a822:	e7bc      	b.n	800a79e <_dtoa_r+0x56e>
 800a824:	0800c4a8 	.word	0x0800c4a8
 800a828:	0800c480 	.word	0x0800c480
 800a82c:	3ff00000 	.word	0x3ff00000
 800a830:	40240000 	.word	0x40240000
 800a834:	401c0000 	.word	0x401c0000
 800a838:	40140000 	.word	0x40140000
 800a83c:	3fe00000 	.word	0x3fe00000
 800a840:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a844:	465d      	mov	r5, fp
 800a846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a84a:	4630      	mov	r0, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	f7f6 f825 	bl	800089c <__aeabi_ddiv>
 800a852:	f7f6 f9a9 	bl	8000ba8 <__aeabi_d2iz>
 800a856:	4680      	mov	r8, r0
 800a858:	f7f5 fe8c 	bl	8000574 <__aeabi_i2d>
 800a85c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a860:	f7f5 fef2 	bl	8000648 <__aeabi_dmul>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	4630      	mov	r0, r6
 800a86a:	4639      	mov	r1, r7
 800a86c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a870:	f7f5 fd32 	bl	80002d8 <__aeabi_dsub>
 800a874:	f805 6b01 	strb.w	r6, [r5], #1
 800a878:	eba5 060b 	sub.w	r6, r5, fp
 800a87c:	45b1      	cmp	r9, r6
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	d139      	bne.n	800a8f8 <_dtoa_r+0x6c8>
 800a884:	f7f5 fd2a 	bl	80002dc <__adddf3>
 800a888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a88c:	4606      	mov	r6, r0
 800a88e:	460f      	mov	r7, r1
 800a890:	f7f6 f96a 	bl	8000b68 <__aeabi_dcmpgt>
 800a894:	b9c8      	cbnz	r0, 800a8ca <_dtoa_r+0x69a>
 800a896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a89a:	4630      	mov	r0, r6
 800a89c:	4639      	mov	r1, r7
 800a89e:	f7f6 f93b 	bl	8000b18 <__aeabi_dcmpeq>
 800a8a2:	b110      	cbz	r0, 800a8aa <_dtoa_r+0x67a>
 800a8a4:	f018 0f01 	tst.w	r8, #1
 800a8a8:	d10f      	bne.n	800a8ca <_dtoa_r+0x69a>
 800a8aa:	9904      	ldr	r1, [sp, #16]
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	f000 fac1 	bl	800ae34 <_Bfree>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8b6:	702b      	strb	r3, [r5, #0]
 800a8b8:	f10a 0301 	add.w	r3, sl, #1
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f000 8241 	beq.w	800ad48 <_dtoa_r+0xb18>
 800a8c6:	601d      	str	r5, [r3, #0]
 800a8c8:	e23e      	b.n	800ad48 <_dtoa_r+0xb18>
 800a8ca:	f8cd a020 	str.w	sl, [sp, #32]
 800a8ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a8d2:	2a39      	cmp	r2, #57	; 0x39
 800a8d4:	f105 33ff 	add.w	r3, r5, #4294967295
 800a8d8:	d108      	bne.n	800a8ec <_dtoa_r+0x6bc>
 800a8da:	459b      	cmp	fp, r3
 800a8dc:	d10a      	bne.n	800a8f4 <_dtoa_r+0x6c4>
 800a8de:	9b08      	ldr	r3, [sp, #32]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	9308      	str	r3, [sp, #32]
 800a8e4:	2330      	movs	r3, #48	; 0x30
 800a8e6:	f88b 3000 	strb.w	r3, [fp]
 800a8ea:	465b      	mov	r3, fp
 800a8ec:	781a      	ldrb	r2, [r3, #0]
 800a8ee:	3201      	adds	r2, #1
 800a8f0:	701a      	strb	r2, [r3, #0]
 800a8f2:	e78c      	b.n	800a80e <_dtoa_r+0x5de>
 800a8f4:	461d      	mov	r5, r3
 800a8f6:	e7ea      	b.n	800a8ce <_dtoa_r+0x69e>
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	4b9b      	ldr	r3, [pc, #620]	; (800ab68 <_dtoa_r+0x938>)
 800a8fc:	f7f5 fea4 	bl	8000648 <__aeabi_dmul>
 800a900:	2200      	movs	r2, #0
 800a902:	2300      	movs	r3, #0
 800a904:	4606      	mov	r6, r0
 800a906:	460f      	mov	r7, r1
 800a908:	f7f6 f906 	bl	8000b18 <__aeabi_dcmpeq>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d09a      	beq.n	800a846 <_dtoa_r+0x616>
 800a910:	e7cb      	b.n	800a8aa <_dtoa_r+0x67a>
 800a912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a914:	2a00      	cmp	r2, #0
 800a916:	f000 808b 	beq.w	800aa30 <_dtoa_r+0x800>
 800a91a:	9a06      	ldr	r2, [sp, #24]
 800a91c:	2a01      	cmp	r2, #1
 800a91e:	dc6e      	bgt.n	800a9fe <_dtoa_r+0x7ce>
 800a920:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a922:	2a00      	cmp	r2, #0
 800a924:	d067      	beq.n	800a9f6 <_dtoa_r+0x7c6>
 800a926:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a92a:	9f07      	ldr	r7, [sp, #28]
 800a92c:	9d05      	ldr	r5, [sp, #20]
 800a92e:	9a05      	ldr	r2, [sp, #20]
 800a930:	2101      	movs	r1, #1
 800a932:	441a      	add	r2, r3
 800a934:	4620      	mov	r0, r4
 800a936:	9205      	str	r2, [sp, #20]
 800a938:	4498      	add	r8, r3
 800a93a:	f000 fb1b 	bl	800af74 <__i2b>
 800a93e:	4606      	mov	r6, r0
 800a940:	2d00      	cmp	r5, #0
 800a942:	dd0c      	ble.n	800a95e <_dtoa_r+0x72e>
 800a944:	f1b8 0f00 	cmp.w	r8, #0
 800a948:	dd09      	ble.n	800a95e <_dtoa_r+0x72e>
 800a94a:	4545      	cmp	r5, r8
 800a94c:	9a05      	ldr	r2, [sp, #20]
 800a94e:	462b      	mov	r3, r5
 800a950:	bfa8      	it	ge
 800a952:	4643      	movge	r3, r8
 800a954:	1ad2      	subs	r2, r2, r3
 800a956:	9205      	str	r2, [sp, #20]
 800a958:	1aed      	subs	r5, r5, r3
 800a95a:	eba8 0803 	sub.w	r8, r8, r3
 800a95e:	9b07      	ldr	r3, [sp, #28]
 800a960:	b1eb      	cbz	r3, 800a99e <_dtoa_r+0x76e>
 800a962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a964:	2b00      	cmp	r3, #0
 800a966:	d067      	beq.n	800aa38 <_dtoa_r+0x808>
 800a968:	b18f      	cbz	r7, 800a98e <_dtoa_r+0x75e>
 800a96a:	4631      	mov	r1, r6
 800a96c:	463a      	mov	r2, r7
 800a96e:	4620      	mov	r0, r4
 800a970:	f000 fba0 	bl	800b0b4 <__pow5mult>
 800a974:	9a04      	ldr	r2, [sp, #16]
 800a976:	4601      	mov	r1, r0
 800a978:	4606      	mov	r6, r0
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 fb03 	bl	800af86 <__multiply>
 800a980:	9904      	ldr	r1, [sp, #16]
 800a982:	9008      	str	r0, [sp, #32]
 800a984:	4620      	mov	r0, r4
 800a986:	f000 fa55 	bl	800ae34 <_Bfree>
 800a98a:	9b08      	ldr	r3, [sp, #32]
 800a98c:	9304      	str	r3, [sp, #16]
 800a98e:	9b07      	ldr	r3, [sp, #28]
 800a990:	1bda      	subs	r2, r3, r7
 800a992:	d004      	beq.n	800a99e <_dtoa_r+0x76e>
 800a994:	9904      	ldr	r1, [sp, #16]
 800a996:	4620      	mov	r0, r4
 800a998:	f000 fb8c 	bl	800b0b4 <__pow5mult>
 800a99c:	9004      	str	r0, [sp, #16]
 800a99e:	2101      	movs	r1, #1
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f000 fae7 	bl	800af74 <__i2b>
 800a9a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9a8:	4607      	mov	r7, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 81d0 	beq.w	800ad50 <_dtoa_r+0xb20>
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f000 fb7d 	bl	800b0b4 <__pow5mult>
 800a9ba:	9b06      	ldr	r3, [sp, #24]
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	4607      	mov	r7, r0
 800a9c0:	dc40      	bgt.n	800aa44 <_dtoa_r+0x814>
 800a9c2:	9b00      	ldr	r3, [sp, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d139      	bne.n	800aa3c <_dtoa_r+0x80c>
 800a9c8:	9b01      	ldr	r3, [sp, #4]
 800a9ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d136      	bne.n	800aa40 <_dtoa_r+0x810>
 800a9d2:	9b01      	ldr	r3, [sp, #4]
 800a9d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9d8:	0d1b      	lsrs	r3, r3, #20
 800a9da:	051b      	lsls	r3, r3, #20
 800a9dc:	b12b      	cbz	r3, 800a9ea <_dtoa_r+0x7ba>
 800a9de:	9b05      	ldr	r3, [sp, #20]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	9305      	str	r3, [sp, #20]
 800a9e4:	f108 0801 	add.w	r8, r8, #1
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	9307      	str	r3, [sp, #28]
 800a9ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d12a      	bne.n	800aa48 <_dtoa_r+0x818>
 800a9f2:	2001      	movs	r0, #1
 800a9f4:	e030      	b.n	800aa58 <_dtoa_r+0x828>
 800a9f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9fc:	e795      	b.n	800a92a <_dtoa_r+0x6fa>
 800a9fe:	9b07      	ldr	r3, [sp, #28]
 800aa00:	f109 37ff 	add.w	r7, r9, #4294967295
 800aa04:	42bb      	cmp	r3, r7
 800aa06:	bfbf      	itttt	lt
 800aa08:	9b07      	ldrlt	r3, [sp, #28]
 800aa0a:	9707      	strlt	r7, [sp, #28]
 800aa0c:	1afa      	sublt	r2, r7, r3
 800aa0e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aa10:	bfbb      	ittet	lt
 800aa12:	189b      	addlt	r3, r3, r2
 800aa14:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aa16:	1bdf      	subge	r7, r3, r7
 800aa18:	2700      	movlt	r7, #0
 800aa1a:	f1b9 0f00 	cmp.w	r9, #0
 800aa1e:	bfb5      	itete	lt
 800aa20:	9b05      	ldrlt	r3, [sp, #20]
 800aa22:	9d05      	ldrge	r5, [sp, #20]
 800aa24:	eba3 0509 	sublt.w	r5, r3, r9
 800aa28:	464b      	movge	r3, r9
 800aa2a:	bfb8      	it	lt
 800aa2c:	2300      	movlt	r3, #0
 800aa2e:	e77e      	b.n	800a92e <_dtoa_r+0x6fe>
 800aa30:	9f07      	ldr	r7, [sp, #28]
 800aa32:	9d05      	ldr	r5, [sp, #20]
 800aa34:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800aa36:	e783      	b.n	800a940 <_dtoa_r+0x710>
 800aa38:	9a07      	ldr	r2, [sp, #28]
 800aa3a:	e7ab      	b.n	800a994 <_dtoa_r+0x764>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	e7d4      	b.n	800a9ea <_dtoa_r+0x7ba>
 800aa40:	9b00      	ldr	r3, [sp, #0]
 800aa42:	e7d2      	b.n	800a9ea <_dtoa_r+0x7ba>
 800aa44:	2300      	movs	r3, #0
 800aa46:	9307      	str	r3, [sp, #28]
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800aa4e:	6918      	ldr	r0, [r3, #16]
 800aa50:	f000 fa42 	bl	800aed8 <__hi0bits>
 800aa54:	f1c0 0020 	rsb	r0, r0, #32
 800aa58:	4440      	add	r0, r8
 800aa5a:	f010 001f 	ands.w	r0, r0, #31
 800aa5e:	d047      	beq.n	800aaf0 <_dtoa_r+0x8c0>
 800aa60:	f1c0 0320 	rsb	r3, r0, #32
 800aa64:	2b04      	cmp	r3, #4
 800aa66:	dd3b      	ble.n	800aae0 <_dtoa_r+0x8b0>
 800aa68:	9b05      	ldr	r3, [sp, #20]
 800aa6a:	f1c0 001c 	rsb	r0, r0, #28
 800aa6e:	4403      	add	r3, r0
 800aa70:	9305      	str	r3, [sp, #20]
 800aa72:	4405      	add	r5, r0
 800aa74:	4480      	add	r8, r0
 800aa76:	9b05      	ldr	r3, [sp, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	dd05      	ble.n	800aa88 <_dtoa_r+0x858>
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	9904      	ldr	r1, [sp, #16]
 800aa80:	4620      	mov	r0, r4
 800aa82:	f000 fb65 	bl	800b150 <__lshift>
 800aa86:	9004      	str	r0, [sp, #16]
 800aa88:	f1b8 0f00 	cmp.w	r8, #0
 800aa8c:	dd05      	ble.n	800aa9a <_dtoa_r+0x86a>
 800aa8e:	4639      	mov	r1, r7
 800aa90:	4642      	mov	r2, r8
 800aa92:	4620      	mov	r0, r4
 800aa94:	f000 fb5c 	bl	800b150 <__lshift>
 800aa98:	4607      	mov	r7, r0
 800aa9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa9c:	b353      	cbz	r3, 800aaf4 <_dtoa_r+0x8c4>
 800aa9e:	4639      	mov	r1, r7
 800aaa0:	9804      	ldr	r0, [sp, #16]
 800aaa2:	f000 fba9 	bl	800b1f8 <__mcmp>
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	da24      	bge.n	800aaf4 <_dtoa_r+0x8c4>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	220a      	movs	r2, #10
 800aaae:	9904      	ldr	r1, [sp, #16]
 800aab0:	4620      	mov	r0, r4
 800aab2:	f000 f9d6 	bl	800ae62 <__multadd>
 800aab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aab8:	9004      	str	r0, [sp, #16]
 800aaba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f000 814d 	beq.w	800ad5e <_dtoa_r+0xb2e>
 800aac4:	2300      	movs	r3, #0
 800aac6:	4631      	mov	r1, r6
 800aac8:	220a      	movs	r2, #10
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 f9c9 	bl	800ae62 <__multadd>
 800aad0:	9b02      	ldr	r3, [sp, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	4606      	mov	r6, r0
 800aad6:	dc4f      	bgt.n	800ab78 <_dtoa_r+0x948>
 800aad8:	9b06      	ldr	r3, [sp, #24]
 800aada:	2b02      	cmp	r3, #2
 800aadc:	dd4c      	ble.n	800ab78 <_dtoa_r+0x948>
 800aade:	e011      	b.n	800ab04 <_dtoa_r+0x8d4>
 800aae0:	d0c9      	beq.n	800aa76 <_dtoa_r+0x846>
 800aae2:	9a05      	ldr	r2, [sp, #20]
 800aae4:	331c      	adds	r3, #28
 800aae6:	441a      	add	r2, r3
 800aae8:	9205      	str	r2, [sp, #20]
 800aaea:	441d      	add	r5, r3
 800aaec:	4498      	add	r8, r3
 800aaee:	e7c2      	b.n	800aa76 <_dtoa_r+0x846>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	e7f6      	b.n	800aae2 <_dtoa_r+0x8b2>
 800aaf4:	f1b9 0f00 	cmp.w	r9, #0
 800aaf8:	dc38      	bgt.n	800ab6c <_dtoa_r+0x93c>
 800aafa:	9b06      	ldr	r3, [sp, #24]
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	dd35      	ble.n	800ab6c <_dtoa_r+0x93c>
 800ab00:	f8cd 9008 	str.w	r9, [sp, #8]
 800ab04:	9b02      	ldr	r3, [sp, #8]
 800ab06:	b963      	cbnz	r3, 800ab22 <_dtoa_r+0x8f2>
 800ab08:	4639      	mov	r1, r7
 800ab0a:	2205      	movs	r2, #5
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f000 f9a8 	bl	800ae62 <__multadd>
 800ab12:	4601      	mov	r1, r0
 800ab14:	4607      	mov	r7, r0
 800ab16:	9804      	ldr	r0, [sp, #16]
 800ab18:	f000 fb6e 	bl	800b1f8 <__mcmp>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	f73f adcc 	bgt.w	800a6ba <_dtoa_r+0x48a>
 800ab22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab24:	465d      	mov	r5, fp
 800ab26:	ea6f 0a03 	mvn.w	sl, r3
 800ab2a:	f04f 0900 	mov.w	r9, #0
 800ab2e:	4639      	mov	r1, r7
 800ab30:	4620      	mov	r0, r4
 800ab32:	f000 f97f 	bl	800ae34 <_Bfree>
 800ab36:	2e00      	cmp	r6, #0
 800ab38:	f43f aeb7 	beq.w	800a8aa <_dtoa_r+0x67a>
 800ab3c:	f1b9 0f00 	cmp.w	r9, #0
 800ab40:	d005      	beq.n	800ab4e <_dtoa_r+0x91e>
 800ab42:	45b1      	cmp	r9, r6
 800ab44:	d003      	beq.n	800ab4e <_dtoa_r+0x91e>
 800ab46:	4649      	mov	r1, r9
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f000 f973 	bl	800ae34 <_Bfree>
 800ab4e:	4631      	mov	r1, r6
 800ab50:	4620      	mov	r0, r4
 800ab52:	f000 f96f 	bl	800ae34 <_Bfree>
 800ab56:	e6a8      	b.n	800a8aa <_dtoa_r+0x67a>
 800ab58:	2700      	movs	r7, #0
 800ab5a:	463e      	mov	r6, r7
 800ab5c:	e7e1      	b.n	800ab22 <_dtoa_r+0x8f2>
 800ab5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ab62:	463e      	mov	r6, r7
 800ab64:	e5a9      	b.n	800a6ba <_dtoa_r+0x48a>
 800ab66:	bf00      	nop
 800ab68:	40240000 	.word	0x40240000
 800ab6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab6e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f000 80fa 	beq.w	800ad6c <_dtoa_r+0xb3c>
 800ab78:	2d00      	cmp	r5, #0
 800ab7a:	dd05      	ble.n	800ab88 <_dtoa_r+0x958>
 800ab7c:	4631      	mov	r1, r6
 800ab7e:	462a      	mov	r2, r5
 800ab80:	4620      	mov	r0, r4
 800ab82:	f000 fae5 	bl	800b150 <__lshift>
 800ab86:	4606      	mov	r6, r0
 800ab88:	9b07      	ldr	r3, [sp, #28]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d04c      	beq.n	800ac28 <_dtoa_r+0x9f8>
 800ab8e:	6871      	ldr	r1, [r6, #4]
 800ab90:	4620      	mov	r0, r4
 800ab92:	f000 f91b 	bl	800adcc <_Balloc>
 800ab96:	6932      	ldr	r2, [r6, #16]
 800ab98:	3202      	adds	r2, #2
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	0092      	lsls	r2, r2, #2
 800ab9e:	f106 010c 	add.w	r1, r6, #12
 800aba2:	300c      	adds	r0, #12
 800aba4:	f7fe fdc2 	bl	800972c <memcpy>
 800aba8:	2201      	movs	r2, #1
 800abaa:	4629      	mov	r1, r5
 800abac:	4620      	mov	r0, r4
 800abae:	f000 facf 	bl	800b150 <__lshift>
 800abb2:	9b00      	ldr	r3, [sp, #0]
 800abb4:	f8cd b014 	str.w	fp, [sp, #20]
 800abb8:	f003 0301 	and.w	r3, r3, #1
 800abbc:	46b1      	mov	r9, r6
 800abbe:	9307      	str	r3, [sp, #28]
 800abc0:	4606      	mov	r6, r0
 800abc2:	4639      	mov	r1, r7
 800abc4:	9804      	ldr	r0, [sp, #16]
 800abc6:	f7ff faa7 	bl	800a118 <quorem>
 800abca:	4649      	mov	r1, r9
 800abcc:	4605      	mov	r5, r0
 800abce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800abd2:	9804      	ldr	r0, [sp, #16]
 800abd4:	f000 fb10 	bl	800b1f8 <__mcmp>
 800abd8:	4632      	mov	r2, r6
 800abda:	9000      	str	r0, [sp, #0]
 800abdc:	4639      	mov	r1, r7
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 fb24 	bl	800b22c <__mdiff>
 800abe4:	68c3      	ldr	r3, [r0, #12]
 800abe6:	4602      	mov	r2, r0
 800abe8:	bb03      	cbnz	r3, 800ac2c <_dtoa_r+0x9fc>
 800abea:	4601      	mov	r1, r0
 800abec:	9008      	str	r0, [sp, #32]
 800abee:	9804      	ldr	r0, [sp, #16]
 800abf0:	f000 fb02 	bl	800b1f8 <__mcmp>
 800abf4:	9a08      	ldr	r2, [sp, #32]
 800abf6:	4603      	mov	r3, r0
 800abf8:	4611      	mov	r1, r2
 800abfa:	4620      	mov	r0, r4
 800abfc:	9308      	str	r3, [sp, #32]
 800abfe:	f000 f919 	bl	800ae34 <_Bfree>
 800ac02:	9b08      	ldr	r3, [sp, #32]
 800ac04:	b9a3      	cbnz	r3, 800ac30 <_dtoa_r+0xa00>
 800ac06:	9a06      	ldr	r2, [sp, #24]
 800ac08:	b992      	cbnz	r2, 800ac30 <_dtoa_r+0xa00>
 800ac0a:	9a07      	ldr	r2, [sp, #28]
 800ac0c:	b982      	cbnz	r2, 800ac30 <_dtoa_r+0xa00>
 800ac0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ac12:	d029      	beq.n	800ac68 <_dtoa_r+0xa38>
 800ac14:	9b00      	ldr	r3, [sp, #0]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	dd01      	ble.n	800ac1e <_dtoa_r+0x9ee>
 800ac1a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ac1e:	9b05      	ldr	r3, [sp, #20]
 800ac20:	1c5d      	adds	r5, r3, #1
 800ac22:	f883 8000 	strb.w	r8, [r3]
 800ac26:	e782      	b.n	800ab2e <_dtoa_r+0x8fe>
 800ac28:	4630      	mov	r0, r6
 800ac2a:	e7c2      	b.n	800abb2 <_dtoa_r+0x982>
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e7e3      	b.n	800abf8 <_dtoa_r+0x9c8>
 800ac30:	9a00      	ldr	r2, [sp, #0]
 800ac32:	2a00      	cmp	r2, #0
 800ac34:	db04      	blt.n	800ac40 <_dtoa_r+0xa10>
 800ac36:	d125      	bne.n	800ac84 <_dtoa_r+0xa54>
 800ac38:	9a06      	ldr	r2, [sp, #24]
 800ac3a:	bb1a      	cbnz	r2, 800ac84 <_dtoa_r+0xa54>
 800ac3c:	9a07      	ldr	r2, [sp, #28]
 800ac3e:	bb0a      	cbnz	r2, 800ac84 <_dtoa_r+0xa54>
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	ddec      	ble.n	800ac1e <_dtoa_r+0x9ee>
 800ac44:	2201      	movs	r2, #1
 800ac46:	9904      	ldr	r1, [sp, #16]
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f000 fa81 	bl	800b150 <__lshift>
 800ac4e:	4639      	mov	r1, r7
 800ac50:	9004      	str	r0, [sp, #16]
 800ac52:	f000 fad1 	bl	800b1f8 <__mcmp>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	dc03      	bgt.n	800ac62 <_dtoa_r+0xa32>
 800ac5a:	d1e0      	bne.n	800ac1e <_dtoa_r+0x9ee>
 800ac5c:	f018 0f01 	tst.w	r8, #1
 800ac60:	d0dd      	beq.n	800ac1e <_dtoa_r+0x9ee>
 800ac62:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ac66:	d1d8      	bne.n	800ac1a <_dtoa_r+0x9ea>
 800ac68:	9b05      	ldr	r3, [sp, #20]
 800ac6a:	9a05      	ldr	r2, [sp, #20]
 800ac6c:	1c5d      	adds	r5, r3, #1
 800ac6e:	2339      	movs	r3, #57	; 0x39
 800ac70:	7013      	strb	r3, [r2, #0]
 800ac72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac76:	2b39      	cmp	r3, #57	; 0x39
 800ac78:	f105 32ff 	add.w	r2, r5, #4294967295
 800ac7c:	d04f      	beq.n	800ad1e <_dtoa_r+0xaee>
 800ac7e:	3301      	adds	r3, #1
 800ac80:	7013      	strb	r3, [r2, #0]
 800ac82:	e754      	b.n	800ab2e <_dtoa_r+0x8fe>
 800ac84:	9a05      	ldr	r2, [sp, #20]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f102 0501 	add.w	r5, r2, #1
 800ac8c:	dd06      	ble.n	800ac9c <_dtoa_r+0xa6c>
 800ac8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ac92:	d0e9      	beq.n	800ac68 <_dtoa_r+0xa38>
 800ac94:	f108 0801 	add.w	r8, r8, #1
 800ac98:	9b05      	ldr	r3, [sp, #20]
 800ac9a:	e7c2      	b.n	800ac22 <_dtoa_r+0x9f2>
 800ac9c:	9a02      	ldr	r2, [sp, #8]
 800ac9e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800aca2:	eba5 030b 	sub.w	r3, r5, fp
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d021      	beq.n	800acee <_dtoa_r+0xabe>
 800acaa:	2300      	movs	r3, #0
 800acac:	220a      	movs	r2, #10
 800acae:	9904      	ldr	r1, [sp, #16]
 800acb0:	4620      	mov	r0, r4
 800acb2:	f000 f8d6 	bl	800ae62 <__multadd>
 800acb6:	45b1      	cmp	r9, r6
 800acb8:	9004      	str	r0, [sp, #16]
 800acba:	f04f 0300 	mov.w	r3, #0
 800acbe:	f04f 020a 	mov.w	r2, #10
 800acc2:	4649      	mov	r1, r9
 800acc4:	4620      	mov	r0, r4
 800acc6:	d105      	bne.n	800acd4 <_dtoa_r+0xaa4>
 800acc8:	f000 f8cb 	bl	800ae62 <__multadd>
 800accc:	4681      	mov	r9, r0
 800acce:	4606      	mov	r6, r0
 800acd0:	9505      	str	r5, [sp, #20]
 800acd2:	e776      	b.n	800abc2 <_dtoa_r+0x992>
 800acd4:	f000 f8c5 	bl	800ae62 <__multadd>
 800acd8:	4631      	mov	r1, r6
 800acda:	4681      	mov	r9, r0
 800acdc:	2300      	movs	r3, #0
 800acde:	220a      	movs	r2, #10
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 f8be 	bl	800ae62 <__multadd>
 800ace6:	4606      	mov	r6, r0
 800ace8:	e7f2      	b.n	800acd0 <_dtoa_r+0xaa0>
 800acea:	f04f 0900 	mov.w	r9, #0
 800acee:	2201      	movs	r2, #1
 800acf0:	9904      	ldr	r1, [sp, #16]
 800acf2:	4620      	mov	r0, r4
 800acf4:	f000 fa2c 	bl	800b150 <__lshift>
 800acf8:	4639      	mov	r1, r7
 800acfa:	9004      	str	r0, [sp, #16]
 800acfc:	f000 fa7c 	bl	800b1f8 <__mcmp>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	dcb6      	bgt.n	800ac72 <_dtoa_r+0xa42>
 800ad04:	d102      	bne.n	800ad0c <_dtoa_r+0xadc>
 800ad06:	f018 0f01 	tst.w	r8, #1
 800ad0a:	d1b2      	bne.n	800ac72 <_dtoa_r+0xa42>
 800ad0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad10:	2b30      	cmp	r3, #48	; 0x30
 800ad12:	f105 32ff 	add.w	r2, r5, #4294967295
 800ad16:	f47f af0a 	bne.w	800ab2e <_dtoa_r+0x8fe>
 800ad1a:	4615      	mov	r5, r2
 800ad1c:	e7f6      	b.n	800ad0c <_dtoa_r+0xadc>
 800ad1e:	4593      	cmp	fp, r2
 800ad20:	d105      	bne.n	800ad2e <_dtoa_r+0xafe>
 800ad22:	2331      	movs	r3, #49	; 0x31
 800ad24:	f10a 0a01 	add.w	sl, sl, #1
 800ad28:	f88b 3000 	strb.w	r3, [fp]
 800ad2c:	e6ff      	b.n	800ab2e <_dtoa_r+0x8fe>
 800ad2e:	4615      	mov	r5, r2
 800ad30:	e79f      	b.n	800ac72 <_dtoa_r+0xa42>
 800ad32:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ad98 <_dtoa_r+0xb68>
 800ad36:	e007      	b.n	800ad48 <_dtoa_r+0xb18>
 800ad38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad3a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ad9c <_dtoa_r+0xb6c>
 800ad3e:	b11b      	cbz	r3, 800ad48 <_dtoa_r+0xb18>
 800ad40:	f10b 0308 	add.w	r3, fp, #8
 800ad44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad46:	6013      	str	r3, [r2, #0]
 800ad48:	4658      	mov	r0, fp
 800ad4a:	b017      	add	sp, #92	; 0x5c
 800ad4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad50:	9b06      	ldr	r3, [sp, #24]
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	f77f ae35 	ble.w	800a9c2 <_dtoa_r+0x792>
 800ad58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad5a:	9307      	str	r3, [sp, #28]
 800ad5c:	e649      	b.n	800a9f2 <_dtoa_r+0x7c2>
 800ad5e:	9b02      	ldr	r3, [sp, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	dc03      	bgt.n	800ad6c <_dtoa_r+0xb3c>
 800ad64:	9b06      	ldr	r3, [sp, #24]
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	f73f aecc 	bgt.w	800ab04 <_dtoa_r+0x8d4>
 800ad6c:	465d      	mov	r5, fp
 800ad6e:	4639      	mov	r1, r7
 800ad70:	9804      	ldr	r0, [sp, #16]
 800ad72:	f7ff f9d1 	bl	800a118 <quorem>
 800ad76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ad7a:	f805 8b01 	strb.w	r8, [r5], #1
 800ad7e:	9a02      	ldr	r2, [sp, #8]
 800ad80:	eba5 030b 	sub.w	r3, r5, fp
 800ad84:	429a      	cmp	r2, r3
 800ad86:	ddb0      	ble.n	800acea <_dtoa_r+0xaba>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	220a      	movs	r2, #10
 800ad8c:	9904      	ldr	r1, [sp, #16]
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f000 f867 	bl	800ae62 <__multadd>
 800ad94:	9004      	str	r0, [sp, #16]
 800ad96:	e7ea      	b.n	800ad6e <_dtoa_r+0xb3e>
 800ad98:	0800c448 	.word	0x0800c448
 800ad9c:	0800c46c 	.word	0x0800c46c

0800ada0 <_localeconv_r>:
 800ada0:	4b04      	ldr	r3, [pc, #16]	; (800adb4 <_localeconv_r+0x14>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	6a18      	ldr	r0, [r3, #32]
 800ada6:	4b04      	ldr	r3, [pc, #16]	; (800adb8 <_localeconv_r+0x18>)
 800ada8:	2800      	cmp	r0, #0
 800adaa:	bf08      	it	eq
 800adac:	4618      	moveq	r0, r3
 800adae:	30f0      	adds	r0, #240	; 0xf0
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	2000002c 	.word	0x2000002c
 800adb8:	20000090 	.word	0x20000090

0800adbc <malloc>:
 800adbc:	4b02      	ldr	r3, [pc, #8]	; (800adc8 <malloc+0xc>)
 800adbe:	4601      	mov	r1, r0
 800adc0:	6818      	ldr	r0, [r3, #0]
 800adc2:	f000 bb3b 	b.w	800b43c <_malloc_r>
 800adc6:	bf00      	nop
 800adc8:	2000002c 	.word	0x2000002c

0800adcc <_Balloc>:
 800adcc:	b570      	push	{r4, r5, r6, lr}
 800adce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800add0:	4604      	mov	r4, r0
 800add2:	460e      	mov	r6, r1
 800add4:	b93d      	cbnz	r5, 800ade6 <_Balloc+0x1a>
 800add6:	2010      	movs	r0, #16
 800add8:	f7ff fff0 	bl	800adbc <malloc>
 800addc:	6260      	str	r0, [r4, #36]	; 0x24
 800adde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ade2:	6005      	str	r5, [r0, #0]
 800ade4:	60c5      	str	r5, [r0, #12]
 800ade6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ade8:	68eb      	ldr	r3, [r5, #12]
 800adea:	b183      	cbz	r3, 800ae0e <_Balloc+0x42>
 800adec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800adf4:	b9b8      	cbnz	r0, 800ae26 <_Balloc+0x5a>
 800adf6:	2101      	movs	r1, #1
 800adf8:	fa01 f506 	lsl.w	r5, r1, r6
 800adfc:	1d6a      	adds	r2, r5, #5
 800adfe:	0092      	lsls	r2, r2, #2
 800ae00:	4620      	mov	r0, r4
 800ae02:	f000 fabf 	bl	800b384 <_calloc_r>
 800ae06:	b160      	cbz	r0, 800ae22 <_Balloc+0x56>
 800ae08:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ae0c:	e00e      	b.n	800ae2c <_Balloc+0x60>
 800ae0e:	2221      	movs	r2, #33	; 0x21
 800ae10:	2104      	movs	r1, #4
 800ae12:	4620      	mov	r0, r4
 800ae14:	f000 fab6 	bl	800b384 <_calloc_r>
 800ae18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae1a:	60e8      	str	r0, [r5, #12]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1e4      	bne.n	800adec <_Balloc+0x20>
 800ae22:	2000      	movs	r0, #0
 800ae24:	bd70      	pop	{r4, r5, r6, pc}
 800ae26:	6802      	ldr	r2, [r0, #0]
 800ae28:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae32:	e7f7      	b.n	800ae24 <_Balloc+0x58>

0800ae34 <_Bfree>:
 800ae34:	b570      	push	{r4, r5, r6, lr}
 800ae36:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ae38:	4606      	mov	r6, r0
 800ae3a:	460d      	mov	r5, r1
 800ae3c:	b93c      	cbnz	r4, 800ae4e <_Bfree+0x1a>
 800ae3e:	2010      	movs	r0, #16
 800ae40:	f7ff ffbc 	bl	800adbc <malloc>
 800ae44:	6270      	str	r0, [r6, #36]	; 0x24
 800ae46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae4a:	6004      	str	r4, [r0, #0]
 800ae4c:	60c4      	str	r4, [r0, #12]
 800ae4e:	b13d      	cbz	r5, 800ae60 <_Bfree+0x2c>
 800ae50:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ae52:	686a      	ldr	r2, [r5, #4]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae5a:	6029      	str	r1, [r5, #0]
 800ae5c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ae60:	bd70      	pop	{r4, r5, r6, pc}

0800ae62 <__multadd>:
 800ae62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae66:	690d      	ldr	r5, [r1, #16]
 800ae68:	461f      	mov	r7, r3
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	f101 0c14 	add.w	ip, r1, #20
 800ae72:	2300      	movs	r3, #0
 800ae74:	f8dc 0000 	ldr.w	r0, [ip]
 800ae78:	b281      	uxth	r1, r0
 800ae7a:	fb02 7101 	mla	r1, r2, r1, r7
 800ae7e:	0c0f      	lsrs	r7, r1, #16
 800ae80:	0c00      	lsrs	r0, r0, #16
 800ae82:	fb02 7000 	mla	r0, r2, r0, r7
 800ae86:	b289      	uxth	r1, r1
 800ae88:	3301      	adds	r3, #1
 800ae8a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ae8e:	429d      	cmp	r5, r3
 800ae90:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ae94:	f84c 1b04 	str.w	r1, [ip], #4
 800ae98:	dcec      	bgt.n	800ae74 <__multadd+0x12>
 800ae9a:	b1d7      	cbz	r7, 800aed2 <__multadd+0x70>
 800ae9c:	68a3      	ldr	r3, [r4, #8]
 800ae9e:	42ab      	cmp	r3, r5
 800aea0:	dc12      	bgt.n	800aec8 <__multadd+0x66>
 800aea2:	6861      	ldr	r1, [r4, #4]
 800aea4:	4630      	mov	r0, r6
 800aea6:	3101      	adds	r1, #1
 800aea8:	f7ff ff90 	bl	800adcc <_Balloc>
 800aeac:	6922      	ldr	r2, [r4, #16]
 800aeae:	3202      	adds	r2, #2
 800aeb0:	f104 010c 	add.w	r1, r4, #12
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	0092      	lsls	r2, r2, #2
 800aeb8:	300c      	adds	r0, #12
 800aeba:	f7fe fc37 	bl	800972c <memcpy>
 800aebe:	4621      	mov	r1, r4
 800aec0:	4630      	mov	r0, r6
 800aec2:	f7ff ffb7 	bl	800ae34 <_Bfree>
 800aec6:	4644      	mov	r4, r8
 800aec8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aecc:	3501      	adds	r5, #1
 800aece:	615f      	str	r7, [r3, #20]
 800aed0:	6125      	str	r5, [r4, #16]
 800aed2:	4620      	mov	r0, r4
 800aed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aed8 <__hi0bits>:
 800aed8:	0c02      	lsrs	r2, r0, #16
 800aeda:	0412      	lsls	r2, r2, #16
 800aedc:	4603      	mov	r3, r0
 800aede:	b9b2      	cbnz	r2, 800af0e <__hi0bits+0x36>
 800aee0:	0403      	lsls	r3, r0, #16
 800aee2:	2010      	movs	r0, #16
 800aee4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aee8:	bf04      	itt	eq
 800aeea:	021b      	lsleq	r3, r3, #8
 800aeec:	3008      	addeq	r0, #8
 800aeee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aef2:	bf04      	itt	eq
 800aef4:	011b      	lsleq	r3, r3, #4
 800aef6:	3004      	addeq	r0, #4
 800aef8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aefc:	bf04      	itt	eq
 800aefe:	009b      	lsleq	r3, r3, #2
 800af00:	3002      	addeq	r0, #2
 800af02:	2b00      	cmp	r3, #0
 800af04:	db06      	blt.n	800af14 <__hi0bits+0x3c>
 800af06:	005b      	lsls	r3, r3, #1
 800af08:	d503      	bpl.n	800af12 <__hi0bits+0x3a>
 800af0a:	3001      	adds	r0, #1
 800af0c:	4770      	bx	lr
 800af0e:	2000      	movs	r0, #0
 800af10:	e7e8      	b.n	800aee4 <__hi0bits+0xc>
 800af12:	2020      	movs	r0, #32
 800af14:	4770      	bx	lr

0800af16 <__lo0bits>:
 800af16:	6803      	ldr	r3, [r0, #0]
 800af18:	f013 0207 	ands.w	r2, r3, #7
 800af1c:	4601      	mov	r1, r0
 800af1e:	d00b      	beq.n	800af38 <__lo0bits+0x22>
 800af20:	07da      	lsls	r2, r3, #31
 800af22:	d423      	bmi.n	800af6c <__lo0bits+0x56>
 800af24:	0798      	lsls	r0, r3, #30
 800af26:	bf49      	itett	mi
 800af28:	085b      	lsrmi	r3, r3, #1
 800af2a:	089b      	lsrpl	r3, r3, #2
 800af2c:	2001      	movmi	r0, #1
 800af2e:	600b      	strmi	r3, [r1, #0]
 800af30:	bf5c      	itt	pl
 800af32:	600b      	strpl	r3, [r1, #0]
 800af34:	2002      	movpl	r0, #2
 800af36:	4770      	bx	lr
 800af38:	b298      	uxth	r0, r3
 800af3a:	b9a8      	cbnz	r0, 800af68 <__lo0bits+0x52>
 800af3c:	0c1b      	lsrs	r3, r3, #16
 800af3e:	2010      	movs	r0, #16
 800af40:	f013 0fff 	tst.w	r3, #255	; 0xff
 800af44:	bf04      	itt	eq
 800af46:	0a1b      	lsreq	r3, r3, #8
 800af48:	3008      	addeq	r0, #8
 800af4a:	071a      	lsls	r2, r3, #28
 800af4c:	bf04      	itt	eq
 800af4e:	091b      	lsreq	r3, r3, #4
 800af50:	3004      	addeq	r0, #4
 800af52:	079a      	lsls	r2, r3, #30
 800af54:	bf04      	itt	eq
 800af56:	089b      	lsreq	r3, r3, #2
 800af58:	3002      	addeq	r0, #2
 800af5a:	07da      	lsls	r2, r3, #31
 800af5c:	d402      	bmi.n	800af64 <__lo0bits+0x4e>
 800af5e:	085b      	lsrs	r3, r3, #1
 800af60:	d006      	beq.n	800af70 <__lo0bits+0x5a>
 800af62:	3001      	adds	r0, #1
 800af64:	600b      	str	r3, [r1, #0]
 800af66:	4770      	bx	lr
 800af68:	4610      	mov	r0, r2
 800af6a:	e7e9      	b.n	800af40 <__lo0bits+0x2a>
 800af6c:	2000      	movs	r0, #0
 800af6e:	4770      	bx	lr
 800af70:	2020      	movs	r0, #32
 800af72:	4770      	bx	lr

0800af74 <__i2b>:
 800af74:	b510      	push	{r4, lr}
 800af76:	460c      	mov	r4, r1
 800af78:	2101      	movs	r1, #1
 800af7a:	f7ff ff27 	bl	800adcc <_Balloc>
 800af7e:	2201      	movs	r2, #1
 800af80:	6144      	str	r4, [r0, #20]
 800af82:	6102      	str	r2, [r0, #16]
 800af84:	bd10      	pop	{r4, pc}

0800af86 <__multiply>:
 800af86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8a:	4614      	mov	r4, r2
 800af8c:	690a      	ldr	r2, [r1, #16]
 800af8e:	6923      	ldr	r3, [r4, #16]
 800af90:	429a      	cmp	r2, r3
 800af92:	bfb8      	it	lt
 800af94:	460b      	movlt	r3, r1
 800af96:	4688      	mov	r8, r1
 800af98:	bfbc      	itt	lt
 800af9a:	46a0      	movlt	r8, r4
 800af9c:	461c      	movlt	r4, r3
 800af9e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800afa2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800afa6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afaa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800afae:	eb07 0609 	add.w	r6, r7, r9
 800afb2:	42b3      	cmp	r3, r6
 800afb4:	bfb8      	it	lt
 800afb6:	3101      	addlt	r1, #1
 800afb8:	f7ff ff08 	bl	800adcc <_Balloc>
 800afbc:	f100 0514 	add.w	r5, r0, #20
 800afc0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800afc4:	462b      	mov	r3, r5
 800afc6:	2200      	movs	r2, #0
 800afc8:	4573      	cmp	r3, lr
 800afca:	d316      	bcc.n	800affa <__multiply+0x74>
 800afcc:	f104 0214 	add.w	r2, r4, #20
 800afd0:	f108 0114 	add.w	r1, r8, #20
 800afd4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800afd8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	9b00      	ldr	r3, [sp, #0]
 800afe0:	9201      	str	r2, [sp, #4]
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d80c      	bhi.n	800b000 <__multiply+0x7a>
 800afe6:	2e00      	cmp	r6, #0
 800afe8:	dd03      	ble.n	800aff2 <__multiply+0x6c>
 800afea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d05d      	beq.n	800b0ae <__multiply+0x128>
 800aff2:	6106      	str	r6, [r0, #16]
 800aff4:	b003      	add	sp, #12
 800aff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800affa:	f843 2b04 	str.w	r2, [r3], #4
 800affe:	e7e3      	b.n	800afc8 <__multiply+0x42>
 800b000:	f8b2 b000 	ldrh.w	fp, [r2]
 800b004:	f1bb 0f00 	cmp.w	fp, #0
 800b008:	d023      	beq.n	800b052 <__multiply+0xcc>
 800b00a:	4689      	mov	r9, r1
 800b00c:	46ac      	mov	ip, r5
 800b00e:	f04f 0800 	mov.w	r8, #0
 800b012:	f859 4b04 	ldr.w	r4, [r9], #4
 800b016:	f8dc a000 	ldr.w	sl, [ip]
 800b01a:	b2a3      	uxth	r3, r4
 800b01c:	fa1f fa8a 	uxth.w	sl, sl
 800b020:	fb0b a303 	mla	r3, fp, r3, sl
 800b024:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b028:	f8dc 4000 	ldr.w	r4, [ip]
 800b02c:	4443      	add	r3, r8
 800b02e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b032:	fb0b 840a 	mla	r4, fp, sl, r8
 800b036:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b03a:	46e2      	mov	sl, ip
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b042:	454f      	cmp	r7, r9
 800b044:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b048:	f84a 3b04 	str.w	r3, [sl], #4
 800b04c:	d82b      	bhi.n	800b0a6 <__multiply+0x120>
 800b04e:	f8cc 8004 	str.w	r8, [ip, #4]
 800b052:	9b01      	ldr	r3, [sp, #4]
 800b054:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b058:	3204      	adds	r2, #4
 800b05a:	f1ba 0f00 	cmp.w	sl, #0
 800b05e:	d020      	beq.n	800b0a2 <__multiply+0x11c>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	4689      	mov	r9, r1
 800b064:	46a8      	mov	r8, r5
 800b066:	f04f 0b00 	mov.w	fp, #0
 800b06a:	f8b9 c000 	ldrh.w	ip, [r9]
 800b06e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b072:	fb0a 440c 	mla	r4, sl, ip, r4
 800b076:	445c      	add	r4, fp
 800b078:	46c4      	mov	ip, r8
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b080:	f84c 3b04 	str.w	r3, [ip], #4
 800b084:	f859 3b04 	ldr.w	r3, [r9], #4
 800b088:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b08c:	0c1b      	lsrs	r3, r3, #16
 800b08e:	fb0a b303 	mla	r3, sl, r3, fp
 800b092:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b096:	454f      	cmp	r7, r9
 800b098:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b09c:	d805      	bhi.n	800b0aa <__multiply+0x124>
 800b09e:	f8c8 3004 	str.w	r3, [r8, #4]
 800b0a2:	3504      	adds	r5, #4
 800b0a4:	e79b      	b.n	800afde <__multiply+0x58>
 800b0a6:	46d4      	mov	ip, sl
 800b0a8:	e7b3      	b.n	800b012 <__multiply+0x8c>
 800b0aa:	46e0      	mov	r8, ip
 800b0ac:	e7dd      	b.n	800b06a <__multiply+0xe4>
 800b0ae:	3e01      	subs	r6, #1
 800b0b0:	e799      	b.n	800afe6 <__multiply+0x60>
	...

0800b0b4 <__pow5mult>:
 800b0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0b8:	4615      	mov	r5, r2
 800b0ba:	f012 0203 	ands.w	r2, r2, #3
 800b0be:	4606      	mov	r6, r0
 800b0c0:	460f      	mov	r7, r1
 800b0c2:	d007      	beq.n	800b0d4 <__pow5mult+0x20>
 800b0c4:	3a01      	subs	r2, #1
 800b0c6:	4c21      	ldr	r4, [pc, #132]	; (800b14c <__pow5mult+0x98>)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0ce:	f7ff fec8 	bl	800ae62 <__multadd>
 800b0d2:	4607      	mov	r7, r0
 800b0d4:	10ad      	asrs	r5, r5, #2
 800b0d6:	d035      	beq.n	800b144 <__pow5mult+0x90>
 800b0d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b0da:	b93c      	cbnz	r4, 800b0ec <__pow5mult+0x38>
 800b0dc:	2010      	movs	r0, #16
 800b0de:	f7ff fe6d 	bl	800adbc <malloc>
 800b0e2:	6270      	str	r0, [r6, #36]	; 0x24
 800b0e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0e8:	6004      	str	r4, [r0, #0]
 800b0ea:	60c4      	str	r4, [r0, #12]
 800b0ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0f4:	b94c      	cbnz	r4, 800b10a <__pow5mult+0x56>
 800b0f6:	f240 2171 	movw	r1, #625	; 0x271
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f7ff ff3a 	bl	800af74 <__i2b>
 800b100:	2300      	movs	r3, #0
 800b102:	f8c8 0008 	str.w	r0, [r8, #8]
 800b106:	4604      	mov	r4, r0
 800b108:	6003      	str	r3, [r0, #0]
 800b10a:	f04f 0800 	mov.w	r8, #0
 800b10e:	07eb      	lsls	r3, r5, #31
 800b110:	d50a      	bpl.n	800b128 <__pow5mult+0x74>
 800b112:	4639      	mov	r1, r7
 800b114:	4622      	mov	r2, r4
 800b116:	4630      	mov	r0, r6
 800b118:	f7ff ff35 	bl	800af86 <__multiply>
 800b11c:	4639      	mov	r1, r7
 800b11e:	4681      	mov	r9, r0
 800b120:	4630      	mov	r0, r6
 800b122:	f7ff fe87 	bl	800ae34 <_Bfree>
 800b126:	464f      	mov	r7, r9
 800b128:	106d      	asrs	r5, r5, #1
 800b12a:	d00b      	beq.n	800b144 <__pow5mult+0x90>
 800b12c:	6820      	ldr	r0, [r4, #0]
 800b12e:	b938      	cbnz	r0, 800b140 <__pow5mult+0x8c>
 800b130:	4622      	mov	r2, r4
 800b132:	4621      	mov	r1, r4
 800b134:	4630      	mov	r0, r6
 800b136:	f7ff ff26 	bl	800af86 <__multiply>
 800b13a:	6020      	str	r0, [r4, #0]
 800b13c:	f8c0 8000 	str.w	r8, [r0]
 800b140:	4604      	mov	r4, r0
 800b142:	e7e4      	b.n	800b10e <__pow5mult+0x5a>
 800b144:	4638      	mov	r0, r7
 800b146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b14a:	bf00      	nop
 800b14c:	0800c570 	.word	0x0800c570

0800b150 <__lshift>:
 800b150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b154:	460c      	mov	r4, r1
 800b156:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	6849      	ldr	r1, [r1, #4]
 800b15e:	eb0a 0903 	add.w	r9, sl, r3
 800b162:	68a3      	ldr	r3, [r4, #8]
 800b164:	4607      	mov	r7, r0
 800b166:	4616      	mov	r6, r2
 800b168:	f109 0501 	add.w	r5, r9, #1
 800b16c:	42ab      	cmp	r3, r5
 800b16e:	db32      	blt.n	800b1d6 <__lshift+0x86>
 800b170:	4638      	mov	r0, r7
 800b172:	f7ff fe2b 	bl	800adcc <_Balloc>
 800b176:	2300      	movs	r3, #0
 800b178:	4680      	mov	r8, r0
 800b17a:	f100 0114 	add.w	r1, r0, #20
 800b17e:	461a      	mov	r2, r3
 800b180:	4553      	cmp	r3, sl
 800b182:	db2b      	blt.n	800b1dc <__lshift+0x8c>
 800b184:	6920      	ldr	r0, [r4, #16]
 800b186:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b18a:	f104 0314 	add.w	r3, r4, #20
 800b18e:	f016 021f 	ands.w	r2, r6, #31
 800b192:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b196:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b19a:	d025      	beq.n	800b1e8 <__lshift+0x98>
 800b19c:	f1c2 0e20 	rsb	lr, r2, #32
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	681e      	ldr	r6, [r3, #0]
 800b1a4:	468a      	mov	sl, r1
 800b1a6:	4096      	lsls	r6, r2
 800b1a8:	4330      	orrs	r0, r6
 800b1aa:	f84a 0b04 	str.w	r0, [sl], #4
 800b1ae:	f853 0b04 	ldr.w	r0, [r3], #4
 800b1b2:	459c      	cmp	ip, r3
 800b1b4:	fa20 f00e 	lsr.w	r0, r0, lr
 800b1b8:	d814      	bhi.n	800b1e4 <__lshift+0x94>
 800b1ba:	6048      	str	r0, [r1, #4]
 800b1bc:	b108      	cbz	r0, 800b1c2 <__lshift+0x72>
 800b1be:	f109 0502 	add.w	r5, r9, #2
 800b1c2:	3d01      	subs	r5, #1
 800b1c4:	4638      	mov	r0, r7
 800b1c6:	f8c8 5010 	str.w	r5, [r8, #16]
 800b1ca:	4621      	mov	r1, r4
 800b1cc:	f7ff fe32 	bl	800ae34 <_Bfree>
 800b1d0:	4640      	mov	r0, r8
 800b1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d6:	3101      	adds	r1, #1
 800b1d8:	005b      	lsls	r3, r3, #1
 800b1da:	e7c7      	b.n	800b16c <__lshift+0x1c>
 800b1dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	e7cd      	b.n	800b180 <__lshift+0x30>
 800b1e4:	4651      	mov	r1, sl
 800b1e6:	e7dc      	b.n	800b1a2 <__lshift+0x52>
 800b1e8:	3904      	subs	r1, #4
 800b1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ee:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1f2:	459c      	cmp	ip, r3
 800b1f4:	d8f9      	bhi.n	800b1ea <__lshift+0x9a>
 800b1f6:	e7e4      	b.n	800b1c2 <__lshift+0x72>

0800b1f8 <__mcmp>:
 800b1f8:	6903      	ldr	r3, [r0, #16]
 800b1fa:	690a      	ldr	r2, [r1, #16]
 800b1fc:	1a9b      	subs	r3, r3, r2
 800b1fe:	b530      	push	{r4, r5, lr}
 800b200:	d10c      	bne.n	800b21c <__mcmp+0x24>
 800b202:	0092      	lsls	r2, r2, #2
 800b204:	3014      	adds	r0, #20
 800b206:	3114      	adds	r1, #20
 800b208:	1884      	adds	r4, r0, r2
 800b20a:	4411      	add	r1, r2
 800b20c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b210:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b214:	4295      	cmp	r5, r2
 800b216:	d003      	beq.n	800b220 <__mcmp+0x28>
 800b218:	d305      	bcc.n	800b226 <__mcmp+0x2e>
 800b21a:	2301      	movs	r3, #1
 800b21c:	4618      	mov	r0, r3
 800b21e:	bd30      	pop	{r4, r5, pc}
 800b220:	42a0      	cmp	r0, r4
 800b222:	d3f3      	bcc.n	800b20c <__mcmp+0x14>
 800b224:	e7fa      	b.n	800b21c <__mcmp+0x24>
 800b226:	f04f 33ff 	mov.w	r3, #4294967295
 800b22a:	e7f7      	b.n	800b21c <__mcmp+0x24>

0800b22c <__mdiff>:
 800b22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b230:	460d      	mov	r5, r1
 800b232:	4607      	mov	r7, r0
 800b234:	4611      	mov	r1, r2
 800b236:	4628      	mov	r0, r5
 800b238:	4614      	mov	r4, r2
 800b23a:	f7ff ffdd 	bl	800b1f8 <__mcmp>
 800b23e:	1e06      	subs	r6, r0, #0
 800b240:	d108      	bne.n	800b254 <__mdiff+0x28>
 800b242:	4631      	mov	r1, r6
 800b244:	4638      	mov	r0, r7
 800b246:	f7ff fdc1 	bl	800adcc <_Balloc>
 800b24a:	2301      	movs	r3, #1
 800b24c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b254:	bfa4      	itt	ge
 800b256:	4623      	movge	r3, r4
 800b258:	462c      	movge	r4, r5
 800b25a:	4638      	mov	r0, r7
 800b25c:	6861      	ldr	r1, [r4, #4]
 800b25e:	bfa6      	itte	ge
 800b260:	461d      	movge	r5, r3
 800b262:	2600      	movge	r6, #0
 800b264:	2601      	movlt	r6, #1
 800b266:	f7ff fdb1 	bl	800adcc <_Balloc>
 800b26a:	692b      	ldr	r3, [r5, #16]
 800b26c:	60c6      	str	r6, [r0, #12]
 800b26e:	6926      	ldr	r6, [r4, #16]
 800b270:	f105 0914 	add.w	r9, r5, #20
 800b274:	f104 0214 	add.w	r2, r4, #20
 800b278:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b27c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b280:	f100 0514 	add.w	r5, r0, #20
 800b284:	f04f 0e00 	mov.w	lr, #0
 800b288:	f852 ab04 	ldr.w	sl, [r2], #4
 800b28c:	f859 4b04 	ldr.w	r4, [r9], #4
 800b290:	fa1e f18a 	uxtah	r1, lr, sl
 800b294:	b2a3      	uxth	r3, r4
 800b296:	1ac9      	subs	r1, r1, r3
 800b298:	0c23      	lsrs	r3, r4, #16
 800b29a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b29e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b2a2:	b289      	uxth	r1, r1
 800b2a4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b2a8:	45c8      	cmp	r8, r9
 800b2aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b2ae:	4694      	mov	ip, r2
 800b2b0:	f845 3b04 	str.w	r3, [r5], #4
 800b2b4:	d8e8      	bhi.n	800b288 <__mdiff+0x5c>
 800b2b6:	45bc      	cmp	ip, r7
 800b2b8:	d304      	bcc.n	800b2c4 <__mdiff+0x98>
 800b2ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b2be:	b183      	cbz	r3, 800b2e2 <__mdiff+0xb6>
 800b2c0:	6106      	str	r6, [r0, #16]
 800b2c2:	e7c5      	b.n	800b250 <__mdiff+0x24>
 800b2c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b2c8:	fa1e f381 	uxtah	r3, lr, r1
 800b2cc:	141a      	asrs	r2, r3, #16
 800b2ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2d8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b2dc:	f845 3b04 	str.w	r3, [r5], #4
 800b2e0:	e7e9      	b.n	800b2b6 <__mdiff+0x8a>
 800b2e2:	3e01      	subs	r6, #1
 800b2e4:	e7e9      	b.n	800b2ba <__mdiff+0x8e>

0800b2e6 <__d2b>:
 800b2e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2ea:	460e      	mov	r6, r1
 800b2ec:	2101      	movs	r1, #1
 800b2ee:	ec59 8b10 	vmov	r8, r9, d0
 800b2f2:	4615      	mov	r5, r2
 800b2f4:	f7ff fd6a 	bl	800adcc <_Balloc>
 800b2f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b2fc:	4607      	mov	r7, r0
 800b2fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b302:	bb34      	cbnz	r4, 800b352 <__d2b+0x6c>
 800b304:	9301      	str	r3, [sp, #4]
 800b306:	f1b8 0300 	subs.w	r3, r8, #0
 800b30a:	d027      	beq.n	800b35c <__d2b+0x76>
 800b30c:	a802      	add	r0, sp, #8
 800b30e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b312:	f7ff fe00 	bl	800af16 <__lo0bits>
 800b316:	9900      	ldr	r1, [sp, #0]
 800b318:	b1f0      	cbz	r0, 800b358 <__d2b+0x72>
 800b31a:	9a01      	ldr	r2, [sp, #4]
 800b31c:	f1c0 0320 	rsb	r3, r0, #32
 800b320:	fa02 f303 	lsl.w	r3, r2, r3
 800b324:	430b      	orrs	r3, r1
 800b326:	40c2      	lsrs	r2, r0
 800b328:	617b      	str	r3, [r7, #20]
 800b32a:	9201      	str	r2, [sp, #4]
 800b32c:	9b01      	ldr	r3, [sp, #4]
 800b32e:	61bb      	str	r3, [r7, #24]
 800b330:	2b00      	cmp	r3, #0
 800b332:	bf14      	ite	ne
 800b334:	2102      	movne	r1, #2
 800b336:	2101      	moveq	r1, #1
 800b338:	6139      	str	r1, [r7, #16]
 800b33a:	b1c4      	cbz	r4, 800b36e <__d2b+0x88>
 800b33c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b340:	4404      	add	r4, r0
 800b342:	6034      	str	r4, [r6, #0]
 800b344:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b348:	6028      	str	r0, [r5, #0]
 800b34a:	4638      	mov	r0, r7
 800b34c:	b003      	add	sp, #12
 800b34e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b356:	e7d5      	b.n	800b304 <__d2b+0x1e>
 800b358:	6179      	str	r1, [r7, #20]
 800b35a:	e7e7      	b.n	800b32c <__d2b+0x46>
 800b35c:	a801      	add	r0, sp, #4
 800b35e:	f7ff fdda 	bl	800af16 <__lo0bits>
 800b362:	9b01      	ldr	r3, [sp, #4]
 800b364:	617b      	str	r3, [r7, #20]
 800b366:	2101      	movs	r1, #1
 800b368:	6139      	str	r1, [r7, #16]
 800b36a:	3020      	adds	r0, #32
 800b36c:	e7e5      	b.n	800b33a <__d2b+0x54>
 800b36e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b372:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b376:	6030      	str	r0, [r6, #0]
 800b378:	6918      	ldr	r0, [r3, #16]
 800b37a:	f7ff fdad 	bl	800aed8 <__hi0bits>
 800b37e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b382:	e7e1      	b.n	800b348 <__d2b+0x62>

0800b384 <_calloc_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	fb02 f401 	mul.w	r4, r2, r1
 800b38a:	4621      	mov	r1, r4
 800b38c:	f000 f856 	bl	800b43c <_malloc_r>
 800b390:	4605      	mov	r5, r0
 800b392:	b118      	cbz	r0, 800b39c <_calloc_r+0x18>
 800b394:	4622      	mov	r2, r4
 800b396:	2100      	movs	r1, #0
 800b398:	f7fe f9d3 	bl	8009742 <memset>
 800b39c:	4628      	mov	r0, r5
 800b39e:	bd38      	pop	{r3, r4, r5, pc}

0800b3a0 <_free_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	2900      	cmp	r1, #0
 800b3a6:	d045      	beq.n	800b434 <_free_r+0x94>
 800b3a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ac:	1f0c      	subs	r4, r1, #4
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	bfb8      	it	lt
 800b3b2:	18e4      	addlt	r4, r4, r3
 800b3b4:	f000 fa29 	bl	800b80a <__malloc_lock>
 800b3b8:	4a1f      	ldr	r2, [pc, #124]	; (800b438 <_free_r+0x98>)
 800b3ba:	6813      	ldr	r3, [r2, #0]
 800b3bc:	4610      	mov	r0, r2
 800b3be:	b933      	cbnz	r3, 800b3ce <_free_r+0x2e>
 800b3c0:	6063      	str	r3, [r4, #4]
 800b3c2:	6014      	str	r4, [r2, #0]
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3ca:	f000 ba1f 	b.w	800b80c <__malloc_unlock>
 800b3ce:	42a3      	cmp	r3, r4
 800b3d0:	d90c      	bls.n	800b3ec <_free_r+0x4c>
 800b3d2:	6821      	ldr	r1, [r4, #0]
 800b3d4:	1862      	adds	r2, r4, r1
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	bf04      	itt	eq
 800b3da:	681a      	ldreq	r2, [r3, #0]
 800b3dc:	685b      	ldreq	r3, [r3, #4]
 800b3de:	6063      	str	r3, [r4, #4]
 800b3e0:	bf04      	itt	eq
 800b3e2:	1852      	addeq	r2, r2, r1
 800b3e4:	6022      	streq	r2, [r4, #0]
 800b3e6:	6004      	str	r4, [r0, #0]
 800b3e8:	e7ec      	b.n	800b3c4 <_free_r+0x24>
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	b10a      	cbz	r2, 800b3f4 <_free_r+0x54>
 800b3f0:	42a2      	cmp	r2, r4
 800b3f2:	d9fa      	bls.n	800b3ea <_free_r+0x4a>
 800b3f4:	6819      	ldr	r1, [r3, #0]
 800b3f6:	1858      	adds	r0, r3, r1
 800b3f8:	42a0      	cmp	r0, r4
 800b3fa:	d10b      	bne.n	800b414 <_free_r+0x74>
 800b3fc:	6820      	ldr	r0, [r4, #0]
 800b3fe:	4401      	add	r1, r0
 800b400:	1858      	adds	r0, r3, r1
 800b402:	4282      	cmp	r2, r0
 800b404:	6019      	str	r1, [r3, #0]
 800b406:	d1dd      	bne.n	800b3c4 <_free_r+0x24>
 800b408:	6810      	ldr	r0, [r2, #0]
 800b40a:	6852      	ldr	r2, [r2, #4]
 800b40c:	605a      	str	r2, [r3, #4]
 800b40e:	4401      	add	r1, r0
 800b410:	6019      	str	r1, [r3, #0]
 800b412:	e7d7      	b.n	800b3c4 <_free_r+0x24>
 800b414:	d902      	bls.n	800b41c <_free_r+0x7c>
 800b416:	230c      	movs	r3, #12
 800b418:	602b      	str	r3, [r5, #0]
 800b41a:	e7d3      	b.n	800b3c4 <_free_r+0x24>
 800b41c:	6820      	ldr	r0, [r4, #0]
 800b41e:	1821      	adds	r1, r4, r0
 800b420:	428a      	cmp	r2, r1
 800b422:	bf04      	itt	eq
 800b424:	6811      	ldreq	r1, [r2, #0]
 800b426:	6852      	ldreq	r2, [r2, #4]
 800b428:	6062      	str	r2, [r4, #4]
 800b42a:	bf04      	itt	eq
 800b42c:	1809      	addeq	r1, r1, r0
 800b42e:	6021      	streq	r1, [r4, #0]
 800b430:	605c      	str	r4, [r3, #4]
 800b432:	e7c7      	b.n	800b3c4 <_free_r+0x24>
 800b434:	bd38      	pop	{r3, r4, r5, pc}
 800b436:	bf00      	nop
 800b438:	20000274 	.word	0x20000274

0800b43c <_malloc_r>:
 800b43c:	b570      	push	{r4, r5, r6, lr}
 800b43e:	1ccd      	adds	r5, r1, #3
 800b440:	f025 0503 	bic.w	r5, r5, #3
 800b444:	3508      	adds	r5, #8
 800b446:	2d0c      	cmp	r5, #12
 800b448:	bf38      	it	cc
 800b44a:	250c      	movcc	r5, #12
 800b44c:	2d00      	cmp	r5, #0
 800b44e:	4606      	mov	r6, r0
 800b450:	db01      	blt.n	800b456 <_malloc_r+0x1a>
 800b452:	42a9      	cmp	r1, r5
 800b454:	d903      	bls.n	800b45e <_malloc_r+0x22>
 800b456:	230c      	movs	r3, #12
 800b458:	6033      	str	r3, [r6, #0]
 800b45a:	2000      	movs	r0, #0
 800b45c:	bd70      	pop	{r4, r5, r6, pc}
 800b45e:	f000 f9d4 	bl	800b80a <__malloc_lock>
 800b462:	4a21      	ldr	r2, [pc, #132]	; (800b4e8 <_malloc_r+0xac>)
 800b464:	6814      	ldr	r4, [r2, #0]
 800b466:	4621      	mov	r1, r4
 800b468:	b991      	cbnz	r1, 800b490 <_malloc_r+0x54>
 800b46a:	4c20      	ldr	r4, [pc, #128]	; (800b4ec <_malloc_r+0xb0>)
 800b46c:	6823      	ldr	r3, [r4, #0]
 800b46e:	b91b      	cbnz	r3, 800b478 <_malloc_r+0x3c>
 800b470:	4630      	mov	r0, r6
 800b472:	f000 f98f 	bl	800b794 <_sbrk_r>
 800b476:	6020      	str	r0, [r4, #0]
 800b478:	4629      	mov	r1, r5
 800b47a:	4630      	mov	r0, r6
 800b47c:	f000 f98a 	bl	800b794 <_sbrk_r>
 800b480:	1c43      	adds	r3, r0, #1
 800b482:	d124      	bne.n	800b4ce <_malloc_r+0x92>
 800b484:	230c      	movs	r3, #12
 800b486:	6033      	str	r3, [r6, #0]
 800b488:	4630      	mov	r0, r6
 800b48a:	f000 f9bf 	bl	800b80c <__malloc_unlock>
 800b48e:	e7e4      	b.n	800b45a <_malloc_r+0x1e>
 800b490:	680b      	ldr	r3, [r1, #0]
 800b492:	1b5b      	subs	r3, r3, r5
 800b494:	d418      	bmi.n	800b4c8 <_malloc_r+0x8c>
 800b496:	2b0b      	cmp	r3, #11
 800b498:	d90f      	bls.n	800b4ba <_malloc_r+0x7e>
 800b49a:	600b      	str	r3, [r1, #0]
 800b49c:	50cd      	str	r5, [r1, r3]
 800b49e:	18cc      	adds	r4, r1, r3
 800b4a0:	4630      	mov	r0, r6
 800b4a2:	f000 f9b3 	bl	800b80c <__malloc_unlock>
 800b4a6:	f104 000b 	add.w	r0, r4, #11
 800b4aa:	1d23      	adds	r3, r4, #4
 800b4ac:	f020 0007 	bic.w	r0, r0, #7
 800b4b0:	1ac3      	subs	r3, r0, r3
 800b4b2:	d0d3      	beq.n	800b45c <_malloc_r+0x20>
 800b4b4:	425a      	negs	r2, r3
 800b4b6:	50e2      	str	r2, [r4, r3]
 800b4b8:	e7d0      	b.n	800b45c <_malloc_r+0x20>
 800b4ba:	428c      	cmp	r4, r1
 800b4bc:	684b      	ldr	r3, [r1, #4]
 800b4be:	bf16      	itet	ne
 800b4c0:	6063      	strne	r3, [r4, #4]
 800b4c2:	6013      	streq	r3, [r2, #0]
 800b4c4:	460c      	movne	r4, r1
 800b4c6:	e7eb      	b.n	800b4a0 <_malloc_r+0x64>
 800b4c8:	460c      	mov	r4, r1
 800b4ca:	6849      	ldr	r1, [r1, #4]
 800b4cc:	e7cc      	b.n	800b468 <_malloc_r+0x2c>
 800b4ce:	1cc4      	adds	r4, r0, #3
 800b4d0:	f024 0403 	bic.w	r4, r4, #3
 800b4d4:	42a0      	cmp	r0, r4
 800b4d6:	d005      	beq.n	800b4e4 <_malloc_r+0xa8>
 800b4d8:	1a21      	subs	r1, r4, r0
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f000 f95a 	bl	800b794 <_sbrk_r>
 800b4e0:	3001      	adds	r0, #1
 800b4e2:	d0cf      	beq.n	800b484 <_malloc_r+0x48>
 800b4e4:	6025      	str	r5, [r4, #0]
 800b4e6:	e7db      	b.n	800b4a0 <_malloc_r+0x64>
 800b4e8:	20000274 	.word	0x20000274
 800b4ec:	20000278 	.word	0x20000278

0800b4f0 <__ssputs_r>:
 800b4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f4:	688e      	ldr	r6, [r1, #8]
 800b4f6:	429e      	cmp	r6, r3
 800b4f8:	4682      	mov	sl, r0
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	4690      	mov	r8, r2
 800b4fe:	4699      	mov	r9, r3
 800b500:	d837      	bhi.n	800b572 <__ssputs_r+0x82>
 800b502:	898a      	ldrh	r2, [r1, #12]
 800b504:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b508:	d031      	beq.n	800b56e <__ssputs_r+0x7e>
 800b50a:	6825      	ldr	r5, [r4, #0]
 800b50c:	6909      	ldr	r1, [r1, #16]
 800b50e:	1a6f      	subs	r7, r5, r1
 800b510:	6965      	ldr	r5, [r4, #20]
 800b512:	2302      	movs	r3, #2
 800b514:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b518:	fb95 f5f3 	sdiv	r5, r5, r3
 800b51c:	f109 0301 	add.w	r3, r9, #1
 800b520:	443b      	add	r3, r7
 800b522:	429d      	cmp	r5, r3
 800b524:	bf38      	it	cc
 800b526:	461d      	movcc	r5, r3
 800b528:	0553      	lsls	r3, r2, #21
 800b52a:	d530      	bpl.n	800b58e <__ssputs_r+0x9e>
 800b52c:	4629      	mov	r1, r5
 800b52e:	f7ff ff85 	bl	800b43c <_malloc_r>
 800b532:	4606      	mov	r6, r0
 800b534:	b950      	cbnz	r0, 800b54c <__ssputs_r+0x5c>
 800b536:	230c      	movs	r3, #12
 800b538:	f8ca 3000 	str.w	r3, [sl]
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b542:	81a3      	strh	r3, [r4, #12]
 800b544:	f04f 30ff 	mov.w	r0, #4294967295
 800b548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b54c:	463a      	mov	r2, r7
 800b54e:	6921      	ldr	r1, [r4, #16]
 800b550:	f7fe f8ec 	bl	800972c <memcpy>
 800b554:	89a3      	ldrh	r3, [r4, #12]
 800b556:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b55a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b55e:	81a3      	strh	r3, [r4, #12]
 800b560:	6126      	str	r6, [r4, #16]
 800b562:	6165      	str	r5, [r4, #20]
 800b564:	443e      	add	r6, r7
 800b566:	1bed      	subs	r5, r5, r7
 800b568:	6026      	str	r6, [r4, #0]
 800b56a:	60a5      	str	r5, [r4, #8]
 800b56c:	464e      	mov	r6, r9
 800b56e:	454e      	cmp	r6, r9
 800b570:	d900      	bls.n	800b574 <__ssputs_r+0x84>
 800b572:	464e      	mov	r6, r9
 800b574:	4632      	mov	r2, r6
 800b576:	4641      	mov	r1, r8
 800b578:	6820      	ldr	r0, [r4, #0]
 800b57a:	f000 f92d 	bl	800b7d8 <memmove>
 800b57e:	68a3      	ldr	r3, [r4, #8]
 800b580:	1b9b      	subs	r3, r3, r6
 800b582:	60a3      	str	r3, [r4, #8]
 800b584:	6823      	ldr	r3, [r4, #0]
 800b586:	441e      	add	r6, r3
 800b588:	6026      	str	r6, [r4, #0]
 800b58a:	2000      	movs	r0, #0
 800b58c:	e7dc      	b.n	800b548 <__ssputs_r+0x58>
 800b58e:	462a      	mov	r2, r5
 800b590:	f000 f93d 	bl	800b80e <_realloc_r>
 800b594:	4606      	mov	r6, r0
 800b596:	2800      	cmp	r0, #0
 800b598:	d1e2      	bne.n	800b560 <__ssputs_r+0x70>
 800b59a:	6921      	ldr	r1, [r4, #16]
 800b59c:	4650      	mov	r0, sl
 800b59e:	f7ff feff 	bl	800b3a0 <_free_r>
 800b5a2:	e7c8      	b.n	800b536 <__ssputs_r+0x46>

0800b5a4 <_svfiprintf_r>:
 800b5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a8:	461d      	mov	r5, r3
 800b5aa:	898b      	ldrh	r3, [r1, #12]
 800b5ac:	061f      	lsls	r7, r3, #24
 800b5ae:	b09d      	sub	sp, #116	; 0x74
 800b5b0:	4680      	mov	r8, r0
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	4616      	mov	r6, r2
 800b5b6:	d50f      	bpl.n	800b5d8 <_svfiprintf_r+0x34>
 800b5b8:	690b      	ldr	r3, [r1, #16]
 800b5ba:	b96b      	cbnz	r3, 800b5d8 <_svfiprintf_r+0x34>
 800b5bc:	2140      	movs	r1, #64	; 0x40
 800b5be:	f7ff ff3d 	bl	800b43c <_malloc_r>
 800b5c2:	6020      	str	r0, [r4, #0]
 800b5c4:	6120      	str	r0, [r4, #16]
 800b5c6:	b928      	cbnz	r0, 800b5d4 <_svfiprintf_r+0x30>
 800b5c8:	230c      	movs	r3, #12
 800b5ca:	f8c8 3000 	str.w	r3, [r8]
 800b5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d2:	e0c8      	b.n	800b766 <_svfiprintf_r+0x1c2>
 800b5d4:	2340      	movs	r3, #64	; 0x40
 800b5d6:	6163      	str	r3, [r4, #20]
 800b5d8:	2300      	movs	r3, #0
 800b5da:	9309      	str	r3, [sp, #36]	; 0x24
 800b5dc:	2320      	movs	r3, #32
 800b5de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5e2:	2330      	movs	r3, #48	; 0x30
 800b5e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5e8:	9503      	str	r5, [sp, #12]
 800b5ea:	f04f 0b01 	mov.w	fp, #1
 800b5ee:	4637      	mov	r7, r6
 800b5f0:	463d      	mov	r5, r7
 800b5f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b5f6:	b10b      	cbz	r3, 800b5fc <_svfiprintf_r+0x58>
 800b5f8:	2b25      	cmp	r3, #37	; 0x25
 800b5fa:	d13e      	bne.n	800b67a <_svfiprintf_r+0xd6>
 800b5fc:	ebb7 0a06 	subs.w	sl, r7, r6
 800b600:	d00b      	beq.n	800b61a <_svfiprintf_r+0x76>
 800b602:	4653      	mov	r3, sl
 800b604:	4632      	mov	r2, r6
 800b606:	4621      	mov	r1, r4
 800b608:	4640      	mov	r0, r8
 800b60a:	f7ff ff71 	bl	800b4f0 <__ssputs_r>
 800b60e:	3001      	adds	r0, #1
 800b610:	f000 80a4 	beq.w	800b75c <_svfiprintf_r+0x1b8>
 800b614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b616:	4453      	add	r3, sl
 800b618:	9309      	str	r3, [sp, #36]	; 0x24
 800b61a:	783b      	ldrb	r3, [r7, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f000 809d 	beq.w	800b75c <_svfiprintf_r+0x1b8>
 800b622:	2300      	movs	r3, #0
 800b624:	f04f 32ff 	mov.w	r2, #4294967295
 800b628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b62c:	9304      	str	r3, [sp, #16]
 800b62e:	9307      	str	r3, [sp, #28]
 800b630:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b634:	931a      	str	r3, [sp, #104]	; 0x68
 800b636:	462f      	mov	r7, r5
 800b638:	2205      	movs	r2, #5
 800b63a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b63e:	4850      	ldr	r0, [pc, #320]	; (800b780 <_svfiprintf_r+0x1dc>)
 800b640:	f7f4 fdf6 	bl	8000230 <memchr>
 800b644:	9b04      	ldr	r3, [sp, #16]
 800b646:	b9d0      	cbnz	r0, 800b67e <_svfiprintf_r+0xda>
 800b648:	06d9      	lsls	r1, r3, #27
 800b64a:	bf44      	itt	mi
 800b64c:	2220      	movmi	r2, #32
 800b64e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b652:	071a      	lsls	r2, r3, #28
 800b654:	bf44      	itt	mi
 800b656:	222b      	movmi	r2, #43	; 0x2b
 800b658:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b65c:	782a      	ldrb	r2, [r5, #0]
 800b65e:	2a2a      	cmp	r2, #42	; 0x2a
 800b660:	d015      	beq.n	800b68e <_svfiprintf_r+0xea>
 800b662:	9a07      	ldr	r2, [sp, #28]
 800b664:	462f      	mov	r7, r5
 800b666:	2000      	movs	r0, #0
 800b668:	250a      	movs	r5, #10
 800b66a:	4639      	mov	r1, r7
 800b66c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b670:	3b30      	subs	r3, #48	; 0x30
 800b672:	2b09      	cmp	r3, #9
 800b674:	d94d      	bls.n	800b712 <_svfiprintf_r+0x16e>
 800b676:	b1b8      	cbz	r0, 800b6a8 <_svfiprintf_r+0x104>
 800b678:	e00f      	b.n	800b69a <_svfiprintf_r+0xf6>
 800b67a:	462f      	mov	r7, r5
 800b67c:	e7b8      	b.n	800b5f0 <_svfiprintf_r+0x4c>
 800b67e:	4a40      	ldr	r2, [pc, #256]	; (800b780 <_svfiprintf_r+0x1dc>)
 800b680:	1a80      	subs	r0, r0, r2
 800b682:	fa0b f000 	lsl.w	r0, fp, r0
 800b686:	4318      	orrs	r0, r3
 800b688:	9004      	str	r0, [sp, #16]
 800b68a:	463d      	mov	r5, r7
 800b68c:	e7d3      	b.n	800b636 <_svfiprintf_r+0x92>
 800b68e:	9a03      	ldr	r2, [sp, #12]
 800b690:	1d11      	adds	r1, r2, #4
 800b692:	6812      	ldr	r2, [r2, #0]
 800b694:	9103      	str	r1, [sp, #12]
 800b696:	2a00      	cmp	r2, #0
 800b698:	db01      	blt.n	800b69e <_svfiprintf_r+0xfa>
 800b69a:	9207      	str	r2, [sp, #28]
 800b69c:	e004      	b.n	800b6a8 <_svfiprintf_r+0x104>
 800b69e:	4252      	negs	r2, r2
 800b6a0:	f043 0302 	orr.w	r3, r3, #2
 800b6a4:	9207      	str	r2, [sp, #28]
 800b6a6:	9304      	str	r3, [sp, #16]
 800b6a8:	783b      	ldrb	r3, [r7, #0]
 800b6aa:	2b2e      	cmp	r3, #46	; 0x2e
 800b6ac:	d10c      	bne.n	800b6c8 <_svfiprintf_r+0x124>
 800b6ae:	787b      	ldrb	r3, [r7, #1]
 800b6b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6b2:	d133      	bne.n	800b71c <_svfiprintf_r+0x178>
 800b6b4:	9b03      	ldr	r3, [sp, #12]
 800b6b6:	1d1a      	adds	r2, r3, #4
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	9203      	str	r2, [sp, #12]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	bfb8      	it	lt
 800b6c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6c4:	3702      	adds	r7, #2
 800b6c6:	9305      	str	r3, [sp, #20]
 800b6c8:	4d2e      	ldr	r5, [pc, #184]	; (800b784 <_svfiprintf_r+0x1e0>)
 800b6ca:	7839      	ldrb	r1, [r7, #0]
 800b6cc:	2203      	movs	r2, #3
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f7f4 fdae 	bl	8000230 <memchr>
 800b6d4:	b138      	cbz	r0, 800b6e6 <_svfiprintf_r+0x142>
 800b6d6:	2340      	movs	r3, #64	; 0x40
 800b6d8:	1b40      	subs	r0, r0, r5
 800b6da:	fa03 f000 	lsl.w	r0, r3, r0
 800b6de:	9b04      	ldr	r3, [sp, #16]
 800b6e0:	4303      	orrs	r3, r0
 800b6e2:	3701      	adds	r7, #1
 800b6e4:	9304      	str	r3, [sp, #16]
 800b6e6:	7839      	ldrb	r1, [r7, #0]
 800b6e8:	4827      	ldr	r0, [pc, #156]	; (800b788 <_svfiprintf_r+0x1e4>)
 800b6ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6ee:	2206      	movs	r2, #6
 800b6f0:	1c7e      	adds	r6, r7, #1
 800b6f2:	f7f4 fd9d 	bl	8000230 <memchr>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d038      	beq.n	800b76c <_svfiprintf_r+0x1c8>
 800b6fa:	4b24      	ldr	r3, [pc, #144]	; (800b78c <_svfiprintf_r+0x1e8>)
 800b6fc:	bb13      	cbnz	r3, 800b744 <_svfiprintf_r+0x1a0>
 800b6fe:	9b03      	ldr	r3, [sp, #12]
 800b700:	3307      	adds	r3, #7
 800b702:	f023 0307 	bic.w	r3, r3, #7
 800b706:	3308      	adds	r3, #8
 800b708:	9303      	str	r3, [sp, #12]
 800b70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70c:	444b      	add	r3, r9
 800b70e:	9309      	str	r3, [sp, #36]	; 0x24
 800b710:	e76d      	b.n	800b5ee <_svfiprintf_r+0x4a>
 800b712:	fb05 3202 	mla	r2, r5, r2, r3
 800b716:	2001      	movs	r0, #1
 800b718:	460f      	mov	r7, r1
 800b71a:	e7a6      	b.n	800b66a <_svfiprintf_r+0xc6>
 800b71c:	2300      	movs	r3, #0
 800b71e:	3701      	adds	r7, #1
 800b720:	9305      	str	r3, [sp, #20]
 800b722:	4619      	mov	r1, r3
 800b724:	250a      	movs	r5, #10
 800b726:	4638      	mov	r0, r7
 800b728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b72c:	3a30      	subs	r2, #48	; 0x30
 800b72e:	2a09      	cmp	r2, #9
 800b730:	d903      	bls.n	800b73a <_svfiprintf_r+0x196>
 800b732:	2b00      	cmp	r3, #0
 800b734:	d0c8      	beq.n	800b6c8 <_svfiprintf_r+0x124>
 800b736:	9105      	str	r1, [sp, #20]
 800b738:	e7c6      	b.n	800b6c8 <_svfiprintf_r+0x124>
 800b73a:	fb05 2101 	mla	r1, r5, r1, r2
 800b73e:	2301      	movs	r3, #1
 800b740:	4607      	mov	r7, r0
 800b742:	e7f0      	b.n	800b726 <_svfiprintf_r+0x182>
 800b744:	ab03      	add	r3, sp, #12
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	4622      	mov	r2, r4
 800b74a:	4b11      	ldr	r3, [pc, #68]	; (800b790 <_svfiprintf_r+0x1ec>)
 800b74c:	a904      	add	r1, sp, #16
 800b74e:	4640      	mov	r0, r8
 800b750:	f7fe f894 	bl	800987c <_printf_float>
 800b754:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b758:	4681      	mov	r9, r0
 800b75a:	d1d6      	bne.n	800b70a <_svfiprintf_r+0x166>
 800b75c:	89a3      	ldrh	r3, [r4, #12]
 800b75e:	065b      	lsls	r3, r3, #25
 800b760:	f53f af35 	bmi.w	800b5ce <_svfiprintf_r+0x2a>
 800b764:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b766:	b01d      	add	sp, #116	; 0x74
 800b768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b76c:	ab03      	add	r3, sp, #12
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	4622      	mov	r2, r4
 800b772:	4b07      	ldr	r3, [pc, #28]	; (800b790 <_svfiprintf_r+0x1ec>)
 800b774:	a904      	add	r1, sp, #16
 800b776:	4640      	mov	r0, r8
 800b778:	f7fe fb36 	bl	8009de8 <_printf_i>
 800b77c:	e7ea      	b.n	800b754 <_svfiprintf_r+0x1b0>
 800b77e:	bf00      	nop
 800b780:	0800c57c 	.word	0x0800c57c
 800b784:	0800c582 	.word	0x0800c582
 800b788:	0800c586 	.word	0x0800c586
 800b78c:	0800987d 	.word	0x0800987d
 800b790:	0800b4f1 	.word	0x0800b4f1

0800b794 <_sbrk_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	4c06      	ldr	r4, [pc, #24]	; (800b7b0 <_sbrk_r+0x1c>)
 800b798:	2300      	movs	r3, #0
 800b79a:	4605      	mov	r5, r0
 800b79c:	4608      	mov	r0, r1
 800b79e:	6023      	str	r3, [r4, #0]
 800b7a0:	f7f7 fd86 	bl	80032b0 <_sbrk>
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	d102      	bne.n	800b7ae <_sbrk_r+0x1a>
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	b103      	cbz	r3, 800b7ae <_sbrk_r+0x1a>
 800b7ac:	602b      	str	r3, [r5, #0]
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	20000690 	.word	0x20000690

0800b7b4 <__ascii_mbtowc>:
 800b7b4:	b082      	sub	sp, #8
 800b7b6:	b901      	cbnz	r1, 800b7ba <__ascii_mbtowc+0x6>
 800b7b8:	a901      	add	r1, sp, #4
 800b7ba:	b142      	cbz	r2, 800b7ce <__ascii_mbtowc+0x1a>
 800b7bc:	b14b      	cbz	r3, 800b7d2 <__ascii_mbtowc+0x1e>
 800b7be:	7813      	ldrb	r3, [r2, #0]
 800b7c0:	600b      	str	r3, [r1, #0]
 800b7c2:	7812      	ldrb	r2, [r2, #0]
 800b7c4:	1c10      	adds	r0, r2, #0
 800b7c6:	bf18      	it	ne
 800b7c8:	2001      	movne	r0, #1
 800b7ca:	b002      	add	sp, #8
 800b7cc:	4770      	bx	lr
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	e7fb      	b.n	800b7ca <__ascii_mbtowc+0x16>
 800b7d2:	f06f 0001 	mvn.w	r0, #1
 800b7d6:	e7f8      	b.n	800b7ca <__ascii_mbtowc+0x16>

0800b7d8 <memmove>:
 800b7d8:	4288      	cmp	r0, r1
 800b7da:	b510      	push	{r4, lr}
 800b7dc:	eb01 0302 	add.w	r3, r1, r2
 800b7e0:	d807      	bhi.n	800b7f2 <memmove+0x1a>
 800b7e2:	1e42      	subs	r2, r0, #1
 800b7e4:	4299      	cmp	r1, r3
 800b7e6:	d00a      	beq.n	800b7fe <memmove+0x26>
 800b7e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7ec:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b7f0:	e7f8      	b.n	800b7e4 <memmove+0xc>
 800b7f2:	4283      	cmp	r3, r0
 800b7f4:	d9f5      	bls.n	800b7e2 <memmove+0xa>
 800b7f6:	1881      	adds	r1, r0, r2
 800b7f8:	1ad2      	subs	r2, r2, r3
 800b7fa:	42d3      	cmn	r3, r2
 800b7fc:	d100      	bne.n	800b800 <memmove+0x28>
 800b7fe:	bd10      	pop	{r4, pc}
 800b800:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b804:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b808:	e7f7      	b.n	800b7fa <memmove+0x22>

0800b80a <__malloc_lock>:
 800b80a:	4770      	bx	lr

0800b80c <__malloc_unlock>:
 800b80c:	4770      	bx	lr

0800b80e <_realloc_r>:
 800b80e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b810:	4607      	mov	r7, r0
 800b812:	4614      	mov	r4, r2
 800b814:	460e      	mov	r6, r1
 800b816:	b921      	cbnz	r1, 800b822 <_realloc_r+0x14>
 800b818:	4611      	mov	r1, r2
 800b81a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b81e:	f7ff be0d 	b.w	800b43c <_malloc_r>
 800b822:	b922      	cbnz	r2, 800b82e <_realloc_r+0x20>
 800b824:	f7ff fdbc 	bl	800b3a0 <_free_r>
 800b828:	4625      	mov	r5, r4
 800b82a:	4628      	mov	r0, r5
 800b82c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b82e:	f000 f821 	bl	800b874 <_malloc_usable_size_r>
 800b832:	42a0      	cmp	r0, r4
 800b834:	d20f      	bcs.n	800b856 <_realloc_r+0x48>
 800b836:	4621      	mov	r1, r4
 800b838:	4638      	mov	r0, r7
 800b83a:	f7ff fdff 	bl	800b43c <_malloc_r>
 800b83e:	4605      	mov	r5, r0
 800b840:	2800      	cmp	r0, #0
 800b842:	d0f2      	beq.n	800b82a <_realloc_r+0x1c>
 800b844:	4631      	mov	r1, r6
 800b846:	4622      	mov	r2, r4
 800b848:	f7fd ff70 	bl	800972c <memcpy>
 800b84c:	4631      	mov	r1, r6
 800b84e:	4638      	mov	r0, r7
 800b850:	f7ff fda6 	bl	800b3a0 <_free_r>
 800b854:	e7e9      	b.n	800b82a <_realloc_r+0x1c>
 800b856:	4635      	mov	r5, r6
 800b858:	e7e7      	b.n	800b82a <_realloc_r+0x1c>

0800b85a <__ascii_wctomb>:
 800b85a:	b149      	cbz	r1, 800b870 <__ascii_wctomb+0x16>
 800b85c:	2aff      	cmp	r2, #255	; 0xff
 800b85e:	bf85      	ittet	hi
 800b860:	238a      	movhi	r3, #138	; 0x8a
 800b862:	6003      	strhi	r3, [r0, #0]
 800b864:	700a      	strbls	r2, [r1, #0]
 800b866:	f04f 30ff 	movhi.w	r0, #4294967295
 800b86a:	bf98      	it	ls
 800b86c:	2001      	movls	r0, #1
 800b86e:	4770      	bx	lr
 800b870:	4608      	mov	r0, r1
 800b872:	4770      	bx	lr

0800b874 <_malloc_usable_size_r>:
 800b874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b878:	1f18      	subs	r0, r3, #4
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	bfbc      	itt	lt
 800b87e:	580b      	ldrlt	r3, [r1, r0]
 800b880:	18c0      	addlt	r0, r0, r3
 800b882:	4770      	bx	lr

0800b884 <log>:
 800b884:	b570      	push	{r4, r5, r6, lr}
 800b886:	ed2d 8b02 	vpush	{d8}
 800b88a:	b08a      	sub	sp, #40	; 0x28
 800b88c:	ec55 4b10 	vmov	r4, r5, d0
 800b890:	f000 f87a 	bl	800b988 <__ieee754_log>
 800b894:	4b36      	ldr	r3, [pc, #216]	; (800b970 <log+0xec>)
 800b896:	eeb0 8a40 	vmov.f32	s16, s0
 800b89a:	eef0 8a60 	vmov.f32	s17, s1
 800b89e:	f993 6000 	ldrsb.w	r6, [r3]
 800b8a2:	1c73      	adds	r3, r6, #1
 800b8a4:	d05b      	beq.n	800b95e <log+0xda>
 800b8a6:	4622      	mov	r2, r4
 800b8a8:	462b      	mov	r3, r5
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	f7f5 f965 	bl	8000b7c <__aeabi_dcmpun>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d153      	bne.n	800b95e <log+0xda>
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	4629      	mov	r1, r5
 800b8be:	f7f5 f953 	bl	8000b68 <__aeabi_dcmpgt>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d14b      	bne.n	800b95e <log+0xda>
 800b8c6:	4b2b      	ldr	r3, [pc, #172]	; (800b974 <log+0xf0>)
 800b8c8:	9301      	str	r3, [sp, #4]
 800b8ca:	9008      	str	r0, [sp, #32]
 800b8cc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b8d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b8d4:	b9a6      	cbnz	r6, 800b900 <log+0x7c>
 800b8d6:	4b28      	ldr	r3, [pc, #160]	; (800b978 <log+0xf4>)
 800b8d8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b8dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	4629      	mov	r1, r5
 800b8e8:	f7f5 f916 	bl	8000b18 <__aeabi_dcmpeq>
 800b8ec:	bb40      	cbnz	r0, 800b940 <log+0xbc>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	2e02      	cmp	r6, #2
 800b8f2:	9300      	str	r3, [sp, #0]
 800b8f4:	d119      	bne.n	800b92a <log+0xa6>
 800b8f6:	f7fd feef 	bl	80096d8 <__errno>
 800b8fa:	2321      	movs	r3, #33	; 0x21
 800b8fc:	6003      	str	r3, [r0, #0]
 800b8fe:	e019      	b.n	800b934 <log+0xb0>
 800b900:	4b1e      	ldr	r3, [pc, #120]	; (800b97c <log+0xf8>)
 800b902:	2200      	movs	r2, #0
 800b904:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b908:	4620      	mov	r0, r4
 800b90a:	2200      	movs	r2, #0
 800b90c:	2300      	movs	r3, #0
 800b90e:	4629      	mov	r1, r5
 800b910:	f7f5 f902 	bl	8000b18 <__aeabi_dcmpeq>
 800b914:	2800      	cmp	r0, #0
 800b916:	d0ea      	beq.n	800b8ee <log+0x6a>
 800b918:	2302      	movs	r3, #2
 800b91a:	429e      	cmp	r6, r3
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	d111      	bne.n	800b944 <log+0xc0>
 800b920:	f7fd feda 	bl	80096d8 <__errno>
 800b924:	2322      	movs	r3, #34	; 0x22
 800b926:	6003      	str	r3, [r0, #0]
 800b928:	e011      	b.n	800b94e <log+0xca>
 800b92a:	4668      	mov	r0, sp
 800b92c:	f000 f9de 	bl	800bcec <matherr>
 800b930:	2800      	cmp	r0, #0
 800b932:	d0e0      	beq.n	800b8f6 <log+0x72>
 800b934:	4812      	ldr	r0, [pc, #72]	; (800b980 <log+0xfc>)
 800b936:	f000 f9db 	bl	800bcf0 <nan>
 800b93a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800b93e:	e006      	b.n	800b94e <log+0xca>
 800b940:	2302      	movs	r3, #2
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	4668      	mov	r0, sp
 800b946:	f000 f9d1 	bl	800bcec <matherr>
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d0e8      	beq.n	800b920 <log+0x9c>
 800b94e:	9b08      	ldr	r3, [sp, #32]
 800b950:	b11b      	cbz	r3, 800b95a <log+0xd6>
 800b952:	f7fd fec1 	bl	80096d8 <__errno>
 800b956:	9b08      	ldr	r3, [sp, #32]
 800b958:	6003      	str	r3, [r0, #0]
 800b95a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b95e:	eeb0 0a48 	vmov.f32	s0, s16
 800b962:	eef0 0a68 	vmov.f32	s1, s17
 800b966:	b00a      	add	sp, #40	; 0x28
 800b968:	ecbd 8b02 	vpop	{d8}
 800b96c:	bd70      	pop	{r4, r5, r6, pc}
 800b96e:	bf00      	nop
 800b970:	200001fc 	.word	0x200001fc
 800b974:	0800c698 	.word	0x0800c698
 800b978:	c7efffff 	.word	0xc7efffff
 800b97c:	fff00000 	.word	0xfff00000
 800b980:	0800c581 	.word	0x0800c581
 800b984:	00000000 	.word	0x00000000

0800b988 <__ieee754_log>:
 800b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	ec51 0b10 	vmov	r0, r1, d0
 800b990:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b994:	b087      	sub	sp, #28
 800b996:	460d      	mov	r5, r1
 800b998:	da27      	bge.n	800b9ea <__ieee754_log+0x62>
 800b99a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b99e:	4303      	orrs	r3, r0
 800b9a0:	ee10 2a10 	vmov	r2, s0
 800b9a4:	d10a      	bne.n	800b9bc <__ieee754_log+0x34>
 800b9a6:	49cc      	ldr	r1, [pc, #816]	; (800bcd8 <__ieee754_log+0x350>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	f7f4 ff75 	bl	800089c <__aeabi_ddiv>
 800b9b2:	ec41 0b10 	vmov	d0, r0, r1
 800b9b6:	b007      	add	sp, #28
 800b9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9bc:	2900      	cmp	r1, #0
 800b9be:	da05      	bge.n	800b9cc <__ieee754_log+0x44>
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	f7f4 fc89 	bl	80002d8 <__aeabi_dsub>
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	e7f0      	b.n	800b9ae <__ieee754_log+0x26>
 800b9cc:	4bc3      	ldr	r3, [pc, #780]	; (800bcdc <__ieee754_log+0x354>)
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f7f4 fe3a 	bl	8000648 <__aeabi_dmul>
 800b9d4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b9d8:	460d      	mov	r5, r1
 800b9da:	4ac1      	ldr	r2, [pc, #772]	; (800bce0 <__ieee754_log+0x358>)
 800b9dc:	4295      	cmp	r5, r2
 800b9de:	dd06      	ble.n	800b9ee <__ieee754_log+0x66>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	f7f4 fc7a 	bl	80002dc <__adddf3>
 800b9e8:	e7e3      	b.n	800b9b2 <__ieee754_log+0x2a>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	e7f5      	b.n	800b9da <__ieee754_log+0x52>
 800b9ee:	152c      	asrs	r4, r5, #20
 800b9f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b9f4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b9f8:	441c      	add	r4, r3
 800b9fa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b9fe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ba02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba06:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800ba0a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800ba0e:	ea42 0105 	orr.w	r1, r2, r5
 800ba12:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800ba16:	2200      	movs	r2, #0
 800ba18:	4bb2      	ldr	r3, [pc, #712]	; (800bce4 <__ieee754_log+0x35c>)
 800ba1a:	f7f4 fc5d 	bl	80002d8 <__aeabi_dsub>
 800ba1e:	1cab      	adds	r3, r5, #2
 800ba20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba24:	2b02      	cmp	r3, #2
 800ba26:	4682      	mov	sl, r0
 800ba28:	468b      	mov	fp, r1
 800ba2a:	f04f 0200 	mov.w	r2, #0
 800ba2e:	dc53      	bgt.n	800bad8 <__ieee754_log+0x150>
 800ba30:	2300      	movs	r3, #0
 800ba32:	f7f5 f871 	bl	8000b18 <__aeabi_dcmpeq>
 800ba36:	b1d0      	cbz	r0, 800ba6e <__ieee754_log+0xe6>
 800ba38:	2c00      	cmp	r4, #0
 800ba3a:	f000 8120 	beq.w	800bc7e <__ieee754_log+0x2f6>
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f7f4 fd98 	bl	8000574 <__aeabi_i2d>
 800ba44:	a390      	add	r3, pc, #576	; (adr r3, 800bc88 <__ieee754_log+0x300>)
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	460f      	mov	r7, r1
 800ba4e:	f7f4 fdfb 	bl	8000648 <__aeabi_dmul>
 800ba52:	a38f      	add	r3, pc, #572	; (adr r3, 800bc90 <__ieee754_log+0x308>)
 800ba54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba58:	4604      	mov	r4, r0
 800ba5a:	460d      	mov	r5, r1
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	4639      	mov	r1, r7
 800ba60:	f7f4 fdf2 	bl	8000648 <__aeabi_dmul>
 800ba64:	4602      	mov	r2, r0
 800ba66:	460b      	mov	r3, r1
 800ba68:	4620      	mov	r0, r4
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	e7ba      	b.n	800b9e4 <__ieee754_log+0x5c>
 800ba6e:	a38a      	add	r3, pc, #552	; (adr r3, 800bc98 <__ieee754_log+0x310>)
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	4650      	mov	r0, sl
 800ba76:	4659      	mov	r1, fp
 800ba78:	f7f4 fde6 	bl	8000648 <__aeabi_dmul>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	460b      	mov	r3, r1
 800ba80:	2000      	movs	r0, #0
 800ba82:	4999      	ldr	r1, [pc, #612]	; (800bce8 <__ieee754_log+0x360>)
 800ba84:	f7f4 fc28 	bl	80002d8 <__aeabi_dsub>
 800ba88:	4652      	mov	r2, sl
 800ba8a:	4606      	mov	r6, r0
 800ba8c:	460f      	mov	r7, r1
 800ba8e:	465b      	mov	r3, fp
 800ba90:	4650      	mov	r0, sl
 800ba92:	4659      	mov	r1, fp
 800ba94:	f7f4 fdd8 	bl	8000648 <__aeabi_dmul>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	4639      	mov	r1, r7
 800baa0:	f7f4 fdd2 	bl	8000648 <__aeabi_dmul>
 800baa4:	4606      	mov	r6, r0
 800baa6:	460f      	mov	r7, r1
 800baa8:	b914      	cbnz	r4, 800bab0 <__ieee754_log+0x128>
 800baaa:	4632      	mov	r2, r6
 800baac:	463b      	mov	r3, r7
 800baae:	e0a0      	b.n	800bbf2 <__ieee754_log+0x26a>
 800bab0:	4620      	mov	r0, r4
 800bab2:	f7f4 fd5f 	bl	8000574 <__aeabi_i2d>
 800bab6:	a374      	add	r3, pc, #464	; (adr r3, 800bc88 <__ieee754_log+0x300>)
 800bab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babc:	4680      	mov	r8, r0
 800babe:	4689      	mov	r9, r1
 800bac0:	f7f4 fdc2 	bl	8000648 <__aeabi_dmul>
 800bac4:	a372      	add	r3, pc, #456	; (adr r3, 800bc90 <__ieee754_log+0x308>)
 800bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baca:	4604      	mov	r4, r0
 800bacc:	460d      	mov	r5, r1
 800bace:	4640      	mov	r0, r8
 800bad0:	4649      	mov	r1, r9
 800bad2:	f7f4 fdb9 	bl	8000648 <__aeabi_dmul>
 800bad6:	e0a5      	b.n	800bc24 <__ieee754_log+0x29c>
 800bad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800badc:	f7f4 fbfe 	bl	80002dc <__adddf3>
 800bae0:	4602      	mov	r2, r0
 800bae2:	460b      	mov	r3, r1
 800bae4:	4650      	mov	r0, sl
 800bae6:	4659      	mov	r1, fp
 800bae8:	f7f4 fed8 	bl	800089c <__aeabi_ddiv>
 800baec:	e9cd 0100 	strd	r0, r1, [sp]
 800baf0:	4620      	mov	r0, r4
 800baf2:	f7f4 fd3f 	bl	8000574 <__aeabi_i2d>
 800baf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bafa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bafe:	4610      	mov	r0, r2
 800bb00:	4619      	mov	r1, r3
 800bb02:	f7f4 fda1 	bl	8000648 <__aeabi_dmul>
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb0e:	f7f4 fd9b 	bl	8000648 <__aeabi_dmul>
 800bb12:	a363      	add	r3, pc, #396	; (adr r3, 800bca0 <__ieee754_log+0x318>)
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	4680      	mov	r8, r0
 800bb1a:	4689      	mov	r9, r1
 800bb1c:	f7f4 fd94 	bl	8000648 <__aeabi_dmul>
 800bb20:	a361      	add	r3, pc, #388	; (adr r3, 800bca8 <__ieee754_log+0x320>)
 800bb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb26:	f7f4 fbd9 	bl	80002dc <__adddf3>
 800bb2a:	4642      	mov	r2, r8
 800bb2c:	464b      	mov	r3, r9
 800bb2e:	f7f4 fd8b 	bl	8000648 <__aeabi_dmul>
 800bb32:	a35f      	add	r3, pc, #380	; (adr r3, 800bcb0 <__ieee754_log+0x328>)
 800bb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb38:	f7f4 fbd0 	bl	80002dc <__adddf3>
 800bb3c:	4642      	mov	r2, r8
 800bb3e:	464b      	mov	r3, r9
 800bb40:	f7f4 fd82 	bl	8000648 <__aeabi_dmul>
 800bb44:	a35c      	add	r3, pc, #368	; (adr r3, 800bcb8 <__ieee754_log+0x330>)
 800bb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4a:	f7f4 fbc7 	bl	80002dc <__adddf3>
 800bb4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb52:	f7f4 fd79 	bl	8000648 <__aeabi_dmul>
 800bb56:	a35a      	add	r3, pc, #360	; (adr r3, 800bcc0 <__ieee754_log+0x338>)
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb60:	4640      	mov	r0, r8
 800bb62:	4649      	mov	r1, r9
 800bb64:	f7f4 fd70 	bl	8000648 <__aeabi_dmul>
 800bb68:	a357      	add	r3, pc, #348	; (adr r3, 800bcc8 <__ieee754_log+0x340>)
 800bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6e:	f7f4 fbb5 	bl	80002dc <__adddf3>
 800bb72:	4642      	mov	r2, r8
 800bb74:	464b      	mov	r3, r9
 800bb76:	f7f4 fd67 	bl	8000648 <__aeabi_dmul>
 800bb7a:	a355      	add	r3, pc, #340	; (adr r3, 800bcd0 <__ieee754_log+0x348>)
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	f7f4 fbac 	bl	80002dc <__adddf3>
 800bb84:	4642      	mov	r2, r8
 800bb86:	464b      	mov	r3, r9
 800bb88:	f7f4 fd5e 	bl	8000648 <__aeabi_dmul>
 800bb8c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800bb98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb9c:	f7f4 fb9e 	bl	80002dc <__adddf3>
 800bba0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800bba4:	3551      	adds	r5, #81	; 0x51
 800bba6:	4335      	orrs	r5, r6
 800bba8:	2d00      	cmp	r5, #0
 800bbaa:	4680      	mov	r8, r0
 800bbac:	4689      	mov	r9, r1
 800bbae:	dd48      	ble.n	800bc42 <__ieee754_log+0x2ba>
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	4b4d      	ldr	r3, [pc, #308]	; (800bce8 <__ieee754_log+0x360>)
 800bbb4:	4650      	mov	r0, sl
 800bbb6:	4659      	mov	r1, fp
 800bbb8:	f7f4 fd46 	bl	8000648 <__aeabi_dmul>
 800bbbc:	4652      	mov	r2, sl
 800bbbe:	465b      	mov	r3, fp
 800bbc0:	f7f4 fd42 	bl	8000648 <__aeabi_dmul>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4606      	mov	r6, r0
 800bbca:	460f      	mov	r7, r1
 800bbcc:	4640      	mov	r0, r8
 800bbce:	4649      	mov	r1, r9
 800bbd0:	f7f4 fb84 	bl	80002dc <__adddf3>
 800bbd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbd8:	f7f4 fd36 	bl	8000648 <__aeabi_dmul>
 800bbdc:	4680      	mov	r8, r0
 800bbde:	4689      	mov	r9, r1
 800bbe0:	b964      	cbnz	r4, 800bbfc <__ieee754_log+0x274>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	4639      	mov	r1, r7
 800bbea:	f7f4 fb75 	bl	80002d8 <__aeabi_dsub>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	4650      	mov	r0, sl
 800bbf4:	4659      	mov	r1, fp
 800bbf6:	f7f4 fb6f 	bl	80002d8 <__aeabi_dsub>
 800bbfa:	e6da      	b.n	800b9b2 <__ieee754_log+0x2a>
 800bbfc:	a322      	add	r3, pc, #136	; (adr r3, 800bc88 <__ieee754_log+0x300>)
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc06:	f7f4 fd1f 	bl	8000648 <__aeabi_dmul>
 800bc0a:	a321      	add	r3, pc, #132	; (adr r3, 800bc90 <__ieee754_log+0x308>)
 800bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc10:	4604      	mov	r4, r0
 800bc12:	460d      	mov	r5, r1
 800bc14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc18:	f7f4 fd16 	bl	8000648 <__aeabi_dmul>
 800bc1c:	4642      	mov	r2, r8
 800bc1e:	464b      	mov	r3, r9
 800bc20:	f7f4 fb5c 	bl	80002dc <__adddf3>
 800bc24:	4602      	mov	r2, r0
 800bc26:	460b      	mov	r3, r1
 800bc28:	4630      	mov	r0, r6
 800bc2a:	4639      	mov	r1, r7
 800bc2c:	f7f4 fb54 	bl	80002d8 <__aeabi_dsub>
 800bc30:	4652      	mov	r2, sl
 800bc32:	465b      	mov	r3, fp
 800bc34:	f7f4 fb50 	bl	80002d8 <__aeabi_dsub>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	e7d9      	b.n	800bbf6 <__ieee754_log+0x26e>
 800bc42:	4602      	mov	r2, r0
 800bc44:	460b      	mov	r3, r1
 800bc46:	4650      	mov	r0, sl
 800bc48:	4659      	mov	r1, fp
 800bc4a:	f7f4 fb45 	bl	80002d8 <__aeabi_dsub>
 800bc4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc52:	f7f4 fcf9 	bl	8000648 <__aeabi_dmul>
 800bc56:	4606      	mov	r6, r0
 800bc58:	460f      	mov	r7, r1
 800bc5a:	2c00      	cmp	r4, #0
 800bc5c:	f43f af25 	beq.w	800baaa <__ieee754_log+0x122>
 800bc60:	a309      	add	r3, pc, #36	; (adr r3, 800bc88 <__ieee754_log+0x300>)
 800bc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc6a:	f7f4 fced 	bl	8000648 <__aeabi_dmul>
 800bc6e:	a308      	add	r3, pc, #32	; (adr r3, 800bc90 <__ieee754_log+0x308>)
 800bc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc74:	4604      	mov	r4, r0
 800bc76:	460d      	mov	r5, r1
 800bc78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc7c:	e729      	b.n	800bad2 <__ieee754_log+0x14a>
 800bc7e:	2000      	movs	r0, #0
 800bc80:	2100      	movs	r1, #0
 800bc82:	e696      	b.n	800b9b2 <__ieee754_log+0x2a>
 800bc84:	f3af 8000 	nop.w
 800bc88:	fee00000 	.word	0xfee00000
 800bc8c:	3fe62e42 	.word	0x3fe62e42
 800bc90:	35793c76 	.word	0x35793c76
 800bc94:	3dea39ef 	.word	0x3dea39ef
 800bc98:	55555555 	.word	0x55555555
 800bc9c:	3fd55555 	.word	0x3fd55555
 800bca0:	df3e5244 	.word	0xdf3e5244
 800bca4:	3fc2f112 	.word	0x3fc2f112
 800bca8:	96cb03de 	.word	0x96cb03de
 800bcac:	3fc74664 	.word	0x3fc74664
 800bcb0:	94229359 	.word	0x94229359
 800bcb4:	3fd24924 	.word	0x3fd24924
 800bcb8:	55555593 	.word	0x55555593
 800bcbc:	3fe55555 	.word	0x3fe55555
 800bcc0:	d078c69f 	.word	0xd078c69f
 800bcc4:	3fc39a09 	.word	0x3fc39a09
 800bcc8:	1d8e78af 	.word	0x1d8e78af
 800bccc:	3fcc71c5 	.word	0x3fcc71c5
 800bcd0:	9997fa04 	.word	0x9997fa04
 800bcd4:	3fd99999 	.word	0x3fd99999
 800bcd8:	c3500000 	.word	0xc3500000
 800bcdc:	43500000 	.word	0x43500000
 800bce0:	7fefffff 	.word	0x7fefffff
 800bce4:	3ff00000 	.word	0x3ff00000
 800bce8:	3fe00000 	.word	0x3fe00000

0800bcec <matherr>:
 800bcec:	2000      	movs	r0, #0
 800bcee:	4770      	bx	lr

0800bcf0 <nan>:
 800bcf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bcf8 <nan+0x8>
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	00000000 	.word	0x00000000
 800bcfc:	7ff80000 	.word	0x7ff80000

0800bd00 <_init>:
 800bd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd02:	bf00      	nop
 800bd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd06:	bc08      	pop	{r3}
 800bd08:	469e      	mov	lr, r3
 800bd0a:	4770      	bx	lr

0800bd0c <_fini>:
 800bd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd0e:	bf00      	nop
 800bd10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd12:	bc08      	pop	{r3}
 800bd14:	469e      	mov	lr, r3
 800bd16:	4770      	bx	lr
