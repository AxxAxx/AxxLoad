
STM32G431_AxxLOAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c360  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a4  0800c540  0800c540  0001c540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cce4  0800cce4  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800cce4  0800cce4  0001cce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ccec  0800ccec  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccec  0800ccec  0001ccec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccf0  0800ccf0  0001ccf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800ccf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000200  0800cef4  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  0800cef4  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c88  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002763  00000000  00000000  00035eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001370  00000000  00000000  00038620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  00039990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001eec2  00000000  00000000  0003abc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fd14  00000000  00000000  00059a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9a2f  00000000  00000000  0006979e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001331cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061bc  00000000  00000000  00133248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c528 	.word	0x0800c528

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	0800c528 	.word	0x0800c528

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <debugPrintln>:
	uint32_t   measuredPower;
	float   amperehours;
	float   watthours;
};

void debugPrintln(UART_HandleTypeDef *huart, char _out[]){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
    txDone = false;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <debugPrintln+0x68>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) _out, strlen(_out));
 8000fe8:	6838      	ldr	r0, [r7, #0]
 8000fea:	f7ff f919 	bl	8000220 <strlen>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	6839      	ldr	r1, [r7, #0]
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f005 f884 	bl	8006104 <HAL_UART_Transmit_IT>
	while(!txDone);
 8000ffc:	bf00      	nop
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <debugPrintln+0x68>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	f083 0301 	eor.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f8      	bne.n	8000ffe <debugPrintln+0x26>
	char newline[2] = "\r\n";
 800100c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001010:	81bb      	strh	r3, [r7, #12]
    txDone = false;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <debugPrintln+0x68>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) newline, 2);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2202      	movs	r2, #2
 800101e:	4619      	mov	r1, r3
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f005 f86f 	bl	8006104 <HAL_UART_Transmit_IT>
	while(!txDone);
 8001026:	bf00      	nop
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <debugPrintln+0x68>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f083 0301 	eor.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f8      	bne.n	8001028 <debugPrintln+0x50>

}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000004 	.word	0x20000004
 8001044:	00000000 	.word	0x00000000

08001048 <adc2Temperature>:

uint16_t adc2Temperature(uint16_t adcValue){
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
	//25777
	temperatureC = 16628.0 / adcValue - 1;
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa8d 	bl	8000574 <__aeabi_i2d>
 800105a:	4603      	mov	r3, r0
 800105c:	460c      	mov	r4, r1
 800105e:	461a      	mov	r2, r3
 8001060:	4623      	mov	r3, r4
 8001062:	a14f      	add	r1, pc, #316	; (adr r1, 80011a0 <adc2Temperature+0x158>)
 8001064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001068:	f7ff fc18 	bl	800089c <__aeabi_ddiv>
 800106c:	4603      	mov	r3, r0
 800106e:	460c      	mov	r4, r1
 8001070:	4618      	mov	r0, r3
 8001072:	4621      	mov	r1, r4
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	4b45      	ldr	r3, [pc, #276]	; (8001190 <adc2Temperature+0x148>)
 800107a:	f7ff f92d 	bl	80002d8 <__aeabi_dsub>
 800107e:	4603      	mov	r3, r0
 8001080:	460c      	mov	r4, r1
 8001082:	4618      	mov	r0, r3
 8001084:	4621      	mov	r1, r4
 8001086:	f7ff fdd7 	bl	8000c38 <__aeabi_d2f>
 800108a:	4602      	mov	r2, r0
 800108c:	4b41      	ldr	r3, [pc, #260]	; (8001194 <adc2Temperature+0x14c>)
 800108e:	601a      	str	r2, [r3, #0]
	temperatureC = SERIESRESISTOR / temperatureC;
 8001090:	4b40      	ldr	r3, [pc, #256]	; (8001194 <adc2Temperature+0x14c>)
 8001092:	ed93 7a00 	vldr	s14, [r3]
 8001096:	eddf 6a40 	vldr	s13, [pc, #256]	; 8001198 <adc2Temperature+0x150>
 800109a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800109e:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <adc2Temperature+0x14c>)
 80010a0:	edc3 7a00 	vstr	s15, [r3]

  temperatureC = temperatureC / THERMISTORNOMINAL;     // (R/Ro)
 80010a4:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <adc2Temperature+0x14c>)
 80010a6:	ed93 7a00 	vldr	s14, [r3]
 80010aa:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001198 <adc2Temperature+0x150>
 80010ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b2:	4b38      	ldr	r3, [pc, #224]	; (8001194 <adc2Temperature+0x14c>)
 80010b4:	edc3 7a00 	vstr	s15, [r3]
  temperatureC = log(temperatureC);                  // ln(R/Ro)
 80010b8:	4b36      	ldr	r3, [pc, #216]	; (8001194 <adc2Temperature+0x14c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa6b 	bl	8000598 <__aeabi_f2d>
 80010c2:	4603      	mov	r3, r0
 80010c4:	460c      	mov	r4, r1
 80010c6:	ec44 3b10 	vmov	d0, r3, r4
 80010ca:	f00a ffef 	bl	800c0ac <log>
 80010ce:	ec54 3b10 	vmov	r3, r4, d0
 80010d2:	4618      	mov	r0, r3
 80010d4:	4621      	mov	r1, r4
 80010d6:	f7ff fdaf 	bl	8000c38 <__aeabi_d2f>
 80010da:	4602      	mov	r2, r0
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <adc2Temperature+0x14c>)
 80010de:	601a      	str	r2, [r3, #0]
  temperatureC /= BCOEFFICIENT;                   // 1/B * ln(R/Ro)
 80010e0:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <adc2Temperature+0x14c>)
 80010e2:	ed93 7a00 	vldr	s14, [r3]
 80010e6:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800119c <adc2Temperature+0x154>
 80010ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <adc2Temperature+0x14c>)
 80010f0:	edc3 7a00 	vstr	s15, [r3]
  temperatureC += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <adc2Temperature+0x14c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fa4d 	bl	8000598 <__aeabi_f2d>
 80010fe:	a320      	add	r3, pc, #128	; (adr r3, 8001180 <adc2Temperature+0x138>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff f8ea 	bl	80002dc <__adddf3>
 8001108:	4603      	mov	r3, r0
 800110a:	460c      	mov	r4, r1
 800110c:	4618      	mov	r0, r3
 800110e:	4621      	mov	r1, r4
 8001110:	f7ff fd92 	bl	8000c38 <__aeabi_d2f>
 8001114:	4602      	mov	r2, r0
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <adc2Temperature+0x14c>)
 8001118:	601a      	str	r2, [r3, #0]
  temperatureC = 1.0 / temperatureC;                 // Invert
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <adc2Temperature+0x14c>)
 800111c:	ed93 7a00 	vldr	s14, [r3]
 8001120:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001124:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <adc2Temperature+0x14c>)
 800112a:	edc3 7a00 	vstr	s15, [r3]
  temperatureC -= 273.15;                         // convert to C
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <adc2Temperature+0x14c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa30 	bl	8000598 <__aeabi_f2d>
 8001138:	a313      	add	r3, pc, #76	; (adr r3, 8001188 <adc2Temperature+0x140>)
 800113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113e:	f7ff f8cb 	bl	80002d8 <__aeabi_dsub>
 8001142:	4603      	mov	r3, r0
 8001144:	460c      	mov	r4, r1
 8001146:	4618      	mov	r0, r3
 8001148:	4621      	mov	r1, r4
 800114a:	f7ff fd75 	bl	8000c38 <__aeabi_d2f>
 800114e:	4602      	mov	r2, r0
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <adc2Temperature+0x14c>)
 8001152:	601a      	str	r2, [r3, #0]
  temperatureC *= 10;
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <adc2Temperature+0x14c>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800115e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <adc2Temperature+0x14c>)
 8001164:	edc3 7a00 	vstr	s15, [r3]
  return temperatureC;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <adc2Temperature+0x14c>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001172:	ee17 3a90 	vmov	r3, s15
 8001176:	b29b      	uxth	r3, r3
	}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	dcb5db83 	.word	0xdcb5db83
 8001184:	3f6b79e1 	.word	0x3f6b79e1
 8001188:	66666666 	.word	0x66666666
 800118c:	40711266 	.word	0x40711266
 8001190:	3ff00000 	.word	0x3ff00000
 8001194:	20000264 	.word	0x20000264
 8001198:	461c4000 	.word	0x461c4000
 800119c:	45734000 	.word	0x45734000
 80011a0:	00000000 	.word	0x00000000
 80011a4:	40d03d00 	.word	0x40d03d00

080011a8 <debugPrint>:


void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
    txDone = false;
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <debugPrint+0x3c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) _out, strlen(_out));
 80011b8:	6838      	ldr	r0, [r7, #0]
 80011ba:	f7ff f831 	bl	8000220 <strlen>
 80011be:	4603      	mov	r3, r0
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	6839      	ldr	r1, [r7, #0]
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f004 ff9c 	bl	8006104 <HAL_UART_Transmit_IT>
	while(!txDone);
 80011cc:	bf00      	nop
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <debugPrint+0x3c>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	f083 0301 	eor.w	r3, r3, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f8      	bne.n	80011ce <debugPrint+0x26>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000004 	.word	0x20000004

080011e8 <printHELP>:

void printHELP(UART_HandleTypeDef *huart, struct statusValues statusValues_1){
 80011e8:	b084      	sub	sp, #16
 80011ea:	b590      	push	{r4, r7, lr}
 80011ec:	b087      	sub	sp, #28
 80011ee:	af04      	add	r7, sp, #16
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	f107 001c 	add.w	r0, r7, #28
 80011f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	  debugPrintln(huart, "|------------------------------------------|");
 80011fa:	4930      	ldr	r1, [pc, #192]	; (80012bc <printHELP+0xd4>)
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff feeb 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "|      Axel Johansson's Electronic load    |");
 8001202:	492f      	ldr	r1, [pc, #188]	; (80012c0 <printHELP+0xd8>)
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff fee7 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "|      Version 2.1 2020                    |");
 800120a:	492e      	ldr	r1, [pc, #184]	; (80012c4 <printHELP+0xdc>)
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fee3 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "|---------- Availible Commands ------------|");
 8001212:	492d      	ldr	r1, [pc, #180]	; (80012c8 <printHELP+0xe0>)
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff fedf 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "  cc <mA> - Constant current");
 800121a:	492c      	ldr	r1, [pc, #176]	; (80012cc <printHELP+0xe4>)
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff fedb 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "  cp <mW> - Constant power(To be implemented..)");
 8001222:	492b      	ldr	r1, [pc, #172]	; (80012d0 <printHELP+0xe8>)
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff fed7 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "cr <mOhm> - Constant resistance(To be implemented..)");
 800122a:	492a      	ldr	r1, [pc, #168]	; (80012d4 <printHELP+0xec>)
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff fed3 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, " fs <%/A> - Fanspeed, (0-100% OR \"A\" for Automatic)");
 8001232:	4929      	ldr	r1, [pc, #164]	; (80012d8 <printHELP+0xf0>)
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fecf 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "  mv <mV> - Set MIN voltage");
 800123a:	4928      	ldr	r1, [pc, #160]	; (80012dc <printHELP+0xf4>)
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fecb 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, " log <ms> - Interval of printing status");
 8001242:	4927      	ldr	r1, [pc, #156]	; (80012e0 <printHELP+0xf8>)
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fec7 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "     stop - Turn current off");
 800124a:	4926      	ldr	r1, [pc, #152]	; (80012e4 <printHELP+0xfc>)
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff fec3 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "    reset - Reset charge/energy counters");
 8001252:	4925      	ldr	r1, [pc, #148]	; (80012e8 <printHELP+0x100>)
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff febf 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "   status - Print status");
 800125a:	4924      	ldr	r1, [pc, #144]	; (80012ec <printHELP+0x104>)
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff febb 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "     help - Show this help");
 8001262:	4923      	ldr	r1, [pc, #140]	; (80012f0 <printHELP+0x108>)
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff feb7 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, " ");
 800126a:	4922      	ldr	r1, [pc, #136]	; (80012f4 <printHELP+0x10c>)
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff feb3 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Status is printed out as:");
 8001272:	4921      	ldr	r1, [pc, #132]	; (80012f8 <printHELP+0x110>)
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff feaf 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, "Timestamp[ms]; Temperature[deg C]; Set current[mA]; Measured current[mA]; Measured Voltage[mV]; Measured Power[mW]; Amperehours[mAh]; Watthours[mWh]");
 800127a:	4920      	ldr	r1, [pc, #128]	; (80012fc <printHELP+0x114>)
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff feab 	bl	8000fd8 <debugPrintln>
	  printStatus(statusValues_1, huart);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	9303      	str	r3, [sp, #12]
 8001286:	466c      	mov	r4, sp
 8001288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800128c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800129a:	f000 f917 	bl	80014cc <printStatus>
	  debugPrintln(huart, "|------------------------------------------|");
 800129e:	4907      	ldr	r1, [pc, #28]	; (80012bc <printHELP+0xd4>)
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff fe99 	bl	8000fd8 <debugPrintln>
	  debugPrintln(huart, " ");
 80012a6:	4913      	ldr	r1, [pc, #76]	; (80012f4 <printHELP+0x10c>)
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff fe95 	bl	8000fd8 <debugPrintln>
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80012b8:	b004      	add	sp, #16
 80012ba:	4770      	bx	lr
 80012bc:	0800c540 	.word	0x0800c540
 80012c0:	0800c570 	.word	0x0800c570
 80012c4:	0800c5a0 	.word	0x0800c5a0
 80012c8:	0800c5d0 	.word	0x0800c5d0
 80012cc:	0800c600 	.word	0x0800c600
 80012d0:	0800c620 	.word	0x0800c620
 80012d4:	0800c650 	.word	0x0800c650
 80012d8:	0800c688 	.word	0x0800c688
 80012dc:	0800c6bc 	.word	0x0800c6bc
 80012e0:	0800c6d8 	.word	0x0800c6d8
 80012e4:	0800c700 	.word	0x0800c700
 80012e8:	0800c720 	.word	0x0800c720
 80012ec:	0800c74c 	.word	0x0800c74c
 80012f0:	0800c768 	.word	0x0800c768
 80012f4:	0800c784 	.word	0x0800c784
 80012f8:	0800c788 	.word	0x0800c788
 80012fc:	0800c7a4 	.word	0x0800c7a4

08001300 <BEEP>:

void BEEP(TIM_HandleTypeDef *htim){
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SetCompare(htim, TIM_CHANNEL_2, 5); //update pwm value //TIM4->CCR2 = pwm;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2205      	movs	r2, #5
 800130e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(20);
 8001310:	2014      	movs	r0, #20
 8001312:	f001 fbd7 	bl	8002ac4 <HAL_Delay>
	__HAL_TIM_SetCompare(htim, TIM_CHANNEL_2, 0); //update pwm value //TIM4->CCR2 = pwm;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	639a      	str	r2, [r3, #56]	; 0x38


}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <MCP4725_write>:
void MCP4725_write(I2C_HandleTypeDef *hi2c, uint16_t outputVoltage){
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af02      	add	r7, sp, #8
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]

	mcp4725Voltage = outputVoltage*outputVoltageCompensationConstant;
 8001334:	887b      	ldrh	r3, [r7, #2]
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MCP4725_write+0x6c>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134c:	ee17 3a90 	vmov	r3, s15
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MCP4725_write+0x70>)
 8001354:	801a      	strh	r2, [r3, #0]
	ADSwrite[0] = 0b01000000;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MCP4725_write+0x74>)
 8001358:	2240      	movs	r2, #64	; 0x40
 800135a:	701a      	strb	r2, [r3, #0]
	ADSwrite[1] = mcp4725Voltage >> 4;
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MCP4725_write+0x70>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	b29b      	uxth	r3, r3
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <MCP4725_write+0x74>)
 8001368:	705a      	strb	r2, [r3, #1]
	ADSwrite[2] = (mcp4725Voltage & 15) << 4;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MCP4725_write+0x70>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <MCP4725_write+0x74>)
 8001374:	709a      	strb	r2, [r3, #2]

	HAL_I2C_Master_Transmit(hi2c, MCP4725_ADDRESS << 1, ADSwrite, 3, 100);
 8001376:	2364      	movs	r3, #100	; 0x64
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2303      	movs	r3, #3
 800137c:	4a07      	ldr	r2, [pc, #28]	; (800139c <MCP4725_write+0x74>)
 800137e:	21c0      	movs	r1, #192	; 0xc0
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f002 f933 	bl	80035ec <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001386:	200a      	movs	r0, #10
 8001388:	f001 fb9c 	bl	8002ac4 <HAL_Delay>

}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000000 	.word	0x20000000
 8001398:	2000021c 	.word	0x2000021c
 800139c:	2000027c 	.word	0x2000027c

080013a0 <stringToInt>:


uint16_t stringToInt(char *string){
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	uint16_t command_value = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	81fb      	strh	r3, [r7, #14]
	uint8_t x=0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	737b      	strb	r3, [r7, #13]
	while( string[x] >= '0' && string[x] <= '9' && x < 7 ){	//check how many numbers after '$' and get message ID from that
 80013b0:	e012      	b.n	80013d8 <stringToInt+0x38>
		command_value *= 10;
 80013b2:	89fb      	ldrh	r3, [r7, #14]
 80013b4:	461a      	mov	r2, r3
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	81fb      	strh	r3, [r7, #14]
		command_value += string[x] - '0';
 80013be:	7b7b      	ldrb	r3, [r7, #13]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	89fb      	ldrh	r3, [r7, #14]
 80013ca:	4413      	add	r3, r2
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	3b30      	subs	r3, #48	; 0x30
 80013d0:	81fb      	strh	r3, [r7, #14]
		x++;
 80013d2:	7b7b      	ldrb	r3, [r7, #13]
 80013d4:	3301      	adds	r3, #1
 80013d6:	737b      	strb	r3, [r7, #13]
	while( string[x] >= '0' && string[x] <= '9' && x < 7 ){	//check how many numbers after '$' and get message ID from that
 80013d8:	7b7b      	ldrb	r3, [r7, #13]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b2f      	cmp	r3, #47	; 0x2f
 80013e2:	d908      	bls.n	80013f6 <stringToInt+0x56>
 80013e4:	7b7b      	ldrb	r3, [r7, #13]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b39      	cmp	r3, #57	; 0x39
 80013ee:	d802      	bhi.n	80013f6 <stringToInt+0x56>
 80013f0:	7b7b      	ldrb	r3, [r7, #13]
 80013f2:	2b06      	cmp	r3, #6
 80013f4:	d9dd      	bls.n	80013b2 <stringToInt+0x12>
	}
	return command_value;
 80013f6:	89fb      	ldrh	r3, [r7, #14]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <setFanSpeed>:


void setFanSpeed(UART_HandleTypeDef *huart, TIM_HandleTypeDef *htim, uint16_t fanspeed){
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	4613      	mov	r3, r2
 8001410:	80fb      	strh	r3, [r7, #6]
	debugPrint(huart, "Setting Fan speed to: ");
 8001412:	490d      	ldr	r1, [pc, #52]	; (8001448 <setFanSpeed+0x44>)
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7ff fec7 	bl	80011a8 <debugPrint>
	sprintf(buffer, "%hu", fanspeed);
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	461a      	mov	r2, r3
 800141e:	490b      	ldr	r1, [pc, #44]	; (800144c <setFanSpeed+0x48>)
 8001420:	480b      	ldr	r0, [pc, #44]	; (8001450 <setFanSpeed+0x4c>)
 8001422:	f007 ff07 	bl	8009234 <siprintf>
	debugPrint(huart, buffer);
 8001426:	490a      	ldr	r1, [pc, #40]	; (8001450 <setFanSpeed+0x4c>)
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f7ff febd 	bl	80011a8 <debugPrint>
	debugPrintln(huart, "%");
 800142e:	4909      	ldr	r1, [pc, #36]	; (8001454 <setFanSpeed+0x50>)
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff fdd1 	bl	8000fd8 <debugPrintln>
	__HAL_TIM_SetCompare(htim, TIM_CHANNEL_1, fanspeed); //update pwm value //TIM2->CCR2 = pwm;
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	88fa      	ldrh	r2, [r7, #6]
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	0800c83c 	.word	0x0800c83c
 800144c:	0800c854 	.word	0x0800c854
 8001450:	20000270 	.word	0x20000270
 8001454:	0800c858 	.word	0x0800c858

08001458 <autoFanSpeed>:

void autoFanSpeed(TIM_HandleTypeDef *htim, uint16_t temp){
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
	temp = temp/10.0;
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f884 	bl	8000574 <__aeabi_i2d>
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <autoFanSpeed+0x70>)
 8001472:	f7ff fa13 	bl	800089c <__aeabi_ddiv>
 8001476:	4603      	mov	r3, r0
 8001478:	460c      	mov	r4, r1
 800147a:	4618      	mov	r0, r3
 800147c:	4621      	mov	r1, r4
 800147e:	f7ff fbbb 	bl	8000bf8 <__aeabi_d2uiz>
 8001482:	4603      	mov	r3, r0
 8001484:	807b      	strh	r3, [r7, #2]
	if (temp>80){
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	2b50      	cmp	r3, #80	; 0x50
 800148a:	d904      	bls.n	8001496 <autoFanSpeed+0x3e>
		__HAL_TIM_SetCompare(htim, TIM_CHANNEL_1, 100); //update pwm value //TIM2->CCR2 = pwm;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2264      	movs	r2, #100	; 0x64
 8001492:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(htim, TIM_CHANNEL_1, 30); //update pwm value //TIM2->CCR2 = pwm;
	}
	else{
		__HAL_TIM_SetCompare(htim, TIM_CHANNEL_1, 0); //update pwm value //TIM2->CCR2 = pwm;
	}
}
 8001494:	e013      	b.n	80014be <autoFanSpeed+0x66>
	else if (temp>50){
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	2b32      	cmp	r3, #50	; 0x32
 800149a:	d904      	bls.n	80014a6 <autoFanSpeed+0x4e>
		__HAL_TIM_SetCompare(htim, TIM_CHANNEL_1, 65); //update pwm value //TIM2->CCR2 = pwm;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2241      	movs	r2, #65	; 0x41
 80014a2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014a4:	e00b      	b.n	80014be <autoFanSpeed+0x66>
	else if (temp>30){
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	2b1e      	cmp	r3, #30
 80014aa:	d904      	bls.n	80014b6 <autoFanSpeed+0x5e>
		__HAL_TIM_SetCompare(htim, TIM_CHANNEL_1, 30); //update pwm value //TIM2->CCR2 = pwm;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	221e      	movs	r2, #30
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014b4:	e003      	b.n	80014be <autoFanSpeed+0x66>
		__HAL_TIM_SetCompare(htim, TIM_CHANNEL_1, 0); //update pwm value //TIM2->CCR2 = pwm;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2200      	movs	r2, #0
 80014bc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40240000 	.word	0x40240000

080014cc <printStatus>:


void printStatus(struct statusValues statusValues_1, UART_HandleTypeDef *huart){
 80014cc:	b084      	sub	sp, #16
 80014ce:	b590      	push	{r4, r7, lr}
 80014d0:	b085      	sub	sp, #20
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	f107 0420 	add.w	r4, r7, #32
 80014d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char buffer[15];
  		memset(&buffer, '\0', sizeof(buffer));
 80014dc:	463b      	mov	r3, r7
 80014de:	220f      	movs	r2, #15
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f007 f859 	bl	800859a <memset>

		//Timestamp[ms]
	  	//sprintf(buffer, "%hu", statusValues_1.timestamp);
  		sprintf(buffer, "%8.2f", statusValues_1.timestamp/1000.0);
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f832 	bl	8000554 <__aeabi_ui2d>
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b7b      	ldr	r3, [pc, #492]	; (80016e4 <printStatus+0x218>)
 80014f6:	f7ff f9d1 	bl	800089c <__aeabi_ddiv>
 80014fa:	4603      	mov	r3, r0
 80014fc:	460c      	mov	r4, r1
 80014fe:	4638      	mov	r0, r7
 8001500:	461a      	mov	r2, r3
 8001502:	4623      	mov	r3, r4
 8001504:	4978      	ldr	r1, [pc, #480]	; (80016e8 <printStatus+0x21c>)
 8001506:	f007 fe95 	bl	8009234 <siprintf>
	  	//gcvt((statusValues_1.timestamp/1000.0), 6, buffer);
		debugPrint(huart, buffer);
 800150a:	463b      	mov	r3, r7
 800150c:	4619      	mov	r1, r3
 800150e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001510:	f7ff fe4a 	bl	80011a8 <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 8001514:	463b      	mov	r3, r7
 8001516:	220f      	movs	r2, #15
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f007 f83d 	bl	800859a <memset>
		debugPrint(huart, "   ");
 8001520:	4972      	ldr	r1, [pc, #456]	; (80016ec <printStatus+0x220>)
 8001522:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001524:	f7ff fe40 	bl	80011a8 <debugPrint>

		//Temperature[deg C]
	  	//gcvt((statusValues_1.temperature/10.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.temperature/10.0);
 8001528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f822 	bl	8000574 <__aeabi_i2d>
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	4b6e      	ldr	r3, [pc, #440]	; (80016f0 <printStatus+0x224>)
 8001536:	f7ff f9b1 	bl	800089c <__aeabi_ddiv>
 800153a:	4603      	mov	r3, r0
 800153c:	460c      	mov	r4, r1
 800153e:	4638      	mov	r0, r7
 8001540:	461a      	mov	r2, r3
 8001542:	4623      	mov	r3, r4
 8001544:	496b      	ldr	r1, [pc, #428]	; (80016f4 <printStatus+0x228>)
 8001546:	f007 fe75 	bl	8009234 <siprintf>
	  	debugPrint(huart, buffer);
 800154a:	463b      	mov	r3, r7
 800154c:	4619      	mov	r1, r3
 800154e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001550:	f7ff fe2a 	bl	80011a8 <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 8001554:	463b      	mov	r3, r7
 8001556:	220f      	movs	r2, #15
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f007 f81d 	bl	800859a <memset>
		debugPrint(huart, "   ");
 8001560:	4962      	ldr	r1, [pc, #392]	; (80016ec <printStatus+0x220>)
 8001562:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001564:	f7ff fe20 	bl	80011a8 <debugPrint>

		//Set current[mA]
	  	//sprintf(buffer, "%hu", statusValues_1.setCurrent);
	  	//gcvt((statusValues_1.setCurrent/1000.0), 6, buffer);
  		sprintf(buffer, "%7.2f", statusValues_1.setCurrent/1000.0);
 8001568:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f802 	bl	8000574 <__aeabi_i2d>
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4b5b      	ldr	r3, [pc, #364]	; (80016e4 <printStatus+0x218>)
 8001576:	f7ff f991 	bl	800089c <__aeabi_ddiv>
 800157a:	4603      	mov	r3, r0
 800157c:	460c      	mov	r4, r1
 800157e:	4638      	mov	r0, r7
 8001580:	461a      	mov	r2, r3
 8001582:	4623      	mov	r3, r4
 8001584:	495c      	ldr	r1, [pc, #368]	; (80016f8 <printStatus+0x22c>)
 8001586:	f007 fe55 	bl	8009234 <siprintf>
	  	debugPrint(huart, buffer);
 800158a:	463b      	mov	r3, r7
 800158c:	4619      	mov	r1, r3
 800158e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001590:	f7ff fe0a 	bl	80011a8 <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 8001594:	463b      	mov	r3, r7
 8001596:	220f      	movs	r2, #15
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f006 fffd 	bl	800859a <memset>
		debugPrint(huart, "   ");
 80015a0:	4952      	ldr	r1, [pc, #328]	; (80016ec <printStatus+0x220>)
 80015a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80015a4:	f7ff fe00 	bl	80011a8 <debugPrint>

		//Measured current[mA]
	  	//sprintf(buffer, "%hu", statusValues_1.measuredCurrent);
	  	//gcvt((statusValues_1.measuredCurrent/1000.0), 6, buffer);
  		sprintf(buffer, "%7.2f", statusValues_1.measuredCurrent/1000.0);
 80015a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ffe2 	bl	8000574 <__aeabi_i2d>
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <printStatus+0x218>)
 80015b6:	f7ff f971 	bl	800089c <__aeabi_ddiv>
 80015ba:	4603      	mov	r3, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	4638      	mov	r0, r7
 80015c0:	461a      	mov	r2, r3
 80015c2:	4623      	mov	r3, r4
 80015c4:	494c      	ldr	r1, [pc, #304]	; (80016f8 <printStatus+0x22c>)
 80015c6:	f007 fe35 	bl	8009234 <siprintf>
  		debugPrint(huart, buffer);
 80015ca:	463b      	mov	r3, r7
 80015cc:	4619      	mov	r1, r3
 80015ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80015d0:	f7ff fdea 	bl	80011a8 <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 80015d4:	463b      	mov	r3, r7
 80015d6:	220f      	movs	r2, #15
 80015d8:	2100      	movs	r1, #0
 80015da:	4618      	mov	r0, r3
 80015dc:	f006 ffdd 	bl	800859a <memset>
		debugPrint(huart, "   ");
 80015e0:	4942      	ldr	r1, [pc, #264]	; (80016ec <printStatus+0x220>)
 80015e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80015e4:	f7ff fde0 	bl	80011a8 <debugPrint>


		//Measured Voltage[mV]
	  	//sprintf(buffer, "%hu", statusValues_1.measuredVoltage);
	  	//gcvt((statusValues_1.measuredVoltage/1000.0), 6, buffer);
  		sprintf(buffer, "%4.2f", statusValues_1.measuredVoltage/1000.0);
 80015e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe ffc2 	bl	8000574 <__aeabi_i2d>
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <printStatus+0x218>)
 80015f6:	f7ff f951 	bl	800089c <__aeabi_ddiv>
 80015fa:	4603      	mov	r3, r0
 80015fc:	460c      	mov	r4, r1
 80015fe:	4638      	mov	r0, r7
 8001600:	461a      	mov	r2, r3
 8001602:	4623      	mov	r3, r4
 8001604:	493d      	ldr	r1, [pc, #244]	; (80016fc <printStatus+0x230>)
 8001606:	f007 fe15 	bl	8009234 <siprintf>
	  	debugPrint(huart, buffer);
 800160a:	463b      	mov	r3, r7
 800160c:	4619      	mov	r1, r3
 800160e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001610:	f7ff fdca 	bl	80011a8 <debugPrint>
	  	memset(&buffer, '\0', sizeof(buffer));
 8001614:	463b      	mov	r3, r7
 8001616:	220f      	movs	r2, #15
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f006 ffbd 	bl	800859a <memset>
		debugPrint(huart, "   ");
 8001620:	4932      	ldr	r1, [pc, #200]	; (80016ec <printStatus+0x220>)
 8001622:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001624:	f7ff fdc0 	bl	80011a8 <debugPrint>

		//Measured Power[mW]
		//sprintf(buffer, "%hu", statusValues_1.measuredPower);
	  	//gcvt((statusValues_1.measuredPower/1.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.measuredPower/1000.0);
 8001628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff92 	bl	8000554 <__aeabi_ui2d>
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <printStatus+0x218>)
 8001636:	f7ff f931 	bl	800089c <__aeabi_ddiv>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	4638      	mov	r0, r7
 8001640:	461a      	mov	r2, r3
 8001642:	4623      	mov	r3, r4
 8001644:	492b      	ldr	r1, [pc, #172]	; (80016f4 <printStatus+0x228>)
 8001646:	f007 fdf5 	bl	8009234 <siprintf>
  		debugPrint(huart, buffer);
 800164a:	463b      	mov	r3, r7
 800164c:	4619      	mov	r1, r3
 800164e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001650:	f7ff fdaa 	bl	80011a8 <debugPrint>
		memset(&buffer, '\0', sizeof(buffer));
 8001654:	463b      	mov	r3, r7
 8001656:	220f      	movs	r2, #15
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f006 ff9d 	bl	800859a <memset>
		debugPrint(huart, "   ");
 8001660:	4922      	ldr	r1, [pc, #136]	; (80016ec <printStatus+0x220>)
 8001662:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001664:	f7ff fda0 	bl	80011a8 <debugPrint>

		//Amperehours[mAh]
		//sprintf(buffer, "%hu", statusValues_1.amperehours);
	  	//gcvt((statusValues_1.amperehours/1000000000.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.amperehours);
 8001668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff94 	bl	8000598 <__aeabi_f2d>
 8001670:	4603      	mov	r3, r0
 8001672:	460c      	mov	r4, r1
 8001674:	4638      	mov	r0, r7
 8001676:	461a      	mov	r2, r3
 8001678:	4623      	mov	r3, r4
 800167a:	491e      	ldr	r1, [pc, #120]	; (80016f4 <printStatus+0x228>)
 800167c:	f007 fdda 	bl	8009234 <siprintf>
  		debugPrint(huart, buffer);
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001686:	f7ff fd8f 	bl	80011a8 <debugPrint>
		memset(&buffer, '\0', sizeof(buffer));
 800168a:	463b      	mov	r3, r7
 800168c:	220f      	movs	r2, #15
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f006 ff82 	bl	800859a <memset>
		debugPrint(huart, "   ");
 8001696:	4915      	ldr	r1, [pc, #84]	; (80016ec <printStatus+0x220>)
 8001698:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800169a:	f7ff fd85 	bl	80011a8 <debugPrint>

		//Watthours[mWh]
		//sprintf(buffer, "%hu", statusValues_1.watthours);
	  	//gcvt((statusValues_1.watthours/1000000000.0), 6, buffer);
  		sprintf(buffer, "%5.2f", statusValues_1.watthours);
 800169e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff79 	bl	8000598 <__aeabi_f2d>
 80016a6:	4603      	mov	r3, r0
 80016a8:	460c      	mov	r4, r1
 80016aa:	4638      	mov	r0, r7
 80016ac:	461a      	mov	r2, r3
 80016ae:	4623      	mov	r3, r4
 80016b0:	4910      	ldr	r1, [pc, #64]	; (80016f4 <printStatus+0x228>)
 80016b2:	f007 fdbf 	bl	8009234 <siprintf>
  		debugPrint(huart, buffer);
 80016b6:	463b      	mov	r3, r7
 80016b8:	4619      	mov	r1, r3
 80016ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80016bc:	f7ff fd74 	bl	80011a8 <debugPrint>
		memset(&buffer, '\0', sizeof(buffer));
 80016c0:	463b      	mov	r3, r7
 80016c2:	220f      	movs	r2, #15
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f006 ff67 	bl	800859a <memset>
		debugPrintln(huart, "   ");
 80016cc:	4907      	ldr	r1, [pc, #28]	; (80016ec <printStatus+0x220>)
 80016ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80016d0:	f7ff fc82 	bl	8000fd8 <debugPrintln>

}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80016de:	b004      	add	sp, #16
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	408f4000 	.word	0x408f4000
 80016e8:	0800c85c 	.word	0x0800c85c
 80016ec:	0800c864 	.word	0x0800c864
 80016f0:	40240000 	.word	0x40240000
 80016f4:	0800c868 	.word	0x0800c868
 80016f8:	0800c870 	.word	0x0800c870
 80016fc:	0800c878 	.word	0x0800c878

08001700 <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)

{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

 /* Set transmission flag: transfer complete */

txDone = true;
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <HAL_UART_TxCpltCallback+0x1c>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]

}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_UART_RxCpltCallback>:

// This callback is called by the HAL_UART_IRQHandler when the given number of bytes are received
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, &byte, 1);//Restart the interrupt reception mode
 8001728:	2201      	movs	r2, #1
 800172a:	4923      	ldr	r1, [pc, #140]	; (80017b8 <HAL_UART_RxCpltCallback+0x98>)
 800172c:	4823      	ldr	r0, [pc, #140]	; (80017bc <HAL_UART_RxCpltCallback+0x9c>)
 800172e:	f004 fd6d 	bl	800620c <HAL_UART_Receive_IT>
	static int rx_index = 0;
	//if (USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) // Received character?
	if (huart->Instance == USART2)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a22      	ldr	r2, [pc, #136]	; (80017c0 <HAL_UART_RxCpltCallback+0xa0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d138      	bne.n	80017ae <HAL_UART_RxCpltCallback+0x8e>
	{
		//char rx = HAL_UART_Receive_IT(&huart2, &byte, 1);
		//HAL_UART_Transmit(&huart2, &byte, 1, 10);
		rx = byte;
 800173c:	4b1e      	ldr	r3, [pc, #120]	; (80017b8 <HAL_UART_RxCpltCallback+0x98>)
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <HAL_UART_RxCpltCallback+0xa4>)
 8001742:	701a      	strb	r2, [r3, #0]
		if ((rx == '\r') || (rx == '\n')) // Is this an end-of-line condition, either will suffice?
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <HAL_UART_RxCpltCallback+0xa4>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b0d      	cmp	r3, #13
 800174a:	d003      	beq.n	8001754 <HAL_UART_RxCpltCallback+0x34>
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_UART_RxCpltCallback+0xa4>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b0a      	cmp	r3, #10
 8001752:	d11b      	bne.n	800178c <HAL_UART_RxCpltCallback+0x6c>
		{
			if (rx_index != 0) // Line has some content?
 8001754:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <HAL_UART_RxCpltCallback+0xa8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d028      	beq.n	80017ae <HAL_UART_RxCpltCallback+0x8e>
			{
				memcpy((void *)line_buffer, rx_buffer, rx_index); // Copy to static line buffer from dynamic receive buffer
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_UART_RxCpltCallback+0xa8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	491a      	ldr	r1, [pc, #104]	; (80017cc <HAL_UART_RxCpltCallback+0xac>)
 8001764:	481a      	ldr	r0, [pc, #104]	; (80017d0 <HAL_UART_RxCpltCallback+0xb0>)
 8001766:	f006 ff0d 	bl	8008584 <memcpy>
				line_buffer[rx_index] = 0; // Add terminating NUL
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_UART_RxCpltCallback+0xa8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a18      	ldr	r2, [pc, #96]	; (80017d0 <HAL_UART_RxCpltCallback+0xb0>)
 8001770:	2100      	movs	r1, #0
 8001772:	54d1      	strb	r1, [r2, r3]
				line_valid = 1; // flag new line valid for processing
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_UART_RxCpltCallback+0xb4>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]
				rx_index = 0; // Reset content pointer
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <HAL_UART_RxCpltCallback+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
				memset(&rx_buffer, '\0', sizeof(rx_buffer));
 8001780:	220a      	movs	r2, #10
 8001782:	2100      	movs	r1, #0
 8001784:	4811      	ldr	r0, [pc, #68]	; (80017cc <HAL_UART_RxCpltCallback+0xac>)
 8001786:	f006 ff08 	bl	800859a <memset>
			if (rx_index != 0) // Line has some content?
 800178a:	e010      	b.n	80017ae <HAL_UART_RxCpltCallback+0x8e>
			}
		}
		else
		{
			if (rx_index == LINEMAX) // If overflows pull back to start
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <HAL_UART_RxCpltCallback+0xa8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b0a      	cmp	r3, #10
 8001792:	d102      	bne.n	800179a <HAL_UART_RxCpltCallback+0x7a>
				rx_index = 0;
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <HAL_UART_RxCpltCallback+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
			rx_buffer[rx_index++] = rx; // Copy to buffer and increment
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_UART_RxCpltCallback+0xa8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	4909      	ldr	r1, [pc, #36]	; (80017c8 <HAL_UART_RxCpltCallback+0xa8>)
 80017a2:	600a      	str	r2, [r1, #0]
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_UART_RxCpltCallback+0xa4>)
 80017a6:	7811      	ldrb	r1, [r2, #0]
 80017a8:	4a08      	ldr	r2, [pc, #32]	; (80017cc <HAL_UART_RxCpltCallback+0xac>)
 80017aa:	54d1      	strb	r1, [r2, r3]
		}
	}
}
 80017ac:	e7ff      	b.n	80017ae <HAL_UART_RxCpltCallback+0x8e>
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000039c 	.word	0x2000039c
 80017bc:	20000438 	.word	0x20000438
 80017c0:	40004400 	.word	0x40004400
 80017c4:	20000398 	.word	0x20000398
 80017c8:	20000254 	.word	0x20000254
 80017cc:	20000230 	.word	0x20000230
 80017d0:	20000224 	.word	0x20000224
 80017d4:	20000220 	.word	0x20000220

080017d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d8:	b5b0      	push	{r4, r5, r7, lr}
 80017da:	b09a      	sub	sp, #104	; 0x68
 80017dc:	af04      	add	r7, sp, #16
	//Connect ADDR pin to GND and I2C slave adress will be 0X48 .
	unsigned char ADSwrite[6];
	int16_t *ADS11115_Readings[4];
	int16_t voltage[3];
	struct statusValues my_statusValues;        /* Declare Book1 of type Book */
	my_statusValues.amperehours=0;
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
	my_statusValues.watthours=0;
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
	my_statusValues.setCurrent=0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	82fb      	strh	r3, [r7, #22]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ee:	f001 f8f8 	bl	80029e2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f2:	f000 fba3 	bl	8001f3c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f6:	f000 fe21 	bl	800243c <MX_GPIO_Init>
  MX_DMA_Init();
 80017fa:	f000 fdf5 	bl	80023e8 <MX_DMA_Init>
  MX_I2C1_Init();
 80017fe:	f000 fbf3 	bl	8001fe8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001802:	f000 fc31 	bl	8002068 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001806:	f000 fda3 	bl	8002350 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800180a:	f000 fd53 	bl	80022b4 <MX_TIM4_Init>
  MX_TIM2_Init();
 800180e:	f000 fcdb 	bl	80021c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim4);
 8001812:	48b7      	ldr	r0, [pc, #732]	; (8001af0 <main+0x318>)
 8001814:	f003 fb6c 	bl	8004ef0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2); //Start Pwm signal on PB-6 Pin
 8001818:	2104      	movs	r1, #4
 800181a:	48b5      	ldr	r0, [pc, #724]	; (8001af0 <main+0x318>)
 800181c:	f003 fbf8 	bl	8005010 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim1);
 8001820:	48b4      	ldr	r0, [pc, #720]	; (8001af4 <main+0x31c>)
 8001822:	f003 fb65 	bl	8004ef0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1); //Start Pwm signal on PB-6 Pin
 8001826:	2100      	movs	r1, #0
 8001828:	48b2      	ldr	r0, [pc, #712]	; (8001af4 <main+0x31c>)
 800182a:	f003 fbf1 	bl	8005010 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim2);
 800182e:	48b2      	ldr	r0, [pc, #712]	; (8001af8 <main+0x320>)
 8001830:	f003 fb5e 	bl	8004ef0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2); //Start Pwm signal on PB-6 Pin
 8001834:	2104      	movs	r1, #4
 8001836:	48b0      	ldr	r0, [pc, #704]	; (8001af8 <main+0x320>)
 8001838:	f003 fbea 	bl	8005010 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart2, &byte, 1);//Start the interrupt reception mode
 800183c:	2201      	movs	r2, #1
 800183e:	49af      	ldr	r1, [pc, #700]	; (8001afc <main+0x324>)
 8001840:	48af      	ldr	r0, [pc, #700]	; (8001b00 <main+0x328>)
 8001842:	f004 fce3 	bl	800620c <HAL_UART_Receive_IT>





	    for(int i=0; i< 3; i++){
 8001846:	2300      	movs	r3, #0
 8001848:	657b      	str	r3, [r7, #84]	; 0x54
 800184a:	e059      	b.n	8001900 <main+0x128>

	    	ADSwrite[0] = 0x01;
 800184c:	2301      	movs	r3, #1
 800184e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

	    				switch(i){
 8001852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001854:	2b01      	cmp	r3, #1
 8001856:	d007      	beq.n	8001868 <main+0x90>
 8001858:	2b02      	cmp	r3, #2
 800185a:	d009      	beq.n	8001870 <main+0x98>
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10b      	bne.n	8001878 <main+0xa0>
	    					case(0):
	    						ADSwrite[1] = 0xC1; //11000001
 8001860:	23c1      	movs	r3, #193	; 0xc1
 8001862:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	    					break;
 8001866:	e007      	b.n	8001878 <main+0xa0>
	    					case(1):
	    						ADSwrite[1] = 0xD1; //11010001
 8001868:	23d1      	movs	r3, #209	; 0xd1
 800186a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	    					break;
 800186e:	e003      	b.n	8001878 <main+0xa0>
	    					case(2):
								ADSwrite[1] = 0xF1;//ADSwrite[1] = 0xE1;
 8001870:	23f1      	movs	r3, #241	; 0xf1
 8001872:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	    					break;
 8001876:	bf00      	nop
	    					case(3):
	    						ADSwrite[1] = 0xF1;
	    					break;*/
	    				}

	    				ADSwrite[2] = 0x83; //10000011 LSB
 8001878:	2383      	movs	r3, #131	; 0x83
 800187a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	    				HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 800187e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001882:	2364      	movs	r3, #100	; 0x64
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2303      	movs	r3, #3
 8001888:	2190      	movs	r1, #144	; 0x90
 800188a:	489e      	ldr	r0, [pc, #632]	; (8001b04 <main+0x32c>)
 800188c:	f001 feae 	bl	80035ec <HAL_I2C_Master_Transmit>
	    				ADSwrite[0] = 0x00;
 8001890:	2300      	movs	r3, #0
 8001892:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	    				HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 8001896:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800189a:	2364      	movs	r3, #100	; 0x64
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2301      	movs	r3, #1
 80018a0:	2190      	movs	r1, #144	; 0x90
 80018a2:	4898      	ldr	r0, [pc, #608]	; (8001b04 <main+0x32c>)
 80018a4:	f001 fea2 	bl	80035ec <HAL_I2C_Master_Transmit>
	    				HAL_Delay(10);//20
 80018a8:	200a      	movs	r0, #10
 80018aa:	f001 f90b 	bl	8002ac4 <HAL_Delay>

	    				HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 80018ae:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80018b2:	2364      	movs	r3, #100	; 0x64
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2302      	movs	r3, #2
 80018b8:	2190      	movs	r1, #144	; 0x90
 80018ba:	4892      	ldr	r0, [pc, #584]	; (8001b04 <main+0x32c>)
 80018bc:	f001 ff8a 	bl	80037d4 <HAL_I2C_Master_Receive>
	    				reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 80018c0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	b21a      	sxth	r2, r3
 80018c8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80018cc:	b21b      	sxth	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	4b8d      	ldr	r3, [pc, #564]	; (8001b08 <main+0x330>)
 80018d4:	801a      	strh	r2, [r3, #0]
	    				if(reading < 0) {
 80018d6:	4b8c      	ldr	r3, [pc, #560]	; (8001b08 <main+0x330>)
 80018d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	da02      	bge.n	80018e6 <main+0x10e>
	    					reading = 0;
 80018e0:	4b89      	ldr	r3, [pc, #548]	; (8001b08 <main+0x330>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	801a      	strh	r2, [r3, #0]
	    				}

	    				voltage[i] = reading;
 80018e6:	4b88      	ldr	r3, [pc, #544]	; (8001b08 <main+0x330>)
 80018e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80018ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80018f4:	440b      	add	r3, r1
 80018f6:	f823 2c2c 	strh.w	r2, [r3, #-44]
	    for(int i=0; i< 3; i++){
 80018fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fc:	3301      	adds	r3, #1
 80018fe:	657b      	str	r3, [r7, #84]	; 0x54
 8001900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001902:	2b02      	cmp	r3, #2
 8001904:	dda2      	ble.n	800184c <main+0x74>





	my_statusValues.measuredVoltage = voltage[0] * voltageCompensationConstant;
 8001906:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001912:	4b7e      	ldr	r3, [pc, #504]	; (8001b0c <main+0x334>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800191c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001920:	ee17 3a90 	vmov	r3, s15
 8001924:	b29b      	uxth	r3, r3
 8001926:	83bb      	strh	r3, [r7, #28]
	my_statusValues.measuredCurrent = voltage[1] * currentCompensationConstant;
 8001928:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001934:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <main+0x338>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001942:	ee17 3a90 	vmov	r3, s15
 8001946:	b29b      	uxth	r3, r3
 8001948:	837b      	strh	r3, [r7, #26]
	my_statusValues.temperature = adc2Temperature(voltage[2]);
 800194a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fb7a 	bl	8001048 <adc2Temperature>
 8001954:	4603      	mov	r3, r0
 8001956:	b29b      	uxth	r3, r3
 8001958:	82bb      	strh	r3, [r7, #20]
	my_statusValues.measuredPower = (my_statusValues.measuredVoltage*my_statusValues.measuredCurrent)/1000;
 800195a:	8bbb      	ldrh	r3, [r7, #28]
 800195c:	8b7a      	ldrh	r2, [r7, #26]
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	4a6c      	ldr	r2, [pc, #432]	; (8001b14 <main+0x33c>)
 8001964:	fb82 1203 	smull	r1, r2, r2, r3
 8001968:	1192      	asrs	r2, r2, #6
 800196a:	17db      	asrs	r3, r3, #31
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	623b      	str	r3, [r7, #32]
	my_statusValues.timestamp = (HAL_GetTick()-zeroTimeValue);
 8001970:	f001 f89c 	bl	8002aac <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	4b68      	ldr	r3, [pc, #416]	; (8001b18 <main+0x340>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	613b      	str	r3, [r7, #16]

	integrationTime = HAL_GetTick()-previousMillis_INTEGRATION;
 800197e:	f001 f895 	bl	8002aac <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <main+0x344>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	4a65      	ldr	r2, [pc, #404]	; (8001b20 <main+0x348>)
 800198c:	6013      	str	r3, [r2, #0]
	my_statusValues.amperehours = my_statusValues.amperehours + integrationTime * my_statusValues.measuredCurrent/3600000.0;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fe01 	bl	8000598 <__aeabi_f2d>
 8001996:	4604      	mov	r4, r0
 8001998:	460d      	mov	r5, r1
 800199a:	8b7b      	ldrh	r3, [r7, #26]
 800199c:	461a      	mov	r2, r3
 800199e:	4b60      	ldr	r3, [pc, #384]	; (8001b20 <main+0x348>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	fb03 f302 	mul.w	r3, r3, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdd4 	bl	8000554 <__aeabi_ui2d>
 80019ac:	a34c      	add	r3, pc, #304	; (adr r3, 8001ae0 <main+0x308>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe ff73 	bl	800089c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4620      	mov	r0, r4
 80019bc:	4629      	mov	r1, r5
 80019be:	f7fe fc8d 	bl	80002dc <__adddf3>
 80019c2:	4603      	mov	r3, r0
 80019c4:	460c      	mov	r4, r1
 80019c6:	4618      	mov	r0, r3
 80019c8:	4621      	mov	r1, r4
 80019ca:	f7ff f935 	bl	8000c38 <__aeabi_d2f>
 80019ce:	4603      	mov	r3, r0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
	my_statusValues.watthours = my_statusValues.watthours + integrationTime * my_statusValues.measuredCurrent * my_statusValues.measuredVoltage /3600000000.0;
 80019d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fddf 	bl	8000598 <__aeabi_f2d>
 80019da:	4604      	mov	r4, r0
 80019dc:	460d      	mov	r5, r1
 80019de:	8b7b      	ldrh	r3, [r7, #26]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b4f      	ldr	r3, [pc, #316]	; (8001b20 <main+0x348>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	fb03 f302 	mul.w	r3, r3, r2
 80019ea:	8bba      	ldrh	r2, [r7, #28]
 80019ec:	fb02 f303 	mul.w	r3, r2, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fdaf 	bl	8000554 <__aeabi_ui2d>
 80019f6:	a33c      	add	r3, pc, #240	; (adr r3, 8001ae8 <main+0x310>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	f7fe ff4e 	bl	800089c <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4620      	mov	r0, r4
 8001a06:	4629      	mov	r1, r5
 8001a08:	f7fe fc68 	bl	80002dc <__adddf3>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	4618      	mov	r0, r3
 8001a12:	4621      	mov	r1, r4
 8001a14:	f7ff f910 	bl	8000c38 <__aeabi_d2f>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
	previousMillis_INTEGRATION = HAL_GetTick();
 8001a1c:	f001 f846 	bl	8002aac <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <main+0x344>)
 8001a24:	601a      	str	r2, [r3, #0]



	//Set current by setting voltage drop over shunt
	MCP4725_write(&hi2c1, my_statusValues.setCurrent);
 8001a26:	8afb      	ldrh	r3, [r7, #22]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4836      	ldr	r0, [pc, #216]	; (8001b04 <main+0x32c>)
 8001a2c:	f7ff fc7c 	bl	8001328 <MCP4725_write>

if (line_valid==1){ // A new line has arrived
 8001a30:	4b3c      	ldr	r3, [pc, #240]	; (8001b24 <main+0x34c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	f040 81c5 	bne.w	8001dc4 <main+0x5ec>
	BEEP(&htim2);
 8001a3a:	482f      	ldr	r0, [pc, #188]	; (8001af8 <main+0x320>)
 8001a3c:	f7ff fc60 	bl	8001300 <BEEP>
	line_valid = 0; // clear pending flag
 8001a40:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <main+0x34c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
	debugPrint(&huart2, "Sent command: ");
 8001a46:	4938      	ldr	r1, [pc, #224]	; (8001b28 <main+0x350>)
 8001a48:	482d      	ldr	r0, [pc, #180]	; (8001b00 <main+0x328>)
 8001a4a:	f7ff fbad 	bl	80011a8 <debugPrint>
	debugPrintln(&huart2, line_buffer);
 8001a4e:	4937      	ldr	r1, [pc, #220]	; (8001b2c <main+0x354>)
 8001a50:	482b      	ldr	r0, [pc, #172]	; (8001b00 <main+0x328>)
 8001a52:	f7ff fac1 	bl	8000fd8 <debugPrintln>
	int i = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	653b      	str	r3, [r7, #80]	; 0x50
	char *p = strtok (line_buffer, " ");
 8001a5a:	4935      	ldr	r1, [pc, #212]	; (8001b30 <main+0x358>)
 8001a5c:	4833      	ldr	r0, [pc, #204]	; (8001b2c <main+0x354>)
 8001a5e:	f008 fa3b 	bl	8009ed8 <strtok>
 8001a62:	64f8      	str	r0, [r7, #76]	; 0x4c
	char *array[4];

	while (p != NULL){
 8001a64:	e00e      	b.n	8001a84 <main+0x2ac>
		array[i++] = p;
 8001a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	653a      	str	r2, [r7, #80]	; 0x50
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001a72:	4413      	add	r3, r2
 8001a74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a76:	f843 2c58 	str.w	r2, [r3, #-88]
		p = strtok (NULL, "/");}
 8001a7a:	492e      	ldr	r1, [pc, #184]	; (8001b34 <main+0x35c>)
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f008 fa2b 	bl	8009ed8 <strtok>
 8001a82:	64f8      	str	r0, [r7, #76]	; 0x4c
	while (p != NULL){
 8001a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ed      	bne.n	8001a66 <main+0x28e>

	if((strncmp(array[0], "??" ,10) == 0) ||  (strncmp(array[0], "help" ,10) == 0) || (strncmp(array[0], "h" ,10) == 0)){
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	220a      	movs	r2, #10
 8001a8e:	492a      	ldr	r1, [pc, #168]	; (8001b38 <main+0x360>)
 8001a90:	4618      	mov	r0, r3
 8001a92:	f007 fbef 	bl	8009274 <strncmp>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d011      	beq.n	8001ac0 <main+0x2e8>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	220a      	movs	r2, #10
 8001aa0:	4926      	ldr	r1, [pc, #152]	; (8001b3c <main+0x364>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f007 fbe6 	bl	8009274 <strncmp>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d008      	beq.n	8001ac0 <main+0x2e8>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	220a      	movs	r2, #10
 8001ab2:	4923      	ldr	r1, [pc, #140]	; (8001b40 <main+0x368>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f007 fbdd 	bl	8009274 <strncmp>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d141      	bne.n	8001b44 <main+0x36c>
		printHELP(&huart2,my_statusValues);}
 8001ac0:	466c      	mov	r4, sp
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001acc:	f107 0310 	add.w	r3, r7, #16
 8001ad0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ad2:	480b      	ldr	r0, [pc, #44]	; (8001b00 <main+0x328>)
 8001ad4:	f7ff fb88 	bl	80011e8 <printHELP>
	if((strncmp(array[0], "??" ,10) == 0) ||  (strncmp(array[0], "help" ,10) == 0) || (strncmp(array[0], "h" ,10) == 0)){
 8001ad8:	e16f      	b.n	8001dba <main+0x5e2>
 8001ada:	bf00      	nop
 8001adc:	f3af 8000 	nop.w
 8001ae0:	00000000 	.word	0x00000000
 8001ae4:	414b7740 	.word	0x414b7740
 8001ae8:	80000000 	.word	0x80000000
 8001aec:	41ead274 	.word	0x41ead274
 8001af0:	200002f0 	.word	0x200002f0
 8001af4:	200003a0 	.word	0x200003a0
 8001af8:	200003ec 	.word	0x200003ec
 8001afc:	2000039c 	.word	0x2000039c
 8001b00:	20000438 	.word	0x20000438
 8001b04:	2000034c 	.word	0x2000034c
 8001b08:	2000039a 	.word	0x2000039a
 8001b0c:	20000010 	.word	0x20000010
 8001b10:	20000014 	.word	0x20000014
 8001b14:	10624dd3 	.word	0x10624dd3
 8001b18:	20000248 	.word	0x20000248
 8001b1c:	20000244 	.word	0x20000244
 8001b20:	2000024c 	.word	0x2000024c
 8001b24:	20000220 	.word	0x20000220
 8001b28:	0800c880 	.word	0x0800c880
 8001b2c:	20000224 	.word	0x20000224
 8001b30:	0800c890 	.word	0x0800c890
 8001b34:	0800c894 	.word	0x0800c894
 8001b38:	0800c898 	.word	0x0800c898
 8001b3c:	0800c89c 	.word	0x0800c89c
 8001b40:	0800c8a4 	.word	0x0800c8a4

	else if(strncmp(array[0], "fs" ,10) == 0){
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	220a      	movs	r2, #10
 8001b48:	4981      	ldr	r1, [pc, #516]	; (8001d50 <main+0x578>)
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f007 fb92 	bl	8009274 <strncmp>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d123      	bne.n	8001b9e <main+0x3c6>
		if (strncmp(array[1], "A" ,10) == 0){
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	220a      	movs	r2, #10
 8001b5a:	497e      	ldr	r1, [pc, #504]	; (8001d54 <main+0x57c>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f007 fb89 	bl	8009274 <strncmp>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d107      	bne.n	8001b78 <main+0x3a0>
			autoFanSpeedMode=true;
 8001b68:	4b7b      	ldr	r3, [pc, #492]	; (8001d58 <main+0x580>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
			debugPrintln(&huart2, "Setting fan speed to Auto");}
 8001b6e:	497b      	ldr	r1, [pc, #492]	; (8001d5c <main+0x584>)
 8001b70:	487b      	ldr	r0, [pc, #492]	; (8001d60 <main+0x588>)
 8001b72:	f7ff fa31 	bl	8000fd8 <debugPrintln>
 8001b76:	e120      	b.n	8001dba <main+0x5e2>
		else{command_value = stringToInt(array[1]);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fc10 	bl	80013a0 <stringToInt>
 8001b80:	4603      	mov	r3, r0
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	4b77      	ldr	r3, [pc, #476]	; (8001d64 <main+0x58c>)
 8001b86:	801a      	strh	r2, [r3, #0]
			setFanSpeed(&huart2, &htim1, command_value);
 8001b88:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <main+0x58c>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4976      	ldr	r1, [pc, #472]	; (8001d68 <main+0x590>)
 8001b90:	4873      	ldr	r0, [pc, #460]	; (8001d60 <main+0x588>)
 8001b92:	f7ff fc37 	bl	8001404 <setFanSpeed>
			autoFanSpeedMode=false;
 8001b96:	4b70      	ldr	r3, [pc, #448]	; (8001d58 <main+0x580>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e10d      	b.n	8001dba <main+0x5e2>
		}
	}

	else if(strncmp(array[0], "mv" ,10) == 0){
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	220a      	movs	r2, #10
 8001ba2:	4972      	ldr	r1, [pc, #456]	; (8001d6c <main+0x594>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f007 fb65 	bl	8009274 <strncmp>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10c      	bne.n	8001bca <main+0x3f2>
		command_value = stringToInt(array[1]);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fbf4 	bl	80013a0 <stringToInt>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b69      	ldr	r3, [pc, #420]	; (8001d64 <main+0x58c>)
 8001bbe:	801a      	strh	r2, [r3, #0]
		minVolt = command_value; }
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <main+0x58c>)
 8001bc2:	881a      	ldrh	r2, [r3, #0]
 8001bc4:	4b6a      	ldr	r3, [pc, #424]	; (8001d70 <main+0x598>)
 8001bc6:	801a      	strh	r2, [r3, #0]
 8001bc8:	e0f7      	b.n	8001dba <main+0x5e2>

	else if(strncmp(array[0], "cc" ,10) == 0){
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	220a      	movs	r2, #10
 8001bce:	4969      	ldr	r1, [pc, #420]	; (8001d74 <main+0x59c>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f007 fb4f 	bl	8009274 <strncmp>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d118      	bne.n	8001c0e <main+0x436>
		if (stringToInt(array[1]) <= 20000){
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fbde 	bl	80013a0 <stringToInt>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001bea:	429a      	cmp	r2, r3
 8001bec:	dc0a      	bgt.n	8001c04 <main+0x42c>
			my_statusValues.setCurrent = stringToInt(array[1]);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fbd5 	bl	80013a0 <stringToInt>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	82fb      	strh	r3, [r7, #22]
			reportStatus = true;
 8001bfc:	4b5e      	ldr	r3, [pc, #376]	; (8001d78 <main+0x5a0>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	e0da      	b.n	8001dba <main+0x5e2>
		}

		else{
			debugPrintln(&huart2, "Requested current is too high...");}
 8001c04:	495d      	ldr	r1, [pc, #372]	; (8001d7c <main+0x5a4>)
 8001c06:	4856      	ldr	r0, [pc, #344]	; (8001d60 <main+0x588>)
 8001c08:	f7ff f9e6 	bl	8000fd8 <debugPrintln>
 8001c0c:	e0d5      	b.n	8001dba <main+0x5e2>
		}

	else if(strncmp(array[0], "cp" ,10) == 0){
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	220a      	movs	r2, #10
 8001c12:	495b      	ldr	r1, [pc, #364]	; (8001d80 <main+0x5a8>)
 8001c14:	4618      	mov	r0, r3
 8001c16:	f007 fb2d 	bl	8009274 <strncmp>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d135      	bne.n	8001c8c <main+0x4b4>
		my_statusValues.setPower = stringToInt(array[1]);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fbbc 	bl	80013a0 <stringToInt>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	833b      	strh	r3, [r7, #24]
		if (my_statusValues.setPower <= 200){
 8001c2e:	8b3b      	ldrh	r3, [r7, #24]
 8001c30:	2bc8      	cmp	r3, #200	; 0xc8
 8001c32:	d826      	bhi.n	8001c82 <main+0x4aa>
			my_statusValues.setCurrent = 1000000.0*my_statusValues.setPower/my_statusValues.measuredVoltage;
 8001c34:	8b3b      	ldrh	r3, [r7, #24]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fc9c 	bl	8000574 <__aeabi_i2d>
 8001c3c:	a342      	add	r3, pc, #264	; (adr r3, 8001d48 <main+0x570>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	f7fe fd01 	bl	8000648 <__aeabi_dmul>
 8001c46:	4603      	mov	r3, r0
 8001c48:	460c      	mov	r4, r1
 8001c4a:	4625      	mov	r5, r4
 8001c4c:	461c      	mov	r4, r3
 8001c4e:	8bbb      	ldrh	r3, [r7, #28]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc8f 	bl	8000574 <__aeabi_i2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	f7fe fe1d 	bl	800089c <__aeabi_ddiv>
 8001c62:	4603      	mov	r3, r0
 8001c64:	460c      	mov	r4, r1
 8001c66:	4618      	mov	r0, r3
 8001c68:	4621      	mov	r1, r4
 8001c6a:	f7fe ffc5 	bl	8000bf8 <__aeabi_d2uiz>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	82fb      	strh	r3, [r7, #22]
			reportStatus = true;
 8001c74:	4b40      	ldr	r3, [pc, #256]	; (8001d78 <main+0x5a0>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
			CW_MODE = true;
 8001c7a:	4b42      	ldr	r3, [pc, #264]	; (8001d84 <main+0x5ac>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	e09b      	b.n	8001dba <main+0x5e2>
		}

		else{
			debugPrintln(&huart2, "Requested power is too high...");}
 8001c82:	4941      	ldr	r1, [pc, #260]	; (8001d88 <main+0x5b0>)
 8001c84:	4836      	ldr	r0, [pc, #216]	; (8001d60 <main+0x588>)
 8001c86:	f7ff f9a7 	bl	8000fd8 <debugPrintln>
 8001c8a:	e096      	b.n	8001dba <main+0x5e2>
		}



	else if(strncmp(array[0], "status" ,10) == 0){
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	220a      	movs	r2, #10
 8001c90:	493e      	ldr	r1, [pc, #248]	; (8001d8c <main+0x5b4>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f007 faee 	bl	8009274 <strncmp>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10e      	bne.n	8001cbc <main+0x4e4>
		printStatus(my_statusValues, &huart2);}
 8001c9e:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <main+0x588>)
 8001ca0:	9303      	str	r3, [sp, #12]
 8001ca2:	466c      	mov	r4, sp
 8001ca4:	f107 0320 	add.w	r3, r7, #32
 8001ca8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb6:	f7ff fc09 	bl	80014cc <printStatus>
 8001cba:	e07e      	b.n	8001dba <main+0x5e2>

	else if((strncmp(array[0], "stop" ,10) == 0) || strncmp(array[0], "s" ,10) == 0){
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	220a      	movs	r2, #10
 8001cc0:	4933      	ldr	r1, [pc, #204]	; (8001d90 <main+0x5b8>)
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f007 fad6 	bl	8009274 <strncmp>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <main+0x508>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	220a      	movs	r2, #10
 8001cd2:	4930      	ldr	r1, [pc, #192]	; (8001d94 <main+0x5bc>)
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f007 facd 	bl	8009274 <strncmp>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d108      	bne.n	8001cf2 <main+0x51a>
		reportStatus = false;
 8001ce0:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <main+0x5a0>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
		my_statusValues.setCurrent = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	82fb      	strh	r3, [r7, #22]
		CW_MODE = false;
 8001cea:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <main+0x5ac>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e063      	b.n	8001dba <main+0x5e2>
	}

	else if(strncmp(array[0], "reset" ,10) == 0){
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	220a      	movs	r2, #10
 8001cf6:	4928      	ldr	r1, [pc, #160]	; (8001d98 <main+0x5c0>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f007 fabb 	bl	8009274 <strncmp>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10f      	bne.n	8001d24 <main+0x54c>
		debugPrintln(&huart2, "Resetting mAh, mWh and time");
 8001d04:	4925      	ldr	r1, [pc, #148]	; (8001d9c <main+0x5c4>)
 8001d06:	4816      	ldr	r0, [pc, #88]	; (8001d60 <main+0x588>)
 8001d08:	f7ff f966 	bl	8000fd8 <debugPrintln>
		my_statusValues.amperehours=0;
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
		my_statusValues.watthours=0;
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
		zeroTimeValue = HAL_GetTick();
 8001d18:	f000 fec8 	bl	8002aac <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <main+0x5c8>)
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e04a      	b.n	8001dba <main+0x5e2>
	}

	else if(strncmp(array[0], "log" ,10) == 0){
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	220a      	movs	r2, #10
 8001d28:	491e      	ldr	r1, [pc, #120]	; (8001da4 <main+0x5cc>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f007 faa2 	bl	8009274 <strncmp>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d13a      	bne.n	8001dac <main+0x5d4>
		statusInterval=stringToInt(array[1]);}
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fb31 	bl	80013a0 <stringToInt>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <main+0x5d0>)
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	e038      	b.n	8001dba <main+0x5e2>
 8001d48:	00000000 	.word	0x00000000
 8001d4c:	412e8480 	.word	0x412e8480
 8001d50:	0800c8a8 	.word	0x0800c8a8
 8001d54:	0800c8ac 	.word	0x0800c8ac
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	0800c8b0 	.word	0x0800c8b0
 8001d60:	20000438 	.word	0x20000438
 8001d64:	2000023a 	.word	0x2000023a
 8001d68:	200003a0 	.word	0x200003a0
 8001d6c:	0800c8cc 	.word	0x0800c8cc
 8001d70:	20000250 	.word	0x20000250
 8001d74:	0800c8d0 	.word	0x0800c8d0
 8001d78:	2000023c 	.word	0x2000023c
 8001d7c:	0800c8d4 	.word	0x0800c8d4
 8001d80:	0800c8f8 	.word	0x0800c8f8
 8001d84:	2000023d 	.word	0x2000023d
 8001d88:	0800c8fc 	.word	0x0800c8fc
 8001d8c:	0800c91c 	.word	0x0800c91c
 8001d90:	0800c924 	.word	0x0800c924
 8001d94:	0800c92c 	.word	0x0800c92c
 8001d98:	0800c930 	.word	0x0800c930
 8001d9c:	0800c938 	.word	0x0800c938
 8001da0:	20000248 	.word	0x20000248
 8001da4:	0800c954 	.word	0x0800c954
 8001da8:	2000000c 	.word	0x2000000c

	else{
		debugPrintln(&huart2, "Unknown command..., showing HELP");
 8001dac:	4950      	ldr	r1, [pc, #320]	; (8001ef0 <main+0x718>)
 8001dae:	4851      	ldr	r0, [pc, #324]	; (8001ef4 <main+0x71c>)
 8001db0:	f7ff f912 	bl	8000fd8 <debugPrintln>
		printHELP(&huart2);}
 8001db4:	484f      	ldr	r0, [pc, #316]	; (8001ef4 <main+0x71c>)
 8001db6:	f7ff fa17 	bl	80011e8 <printHELP>
	memset(&line_buffer, '\0', sizeof(line_buffer));
 8001dba:	220a      	movs	r2, #10
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	484e      	ldr	r0, [pc, #312]	; (8001ef8 <main+0x720>)
 8001dc0:	f006 fbeb 	bl	800859a <memset>
}



	  HAL_GPIO_TogglePin(GPIOB, LED_Pin); //Toggle LED
 8001dc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dc8:	484c      	ldr	r0, [pc, #304]	; (8001efc <main+0x724>)
 8001dca:	f001 fb67 	bl	800349c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, BILED_1_Pin); //Toggle LED
 8001dce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dd6:	f001 fb61 	bl	800349c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, BILED_2_Pin); //Toggle LED
 8001dda:	2120      	movs	r1, #32
 8001ddc:	4847      	ldr	r0, [pc, #284]	; (8001efc <main+0x724>)
 8001dde:	f001 fb5d 	bl	800349c <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA,  DISCHARGE_LED_Pin); //Toggle LED
 8001de2:	2110      	movs	r1, #16
 8001de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de8:	f001 fb58 	bl	800349c <HAL_GPIO_TogglePin>





	  if(reportStatus){
 8001dec:	4b44      	ldr	r3, [pc, #272]	; (8001f00 <main+0x728>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01c      	beq.n	8001e2e <main+0x656>
		  if(HAL_GetTick() - previousMillis >= statusInterval){
 8001df4:	f000 fe5a 	bl	8002aac <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b42      	ldr	r3, [pc, #264]	; (8001f04 <main+0x72c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	1ad2      	subs	r2, r2, r3
 8001e00:	4b41      	ldr	r3, [pc, #260]	; (8001f08 <main+0x730>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d312      	bcc.n	8001e2e <main+0x656>
			  printStatus(my_statusValues, &huart2);
 8001e08:	4b3a      	ldr	r3, [pc, #232]	; (8001ef4 <main+0x71c>)
 8001e0a:	9303      	str	r3, [sp, #12]
 8001e0c:	466c      	mov	r4, sp
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001e1a:	f107 0310 	add.w	r3, r7, #16
 8001e1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e20:	f7ff fb54 	bl	80014cc <printStatus>
				previousMillis = HAL_GetTick();
 8001e24:	f000 fe42 	bl	8002aac <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <main+0x72c>)
 8001e2c:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if (autoFanSpeedMode){
 8001e2e:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <main+0x734>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d004      	beq.n	8001e40 <main+0x668>
		  autoFanSpeed(&htim1, my_statusValues.temperature);
 8001e36:	8abb      	ldrh	r3, [r7, #20]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4835      	ldr	r0, [pc, #212]	; (8001f10 <main+0x738>)
 8001e3c:	f7ff fb0c 	bl	8001458 <autoFanSpeed>
	  }

	  if(my_statusValues.measuredVoltage<minVolt){
 8001e40:	8bba      	ldrh	r2, [r7, #28]
 8001e42:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <main+0x73c>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d20b      	bcs.n	8001e62 <main+0x68a>
			my_statusValues.setCurrent = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	82fb      	strh	r3, [r7, #22]
			reportStatus = false;
 8001e4e:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <main+0x728>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
			BEEP(&htim2);
 8001e54:	4830      	ldr	r0, [pc, #192]	; (8001f18 <main+0x740>)
 8001e56:	f7ff fa53 	bl	8001300 <BEEP>
		  	debugPrintln(&huart2, "Min voltage reached. Stopped discharge");
 8001e5a:	4930      	ldr	r1, [pc, #192]	; (8001f1c <main+0x744>)
 8001e5c:	4825      	ldr	r0, [pc, #148]	; (8001ef4 <main+0x71c>)
 8001e5e:	f7ff f8bb 	bl	8000fd8 <debugPrintln>
	  }


	  if(my_statusValues.measuredPower/1000>maxWatt){
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	4a2e      	ldr	r2, [pc, #184]	; (8001f20 <main+0x748>)
 8001e66:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	4a2d      	ldr	r2, [pc, #180]	; (8001f24 <main+0x74c>)
 8001e6e:	8812      	ldrh	r2, [r2, #0]
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d90b      	bls.n	8001e8c <main+0x6b4>
			my_statusValues.setCurrent = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	82fb      	strh	r3, [r7, #22]
			reportStatus = false;
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <main+0x728>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
			BEEP(&htim2);
 8001e7e:	4826      	ldr	r0, [pc, #152]	; (8001f18 <main+0x740>)
 8001e80:	f7ff fa3e 	bl	8001300 <BEEP>
			debugPrintln(&huart2, "OVERPOWER, Stopped discharge");
 8001e84:	4928      	ldr	r1, [pc, #160]	; (8001f28 <main+0x750>)
 8001e86:	481b      	ldr	r0, [pc, #108]	; (8001ef4 <main+0x71c>)
 8001e88:	f7ff f8a6 	bl	8000fd8 <debugPrintln>
	  }

	  if(my_statusValues.measuredCurrent/1000>maxCurrent){
 8001e8c:	8b7b      	ldrh	r3, [r7, #26]
 8001e8e:	4a24      	ldr	r2, [pc, #144]	; (8001f20 <main+0x748>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <main+0x754>)
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d90b      	bls.n	8001eb8 <main+0x6e0>
			my_statusValues.setCurrent = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	82fb      	strh	r3, [r7, #22]
			reportStatus = false;
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <main+0x728>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
			BEEP(&htim2);
 8001eaa:	481b      	ldr	r0, [pc, #108]	; (8001f18 <main+0x740>)
 8001eac:	f7ff fa28 	bl	8001300 <BEEP>
			debugPrintln(&huart2, "OVERCURRENT, Stopped discharge");
 8001eb0:	491f      	ldr	r1, [pc, #124]	; (8001f30 <main+0x758>)
 8001eb2:	4810      	ldr	r0, [pc, #64]	; (8001ef4 <main+0x71c>)
 8001eb4:	f7ff f890 	bl	8000fd8 <debugPrintln>
	  }


	  if(my_statusValues.temperature>maxTemp*10){
 8001eb8:	8abb      	ldrh	r3, [r7, #20]
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <main+0x75c>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4299      	cmp	r1, r3
 8001ecc:	f77f acbb 	ble.w	8001846 <main+0x6e>
			my_statusValues.setCurrent = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	82fb      	strh	r3, [r7, #22]
			reportStatus = false;
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <main+0x728>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
			BEEP(&htim2);
 8001eda:	480f      	ldr	r0, [pc, #60]	; (8001f18 <main+0x740>)
 8001edc:	f7ff fa10 	bl	8001300 <BEEP>
			HAL_Delay(50);
 8001ee0:	2032      	movs	r0, #50	; 0x32
 8001ee2:	f000 fdef 	bl	8002ac4 <HAL_Delay>

			debugPrintln(&huart2, "OVERTEMP, Stopped discharge");
 8001ee6:	4914      	ldr	r1, [pc, #80]	; (8001f38 <main+0x760>)
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <main+0x71c>)
 8001eea:	f7ff f875 	bl	8000fd8 <debugPrintln>
  {
 8001eee:	e4aa      	b.n	8001846 <main+0x6e>
 8001ef0:	0800c958 	.word	0x0800c958
 8001ef4:	20000438 	.word	0x20000438
 8001ef8:	20000224 	.word	0x20000224
 8001efc:	48000400 	.word	0x48000400
 8001f00:	2000023c 	.word	0x2000023c
 8001f04:	20000240 	.word	0x20000240
 8001f08:	2000000c 	.word	0x2000000c
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	200003a0 	.word	0x200003a0
 8001f14:	20000250 	.word	0x20000250
 8001f18:	200003ec 	.word	0x200003ec
 8001f1c:	0800c97c 	.word	0x0800c97c
 8001f20:	10624dd3 	.word	0x10624dd3
 8001f24:	2000001a 	.word	0x2000001a
 8001f28:	0800c9a4 	.word	0x0800c9a4
 8001f2c:	2000001c 	.word	0x2000001c
 8001f30:	0800c9c4 	.word	0x0800c9c4
 8001f34:	20000018 	.word	0x20000018
 8001f38:	0800c9e4 	.word	0x0800c9e4

08001f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b0a4      	sub	sp, #144	; 0x90
 8001f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f46:	2238      	movs	r2, #56	; 0x38
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f006 fb25 	bl	800859a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f60:	463b      	mov	r3, r7
 8001f62:	2244      	movs	r2, #68	; 0x44
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f006 fb17 	bl	800859a <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f70:	f001 ff9e 	bl	8003eb0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f74:	2301      	movs	r3, #1
 8001f76:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f86:	4618      	mov	r0, r3
 8001f88:	f002 f836 	bl	8003ff8 <HAL_RCC_OscConfig>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001f92:	f000 fac3 	bl	800251c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f96:	230f      	movs	r3, #15
 8001f98:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001faa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fae:	2101      	movs	r1, #1
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 fb39 	bl	8004628 <HAL_RCC_ClockConfig>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001fbc:	f000 faae 	bl	800251c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001fc0:	2342      	movs	r3, #66	; 0x42
 8001fc2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fcc:	463b      	mov	r3, r7
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f002 fd46 	bl	8004a60 <HAL_RCCEx_PeriphCLKConfig>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001fda:	f000 fa9f 	bl	800251c <Error_Handler>
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3790      	adds	r7, #144	; 0x90
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <MX_I2C1_Init+0x74>)
 8001fee:	4a1c      	ldr	r2, [pc, #112]	; (8002060 <MX_I2C1_Init+0x78>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00506682;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <MX_I2C1_Init+0x74>)
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	; (8002064 <MX_I2C1_Init+0x7c>)
 8001ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <MX_I2C1_Init+0x74>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <MX_I2C1_Init+0x74>)
 8002000:	2201      	movs	r2, #1
 8002002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <MX_I2C1_Init+0x74>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <MX_I2C1_Init+0x74>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <MX_I2C1_Init+0x74>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <MX_I2C1_Init+0x74>)
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201c:	4b0f      	ldr	r3, [pc, #60]	; (800205c <MX_I2C1_Init+0x74>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002022:	480e      	ldr	r0, [pc, #56]	; (800205c <MX_I2C1_Init+0x74>)
 8002024:	f001 fa53 	bl	80034ce <HAL_I2C_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800202e:	f000 fa75 	bl	800251c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002032:	2100      	movs	r1, #0
 8002034:	4809      	ldr	r0, [pc, #36]	; (800205c <MX_I2C1_Init+0x74>)
 8002036:	f001 fea3 	bl	8003d80 <HAL_I2CEx_ConfigAnalogFilter>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002040:	f000 fa6c 	bl	800251c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002044:	2100      	movs	r1, #0
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_I2C1_Init+0x74>)
 8002048:	f001 fee5 	bl	8003e16 <HAL_I2CEx_ConfigDigitalFilter>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002052:	f000 fa63 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000034c 	.word	0x2000034c
 8002060:	40005400 	.word	0x40005400
 8002064:	00506682 	.word	0x00506682

08002068 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b09c      	sub	sp, #112	; 0x70
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002088:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
 8002098:	615a      	str	r2, [r3, #20]
 800209a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	2234      	movs	r2, #52	; 0x34
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f006 fa79 	bl	800859a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020a8:	4b45      	ldr	r3, [pc, #276]	; (80021c0 <MX_TIM1_Init+0x158>)
 80020aa:	4a46      	ldr	r2, [pc, #280]	; (80021c4 <MX_TIM1_Init+0x15c>)
 80020ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80020ae:	4b44      	ldr	r3, [pc, #272]	; (80021c0 <MX_TIM1_Init+0x158>)
 80020b0:	220f      	movs	r2, #15
 80020b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b4:	4b42      	ldr	r3, [pc, #264]	; (80021c0 <MX_TIM1_Init+0x158>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80020ba:	4b41      	ldr	r3, [pc, #260]	; (80021c0 <MX_TIM1_Init+0x158>)
 80020bc:	2264      	movs	r2, #100	; 0x64
 80020be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c0:	4b3f      	ldr	r3, [pc, #252]	; (80021c0 <MX_TIM1_Init+0x158>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020c6:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <MX_TIM1_Init+0x158>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020cc:	4b3c      	ldr	r3, [pc, #240]	; (80021c0 <MX_TIM1_Init+0x158>)
 80020ce:	2280      	movs	r2, #128	; 0x80
 80020d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020d2:	483b      	ldr	r0, [pc, #236]	; (80021c0 <MX_TIM1_Init+0x158>)
 80020d4:	f002 feb4 	bl	8004e40 <HAL_TIM_Base_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80020de:	f000 fa1d 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020ec:	4619      	mov	r1, r3
 80020ee:	4834      	ldr	r0, [pc, #208]	; (80021c0 <MX_TIM1_Init+0x158>)
 80020f0:	f003 f970 	bl	80053d4 <HAL_TIM_ConfigClockSource>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80020fa:	f000 fa0f 	bl	800251c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020fe:	4830      	ldr	r0, [pc, #192]	; (80021c0 <MX_TIM1_Init+0x158>)
 8002100:	f002 ff24 	bl	8004f4c <HAL_TIM_PWM_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800210a:	f000 fa07 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800211a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800211e:	4619      	mov	r1, r3
 8002120:	4827      	ldr	r0, [pc, #156]	; (80021c0 <MX_TIM1_Init+0x158>)
 8002122:	f003 fe7d 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800212c:	f000 f9f6 	bl	800251c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002130:	2360      	movs	r3, #96	; 0x60
 8002132:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002138:	2300      	movs	r3, #0
 800213a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800213c:	2300      	movs	r3, #0
 800213e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002144:	2300      	movs	r3, #0
 8002146:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002148:	2300      	movs	r3, #0
 800214a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800214c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002150:	2200      	movs	r2, #0
 8002152:	4619      	mov	r1, r3
 8002154:	481a      	ldr	r0, [pc, #104]	; (80021c0 <MX_TIM1_Init+0x158>)
 8002156:	f003 f82d 	bl	80051b4 <HAL_TIM_PWM_ConfigChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002160:	f000 f9dc 	bl	800251c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800217c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800218a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002194:	2300      	movs	r3, #0
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	4619      	mov	r1, r3
 80021a0:	4807      	ldr	r0, [pc, #28]	; (80021c0 <MX_TIM1_Init+0x158>)
 80021a2:	f003 febf 	bl	8005f24 <HAL_TIMEx_ConfigBreakDeadTime>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 80021ac:	f000 f9b6 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <MX_TIM1_Init+0x158>)
 80021b2:	f000 fa97 	bl	80026e4 <HAL_TIM_MspPostInit>

}
 80021b6:	bf00      	nop
 80021b8:	3770      	adds	r7, #112	; 0x70
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200003a0 	.word	0x200003a0
 80021c4:	40012c00 	.word	0x40012c00

080021c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08e      	sub	sp, #56	; 0x38
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e8:	463b      	mov	r3, r7
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	611a      	str	r2, [r3, #16]
 80021f6:	615a      	str	r2, [r3, #20]
 80021f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <MX_TIM2_Init+0xe8>)
 80021fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002200:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 610;
 8002202:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <MX_TIM2_Init+0xe8>)
 8002204:	f240 2262 	movw	r2, #610	; 0x262
 8002208:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <MX_TIM2_Init+0xe8>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8002210:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <MX_TIM2_Init+0xe8>)
 8002212:	220a      	movs	r2, #10
 8002214:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <MX_TIM2_Init+0xe8>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800221c:	4b24      	ldr	r3, [pc, #144]	; (80022b0 <MX_TIM2_Init+0xe8>)
 800221e:	2280      	movs	r2, #128	; 0x80
 8002220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002222:	4823      	ldr	r0, [pc, #140]	; (80022b0 <MX_TIM2_Init+0xe8>)
 8002224:	f002 fe0c 	bl	8004e40 <HAL_TIM_Base_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800222e:	f000 f975 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800223c:	4619      	mov	r1, r3
 800223e:	481c      	ldr	r0, [pc, #112]	; (80022b0 <MX_TIM2_Init+0xe8>)
 8002240:	f003 f8c8 	bl	80053d4 <HAL_TIM_ConfigClockSource>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800224a:	f000 f967 	bl	800251c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800224e:	4818      	ldr	r0, [pc, #96]	; (80022b0 <MX_TIM2_Init+0xe8>)
 8002250:	f002 fe7c 	bl	8004f4c <HAL_TIM_PWM_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800225a:	f000 f95f 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	4619      	mov	r1, r3
 800226c:	4810      	ldr	r0, [pc, #64]	; (80022b0 <MX_TIM2_Init+0xe8>)
 800226e:	f003 fdd7 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002278:	f000 f950 	bl	800251c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800227c:	2360      	movs	r3, #96	; 0x60
 800227e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002284:	2300      	movs	r3, #0
 8002286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800228c:	463b      	mov	r3, r7
 800228e:	2204      	movs	r2, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4807      	ldr	r0, [pc, #28]	; (80022b0 <MX_TIM2_Init+0xe8>)
 8002294:	f002 ff8e 	bl	80051b4 <HAL_TIM_PWM_ConfigChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800229e:	f000 f93d 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022a2:	4803      	ldr	r0, [pc, #12]	; (80022b0 <MX_TIM2_Init+0xe8>)
 80022a4:	f000 fa1e 	bl	80026e4 <HAL_TIM_MspPostInit>

}
 80022a8:	bf00      	nop
 80022aa:	3738      	adds	r7, #56	; 0x38
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	200003ec 	.word	0x200003ec

080022b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b088      	sub	sp, #32
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ba:	f107 0310 	add.w	r3, r7, #16
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <MX_TIM4_Init+0x94>)
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <MX_TIM4_Init+0x98>)
 80022d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24;
 80022d8:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <MX_TIM4_Init+0x94>)
 80022da:	2218      	movs	r2, #24
 80022dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <MX_TIM4_Init+0x94>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <MX_TIM4_Init+0x94>)
 80022e6:	2263      	movs	r2, #99	; 0x63
 80022e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <MX_TIM4_Init+0x94>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022f0:	4b15      	ldr	r3, [pc, #84]	; (8002348 <MX_TIM4_Init+0x94>)
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022f6:	4814      	ldr	r0, [pc, #80]	; (8002348 <MX_TIM4_Init+0x94>)
 80022f8:	f002 fda2 	bl	8004e40 <HAL_TIM_Base_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002302:	f000 f90b 	bl	800251c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800230c:	f107 0310 	add.w	r3, r7, #16
 8002310:	4619      	mov	r1, r3
 8002312:	480d      	ldr	r0, [pc, #52]	; (8002348 <MX_TIM4_Init+0x94>)
 8002314:	f003 f85e 	bl	80053d4 <HAL_TIM_ConfigClockSource>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800231e:	f000 f8fd 	bl	800251c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	4619      	mov	r1, r3
 800232e:	4806      	ldr	r0, [pc, #24]	; (8002348 <MX_TIM4_Init+0x94>)
 8002330:	f003 fd76 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800233a:	f000 f8ef 	bl	800251c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800233e:	bf00      	nop
 8002340:	3720      	adds	r7, #32
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200002f0 	.word	0x200002f0
 800234c:	40000800 	.word	0x40000800

08002350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002354:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 8002356:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <MX_USART2_UART_Init+0x94>)
 8002358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 800235c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002368:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 800236a:	2200      	movs	r2, #0
 800236c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 8002376:	220c      	movs	r2, #12
 8002378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800237a:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002380:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002386:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 800238e:	2200      	movs	r2, #0
 8002390:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 8002394:	2200      	movs	r2, #0
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002398:	4811      	ldr	r0, [pc, #68]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 800239a:	f003 fe63 	bl	8006064 <HAL_UART_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80023a4:	f000 f8ba 	bl	800251c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023a8:	2100      	movs	r1, #0
 80023aa:	480d      	ldr	r0, [pc, #52]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 80023ac:	f005 ffdb 	bl	8008366 <HAL_UARTEx_SetTxFifoThreshold>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80023b6:	f000 f8b1 	bl	800251c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023ba:	2100      	movs	r1, #0
 80023bc:	4808      	ldr	r0, [pc, #32]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 80023be:	f006 f810 	bl	80083e2 <HAL_UARTEx_SetRxFifoThreshold>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80023c8:	f000 f8a8 	bl	800251c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80023cc:	4804      	ldr	r0, [pc, #16]	; (80023e0 <MX_USART2_UART_Init+0x90>)
 80023ce:	f005 ff91 	bl	80082f4 <HAL_UARTEx_DisableFifoMode>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80023d8:	f000 f8a0 	bl	800251c <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */
  //__HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);

  /* USER CODE END USART2_Init 2 */

}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000438 	.word	0x20000438
 80023e4:	40004400 	.word	0x40004400

080023e8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <MX_DMA_Init+0x50>)
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	4a11      	ldr	r2, [pc, #68]	; (8002438 <MX_DMA_Init+0x50>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	6493      	str	r3, [r2, #72]	; 0x48
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <MX_DMA_Init+0x50>)
 80023fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <MX_DMA_Init+0x50>)
 8002408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240a:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <MX_DMA_Init+0x50>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6493      	str	r3, [r2, #72]	; 0x48
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <MX_DMA_Init+0x50>)
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	200b      	movs	r0, #11
 8002424:	f000 fc4b 	bl	8002cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002428:	200b      	movs	r0, #11
 800242a:	f000 fc62 	bl	8002cf2 <HAL_NVIC_EnableIRQ>

}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000

0800243c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002442:	f107 030c 	add.w	r3, r7, #12
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	609a      	str	r2, [r3, #8]
 800244e:	60da      	str	r2, [r3, #12]
 8002450:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002452:	4b30      	ldr	r3, [pc, #192]	; (8002514 <MX_GPIO_Init+0xd8>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002456:	4a2f      	ldr	r2, [pc, #188]	; (8002514 <MX_GPIO_Init+0xd8>)
 8002458:	f043 0320 	orr.w	r3, r3, #32
 800245c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800245e:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <MX_GPIO_Init+0xd8>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800246a:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <MX_GPIO_Init+0xd8>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	4a29      	ldr	r2, [pc, #164]	; (8002514 <MX_GPIO_Init+0xd8>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002476:	4b27      	ldr	r3, [pc, #156]	; (8002514 <MX_GPIO_Init+0xd8>)
 8002478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <MX_GPIO_Init+0xd8>)
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	4a23      	ldr	r2, [pc, #140]	; (8002514 <MX_GPIO_Init+0xd8>)
 8002488:	f043 0302 	orr.w	r3, r3, #2
 800248c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248e:	4b21      	ldr	r3, [pc, #132]	; (8002514 <MX_GPIO_Init+0xd8>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISCHARGE_LED_Pin|OVERTEMP_Pin|BILED_1_Pin, GPIO_PIN_RESET);
 800249a:	2200      	movs	r2, #0
 800249c:	f44f 6109 	mov.w	r1, #2192	; 0x890
 80024a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024a4:	f000 ffe2 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BILED_2_Pin|LED_Pin, GPIO_PIN_RESET);
 80024a8:	2200      	movs	r2, #0
 80024aa:	f44f 7190 	mov.w	r1, #288	; 0x120
 80024ae:	481a      	ldr	r0, [pc, #104]	; (8002518 <MX_GPIO_Init+0xdc>)
 80024b0:	f000 ffdc 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FANIN_Pin */
  GPIO_InitStruct.Pin = FANIN_Pin;
 80024b4:	2301      	movs	r3, #1
 80024b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b8:	2300      	movs	r3, #0
 80024ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FANIN_GPIO_Port, &GPIO_InitStruct);
 80024c0:	f107 030c 	add.w	r3, r7, #12
 80024c4:	4619      	mov	r1, r3
 80024c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ca:	f000 fe4d 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISCHARGE_LED_Pin OVERTEMP_Pin BILED_1_Pin */
  GPIO_InitStruct.Pin = DISCHARGE_LED_Pin|OVERTEMP_Pin|BILED_1_Pin;
 80024ce:	f44f 6309 	mov.w	r3, #2192	; 0x890
 80024d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e0:	f107 030c 	add.w	r3, r7, #12
 80024e4:	4619      	mov	r1, r3
 80024e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ea:	f000 fe3d 	bl	8003168 <HAL_GPIO_Init>

  /*Configure GPIO pins : BILED_2_Pin LED_Pin */
  GPIO_InitStruct.Pin = BILED_2_Pin|LED_Pin;
 80024ee:	f44f 7390 	mov.w	r3, #288	; 0x120
 80024f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024f4:	2301      	movs	r3, #1
 80024f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002500:	f107 030c 	add.w	r3, r7, #12
 8002504:	4619      	mov	r1, r3
 8002506:	4804      	ldr	r0, [pc, #16]	; (8002518 <MX_GPIO_Init+0xdc>)
 8002508:	f000 fe2e 	bl	8003168 <HAL_GPIO_Init>

}
 800250c:	bf00      	nop
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	48000400 	.word	0x48000400

0800251c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8002536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800253a:	6093      	str	r3, [r2, #8]
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40007000 	.word	0x40007000

0800254c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_MspInit+0x44>)
 8002554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002556:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <HAL_MspInit+0x44>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6613      	str	r3, [r2, #96]	; 0x60
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <HAL_MspInit+0x44>)
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <HAL_MspInit+0x44>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	4a08      	ldr	r2, [pc, #32]	; (8002590 <HAL_MspInit+0x44>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	6593      	str	r3, [r2, #88]	; 0x58
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_MspInit+0x44>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8002582:	f7ff ffd3 	bl	800252c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40021000 	.word	0x40021000

08002594 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a26      	ldr	r2, [pc, #152]	; (800264c <HAL_I2C_MspInit+0xb8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d145      	bne.n	8002642 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b6:	4b26      	ldr	r3, [pc, #152]	; (8002650 <HAL_I2C_MspInit+0xbc>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	4a25      	ldr	r2, [pc, #148]	; (8002650 <HAL_I2C_MspInit+0xbc>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025c2:	4b23      	ldr	r3, [pc, #140]	; (8002650 <HAL_I2C_MspInit+0xbc>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <HAL_I2C_MspInit+0xbc>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d2:	4a1f      	ldr	r2, [pc, #124]	; (8002650 <HAL_I2C_MspInit+0xbc>)
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <HAL_I2C_MspInit+0xbc>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025ec:	2312      	movs	r3, #18
 80025ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f0:	2301      	movs	r3, #1
 80025f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025f8:	2304      	movs	r3, #4
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002606:	f000 fdaf 	bl	8003168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800260e:	2312      	movs	r3, #18
 8002610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002612:	2301      	movs	r3, #1
 8002614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800261a:	2304      	movs	r3, #4
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261e:	f107 0314 	add.w	r3, r7, #20
 8002622:	4619      	mov	r1, r3
 8002624:	480b      	ldr	r0, [pc, #44]	; (8002654 <HAL_I2C_MspInit+0xc0>)
 8002626:	f000 fd9f 	bl	8003168 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_I2C_MspInit+0xbc>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <HAL_I2C_MspInit+0xbc>)
 8002630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002634:	6593      	str	r3, [r2, #88]	; 0x58
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_I2C_MspInit+0xbc>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002642:	bf00      	nop
 8002644:	3728      	adds	r7, #40	; 0x28
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40005400 	.word	0x40005400
 8002650:	40021000 	.word	0x40021000
 8002654:	48000400 	.word	0x48000400

08002658 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <HAL_TIM_Base_MspInit+0x80>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10c      	bne.n	8002684 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_TIM_Base_MspInit+0x84>)
 800266c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266e:	4a1b      	ldr	r2, [pc, #108]	; (80026dc <HAL_TIM_Base_MspInit+0x84>)
 8002670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002674:	6613      	str	r3, [r2, #96]	; 0x60
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HAL_TIM_Base_MspInit+0x84>)
 8002678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002682:	e022      	b.n	80026ca <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268c:	d10c      	bne.n	80026a8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <HAL_TIM_Base_MspInit+0x84>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	4a12      	ldr	r2, [pc, #72]	; (80026dc <HAL_TIM_Base_MspInit+0x84>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6593      	str	r3, [r2, #88]	; 0x58
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_TIM_Base_MspInit+0x84>)
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
}
 80026a6:	e010      	b.n	80026ca <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <HAL_TIM_Base_MspInit+0x88>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d10b      	bne.n	80026ca <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_TIM_Base_MspInit+0x84>)
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	4a09      	ldr	r2, [pc, #36]	; (80026dc <HAL_TIM_Base_MspInit+0x84>)
 80026b8:	f043 0304 	orr.w	r3, r3, #4
 80026bc:	6593      	str	r3, [r2, #88]	; 0x58
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <HAL_TIM_Base_MspInit+0x84>)
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
}
 80026ca:	bf00      	nop
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40000800 	.word	0x40000800

080026e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a23      	ldr	r2, [pc, #140]	; (8002790 <HAL_TIM_MspPostInit+0xac>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d11e      	bne.n	8002744 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_TIM_MspPostInit+0xb0>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	4a22      	ldr	r2, [pc, #136]	; (8002794 <HAL_TIM_MspPostInit+0xb0>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002712:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_TIM_MspPostInit+0xb0>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 800271e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002730:	2306      	movs	r3, #6
 8002732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273e:	f000 fd13 	bl	8003168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002742:	e021      	b.n	8002788 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274c:	d11c      	bne.n	8002788 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_TIM_MspPostInit+0xb0>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	4a10      	ldr	r2, [pc, #64]	; (8002794 <HAL_TIM_MspPostInit+0xb0>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800275a:	4b0e      	ldr	r3, [pc, #56]	; (8002794 <HAL_TIM_MspPostInit+0xb0>)
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8002766:	2302      	movs	r3, #2
 8002768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002776:	2301      	movs	r3, #1
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002784:	f000 fcf0 	bl	8003168 <HAL_GPIO_Init>
}
 8002788:	bf00      	nop
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40012c00 	.word	0x40012c00
 8002794:	40021000 	.word	0x40021000

08002798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a30      	ldr	r2, [pc, #192]	; (8002878 <HAL_UART_MspInit+0xe0>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d159      	bne.n	800286e <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ba:	4b30      	ldr	r3, [pc, #192]	; (800287c <HAL_UART_MspInit+0xe4>)
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	4a2f      	ldr	r2, [pc, #188]	; (800287c <HAL_UART_MspInit+0xe4>)
 80027c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c4:	6593      	str	r3, [r2, #88]	; 0x58
 80027c6:	4b2d      	ldr	r3, [pc, #180]	; (800287c <HAL_UART_MspInit+0xe4>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	4b2a      	ldr	r3, [pc, #168]	; (800287c <HAL_UART_MspInit+0xe4>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	4a29      	ldr	r2, [pc, #164]	; (800287c <HAL_UART_MspInit+0xe4>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027de:	4b27      	ldr	r3, [pc, #156]	; (800287c <HAL_UART_MspInit+0xe4>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027ea:	230c      	movs	r3, #12
 80027ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027fa:	2307      	movs	r3, #7
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4619      	mov	r1, r3
 8002804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002808:	f000 fcae 	bl	8003168 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800280c:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <HAL_UART_MspInit+0xe8>)
 800280e:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <HAL_UART_MspInit+0xec>)
 8002810:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002812:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_UART_MspInit+0xe8>)
 8002814:	221a      	movs	r2, #26
 8002816:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_UART_MspInit+0xe8>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281e:	4b18      	ldr	r3, [pc, #96]	; (8002880 <HAL_UART_MspInit+0xe8>)
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_UART_MspInit+0xe8>)
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <HAL_UART_MspInit+0xe8>)
 800282c:	2200      	movs	r2, #0
 800282e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002830:	4b13      	ldr	r3, [pc, #76]	; (8002880 <HAL_UART_MspInit+0xe8>)
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_UART_MspInit+0xe8>)
 8002838:	2200      	movs	r2, #0
 800283a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_UART_MspInit+0xe8>)
 800283e:	2200      	movs	r2, #0
 8002840:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002842:	480f      	ldr	r0, [pc, #60]	; (8002880 <HAL_UART_MspInit+0xe8>)
 8002844:	f000 fa70 	bl	8002d28 <HAL_DMA_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_UART_MspInit+0xba>
    {
      Error_Handler();
 800284e:	f7ff fe65 	bl	800251c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a0a      	ldr	r2, [pc, #40]	; (8002880 <HAL_UART_MspInit+0xe8>)
 8002856:	679a      	str	r2, [r3, #120]	; 0x78
 8002858:	4a09      	ldr	r2, [pc, #36]	; (8002880 <HAL_UART_MspInit+0xe8>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2100      	movs	r1, #0
 8002862:	2026      	movs	r0, #38	; 0x26
 8002864:	f000 fa2b 	bl	8002cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002868:	2026      	movs	r0, #38	; 0x26
 800286a:	f000 fa42 	bl	8002cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800286e:	bf00      	nop
 8002870:	3728      	adds	r7, #40	; 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40004400 	.word	0x40004400
 800287c:	40021000 	.word	0x40021000
 8002880:	20000290 	.word	0x20000290
 8002884:	40020008 	.word	0x40020008

08002888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002896:	b480      	push	{r7}
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800289a:	e7fe      	b.n	800289a <HardFault_Handler+0x4>

0800289c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a0:	e7fe      	b.n	80028a0 <MemManage_Handler+0x4>

080028a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a2:	b480      	push	{r7}
 80028a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a6:	e7fe      	b.n	80028a6 <BusFault_Handler+0x4>

080028a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028ac:	e7fe      	b.n	80028ac <UsageFault_Handler+0x4>

080028ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028dc:	f000 f8d4 	bl	8002a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80028e8:	4802      	ldr	r0, [pc, #8]	; (80028f4 <DMA1_Channel1_IRQHandler+0x10>)
 80028ea:	f000 fb2c 	bl	8002f46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028ee:	bf00      	nop
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000290 	.word	0x20000290

080028f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <USART2_IRQHandler+0x10>)
 80028fe:	f003 fd5d 	bl	80063bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000438 	.word	0x20000438

0800290c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <_sbrk+0x50>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <_sbrk+0x16>
		heap_end = &end;
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <_sbrk+0x50>)
 800291e:	4a10      	ldr	r2, [pc, #64]	; (8002960 <_sbrk+0x54>)
 8002920:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <_sbrk+0x50>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <_sbrk+0x50>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4413      	add	r3, r2
 8002930:	466a      	mov	r2, sp
 8002932:	4293      	cmp	r3, r2
 8002934:	d907      	bls.n	8002946 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002936:	f005 fdfb 	bl	8008530 <__errno>
 800293a:	4602      	mov	r2, r0
 800293c:	230c      	movs	r3, #12
 800293e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002940:	f04f 33ff 	mov.w	r3, #4294967295
 8002944:	e006      	b.n	8002954 <_sbrk+0x48>
	}

	heap_end += incr;
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <_sbrk+0x50>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	4a03      	ldr	r2, [pc, #12]	; (800295c <_sbrk+0x50>)
 8002950:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002952:	68fb      	ldr	r3, [r7, #12]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000258 	.word	0x20000258
 8002960:	200004d0 	.word	0x200004d0

08002964 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <SystemInit+0x28>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	4a07      	ldr	r2, [pc, #28]	; (800298c <SystemInit+0x28>)
 8002970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <SystemInit+0x28>)
 800297a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800297e:	609a      	str	r2, [r3, #8]
#endif
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002990:	480d      	ldr	r0, [pc, #52]	; (80029c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002992:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002994:	480d      	ldr	r0, [pc, #52]	; (80029cc <LoopForever+0x6>)
  ldr r1, =_edata
 8002996:	490e      	ldr	r1, [pc, #56]	; (80029d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002998:	4a0e      	ldr	r2, [pc, #56]	; (80029d4 <LoopForever+0xe>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800299c:	e002      	b.n	80029a4 <LoopCopyDataInit>

0800299e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800299e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029a2:	3304      	adds	r3, #4

080029a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a8:	d3f9      	bcc.n	800299e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029aa:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029ac:	4c0b      	ldr	r4, [pc, #44]	; (80029dc <LoopForever+0x16>)
  movs r3, #0
 80029ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029b0:	e001      	b.n	80029b6 <LoopFillZerobss>

080029b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029b4:	3204      	adds	r2, #4

080029b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b8:	d3fb      	bcc.n	80029b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029ba:	f7ff ffd3 	bl	8002964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029be:	f005 fdbd 	bl	800853c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029c2:	f7fe ff09 	bl	80017d8 <main>

080029c6 <LoopForever>:

LoopForever:
    b LoopForever
 80029c6:	e7fe      	b.n	80029c6 <LoopForever>
  ldr   r0, =_estack
 80029c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80029cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029d0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80029d4:	0800ccf4 	.word	0x0800ccf4
  ldr r2, =_sbss
 80029d8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80029dc:	200004cc 	.word	0x200004cc

080029e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029e0:	e7fe      	b.n	80029e0 <ADC1_2_IRQHandler>

080029e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029e8:	2300      	movs	r3, #0
 80029ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029ec:	2003      	movs	r0, #3
 80029ee:	f000 f95b 	bl	8002ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029f2:	2000      	movs	r0, #0
 80029f4:	f000 f80e 	bl	8002a14 <HAL_InitTick>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	71fb      	strb	r3, [r7, #7]
 8002a02:	e001      	b.n	8002a08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a04:	f7ff fda2 	bl	800254c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a08:	79fb      	ldrb	r3, [r7, #7]

}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_InitTick+0x68>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d022      	beq.n	8002a6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a28:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <HAL_InitTick+0x6c>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_InitTick+0x68>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 f966 	bl	8002d0e <HAL_SYSTICK_Config>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10f      	bne.n	8002a68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b0f      	cmp	r3, #15
 8002a4c:	d809      	bhi.n	8002a62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	f04f 30ff 	mov.w	r0, #4294967295
 8002a56:	f000 f932 	bl	8002cbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <HAL_InitTick+0x70>)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6013      	str	r3, [r2, #0]
 8002a60:	e007      	b.n	8002a72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	e004      	b.n	8002a72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
 8002a6c:	e001      	b.n	8002a72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000028 	.word	0x20000028
 8002a80:	20000020 	.word	0x20000020
 8002a84:	20000024 	.word	0x20000024

08002a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <HAL_IncTick+0x1c>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_IncTick+0x20>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4413      	add	r3, r2
 8002a96:	4a03      	ldr	r2, [pc, #12]	; (8002aa4 <HAL_IncTick+0x1c>)
 8002a98:	6013      	str	r3, [r2, #0]
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	200004c4 	.word	0x200004c4
 8002aa8:	20000028 	.word	0x20000028

08002aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_GetTick+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	200004c4 	.word	0x200004c4

08002ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002acc:	f7ff ffee 	bl	8002aac <HAL_GetTick>
 8002ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d004      	beq.n	8002ae8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <HAL_Delay+0x40>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ae8:	bf00      	nop
 8002aea:	f7ff ffdf 	bl	8002aac <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d8f7      	bhi.n	8002aea <HAL_Delay+0x26>
  {
  }
}
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000028 	.word	0x20000028

08002b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b24:	4013      	ands	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3a:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	60d3      	str	r3, [r2, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <__NVIC_GetPriorityGrouping+0x18>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	f003 0307 	and.w	r3, r3, #7
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	db0b      	blt.n	8002b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	f003 021f 	and.w	r2, r3, #31
 8002b84:	4907      	ldr	r1, [pc, #28]	; (8002ba4 <__NVIC_EnableIRQ+0x38>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	2001      	movs	r0, #1
 8002b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000e100 	.word	0xe000e100

08002ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	6039      	str	r1, [r7, #0]
 8002bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	db0a      	blt.n	8002bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	490c      	ldr	r1, [pc, #48]	; (8002bf4 <__NVIC_SetPriority+0x4c>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	0112      	lsls	r2, r2, #4
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	440b      	add	r3, r1
 8002bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd0:	e00a      	b.n	8002be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4908      	ldr	r1, [pc, #32]	; (8002bf8 <__NVIC_SetPriority+0x50>)
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	3b04      	subs	r3, #4
 8002be0:	0112      	lsls	r2, r2, #4
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	440b      	add	r3, r1
 8002be6:	761a      	strb	r2, [r3, #24]
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000e100 	.word	0xe000e100
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b089      	sub	sp, #36	; 0x24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f1c3 0307 	rsb	r3, r3, #7
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	bf28      	it	cs
 8002c1a:	2304      	movcs	r3, #4
 8002c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3304      	adds	r3, #4
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d902      	bls.n	8002c2c <NVIC_EncodePriority+0x30>
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3b03      	subs	r3, #3
 8002c2a:	e000      	b.n	8002c2e <NVIC_EncodePriority+0x32>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	f04f 32ff 	mov.w	r2, #4294967295
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	401a      	ands	r2, r3
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c44:	f04f 31ff 	mov.w	r1, #4294967295
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	43d9      	mvns	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c54:	4313      	orrs	r3, r2
         );
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3724      	adds	r7, #36	; 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c74:	d301      	bcc.n	8002c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00f      	b.n	8002c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <SysTick_Config+0x40>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c82:	210f      	movs	r1, #15
 8002c84:	f04f 30ff 	mov.w	r0, #4294967295
 8002c88:	f7ff ff8e 	bl	8002ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <SysTick_Config+0x40>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c92:	4b04      	ldr	r3, [pc, #16]	; (8002ca4 <SysTick_Config+0x40>)
 8002c94:	2207      	movs	r2, #7
 8002c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	e000e010 	.word	0xe000e010

08002ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff ff29 	bl	8002b08 <__NVIC_SetPriorityGrouping>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ccc:	f7ff ff40 	bl	8002b50 <__NVIC_GetPriorityGrouping>
 8002cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68b9      	ldr	r1, [r7, #8]
 8002cd6:	6978      	ldr	r0, [r7, #20]
 8002cd8:	f7ff ff90 	bl	8002bfc <NVIC_EncodePriority>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff5f 	bl	8002ba8 <__NVIC_SetPriority>
}
 8002cea:	bf00      	nop
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff ff33 	bl	8002b6c <__NVIC_EnableIRQ>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffa4 	bl	8002c64 <SysTick_Config>
 8002d1c:	4603      	mov	r3, r0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e08d      	b.n	8002e56 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_DMA_Init+0x138>)
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d80f      	bhi.n	8002d66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4b45      	ldr	r3, [pc, #276]	; (8002e64 <HAL_DMA_Init+0x13c>)
 8002d4e:	4413      	add	r3, r2
 8002d50:	4a45      	ldr	r2, [pc, #276]	; (8002e68 <HAL_DMA_Init+0x140>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	091b      	lsrs	r3, r3, #4
 8002d58:	009a      	lsls	r2, r3, #2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a42      	ldr	r2, [pc, #264]	; (8002e6c <HAL_DMA_Init+0x144>)
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40
 8002d64:	e00e      	b.n	8002d84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <HAL_DMA_Init+0x148>)
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a3d      	ldr	r2, [pc, #244]	; (8002e68 <HAL_DMA_Init+0x140>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	009a      	lsls	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a3c      	ldr	r2, [pc, #240]	; (8002e74 <HAL_DMA_Init+0x14c>)
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002da8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f964 	bl	80030a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de4:	d102      	bne.n	8002dec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e00:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d010      	beq.n	8002e2c <HAL_DMA_Init+0x104>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d80c      	bhi.n	8002e2c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f984 	bl	8003120 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	e008      	b.n	8002e3e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40020407 	.word	0x40020407
 8002e64:	bffdfff8 	.word	0xbffdfff8
 8002e68:	cccccccd 	.word	0xcccccccd
 8002e6c:	40020000 	.word	0x40020000
 8002e70:	bffdfbf8 	.word	0xbffdfbf8
 8002e74:	40020400 	.word	0x40020400

08002e78 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d00d      	beq.n	8002eac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2204      	movs	r2, #4
 8002e94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
 8002eaa:	e047      	b.n	8002f3c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 020e 	bic.w	r2, r2, #14
 8002eba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	f003 021f 	and.w	r2, r3, #31
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	2101      	movs	r1, #1
 8002eea:	fa01 f202 	lsl.w	r2, r1, r2
 8002eee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ef8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00c      	beq.n	8002f1c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f10:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f1a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
    }
  }
  return status;
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2204      	movs	r2, #4
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d026      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x7a>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d021      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0320 	and.w	r3, r3, #32
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d107      	bne.n	8002f9a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0204 	bic.w	r2, r2, #4
 8002f98:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f003 021f 	and.w	r2, r3, #31
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	2104      	movs	r1, #4
 8002fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d071      	beq.n	800309a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002fbe:	e06c      	b.n	800309a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	2202      	movs	r2, #2
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d02e      	beq.n	8003032 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d029      	beq.n	8003032 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10b      	bne.n	8003004 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 020a 	bic.w	r2, r2, #10
 8002ffa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003008:	f003 021f 	and.w	r2, r3, #31
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	2102      	movs	r1, #2
 8003012:	fa01 f202 	lsl.w	r2, r1, r2
 8003016:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d038      	beq.n	800309a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003030:	e033      	b.n	800309a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2208      	movs	r2, #8
 800303c:	409a      	lsls	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d02a      	beq.n	800309c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d025      	beq.n	800309c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 020e 	bic.w	r2, r2, #14
 800305e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	f003 021f 	and.w	r2, r3, #31
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f202 	lsl.w	r2, r1, r2
 8003072:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308e:	2b00      	cmp	r3, #0
 8003090:	d004      	beq.n	800309c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800309a:	bf00      	nop
 800309c:	bf00      	nop
}
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b16      	ldr	r3, [pc, #88]	; (800310c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d802      	bhi.n	80030be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80030b8:	4b15      	ldr	r3, [pc, #84]	; (8003110 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	e001      	b.n	80030c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80030be:	4b15      	ldr	r3, [pc, #84]	; (8003114 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80030c0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	3b08      	subs	r3, #8
 80030ce:	4a12      	ldr	r2, [pc, #72]	; (8003118 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	009a      	lsls	r2, r3, #2
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4413      	add	r3, r2
 80030e4:	461a      	mov	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a0b      	ldr	r2, [pc, #44]	; (800311c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80030ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	2201      	movs	r2, #1
 80030f8:	409a      	lsls	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40020407 	.word	0x40020407
 8003110:	40020800 	.word	0x40020800
 8003114:	40020820 	.word	0x40020820
 8003118:	cccccccd 	.word	0xcccccccd
 800311c:	40020880 	.word	0x40020880

08003120 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	461a      	mov	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a08      	ldr	r2, [pc, #32]	; (8003164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003142:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	3b01      	subs	r3, #1
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	2201      	movs	r2, #1
 800314e:	409a      	lsls	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	1000823f 	.word	0x1000823f
 8003164:	40020940 	.word	0x40020940

08003168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003176:	e15a      	b.n	800342e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2101      	movs	r1, #1
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	4013      	ands	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 814c 	beq.w	8003428 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d00b      	beq.n	80031b0 <HAL_GPIO_Init+0x48>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d007      	beq.n	80031b0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a4:	2b11      	cmp	r3, #17
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b12      	cmp	r3, #18
 80031ae:	d130      	bne.n	8003212 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031e6:	2201      	movs	r2, #1
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	091b      	lsrs	r3, r3, #4
 80031fc:	f003 0201 	and.w	r2, r3, #1
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2203      	movs	r2, #3
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_Init+0xea>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b12      	cmp	r3, #18
 8003250:	d123      	bne.n	800329a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	08da      	lsrs	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3208      	adds	r2, #8
 800325a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	220f      	movs	r2, #15
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	08da      	lsrs	r2, r3, #3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3208      	adds	r2, #8
 8003294:	6939      	ldr	r1, [r7, #16]
 8003296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	2203      	movs	r2, #3
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 0203 	and.w	r2, r3, #3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 80a6 	beq.w	8003428 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032dc:	4b5b      	ldr	r3, [pc, #364]	; (800344c <HAL_GPIO_Init+0x2e4>)
 80032de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e0:	4a5a      	ldr	r2, [pc, #360]	; (800344c <HAL_GPIO_Init+0x2e4>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	6613      	str	r3, [r2, #96]	; 0x60
 80032e8:	4b58      	ldr	r3, [pc, #352]	; (800344c <HAL_GPIO_Init+0x2e4>)
 80032ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f4:	4a56      	ldr	r2, [pc, #344]	; (8003450 <HAL_GPIO_Init+0x2e8>)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	089b      	lsrs	r3, r3, #2
 80032fa:	3302      	adds	r3, #2
 80032fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 0303 	and.w	r3, r3, #3
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	220f      	movs	r2, #15
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	43db      	mvns	r3, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800331e:	d01f      	beq.n	8003360 <HAL_GPIO_Init+0x1f8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a4c      	ldr	r2, [pc, #304]	; (8003454 <HAL_GPIO_Init+0x2ec>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d019      	beq.n	800335c <HAL_GPIO_Init+0x1f4>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a4b      	ldr	r2, [pc, #300]	; (8003458 <HAL_GPIO_Init+0x2f0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d013      	beq.n	8003358 <HAL_GPIO_Init+0x1f0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a4a      	ldr	r2, [pc, #296]	; (800345c <HAL_GPIO_Init+0x2f4>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00d      	beq.n	8003354 <HAL_GPIO_Init+0x1ec>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a49      	ldr	r2, [pc, #292]	; (8003460 <HAL_GPIO_Init+0x2f8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d007      	beq.n	8003350 <HAL_GPIO_Init+0x1e8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a48      	ldr	r2, [pc, #288]	; (8003464 <HAL_GPIO_Init+0x2fc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d101      	bne.n	800334c <HAL_GPIO_Init+0x1e4>
 8003348:	2305      	movs	r3, #5
 800334a:	e00a      	b.n	8003362 <HAL_GPIO_Init+0x1fa>
 800334c:	2306      	movs	r3, #6
 800334e:	e008      	b.n	8003362 <HAL_GPIO_Init+0x1fa>
 8003350:	2304      	movs	r3, #4
 8003352:	e006      	b.n	8003362 <HAL_GPIO_Init+0x1fa>
 8003354:	2303      	movs	r3, #3
 8003356:	e004      	b.n	8003362 <HAL_GPIO_Init+0x1fa>
 8003358:	2302      	movs	r3, #2
 800335a:	e002      	b.n	8003362 <HAL_GPIO_Init+0x1fa>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <HAL_GPIO_Init+0x1fa>
 8003360:	2300      	movs	r3, #0
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	f002 0203 	and.w	r2, r2, #3
 8003368:	0092      	lsls	r2, r2, #2
 800336a:	4093      	lsls	r3, r2
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003372:	4937      	ldr	r1, [pc, #220]	; (8003450 <HAL_GPIO_Init+0x2e8>)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	3302      	adds	r3, #2
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003380:	4b39      	ldr	r3, [pc, #228]	; (8003468 <HAL_GPIO_Init+0x300>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033a4:	4a30      	ldr	r2, [pc, #192]	; (8003468 <HAL_GPIO_Init+0x300>)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80033aa:	4b2f      	ldr	r3, [pc, #188]	; (8003468 <HAL_GPIO_Init+0x300>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033ce:	4a26      	ldr	r2, [pc, #152]	; (8003468 <HAL_GPIO_Init+0x300>)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033d4:	4b24      	ldr	r3, [pc, #144]	; (8003468 <HAL_GPIO_Init+0x300>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	43db      	mvns	r3, r3
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033f8:	4a1b      	ldr	r2, [pc, #108]	; (8003468 <HAL_GPIO_Init+0x300>)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_GPIO_Init+0x300>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	43db      	mvns	r3, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4013      	ands	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003422:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_GPIO_Init+0x300>)
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	3301      	adds	r3, #1
 800342c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	f47f ae9d 	bne.w	8003178 <HAL_GPIO_Init+0x10>
  }
}
 800343e:	bf00      	nop
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000
 8003450:	40010000 	.word	0x40010000
 8003454:	48000400 	.word	0x48000400
 8003458:	48000800 	.word	0x48000800
 800345c:	48000c00 	.word	0x48000c00
 8003460:	48001000 	.word	0x48001000
 8003464:	48001400 	.word	0x48001400
 8003468:	40010400 	.word	0x40010400

0800346c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
 8003478:	4613      	mov	r3, r2
 800347a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800347c:	787b      	ldrb	r3, [r7, #1]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003488:	e002      	b.n	8003490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	887b      	ldrh	r3, [r7, #2]
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034b4:	887a      	ldrh	r2, [r7, #2]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80034ba:	e002      	b.n	80034c2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034bc:	887a      	ldrh	r2, [r7, #2]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	619a      	str	r2, [r3, #24]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e081      	b.n	80035e4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d106      	bne.n	80034fa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff f84d 	bl	8002594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2224      	movs	r2, #36	; 0x24
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800351e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800352e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d107      	bne.n	8003548 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	e006      	b.n	8003556 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003554:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d104      	bne.n	8003568 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003566:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800358a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	ea42 0103 	orr.w	r1, r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	021a      	lsls	r2, r3, #8
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69d9      	ldr	r1, [r3, #28]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1a      	ldr	r2, [r3, #32]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	461a      	mov	r2, r3
 80035f8:	460b      	mov	r3, r1
 80035fa:	817b      	strh	r3, [r7, #10]
 80035fc:	4613      	mov	r3, r2
 80035fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b20      	cmp	r3, #32
 800360a:	f040 80da 	bne.w	80037c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_I2C_Master_Transmit+0x30>
 8003618:	2302      	movs	r3, #2
 800361a:	e0d3      	b.n	80037c4 <HAL_I2C_Master_Transmit+0x1d8>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003624:	f7ff fa42 	bl	8002aac <HAL_GetTick>
 8003628:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2319      	movs	r3, #25
 8003630:	2201      	movs	r2, #1
 8003632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 f9e6 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0be      	b.n	80037c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2221      	movs	r2, #33	; 0x21
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2210      	movs	r2, #16
 8003652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	893a      	ldrh	r2, [r7, #8]
 8003666:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003672:	b29b      	uxth	r3, r3
 8003674:	2bff      	cmp	r3, #255	; 0xff
 8003676:	d90e      	bls.n	8003696 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	22ff      	movs	r2, #255	; 0xff
 800367c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003682:	b2da      	uxtb	r2, r3
 8003684:	8979      	ldrh	r1, [r7, #10]
 8003686:	4b51      	ldr	r3, [pc, #324]	; (80037cc <HAL_I2C_Master_Transmit+0x1e0>)
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 fb48 	bl	8003d24 <I2C_TransferConfig>
 8003694:	e06c      	b.n	8003770 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	8979      	ldrh	r1, [r7, #10]
 80036a8:	4b48      	ldr	r3, [pc, #288]	; (80037cc <HAL_I2C_Master_Transmit+0x1e0>)
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fb37 	bl	8003d24 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80036b6:	e05b      	b.n	8003770 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	6a39      	ldr	r1, [r7, #32]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f9e3 	bl	8003a88 <I2C_WaitOnTXISFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e07b      	b.n	80037c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	781a      	ldrb	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d034      	beq.n	8003770 <HAL_I2C_Master_Transmit+0x184>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d130      	bne.n	8003770 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	2200      	movs	r2, #0
 8003716:	2180      	movs	r1, #128	; 0x80
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f975 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e04d      	b.n	80037c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2bff      	cmp	r3, #255	; 0xff
 8003730:	d90e      	bls.n	8003750 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	22ff      	movs	r2, #255	; 0xff
 8003736:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373c:	b2da      	uxtb	r2, r3
 800373e:	8979      	ldrh	r1, [r7, #10]
 8003740:	2300      	movs	r3, #0
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 faeb 	bl	8003d24 <I2C_TransferConfig>
 800374e:	e00f      	b.n	8003770 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	b2da      	uxtb	r2, r3
 8003760:	8979      	ldrh	r1, [r7, #10]
 8003762:	2300      	movs	r3, #0
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 fada 	bl	8003d24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d19e      	bne.n	80036b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	6a39      	ldr	r1, [r7, #32]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f9c2 	bl	8003b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e01a      	b.n	80037c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2220      	movs	r2, #32
 8003794:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80037a2:	400b      	ands	r3, r1
 80037a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
  }
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	80002000 	.word	0x80002000
 80037d0:	fe00e800 	.word	0xfe00e800

080037d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	607a      	str	r2, [r7, #4]
 80037de:	461a      	mov	r2, r3
 80037e0:	460b      	mov	r3, r1
 80037e2:	817b      	strh	r3, [r7, #10]
 80037e4:	4613      	mov	r3, r2
 80037e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	f040 80db 	bne.w	80039ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_I2C_Master_Receive+0x30>
 8003800:	2302      	movs	r3, #2
 8003802:	e0d4      	b.n	80039ae <HAL_I2C_Master_Receive+0x1da>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800380c:	f7ff f94e 	bl	8002aac <HAL_GetTick>
 8003810:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2319      	movs	r3, #25
 8003818:	2201      	movs	r2, #1
 800381a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f8f2 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e0bf      	b.n	80039ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2222      	movs	r2, #34	; 0x22
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2210      	movs	r2, #16
 800383a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	893a      	ldrh	r2, [r7, #8]
 800384e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	2bff      	cmp	r3, #255	; 0xff
 800385e:	d90e      	bls.n	800387e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	22ff      	movs	r2, #255	; 0xff
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386a:	b2da      	uxtb	r2, r3
 800386c:	8979      	ldrh	r1, [r7, #10]
 800386e:	4b52      	ldr	r3, [pc, #328]	; (80039b8 <HAL_I2C_Master_Receive+0x1e4>)
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fa54 	bl	8003d24 <I2C_TransferConfig>
 800387c:	e06d      	b.n	800395a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	b2da      	uxtb	r2, r3
 800388e:	8979      	ldrh	r1, [r7, #10]
 8003890:	4b49      	ldr	r3, [pc, #292]	; (80039b8 <HAL_I2C_Master_Receive+0x1e4>)
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fa43 	bl	8003d24 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800389e:	e05c      	b.n	800395a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	6a39      	ldr	r1, [r7, #32]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f96b 	bl	8003b80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e07c      	b.n	80039ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d034      	beq.n	800395a <HAL_I2C_Master_Receive+0x186>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d130      	bne.n	800395a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	2200      	movs	r2, #0
 8003900:	2180      	movs	r1, #128	; 0x80
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f880 	bl	8003a08 <I2C_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e04d      	b.n	80039ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	2bff      	cmp	r3, #255	; 0xff
 800391a:	d90e      	bls.n	800393a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	22ff      	movs	r2, #255	; 0xff
 8003920:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003926:	b2da      	uxtb	r2, r3
 8003928:	8979      	ldrh	r1, [r7, #10]
 800392a:	2300      	movs	r3, #0
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f9f6 	bl	8003d24 <I2C_TransferConfig>
 8003938:	e00f      	b.n	800395a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	b2da      	uxtb	r2, r3
 800394a:	8979      	ldrh	r1, [r7, #10]
 800394c:	2300      	movs	r3, #0
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 f9e5 	bl	8003d24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d19d      	bne.n	80038a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	6a39      	ldr	r1, [r7, #32]
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f8cd 	bl	8003b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e01a      	b.n	80039ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2220      	movs	r2, #32
 800397e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6859      	ldr	r1, [r3, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <HAL_I2C_Master_Receive+0x1e8>)
 800398c:	400b      	ands	r3, r1
 800398e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	e000      	b.n	80039ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80039ac:	2302      	movs	r3, #2
  }
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	80002400 	.word	0x80002400
 80039bc:	fe00e800 	.word	0xfe00e800

080039c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d103      	bne.n	80039de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2200      	movs	r2, #0
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d007      	beq.n	80039fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699a      	ldr	r2, [r3, #24]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	619a      	str	r2, [r3, #24]
  }
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	4613      	mov	r3, r2
 8003a16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a18:	e022      	b.n	8003a60 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d01e      	beq.n	8003a60 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7ff f843 	bl	8002aac <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d113      	bne.n	8003a60 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	f043 0220 	orr.w	r2, r3, #32
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e00f      	b.n	8003a80 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d0cd      	beq.n	8003a1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a94:	e02c      	b.n	8003af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f8dc 	bl	8003c58 <I2C_IsAcknowledgeFailed>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e02a      	b.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d01e      	beq.n	8003af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab2:	f7fe fffb 	bl	8002aac <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d302      	bcc.n	8003ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d113      	bne.n	8003af0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003acc:	f043 0220 	orr.w	r2, r3, #32
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e007      	b.n	8003b00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d1cb      	bne.n	8003a96 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b14:	e028      	b.n	8003b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f89c 	bl	8003c58 <I2C_IsAcknowledgeFailed>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e026      	b.n	8003b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2a:	f7fe ffbf 	bl	8002aac <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d302      	bcc.n	8003b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d113      	bne.n	8003b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e007      	b.n	8003b78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d1cf      	bne.n	8003b16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b8c:	e055      	b.n	8003c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 f860 	bl	8003c58 <I2C_IsAcknowledgeFailed>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e053      	b.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d129      	bne.n	8003c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d105      	bne.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e03f      	b.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6859      	ldr	r1, [r3, #4]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003bde:	400b      	ands	r3, r1
 8003be0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e022      	b.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c04:	f7fe ff52 	bl	8002aac <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d302      	bcc.n	8003c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10f      	bne.n	8003c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	f043 0220 	orr.w	r2, r3, #32
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e007      	b.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d1a2      	bne.n	8003b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	fe00e800 	.word	0xfe00e800

08003c58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f003 0310 	and.w	r3, r3, #16
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d151      	bne.n	8003d16 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c72:	e022      	b.n	8003cba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7a:	d01e      	beq.n	8003cba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7c:	f7fe ff16 	bl	8002aac <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d302      	bcc.n	8003c92 <I2C_IsAcknowledgeFailed+0x3a>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d113      	bne.n	8003cba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c96:	f043 0220 	orr.w	r2, r3, #32
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e02e      	b.n	8003d18 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d1d5      	bne.n	8003c74 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2210      	movs	r2, #16
 8003cce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f7ff fe71 	bl	80039c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <I2C_IsAcknowledgeFailed+0xc8>)
 8003cea:	400b      	ands	r3, r1
 8003cec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f043 0204 	orr.w	r2, r3, #4
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	fe00e800 	.word	0xfe00e800

08003d24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	817b      	strh	r3, [r7, #10]
 8003d32:	4613      	mov	r3, r2
 8003d34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	0d5b      	lsrs	r3, r3, #21
 8003d40:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d44:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <I2C_TransferConfig+0x58>)
 8003d46:	430b      	orrs	r3, r1
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	ea02 0103 	and.w	r1, r2, r3
 8003d4e:	897b      	ldrh	r3, [r7, #10]
 8003d50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d54:	7a7b      	ldrb	r3, [r7, #9]
 8003d56:	041b      	lsls	r3, r3, #16
 8003d58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	431a      	orrs	r2, r3
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	431a      	orrs	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003d6e:	bf00      	nop
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	03ff63ff 	.word	0x03ff63ff

08003d80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d138      	bne.n	8003e08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e032      	b.n	8003e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2224      	movs	r2, #36	; 0x24
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0201 	bic.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6819      	ldr	r1, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	e000      	b.n	8003e0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e08:	2302      	movs	r3, #2
  }
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d139      	bne.n	8003ea0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e033      	b.n	8003ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2224      	movs	r2, #36	; 0x24
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d141      	bne.n	8003f42 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ebe:	4b4b      	ldr	r3, [pc, #300]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eca:	d131      	bne.n	8003f30 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ecc:	4b47      	ldr	r3, [pc, #284]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed2:	4a46      	ldr	r2, [pc, #280]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003edc:	4b43      	ldr	r3, [pc, #268]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ee4:	4a41      	ldr	r2, [pc, #260]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003eea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003eec:	4b40      	ldr	r3, [pc, #256]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2232      	movs	r2, #50	; 0x32
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	4a3f      	ldr	r2, [pc, #252]	; (8003ff4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8003efc:	0c9b      	lsrs	r3, r3, #18
 8003efe:	3301      	adds	r3, #1
 8003f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f02:	e002      	b.n	8003f0a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f0a:	4b38      	ldr	r3, [pc, #224]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f16:	d102      	bne.n	8003f1e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f2      	bne.n	8003f04 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f1e:	4b33      	ldr	r3, [pc, #204]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2a:	d158      	bne.n	8003fde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e057      	b.n	8003fe0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f30:	4b2e      	ldr	r3, [pc, #184]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f36:	4a2d      	ldr	r2, [pc, #180]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f40:	e04d      	b.n	8003fde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f48:	d141      	bne.n	8003fce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f4a:	4b28      	ldr	r3, [pc, #160]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f56:	d131      	bne.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f58:	4b24      	ldr	r3, [pc, #144]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5e:	4a23      	ldr	r2, [pc, #140]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f68:	4b20      	ldr	r3, [pc, #128]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f70:	4a1e      	ldr	r2, [pc, #120]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f78:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2232      	movs	r2, #50	; 0x32
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	4a1c      	ldr	r2, [pc, #112]	; (8003ff4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	0c9b      	lsrs	r3, r3, #18
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f8e:	e002      	b.n	8003f96 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f96:	4b15      	ldr	r3, [pc, #84]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa2:	d102      	bne.n	8003faa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f2      	bne.n	8003f90 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb6:	d112      	bne.n	8003fde <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e011      	b.n	8003fe0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003fcc:	e007      	b.n	8003fde <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fce:	4b07      	ldr	r3, [pc, #28]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fd6:	4a05      	ldr	r2, [pc, #20]	; (8003fec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fdc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	20000020 	.word	0x20000020
 8003ff4:	431bde83 	.word	0x431bde83

08003ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e308      	b.n	800461c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d075      	beq.n	8004102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004016:	4ba3      	ldr	r3, [pc, #652]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004020:	4ba0      	ldr	r3, [pc, #640]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0303 	and.w	r3, r3, #3
 8004028:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	d102      	bne.n	8004036 <HAL_RCC_OscConfig+0x3e>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b03      	cmp	r3, #3
 8004034:	d002      	beq.n	800403c <HAL_RCC_OscConfig+0x44>
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b08      	cmp	r3, #8
 800403a:	d10b      	bne.n	8004054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	4b99      	ldr	r3, [pc, #612]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d05b      	beq.n	8004100 <HAL_RCC_OscConfig+0x108>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d157      	bne.n	8004100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e2e3      	b.n	800461c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405c:	d106      	bne.n	800406c <HAL_RCC_OscConfig+0x74>
 800405e:	4b91      	ldr	r3, [pc, #580]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a90      	ldr	r2, [pc, #576]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e01d      	b.n	80040a8 <HAL_RCC_OscConfig+0xb0>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0x98>
 8004076:	4b8b      	ldr	r3, [pc, #556]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a8a      	ldr	r2, [pc, #552]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b88      	ldr	r3, [pc, #544]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a87      	ldr	r2, [pc, #540]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e00b      	b.n	80040a8 <HAL_RCC_OscConfig+0xb0>
 8004090:	4b84      	ldr	r3, [pc, #528]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a83      	ldr	r2, [pc, #524]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4b81      	ldr	r3, [pc, #516]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a80      	ldr	r2, [pc, #512]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80040a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d013      	beq.n	80040d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fe fcfc 	bl	8002aac <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fe fcf8 	bl	8002aac <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e2a8      	b.n	800461c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ca:	4b76      	ldr	r3, [pc, #472]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0xc0>
 80040d6:	e014      	b.n	8004102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fe fce8 	bl	8002aac <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fe fce4 	bl	8002aac <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e294      	b.n	800461c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040f2:	4b6c      	ldr	r3, [pc, #432]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0xe8>
 80040fe:	e000      	b.n	8004102 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d075      	beq.n	80041fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800410e:	4b65      	ldr	r3, [pc, #404]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004118:	4b62      	ldr	r3, [pc, #392]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b0c      	cmp	r3, #12
 8004126:	d102      	bne.n	800412e <HAL_RCC_OscConfig+0x136>
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d002      	beq.n	8004134 <HAL_RCC_OscConfig+0x13c>
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	2b04      	cmp	r3, #4
 8004132:	d11f      	bne.n	8004174 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004134:	4b5b      	ldr	r3, [pc, #364]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_OscConfig+0x154>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e267      	b.n	800461c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414c:	4b55      	ldr	r3, [pc, #340]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	4952      	ldr	r1, [pc, #328]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	4313      	orrs	r3, r2
 800415e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004160:	4b51      	ldr	r3, [pc, #324]	; (80042a8 <HAL_RCC_OscConfig+0x2b0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fc55 	bl	8002a14 <HAL_InitTick>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d043      	beq.n	80041f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e253      	b.n	800461c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d023      	beq.n	80041c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800417c:	4b49      	ldr	r3, [pc, #292]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a48      	ldr	r2, [pc, #288]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fe fc90 	bl	8002aac <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004190:	f7fe fc8c 	bl	8002aac <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e23c      	b.n	800461c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a2:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ae:	4b3d      	ldr	r3, [pc, #244]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	061b      	lsls	r3, r3, #24
 80041bc:	4939      	ldr	r1, [pc, #228]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	604b      	str	r3, [r1, #4]
 80041c2:	e01a      	b.n	80041fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c4:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a36      	ldr	r2, [pc, #216]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80041ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fe fc6c 	bl	8002aac <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d8:	f7fe fc68 	bl	8002aac <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e218      	b.n	800461c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ea:	4b2e      	ldr	r3, [pc, #184]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x1e0>
 80041f6:	e000      	b.n	80041fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d03c      	beq.n	8004280 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01c      	beq.n	8004248 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800420e:	4b25      	ldr	r3, [pc, #148]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004214:	4a23      	ldr	r2, [pc, #140]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fe fc45 	bl	8002aac <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004226:	f7fe fc41 	bl	8002aac <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e1f1      	b.n	800461c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004238:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800423a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0ef      	beq.n	8004226 <HAL_RCC_OscConfig+0x22e>
 8004246:	e01b      	b.n	8004280 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004248:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 800424a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800424e:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004250:	f023 0301 	bic.w	r3, r3, #1
 8004254:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7fe fc28 	bl	8002aac <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004260:	f7fe fc24 	bl	8002aac <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e1d4      	b.n	800461c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004272:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1ef      	bne.n	8004260 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80ab 	beq.w	80043e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428e:	2300      	movs	r3, #0
 8004290:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004292:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <HAL_RCC_OscConfig+0x2ac>)
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_RCC_OscConfig+0x2b4>
 800429e:	2301      	movs	r3, #1
 80042a0:	e005      	b.n	80042ae <HAL_RCC_OscConfig+0x2b6>
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
 80042a8:	20000024 	.word	0x20000024
 80042ac:	2300      	movs	r3, #0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b2:	4baf      	ldr	r3, [pc, #700]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	4aae      	ldr	r2, [pc, #696]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6593      	str	r3, [r2, #88]	; 0x58
 80042be:	4bac      	ldr	r3, [pc, #688]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80042c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042ca:	2301      	movs	r3, #1
 80042cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ce:	4ba9      	ldr	r3, [pc, #676]	; (8004574 <HAL_RCC_OscConfig+0x57c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d118      	bne.n	800430c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042da:	4ba6      	ldr	r3, [pc, #664]	; (8004574 <HAL_RCC_OscConfig+0x57c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4aa5      	ldr	r2, [pc, #660]	; (8004574 <HAL_RCC_OscConfig+0x57c>)
 80042e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e6:	f7fe fbe1 	bl	8002aac <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ec:	e008      	b.n	8004300 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ee:	f7fe fbdd 	bl	8002aac <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	2b02      	cmp	r3, #2
 80042fa:	d901      	bls.n	8004300 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e18d      	b.n	800461c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004300:	4b9c      	ldr	r3, [pc, #624]	; (8004574 <HAL_RCC_OscConfig+0x57c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f0      	beq.n	80042ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d108      	bne.n	8004326 <HAL_RCC_OscConfig+0x32e>
 8004314:	4b96      	ldr	r3, [pc, #600]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	4a95      	ldr	r2, [pc, #596]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004324:	e024      	b.n	8004370 <HAL_RCC_OscConfig+0x378>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b05      	cmp	r3, #5
 800432c:	d110      	bne.n	8004350 <HAL_RCC_OscConfig+0x358>
 800432e:	4b90      	ldr	r3, [pc, #576]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004334:	4a8e      	ldr	r2, [pc, #568]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004336:	f043 0304 	orr.w	r3, r3, #4
 800433a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800433e:	4b8c      	ldr	r3, [pc, #560]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	4a8a      	ldr	r2, [pc, #552]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800434e:	e00f      	b.n	8004370 <HAL_RCC_OscConfig+0x378>
 8004350:	4b87      	ldr	r3, [pc, #540]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	4a86      	ldr	r2, [pc, #536]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004360:	4b83      	ldr	r3, [pc, #524]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	4a82      	ldr	r2, [pc, #520]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004368:	f023 0304 	bic.w	r3, r3, #4
 800436c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d016      	beq.n	80043a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fe fb98 	bl	8002aac <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800437e:	e00a      	b.n	8004396 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004380:	f7fe fb94 	bl	8002aac <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e142      	b.n	800461c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004396:	4b76      	ldr	r3, [pc, #472]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0ed      	beq.n	8004380 <HAL_RCC_OscConfig+0x388>
 80043a4:	e015      	b.n	80043d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a6:	f7fe fb81 	bl	8002aac <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043ac:	e00a      	b.n	80043c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ae:	f7fe fb7d 	bl	8002aac <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043bc:	4293      	cmp	r3, r2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e12b      	b.n	800461c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043c4:	4b6a      	ldr	r3, [pc, #424]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1ed      	bne.n	80043ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043d2:	7ffb      	ldrb	r3, [r7, #31]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d105      	bne.n	80043e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d8:	4b65      	ldr	r3, [pc, #404]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	4a64      	ldr	r2, [pc, #400]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80043de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0320 	and.w	r3, r3, #32
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d03c      	beq.n	800446a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d01c      	beq.n	8004432 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043f8:	4b5d      	ldr	r3, [pc, #372]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80043fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043fe:	4a5c      	ldr	r2, [pc, #368]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004408:	f7fe fb50 	bl	8002aac <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004410:	f7fe fb4c 	bl	8002aac <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e0fc      	b.n	800461c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004422:	4b53      	ldr	r3, [pc, #332]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004424:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0ef      	beq.n	8004410 <HAL_RCC_OscConfig+0x418>
 8004430:	e01b      	b.n	800446a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004432:	4b4f      	ldr	r3, [pc, #316]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004434:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004438:	4a4d      	ldr	r2, [pc, #308]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004442:	f7fe fb33 	bl	8002aac <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800444a:	f7fe fb2f 	bl	8002aac <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e0df      	b.n	800461c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800445c:	4b44      	ldr	r3, [pc, #272]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800445e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1ef      	bne.n	800444a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80d3 	beq.w	800461a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004474:	4b3e      	ldr	r3, [pc, #248]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b0c      	cmp	r3, #12
 800447e:	f000 808d 	beq.w	800459c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d15a      	bne.n	8004540 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800448a:	4b39      	ldr	r3, [pc, #228]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a38      	ldr	r2, [pc, #224]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004490:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004496:	f7fe fb09 	bl	8002aac <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449e:	f7fe fb05 	bl	8002aac <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e0b5      	b.n	800461c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b0:	4b2f      	ldr	r3, [pc, #188]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f0      	bne.n	800449e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044bc:	4b2c      	ldr	r3, [pc, #176]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	4b2d      	ldr	r3, [pc, #180]	; (8004578 <HAL_RCC_OscConfig+0x580>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6a11      	ldr	r1, [r2, #32]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044cc:	3a01      	subs	r2, #1
 80044ce:	0112      	lsls	r2, r2, #4
 80044d0:	4311      	orrs	r1, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80044d6:	0212      	lsls	r2, r2, #8
 80044d8:	4311      	orrs	r1, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044de:	0852      	lsrs	r2, r2, #1
 80044e0:	3a01      	subs	r2, #1
 80044e2:	0552      	lsls	r2, r2, #21
 80044e4:	4311      	orrs	r1, r2
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044ea:	0852      	lsrs	r2, r2, #1
 80044ec:	3a01      	subs	r2, #1
 80044ee:	0652      	lsls	r2, r2, #25
 80044f0:	4311      	orrs	r1, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044f6:	06d2      	lsls	r2, r2, #27
 80044f8:	430a      	orrs	r2, r1
 80044fa:	491d      	ldr	r1, [pc, #116]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004500:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1a      	ldr	r2, [pc, #104]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800450a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800450c:	4b18      	ldr	r3, [pc, #96]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4a17      	ldr	r2, [pc, #92]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004516:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fe fac8 	bl	8002aac <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004520:	f7fe fac4 	bl	8002aac <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e074      	b.n	800461c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d0f0      	beq.n	8004520 <HAL_RCC_OscConfig+0x528>
 800453e:	e06c      	b.n	800461a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a0a      	ldr	r2, [pc, #40]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800454a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800454c:	4b08      	ldr	r3, [pc, #32]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a07      	ldr	r2, [pc, #28]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4a04      	ldr	r2, [pc, #16]	; (8004570 <HAL_RCC_OscConfig+0x578>)
 800455e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004566:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fe faa0 	bl	8002aac <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800456e:	e00e      	b.n	800458e <HAL_RCC_OscConfig+0x596>
 8004570:	40021000 	.word	0x40021000
 8004574:	40007000 	.word	0x40007000
 8004578:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457c:	f7fe fa96 	bl	8002aac <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e046      	b.n	800461c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800458e:	4b25      	ldr	r3, [pc, #148]	; (8004624 <HAL_RCC_OscConfig+0x62c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x584>
 800459a:	e03e      	b.n	800461a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e039      	b.n	800461c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80045a8:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <HAL_RCC_OscConfig+0x62c>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f003 0203 	and.w	r2, r3, #3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d12c      	bne.n	8004616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	3b01      	subs	r3, #1
 80045c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d123      	bne.n	8004616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045da:	429a      	cmp	r2, r3
 80045dc:	d11b      	bne.n	8004616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d113      	bne.n	8004616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	085b      	lsrs	r3, r3, #1
 80045fa:	3b01      	subs	r3, #1
 80045fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045fe:	429a      	cmp	r2, r3
 8004600:	d109      	bne.n	8004616 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	3b01      	subs	r3, #1
 8004610:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004612:	429a      	cmp	r2, r3
 8004614:	d001      	beq.n	800461a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40021000 	.word	0x40021000

08004628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e11e      	b.n	800487e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004640:	4b91      	ldr	r3, [pc, #580]	; (8004888 <HAL_RCC_ClockConfig+0x260>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d910      	bls.n	8004670 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b8e      	ldr	r3, [pc, #568]	; (8004888 <HAL_RCC_ClockConfig+0x260>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 020f 	bic.w	r2, r3, #15
 8004656:	498c      	ldr	r1, [pc, #560]	; (8004888 <HAL_RCC_ClockConfig+0x260>)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	4313      	orrs	r3, r2
 800465c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b8a      	ldr	r3, [pc, #552]	; (8004888 <HAL_RCC_ClockConfig+0x260>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e106      	b.n	800487e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d073      	beq.n	8004764 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d129      	bne.n	80046d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004684:	4b81      	ldr	r3, [pc, #516]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0f4      	b.n	800487e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004694:	f000 f99e 	bl	80049d4 <RCC_GetSysClockFreqFromPLLSource>
 8004698:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4a7c      	ldr	r2, [pc, #496]	; (8004890 <HAL_RCC_ClockConfig+0x268>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d93f      	bls.n	8004722 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046a2:	4b7a      	ldr	r3, [pc, #488]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d033      	beq.n	8004722 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d12f      	bne.n	8004722 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046c2:	4b72      	ldr	r3, [pc, #456]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ca:	4a70      	ldr	r2, [pc, #448]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 80046cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e024      	b.n	8004722 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d107      	bne.n	80046f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046e0:	4b6a      	ldr	r3, [pc, #424]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0c6      	b.n	800487e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f0:	4b66      	ldr	r3, [pc, #408]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0be      	b.n	800487e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004700:	f000 f8ce 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 8004704:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4a61      	ldr	r2, [pc, #388]	; (8004890 <HAL_RCC_ClockConfig+0x268>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d909      	bls.n	8004722 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800470e:	4b5f      	ldr	r3, [pc, #380]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004716:	4a5d      	ldr	r2, [pc, #372]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 8004718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800471e:	2380      	movs	r3, #128	; 0x80
 8004720:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004722:	4b5a      	ldr	r3, [pc, #360]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f023 0203 	bic.w	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	4957      	ldr	r1, [pc, #348]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 8004730:	4313      	orrs	r3, r2
 8004732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004734:	f7fe f9ba 	bl	8002aac <HAL_GetTick>
 8004738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473a:	e00a      	b.n	8004752 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800473c:	f7fe f9b6 	bl	8002aac <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f241 3288 	movw	r2, #5000	; 0x1388
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e095      	b.n	800487e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004752:	4b4e      	ldr	r3, [pc, #312]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 020c 	and.w	r2, r3, #12
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	429a      	cmp	r2, r3
 8004762:	d1eb      	bne.n	800473c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d023      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800477c:	4b43      	ldr	r3, [pc, #268]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4a42      	ldr	r2, [pc, #264]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 8004782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004786:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d007      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004794:	4b3d      	ldr	r3, [pc, #244]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800479c:	4a3b      	ldr	r2, [pc, #236]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 800479e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a4:	4b39      	ldr	r3, [pc, #228]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4936      	ldr	r1, [pc, #216]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	608b      	str	r3, [r1, #8]
 80047b6:	e008      	b.n	80047ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2b80      	cmp	r3, #128	; 0x80
 80047bc:	d105      	bne.n	80047ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047be:	4b33      	ldr	r3, [pc, #204]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	4a32      	ldr	r2, [pc, #200]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 80047c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047ca:	4b2f      	ldr	r3, [pc, #188]	; (8004888 <HAL_RCC_ClockConfig+0x260>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d21d      	bcs.n	8004814 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d8:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <HAL_RCC_ClockConfig+0x260>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f023 020f 	bic.w	r2, r3, #15
 80047e0:	4929      	ldr	r1, [pc, #164]	; (8004888 <HAL_RCC_ClockConfig+0x260>)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047e8:	f7fe f960 	bl	8002aac <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f0:	f7fe f95c 	bl	8002aac <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e03b      	b.n	800487e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004806:	4b20      	ldr	r3, [pc, #128]	; (8004888 <HAL_RCC_ClockConfig+0x260>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d1ed      	bne.n	80047f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004820:	4b1a      	ldr	r3, [pc, #104]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4917      	ldr	r1, [pc, #92]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 800482e:	4313      	orrs	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800483e:	4b13      	ldr	r3, [pc, #76]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	490f      	ldr	r1, [pc, #60]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004852:	f000 f825 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 8004856:	4601      	mov	r1, r0
 8004858:	4b0c      	ldr	r3, [pc, #48]	; (800488c <HAL_RCC_ClockConfig+0x264>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	4a0c      	ldr	r2, [pc, #48]	; (8004894 <HAL_RCC_ClockConfig+0x26c>)
 8004864:	5cd3      	ldrb	r3, [r2, r3]
 8004866:	f003 031f 	and.w	r3, r3, #31
 800486a:	fa21 f303 	lsr.w	r3, r1, r3
 800486e:	4a0a      	ldr	r2, [pc, #40]	; (8004898 <HAL_RCC_ClockConfig+0x270>)
 8004870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004872:	4b0a      	ldr	r3, [pc, #40]	; (800489c <HAL_RCC_ClockConfig+0x274>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fe f8cc 	bl	8002a14 <HAL_InitTick>
 800487c:	4603      	mov	r3, r0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40022000 	.word	0x40022000
 800488c:	40021000 	.word	0x40021000
 8004890:	04c4b400 	.word	0x04c4b400
 8004894:	0800ca10 	.word	0x0800ca10
 8004898:	20000020 	.word	0x20000020
 800489c:	20000024 	.word	0x20000024

080048a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b087      	sub	sp, #28
 80048a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048a6:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d102      	bne.n	80048b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048b2:	4b2a      	ldr	r3, [pc, #168]	; (800495c <HAL_RCC_GetSysClockFreq+0xbc>)
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	e047      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048b8:	4b27      	ldr	r3, [pc, #156]	; (8004958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d102      	bne.n	80048ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048c4:	4b26      	ldr	r3, [pc, #152]	; (8004960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	e03e      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80048ca:	4b23      	ldr	r3, [pc, #140]	; (8004958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b0c      	cmp	r3, #12
 80048d4:	d136      	bne.n	8004944 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048d6:	4b20      	ldr	r3, [pc, #128]	; (8004958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048e0:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	3301      	adds	r3, #1
 80048ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d10c      	bne.n	800490e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048f4:	4a1a      	ldr	r2, [pc, #104]	; (8004960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	4a16      	ldr	r2, [pc, #88]	; (8004958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048fe:	68d2      	ldr	r2, [r2, #12]
 8004900:	0a12      	lsrs	r2, r2, #8
 8004902:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	617b      	str	r3, [r7, #20]
      break;
 800490c:	e00c      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800490e:	4a13      	ldr	r2, [pc, #76]	; (800495c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	fbb2 f3f3 	udiv	r3, r2, r3
 8004916:	4a10      	ldr	r2, [pc, #64]	; (8004958 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004918:	68d2      	ldr	r2, [r2, #12]
 800491a:	0a12      	lsrs	r2, r2, #8
 800491c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004920:	fb02 f303 	mul.w	r3, r2, r3
 8004924:	617b      	str	r3, [r7, #20]
      break;
 8004926:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_RCC_GetSysClockFreq+0xb8>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	0e5b      	lsrs	r3, r3, #25
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	3301      	adds	r3, #1
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	e001      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004948:	693b      	ldr	r3, [r7, #16]
}
 800494a:	4618      	mov	r0, r3
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40021000 	.word	0x40021000
 800495c:	00f42400 	.word	0x00f42400
 8004960:	016e3600 	.word	0x016e3600

08004964 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004968:	4b03      	ldr	r3, [pc, #12]	; (8004978 <HAL_RCC_GetHCLKFreq+0x14>)
 800496a:	681b      	ldr	r3, [r3, #0]
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000020 	.word	0x20000020

0800497c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004980:	f7ff fff0 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 8004984:	4601      	mov	r1, r0
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0a1b      	lsrs	r3, r3, #8
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004992:	5cd3      	ldrb	r3, [r2, r3]
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	fa21 f303 	lsr.w	r3, r1, r3
}
 800499c:	4618      	mov	r0, r3
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40021000 	.word	0x40021000
 80049a4:	0800ca20 	.word	0x0800ca20

080049a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049ac:	f7ff ffda 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 80049b0:	4601      	mov	r1, r0
 80049b2:	4b06      	ldr	r3, [pc, #24]	; (80049cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	0adb      	lsrs	r3, r3, #11
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	4a04      	ldr	r2, [pc, #16]	; (80049d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049be:	5cd3      	ldrb	r3, [r2, r3]
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021000 	.word	0x40021000
 80049d0:	0800ca20 	.word	0x0800ca20

080049d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049da:	4b1e      	ldr	r3, [pc, #120]	; (8004a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049e4:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	3301      	adds	r3, #1
 80049f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d10c      	bne.n	8004a12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049f8:	4a17      	ldr	r2, [pc, #92]	; (8004a58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a02:	68d2      	ldr	r2, [r2, #12]
 8004a04:	0a12      	lsrs	r2, r2, #8
 8004a06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a0a:	fb02 f303 	mul.w	r3, r2, r3
 8004a0e:	617b      	str	r3, [r7, #20]
    break;
 8004a10:	e00c      	b.n	8004a2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a12:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1a:	4a0e      	ldr	r2, [pc, #56]	; (8004a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a1c:	68d2      	ldr	r2, [r2, #12]
 8004a1e:	0a12      	lsrs	r2, r2, #8
 8004a20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a24:	fb02 f303 	mul.w	r3, r2, r3
 8004a28:	617b      	str	r3, [r7, #20]
    break;
 8004a2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	0e5b      	lsrs	r3, r3, #25
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	3301      	adds	r3, #1
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a46:	687b      	ldr	r3, [r7, #4]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	40021000 	.word	0x40021000
 8004a58:	016e3600 	.word	0x016e3600
 8004a5c:	00f42400 	.word	0x00f42400

08004a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a68:	2300      	movs	r3, #0
 8004a6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8098 	beq.w	8004bae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a82:	4b43      	ldr	r3, [pc, #268]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10d      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a8e:	4b40      	ldr	r3, [pc, #256]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a92:	4a3f      	ldr	r2, [pc, #252]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a98:	6593      	str	r3, [r2, #88]	; 0x58
 8004a9a:	4b3d      	ldr	r3, [pc, #244]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	60bb      	str	r3, [r7, #8]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aaa:	4b3a      	ldr	r3, [pc, #232]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a39      	ldr	r2, [pc, #228]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ab6:	f7fd fff9 	bl	8002aac <HAL_GetTick>
 8004aba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004abc:	e009      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004abe:	f7fd fff5 	bl	8002aac <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d902      	bls.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	74fb      	strb	r3, [r7, #19]
        break;
 8004ad0:	e005      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ad2:	4b30      	ldr	r3, [pc, #192]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0ef      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ade:	7cfb      	ldrb	r3, [r7, #19]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d159      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ae4:	4b2a      	ldr	r3, [pc, #168]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d01e      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d019      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b00:	4b23      	ldr	r3, [pc, #140]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b0c:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b12:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b1c:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b2c:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d016      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fd ffb5 	bl	8002aac <HAL_GetTick>
 8004b42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b44:	e00b      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fd ffb1 	bl	8002aac <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d902      	bls.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	74fb      	strb	r3, [r7, #19]
            break;
 8004b5c:	e006      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0ec      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004b6c:	7cfb      	ldrb	r3, [r7, #19]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10b      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	4903      	ldr	r1, [pc, #12]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b88:	e008      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b8a:	7cfb      	ldrb	r3, [r7, #19]
 8004b8c:	74bb      	strb	r3, [r7, #18]
 8004b8e:	e005      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b98:	7cfb      	ldrb	r3, [r7, #19]
 8004b9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b9c:	7c7b      	ldrb	r3, [r7, #17]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d105      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba2:	4ba6      	ldr	r3, [pc, #664]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba6:	4aa5      	ldr	r2, [pc, #660]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bba:	4ba0      	ldr	r3, [pc, #640]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f023 0203 	bic.w	r2, r3, #3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	499c      	ldr	r1, [pc, #624]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bdc:	4b97      	ldr	r3, [pc, #604]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f023 020c 	bic.w	r2, r3, #12
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	4994      	ldr	r1, [pc, #592]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bfe:	4b8f      	ldr	r3, [pc, #572]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	498b      	ldr	r1, [pc, #556]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c20:	4b86      	ldr	r3, [pc, #536]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	4983      	ldr	r1, [pc, #524]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c42:	4b7e      	ldr	r3, [pc, #504]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	497a      	ldr	r1, [pc, #488]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c64:	4b75      	ldr	r3, [pc, #468]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	4972      	ldr	r1, [pc, #456]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c86:	4b6d      	ldr	r3, [pc, #436]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	4969      	ldr	r1, [pc, #420]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ca8:	4b64      	ldr	r3, [pc, #400]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	4961      	ldr	r1, [pc, #388]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cca:	4b5c      	ldr	r3, [pc, #368]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	4958      	ldr	r1, [pc, #352]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d015      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cec:	4b53      	ldr	r3, [pc, #332]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	4950      	ldr	r1, [pc, #320]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d0c:	4b4b      	ldr	r3, [pc, #300]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4a4a      	ldr	r2, [pc, #296]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d015      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d24:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	4942      	ldr	r1, [pc, #264]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d42:	d105      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d44:	4b3d      	ldr	r3, [pc, #244]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	4a3c      	ldr	r2, [pc, #240]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d4e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d015      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d5c:	4b37      	ldr	r3, [pc, #220]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6a:	4934      	ldr	r1, [pc, #208]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d7a:	d105      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d7c:	4b2f      	ldr	r3, [pc, #188]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	4a2e      	ldr	r2, [pc, #184]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d86:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d015      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d94:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da2:	4926      	ldr	r1, [pc, #152]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db2:	d105      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db4:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dbe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d015      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	4918      	ldr	r1, [pc, #96]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dea:	d105      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dec:	4b13      	ldr	r3, [pc, #76]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	4a12      	ldr	r2, [pc, #72]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004df6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d015      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	490a      	ldr	r1, [pc, #40]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e22:	d105      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4a04      	ldr	r2, [pc, #16]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e2e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004e30:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40021000 	.word	0x40021000

08004e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e049      	b.n	8004ee6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fd fbf6 	bl	8002658 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f000 fb86 	bl	8005590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d001      	beq.n	8004f08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e019      	b.n	8004f3c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <HAL_TIM_Base_Start+0x58>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b06      	cmp	r3, #6
 8004f20:	d00b      	beq.n	8004f3a <HAL_TIM_Base_Start+0x4a>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f28:	d007      	beq.n	8004f3a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0201 	orr.w	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	00010007 	.word	0x00010007

08004f4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e049      	b.n	8004ff2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f841 	bl	8004ffa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f000 fb00 	bl	8005590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005002:	bf00      	nop
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <HAL_TIM_PWM_Start+0x24>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	bf14      	ite	ne
 800502c:	2301      	movne	r3, #1
 800502e:	2300      	moveq	r3, #0
 8005030:	b2db      	uxtb	r3, r3
 8005032:	e03c      	b.n	80050ae <HAL_TIM_PWM_Start+0x9e>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b04      	cmp	r3, #4
 8005038:	d109      	bne.n	800504e <HAL_TIM_PWM_Start+0x3e>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b01      	cmp	r3, #1
 8005044:	bf14      	ite	ne
 8005046:	2301      	movne	r3, #1
 8005048:	2300      	moveq	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	e02f      	b.n	80050ae <HAL_TIM_PWM_Start+0x9e>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b08      	cmp	r3, #8
 8005052:	d109      	bne.n	8005068 <HAL_TIM_PWM_Start+0x58>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b01      	cmp	r3, #1
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	e022      	b.n	80050ae <HAL_TIM_PWM_Start+0x9e>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b0c      	cmp	r3, #12
 800506c:	d109      	bne.n	8005082 <HAL_TIM_PWM_Start+0x72>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b01      	cmp	r3, #1
 8005078:	bf14      	ite	ne
 800507a:	2301      	movne	r3, #1
 800507c:	2300      	moveq	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	e015      	b.n	80050ae <HAL_TIM_PWM_Start+0x9e>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b10      	cmp	r3, #16
 8005086:	d109      	bne.n	800509c <HAL_TIM_PWM_Start+0x8c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b01      	cmp	r3, #1
 8005092:	bf14      	ite	ne
 8005094:	2301      	movne	r3, #1
 8005096:	2300      	moveq	r3, #0
 8005098:	b2db      	uxtb	r3, r3
 800509a:	e008      	b.n	80050ae <HAL_TIM_PWM_Start+0x9e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	bf14      	ite	ne
 80050a8:	2301      	movne	r3, #1
 80050aa:	2300      	moveq	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e06e      	b.n	8005194 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <HAL_TIM_PWM_Start+0xb6>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c4:	e023      	b.n	800510e <HAL_TIM_PWM_Start+0xfe>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d104      	bne.n	80050d6 <HAL_TIM_PWM_Start+0xc6>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d4:	e01b      	b.n	800510e <HAL_TIM_PWM_Start+0xfe>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d104      	bne.n	80050e6 <HAL_TIM_PWM_Start+0xd6>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e4:	e013      	b.n	800510e <HAL_TIM_PWM_Start+0xfe>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b0c      	cmp	r3, #12
 80050ea:	d104      	bne.n	80050f6 <HAL_TIM_PWM_Start+0xe6>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050f4:	e00b      	b.n	800510e <HAL_TIM_PWM_Start+0xfe>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b10      	cmp	r3, #16
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_PWM_Start+0xf6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005104:	e003      	b.n	800510e <HAL_TIM_PWM_Start+0xfe>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2201      	movs	r2, #1
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fe5c 	bl	8005dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a1e      	ldr	r2, [pc, #120]	; (800519c <HAL_TIM_PWM_Start+0x18c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <HAL_TIM_PWM_Start+0x13e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <HAL_TIM_PWM_Start+0x190>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_TIM_PWM_Start+0x13e>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1b      	ldr	r2, [pc, #108]	; (80051a4 <HAL_TIM_PWM_Start+0x194>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_TIM_PWM_Start+0x13e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1a      	ldr	r2, [pc, #104]	; (80051a8 <HAL_TIM_PWM_Start+0x198>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_TIM_PWM_Start+0x13e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a18      	ldr	r2, [pc, #96]	; (80051ac <HAL_TIM_PWM_Start+0x19c>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d101      	bne.n	8005152 <HAL_TIM_PWM_Start+0x142>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <HAL_TIM_PWM_Start+0x144>
 8005152:	2300      	movs	r3, #0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005166:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <HAL_TIM_PWM_Start+0x1a0>)
 8005170:	4013      	ands	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b06      	cmp	r3, #6
 8005178:	d00b      	beq.n	8005192 <HAL_TIM_PWM_Start+0x182>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005180:	d007      	beq.n	8005192 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0201 	orr.w	r2, r2, #1
 8005190:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	40012c00 	.word	0x40012c00
 80051a0:	40013400 	.word	0x40013400
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40014400 	.word	0x40014400
 80051ac:	40014800 	.word	0x40014800
 80051b0:	00010007 	.word	0x00010007

080051b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e0fd      	b.n	80053ca <HAL_TIM_PWM_ConfigChannel+0x216>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b14      	cmp	r3, #20
 80051da:	f200 80f0 	bhi.w	80053be <HAL_TIM_PWM_ConfigChannel+0x20a>
 80051de:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	08005239 	.word	0x08005239
 80051e8:	080053bf 	.word	0x080053bf
 80051ec:	080053bf 	.word	0x080053bf
 80051f0:	080053bf 	.word	0x080053bf
 80051f4:	08005279 	.word	0x08005279
 80051f8:	080053bf 	.word	0x080053bf
 80051fc:	080053bf 	.word	0x080053bf
 8005200:	080053bf 	.word	0x080053bf
 8005204:	080052bb 	.word	0x080052bb
 8005208:	080053bf 	.word	0x080053bf
 800520c:	080053bf 	.word	0x080053bf
 8005210:	080053bf 	.word	0x080053bf
 8005214:	080052fb 	.word	0x080052fb
 8005218:	080053bf 	.word	0x080053bf
 800521c:	080053bf 	.word	0x080053bf
 8005220:	080053bf 	.word	0x080053bf
 8005224:	0800533d 	.word	0x0800533d
 8005228:	080053bf 	.word	0x080053bf
 800522c:	080053bf 	.word	0x080053bf
 8005230:	080053bf 	.word	0x080053bf
 8005234:	0800537d 	.word	0x0800537d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fa36 	bl	80056b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0208 	orr.w	r2, r2, #8
 8005252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699a      	ldr	r2, [r3, #24]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0204 	bic.w	r2, r2, #4
 8005262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6999      	ldr	r1, [r3, #24]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	619a      	str	r2, [r3, #24]
      break;
 8005276:	e0a3      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	4618      	mov	r0, r3
 8005280:	f000 faa6 	bl	80057d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	699a      	ldr	r2, [r3, #24]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6999      	ldr	r1, [r3, #24]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	021a      	lsls	r2, r3, #8
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	619a      	str	r2, [r3, #24]
      break;
 80052b8:	e082      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fb0f 	bl	80058e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	69da      	ldr	r2, [r3, #28]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0208 	orr.w	r2, r2, #8
 80052d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0204 	bic.w	r2, r2, #4
 80052e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69d9      	ldr	r1, [r3, #28]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	61da      	str	r2, [r3, #28]
      break;
 80052f8:	e062      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fb77 	bl	80059f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69d9      	ldr	r1, [r3, #28]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	021a      	lsls	r2, r3, #8
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	61da      	str	r2, [r3, #28]
      break;
 800533a:	e041      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fbe0 	bl	8005b08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0208 	orr.w	r2, r2, #8
 8005356:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0204 	bic.w	r2, r2, #4
 8005366:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	691a      	ldr	r2, [r3, #16]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	430a      	orrs	r2, r1
 8005378:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800537a:	e021      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fc24 	bl	8005bd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005396:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	021a      	lsls	r2, r3, #8
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80053bc:	e000      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80053be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop

080053d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_TIM_ConfigClockSource+0x18>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e0c3      	b.n	8005574 <HAL_TIM_ConfigClockSource+0x1a0>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800540a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800540e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005416:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b70      	cmp	r3, #112	; 0x70
 8005426:	d038      	beq.n	800549a <HAL_TIM_ConfigClockSource+0xc6>
 8005428:	2b70      	cmp	r3, #112	; 0x70
 800542a:	d815      	bhi.n	8005458 <HAL_TIM_ConfigClockSource+0x84>
 800542c:	2b30      	cmp	r3, #48	; 0x30
 800542e:	f000 808e 	beq.w	800554e <HAL_TIM_ConfigClockSource+0x17a>
 8005432:	2b30      	cmp	r3, #48	; 0x30
 8005434:	d809      	bhi.n	800544a <HAL_TIM_ConfigClockSource+0x76>
 8005436:	2b10      	cmp	r3, #16
 8005438:	f000 8089 	beq.w	800554e <HAL_TIM_ConfigClockSource+0x17a>
 800543c:	2b20      	cmp	r3, #32
 800543e:	f000 8086 	beq.w	800554e <HAL_TIM_ConfigClockSource+0x17a>
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 8083 	beq.w	800554e <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005448:	e08b      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 800544a:	2b50      	cmp	r3, #80	; 0x50
 800544c:	d04f      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0x11a>
 800544e:	2b60      	cmp	r3, #96	; 0x60
 8005450:	d05d      	beq.n	800550e <HAL_TIM_ConfigClockSource+0x13a>
 8005452:	2b40      	cmp	r3, #64	; 0x40
 8005454:	d06b      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x15a>
      break;
 8005456:	e084      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005458:	4a48      	ldr	r2, [pc, #288]	; (800557c <HAL_TIM_ConfigClockSource+0x1a8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d077      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x17a>
 800545e:	4a47      	ldr	r2, [pc, #284]	; (800557c <HAL_TIM_ConfigClockSource+0x1a8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d809      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0xa4>
 8005464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005468:	d02e      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0xf4>
 800546a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800546e:	d06e      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x17a>
 8005470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005474:	d074      	beq.n	8005560 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 8005476:	e074      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005478:	4a41      	ldr	r2, [pc, #260]	; (8005580 <HAL_TIM_ConfigClockSource+0x1ac>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d067      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x17a>
 800547e:	4a40      	ldr	r2, [pc, #256]	; (8005580 <HAL_TIM_ConfigClockSource+0x1ac>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d803      	bhi.n	800548c <HAL_TIM_ConfigClockSource+0xb8>
 8005484:	4a3f      	ldr	r2, [pc, #252]	; (8005584 <HAL_TIM_ConfigClockSource+0x1b0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d061      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x17a>
      break;
 800548a:	e06a      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 800548c:	4a3e      	ldr	r2, [pc, #248]	; (8005588 <HAL_TIM_ConfigClockSource+0x1b4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d05d      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x17a>
 8005492:	4a3e      	ldr	r2, [pc, #248]	; (800558c <HAL_TIM_ConfigClockSource+0x1b8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d05a      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8005498:	e063      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6899      	ldr	r1, [r3, #8]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f000 fc73 	bl	8005d94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	609a      	str	r2, [r3, #8]
      break;
 80054c6:	e04c      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6899      	ldr	r1, [r3, #8]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f000 fc5c 	bl	8005d94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ea:	609a      	str	r2, [r3, #8]
      break;
 80054ec:	e039      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6859      	ldr	r1, [r3, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f000 fbce 	bl	8005c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2150      	movs	r1, #80	; 0x50
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fc27 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 800550c:	e029      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6859      	ldr	r1, [r3, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	461a      	mov	r2, r3
 800551c:	f000 fbed 	bl	8005cfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2160      	movs	r1, #96	; 0x60
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fc17 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 800552c:	e019      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	461a      	mov	r2, r3
 800553c:	f000 fbae 	bl	8005c9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2140      	movs	r1, #64	; 0x40
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fc07 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 800554c:	e009      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4619      	mov	r1, r3
 8005558:	4610      	mov	r0, r2
 800555a:	f000 fbfe 	bl	8005d5a <TIM_ITRx_SetConfig>
      break;
 800555e:	e000      	b.n	8005562 <HAL_TIM_ConfigClockSource+0x18e>
      break;
 8005560:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	00100020 	.word	0x00100020
 8005580:	00100040 	.word	0x00100040
 8005584:	00100030 	.word	0x00100030
 8005588:	00100060 	.word	0x00100060
 800558c:	00100070 	.word	0x00100070

08005590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a3c      	ldr	r2, [pc, #240]	; (8005694 <TIM_Base_SetConfig+0x104>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00f      	beq.n	80055c8 <TIM_Base_SetConfig+0x38>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ae:	d00b      	beq.n	80055c8 <TIM_Base_SetConfig+0x38>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a39      	ldr	r2, [pc, #228]	; (8005698 <TIM_Base_SetConfig+0x108>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d007      	beq.n	80055c8 <TIM_Base_SetConfig+0x38>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a38      	ldr	r2, [pc, #224]	; (800569c <TIM_Base_SetConfig+0x10c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_Base_SetConfig+0x38>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a37      	ldr	r2, [pc, #220]	; (80056a0 <TIM_Base_SetConfig+0x110>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d108      	bne.n	80055da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2d      	ldr	r2, [pc, #180]	; (8005694 <TIM_Base_SetConfig+0x104>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d01b      	beq.n	800561a <TIM_Base_SetConfig+0x8a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d017      	beq.n	800561a <TIM_Base_SetConfig+0x8a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2a      	ldr	r2, [pc, #168]	; (8005698 <TIM_Base_SetConfig+0x108>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <TIM_Base_SetConfig+0x8a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a29      	ldr	r2, [pc, #164]	; (800569c <TIM_Base_SetConfig+0x10c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d00f      	beq.n	800561a <TIM_Base_SetConfig+0x8a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4a28      	ldr	r2, [pc, #160]	; (80056a0 <TIM_Base_SetConfig+0x110>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00b      	beq.n	800561a <TIM_Base_SetConfig+0x8a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a27      	ldr	r2, [pc, #156]	; (80056a4 <TIM_Base_SetConfig+0x114>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d007      	beq.n	800561a <TIM_Base_SetConfig+0x8a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a26      	ldr	r2, [pc, #152]	; (80056a8 <TIM_Base_SetConfig+0x118>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d003      	beq.n	800561a <TIM_Base_SetConfig+0x8a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a25      	ldr	r2, [pc, #148]	; (80056ac <TIM_Base_SetConfig+0x11c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d108      	bne.n	800562c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	4313      	orrs	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a10      	ldr	r2, [pc, #64]	; (8005694 <TIM_Base_SetConfig+0x104>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00f      	beq.n	8005678 <TIM_Base_SetConfig+0xe8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a11      	ldr	r2, [pc, #68]	; (80056a0 <TIM_Base_SetConfig+0x110>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00b      	beq.n	8005678 <TIM_Base_SetConfig+0xe8>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a10      	ldr	r2, [pc, #64]	; (80056a4 <TIM_Base_SetConfig+0x114>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d007      	beq.n	8005678 <TIM_Base_SetConfig+0xe8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a0f      	ldr	r2, [pc, #60]	; (80056a8 <TIM_Base_SetConfig+0x118>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_Base_SetConfig+0xe8>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a0e      	ldr	r2, [pc, #56]	; (80056ac <TIM_Base_SetConfig+0x11c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d103      	bne.n	8005680 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	691a      	ldr	r2, [r3, #16]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	615a      	str	r2, [r3, #20]
}
 8005686:	bf00      	nop
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40013400 	.word	0x40013400
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40014400 	.word	0x40014400
 80056ac:	40014800 	.word	0x40014800

080056b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f023 0201 	bic.w	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f023 0302 	bic.w	r3, r3, #2
 80056fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a2c      	ldr	r2, [pc, #176]	; (80057bc <TIM_OC1_SetConfig+0x10c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00f      	beq.n	8005730 <TIM_OC1_SetConfig+0x80>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a2b      	ldr	r2, [pc, #172]	; (80057c0 <TIM_OC1_SetConfig+0x110>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00b      	beq.n	8005730 <TIM_OC1_SetConfig+0x80>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a2a      	ldr	r2, [pc, #168]	; (80057c4 <TIM_OC1_SetConfig+0x114>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d007      	beq.n	8005730 <TIM_OC1_SetConfig+0x80>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a29      	ldr	r2, [pc, #164]	; (80057c8 <TIM_OC1_SetConfig+0x118>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d003      	beq.n	8005730 <TIM_OC1_SetConfig+0x80>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a28      	ldr	r2, [pc, #160]	; (80057cc <TIM_OC1_SetConfig+0x11c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d10c      	bne.n	800574a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f023 0308 	bic.w	r3, r3, #8
 8005736:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f023 0304 	bic.w	r3, r3, #4
 8005748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1b      	ldr	r2, [pc, #108]	; (80057bc <TIM_OC1_SetConfig+0x10c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00f      	beq.n	8005772 <TIM_OC1_SetConfig+0xc2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1a      	ldr	r2, [pc, #104]	; (80057c0 <TIM_OC1_SetConfig+0x110>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_OC1_SetConfig+0xc2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a19      	ldr	r2, [pc, #100]	; (80057c4 <TIM_OC1_SetConfig+0x114>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d007      	beq.n	8005772 <TIM_OC1_SetConfig+0xc2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a18      	ldr	r2, [pc, #96]	; (80057c8 <TIM_OC1_SetConfig+0x118>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_OC1_SetConfig+0xc2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a17      	ldr	r2, [pc, #92]	; (80057cc <TIM_OC1_SetConfig+0x11c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d111      	bne.n	8005796 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	621a      	str	r2, [r3, #32]
}
 80057b0:	bf00      	nop
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40013400 	.word	0x40013400
 80057c4:	40014000 	.word	0x40014000
 80057c8:	40014400 	.word	0x40014400
 80057cc:	40014800 	.word	0x40014800

080057d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	f023 0210 	bic.w	r2, r3, #16
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f023 0320 	bic.w	r3, r3, #32
 800581e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a28      	ldr	r2, [pc, #160]	; (80058d0 <TIM_OC2_SetConfig+0x100>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_OC2_SetConfig+0x6c>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a27      	ldr	r2, [pc, #156]	; (80058d4 <TIM_OC2_SetConfig+0x104>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d10d      	bne.n	8005858 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005856:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a1d      	ldr	r2, [pc, #116]	; (80058d0 <TIM_OC2_SetConfig+0x100>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00f      	beq.n	8005880 <TIM_OC2_SetConfig+0xb0>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a1c      	ldr	r2, [pc, #112]	; (80058d4 <TIM_OC2_SetConfig+0x104>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00b      	beq.n	8005880 <TIM_OC2_SetConfig+0xb0>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a1b      	ldr	r2, [pc, #108]	; (80058d8 <TIM_OC2_SetConfig+0x108>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d007      	beq.n	8005880 <TIM_OC2_SetConfig+0xb0>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a1a      	ldr	r2, [pc, #104]	; (80058dc <TIM_OC2_SetConfig+0x10c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_OC2_SetConfig+0xb0>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <TIM_OC2_SetConfig+0x110>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d113      	bne.n	80058a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800588e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40012c00 	.word	0x40012c00
 80058d4:	40013400 	.word	0x40013400
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40014400 	.word	0x40014400
 80058e0:	40014800 	.word	0x40014800

080058e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0303 	bic.w	r3, r3, #3
 800591e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a27      	ldr	r2, [pc, #156]	; (80059e0 <TIM_OC3_SetConfig+0xfc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d003      	beq.n	800594e <TIM_OC3_SetConfig+0x6a>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a26      	ldr	r2, [pc, #152]	; (80059e4 <TIM_OC3_SetConfig+0x100>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d10d      	bne.n	800596a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <TIM_OC3_SetConfig+0xfc>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00f      	beq.n	8005992 <TIM_OC3_SetConfig+0xae>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <TIM_OC3_SetConfig+0x100>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00b      	beq.n	8005992 <TIM_OC3_SetConfig+0xae>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a1a      	ldr	r2, [pc, #104]	; (80059e8 <TIM_OC3_SetConfig+0x104>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d007      	beq.n	8005992 <TIM_OC3_SetConfig+0xae>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a19      	ldr	r2, [pc, #100]	; (80059ec <TIM_OC3_SetConfig+0x108>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d003      	beq.n	8005992 <TIM_OC3_SetConfig+0xae>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a18      	ldr	r2, [pc, #96]	; (80059f0 <TIM_OC3_SetConfig+0x10c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d113      	bne.n	80059ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	621a      	str	r2, [r3, #32]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	40012c00 	.word	0x40012c00
 80059e4:	40013400 	.word	0x40013400
 80059e8:	40014000 	.word	0x40014000
 80059ec:	40014400 	.word	0x40014400
 80059f0:	40014800 	.word	0x40014800

080059f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	021b      	lsls	r3, r3, #8
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	031b      	lsls	r3, r3, #12
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a28      	ldr	r2, [pc, #160]	; (8005af4 <TIM_OC4_SetConfig+0x100>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC4_SetConfig+0x6c>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a27      	ldr	r2, [pc, #156]	; (8005af8 <TIM_OC4_SetConfig+0x104>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d10d      	bne.n	8005a7c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	031b      	lsls	r3, r3, #12
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <TIM_OC4_SetConfig+0x100>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00f      	beq.n	8005aa4 <TIM_OC4_SetConfig+0xb0>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a1c      	ldr	r2, [pc, #112]	; (8005af8 <TIM_OC4_SetConfig+0x104>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00b      	beq.n	8005aa4 <TIM_OC4_SetConfig+0xb0>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a1b      	ldr	r2, [pc, #108]	; (8005afc <TIM_OC4_SetConfig+0x108>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d007      	beq.n	8005aa4 <TIM_OC4_SetConfig+0xb0>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a1a      	ldr	r2, [pc, #104]	; (8005b00 <TIM_OC4_SetConfig+0x10c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_OC4_SetConfig+0xb0>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a19      	ldr	r2, [pc, #100]	; (8005b04 <TIM_OC4_SetConfig+0x110>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d113      	bne.n	8005acc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ab2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	019b      	lsls	r3, r3, #6
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	019b      	lsls	r3, r3, #6
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	621a      	str	r2, [r3, #32]
}
 8005ae6:	bf00      	nop
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40012c00 	.word	0x40012c00
 8005af8:	40013400 	.word	0x40013400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800

08005b08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a17      	ldr	r2, [pc, #92]	; (8005bbc <TIM_OC5_SetConfig+0xb4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00f      	beq.n	8005b82 <TIM_OC5_SetConfig+0x7a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a16      	ldr	r2, [pc, #88]	; (8005bc0 <TIM_OC5_SetConfig+0xb8>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d00b      	beq.n	8005b82 <TIM_OC5_SetConfig+0x7a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a15      	ldr	r2, [pc, #84]	; (8005bc4 <TIM_OC5_SetConfig+0xbc>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d007      	beq.n	8005b82 <TIM_OC5_SetConfig+0x7a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a14      	ldr	r2, [pc, #80]	; (8005bc8 <TIM_OC5_SetConfig+0xc0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d003      	beq.n	8005b82 <TIM_OC5_SetConfig+0x7a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a13      	ldr	r2, [pc, #76]	; (8005bcc <TIM_OC5_SetConfig+0xc4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d109      	bne.n	8005b96 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	621a      	str	r2, [r3, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40013400 	.word	0x40013400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40014400 	.word	0x40014400
 8005bcc:	40014800 	.word	0x40014800

08005bd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	051b      	lsls	r3, r3, #20
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a18      	ldr	r2, [pc, #96]	; (8005c88 <TIM_OC6_SetConfig+0xb8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00f      	beq.n	8005c4c <TIM_OC6_SetConfig+0x7c>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <TIM_OC6_SetConfig+0xbc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00b      	beq.n	8005c4c <TIM_OC6_SetConfig+0x7c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a16      	ldr	r2, [pc, #88]	; (8005c90 <TIM_OC6_SetConfig+0xc0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d007      	beq.n	8005c4c <TIM_OC6_SetConfig+0x7c>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a15      	ldr	r2, [pc, #84]	; (8005c94 <TIM_OC6_SetConfig+0xc4>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d003      	beq.n	8005c4c <TIM_OC6_SetConfig+0x7c>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a14      	ldr	r2, [pc, #80]	; (8005c98 <TIM_OC6_SetConfig+0xc8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d109      	bne.n	8005c60 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	029b      	lsls	r3, r3, #10
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	621a      	str	r2, [r3, #32]
}
 8005c7a:	bf00      	nop
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	40012c00 	.word	0x40012c00
 8005c8c:	40013400 	.word	0x40013400
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40014400 	.word	0x40014400
 8005c98:	40014800 	.word	0x40014800

08005c9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	f023 0201 	bic.w	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f023 030a 	bic.w	r3, r3, #10
 8005cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b087      	sub	sp, #28
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f023 0210 	bic.w	r2, r3, #16
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	031b      	lsls	r3, r3, #12
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	011b      	lsls	r3, r3, #4
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f043 0307 	orr.w	r3, r3, #7
 8005d80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	609a      	str	r2, [r3, #8]
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	021a      	lsls	r2, r3, #8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	609a      	str	r2, [r3, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2201      	movs	r2, #1
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1a      	ldr	r2, [r3, #32]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	43db      	mvns	r3, r3
 8005df6:	401a      	ands	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1a      	ldr	r2, [r3, #32]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e065      	b.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a2c      	ldr	r2, [pc, #176]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d004      	beq.n	8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a2b      	ldr	r2, [pc, #172]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d108      	bne.n	8005e7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d018      	beq.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eae:	d013      	beq.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a18      	ldr	r2, [pc, #96]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00e      	beq.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a17      	ldr	r2, [pc, #92]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d009      	beq.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a12      	ldr	r2, [pc, #72]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d004      	beq.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a13      	ldr	r2, [pc, #76]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d10c      	bne.n	8005ef2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ede:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	40012c00 	.word	0x40012c00
 8005f14:	40013400 	.word	0x40013400
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800
 8005f20:	40014000 	.word	0x40014000

08005f24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	e087      	b.n	8006050 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	041b      	lsls	r3, r3, #16
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a27      	ldr	r2, [pc, #156]	; (800605c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d004      	beq.n	8005fce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a25      	ldr	r2, [pc, #148]	; (8006060 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d106      	bne.n	8005fdc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a1e      	ldr	r2, [pc, #120]	; (800605c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a1d      	ldr	r2, [pc, #116]	; (8006060 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d126      	bne.n	800603e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffa:	051b      	lsls	r3, r3, #20
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a0e      	ldr	r2, [pc, #56]	; (800605c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a0d      	ldr	r2, [pc, #52]	; (8006060 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d106      	bne.n	800603e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	40012c00 	.word	0x40012c00
 8006060:	40013400 	.word	0x40013400

08006064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e042      	b.n	80060fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7fc fb85 	bl	8002798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2224      	movs	r2, #36	; 0x24
 8006092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0201 	bic.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fafa 	bl	80066a0 <UART_SetConfig>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e022      	b.n	80060fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f001 fca8 	bl	8007a14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689a      	ldr	r2, [r3, #8]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 fd2f 	bl	8007b58 <UART_CheckIdleState>
 80060fa:	4603      	mov	r3, r0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3708      	adds	r7, #8
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	4613      	mov	r3, r2
 8006110:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006118:	2b20      	cmp	r3, #32
 800611a:	d168      	bne.n	80061ee <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <HAL_UART_Transmit_IT+0x24>
 8006122:	88fb      	ldrh	r3, [r7, #6]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e061      	b.n	80061f0 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006132:	2b01      	cmp	r3, #1
 8006134:	d101      	bne.n	800613a <HAL_UART_Transmit_IT+0x36>
 8006136:	2302      	movs	r3, #2
 8006138:	e05a      	b.n	80061f0 <HAL_UART_Transmit_IT+0xec>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	88fa      	ldrh	r2, [r7, #6]
 800614c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2221      	movs	r2, #33	; 0x21
 800616a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006176:	d11c      	bne.n	80061b2 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006180:	d107      	bne.n	8006192 <HAL_UART_Transmit_IT+0x8e>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d103      	bne.n	8006192 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4a1b      	ldr	r2, [pc, #108]	; (80061fc <HAL_UART_Transmit_IT+0xf8>)
 800618e:	671a      	str	r2, [r3, #112]	; 0x70
 8006190:	e002      	b.n	8006198 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4a1a      	ldr	r2, [pc, #104]	; (8006200 <HAL_UART_Transmit_IT+0xfc>)
 8006196:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689a      	ldr	r2, [r3, #8]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80061ae:	609a      	str	r2, [r3, #8]
 80061b0:	e01b      	b.n	80061ea <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ba:	d107      	bne.n	80061cc <HAL_UART_Transmit_IT+0xc8>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d103      	bne.n	80061cc <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4a0f      	ldr	r2, [pc, #60]	; (8006204 <HAL_UART_Transmit_IT+0x100>)
 80061c8:	671a      	str	r2, [r3, #112]	; 0x70
 80061ca:	e002      	b.n	80061d2 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4a0e      	ldr	r2, [pc, #56]	; (8006208 <HAL_UART_Transmit_IT+0x104>)
 80061d0:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061e8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e000      	b.n	80061f0 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80061ee:	2302      	movs	r3, #2
  }
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	08007e7b 	.word	0x08007e7b
 8006200:	08007de1 	.word	0x08007de1
 8006204:	08007d63 	.word	0x08007d63
 8006208:	08007cef 	.word	0x08007cef

0800620c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	4613      	mov	r3, r2
 8006218:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006220:	2b20      	cmp	r3, #32
 8006222:	f040 80bc 	bne.w	800639e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_UART_Receive_IT+0x26>
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e0b4      	b.n	80063a0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_UART_Receive_IT+0x38>
 8006240:	2302      	movs	r3, #2
 8006242:	e0ad      	b.n	80063a0 <HAL_UART_Receive_IT+0x194>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	88fa      	ldrh	r2, [r7, #6]
 800625e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006270:	d10e      	bne.n	8006290 <HAL_UART_Receive_IT+0x84>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d105      	bne.n	8006286 <HAL_UART_Receive_IT+0x7a>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006280:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006284:	e02d      	b.n	80062e2 <HAL_UART_Receive_IT+0xd6>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	22ff      	movs	r2, #255	; 0xff
 800628a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800628e:	e028      	b.n	80062e2 <HAL_UART_Receive_IT+0xd6>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10d      	bne.n	80062b4 <HAL_UART_Receive_IT+0xa8>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <HAL_UART_Receive_IT+0x9e>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	22ff      	movs	r2, #255	; 0xff
 80062a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062a8:	e01b      	b.n	80062e2 <HAL_UART_Receive_IT+0xd6>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	227f      	movs	r2, #127	; 0x7f
 80062ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062b2:	e016      	b.n	80062e2 <HAL_UART_Receive_IT+0xd6>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062bc:	d10d      	bne.n	80062da <HAL_UART_Receive_IT+0xce>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d104      	bne.n	80062d0 <HAL_UART_Receive_IT+0xc4>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	227f      	movs	r2, #127	; 0x7f
 80062ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062ce:	e008      	b.n	80062e2 <HAL_UART_Receive_IT+0xd6>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	223f      	movs	r2, #63	; 0x3f
 80062d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80062d8:	e003      	b.n	80062e2 <HAL_UART_Receive_IT+0xd6>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2222      	movs	r2, #34	; 0x22
 80062ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0201 	orr.w	r2, r2, #1
 8006300:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800630a:	d12a      	bne.n	8006362 <HAL_UART_Receive_IT+0x156>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006312:	88fa      	ldrh	r2, [r7, #6]
 8006314:	429a      	cmp	r2, r3
 8006316:	d324      	bcc.n	8006362 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006320:	d107      	bne.n	8006332 <HAL_UART_Receive_IT+0x126>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d103      	bne.n	8006332 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4a1f      	ldr	r2, [pc, #124]	; (80063ac <HAL_UART_Receive_IT+0x1a0>)
 800632e:	66da      	str	r2, [r3, #108]	; 0x6c
 8006330:	e002      	b.n	8006338 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <HAL_UART_Receive_IT+0x1a4>)
 8006336:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800634e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800635e:	609a      	str	r2, [r3, #8]
 8006360:	e01b      	b.n	800639a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636a:	d107      	bne.n	800637c <HAL_UART_Receive_IT+0x170>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d103      	bne.n	800637c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4a0f      	ldr	r2, [pc, #60]	; (80063b4 <HAL_UART_Receive_IT+0x1a8>)
 8006378:	66da      	str	r2, [r3, #108]	; 0x6c
 800637a:	e002      	b.n	8006382 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4a0e      	ldr	r2, [pc, #56]	; (80063b8 <HAL_UART_Receive_IT+0x1ac>)
 8006380:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006398:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	e000      	b.n	80063a0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800639e:	2302      	movs	r3, #2
  }
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	080081b1 	.word	0x080081b1
 80063b0:	080080a9 	.word	0x080080a9
 80063b4:	08007ffd 	.word	0x08007ffd
 80063b8:	08007f53 	.word	0x08007f53

080063bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d118      	bne.n	800641c <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d013      	beq.n	800641c <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d009      	beq.n	800641c <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 812e 	beq.w	800666e <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
      }
      return;
 800641a:	e128      	b.n	800666e <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 80d1 	beq.w	80065c6 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	4b96      	ldr	r3, [pc, #600]	; (8006680 <HAL_UART_IRQHandler+0x2c4>)
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d105      	bne.n	800643a <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80c6 	beq.w	80065c6 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d010      	beq.n	8006466 <HAL_UART_IRQHandler+0xaa>
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00b      	beq.n	8006466 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2201      	movs	r2, #1
 8006454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800645c:	f043 0201 	orr.w	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d010      	beq.n	8006492 <HAL_UART_IRQHandler+0xd6>
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2202      	movs	r2, #2
 8006480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006488:	f043 0204 	orr.w	r2, r3, #4
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d010      	beq.n	80064be <HAL_UART_IRQHandler+0x102>
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00b      	beq.n	80064be <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2204      	movs	r2, #4
 80064ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b4:	f043 0202 	orr.w	r2, r3, #2
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d015      	beq.n	80064f4 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d104      	bne.n	80064dc <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4b6a      	ldr	r3, [pc, #424]	; (8006680 <HAL_UART_IRQHandler+0x2c4>)
 80064d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00b      	beq.n	80064f4 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2208      	movs	r2, #8
 80064e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ea:	f043 0208 	orr.w	r2, r3, #8
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 80b9 	beq.w	8006672 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d011      	beq.n	800652e <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	d104      	bne.n	800651e <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006540:	2b40      	cmp	r3, #64	; 0x40
 8006542:	d004      	beq.n	800654e <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800654a:	2b00      	cmp	r3, #0
 800654c:	d031      	beq.n	80065b2 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fb94 	bl	8007c7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b40      	cmp	r3, #64	; 0x40
 8006560:	d123      	bne.n	80065aa <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006570:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006576:	2b00      	cmp	r3, #0
 8006578:	d013      	beq.n	80065a2 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800657e:	4a41      	ldr	r2, [pc, #260]	; (8006684 <HAL_UART_IRQHandler+0x2c8>)
 8006580:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006586:	4618      	mov	r0, r3
 8006588:	f7fc fc76 	bl	8002e78 <HAL_DMA_Abort_IT>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d017      	beq.n	80065c2 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800659c:	4610      	mov	r0, r2
 800659e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a0:	e00f      	b.n	80065c2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f870 	bl	8006688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a8:	e00b      	b.n	80065c2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f86c 	bl	8006688 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b0:	e007      	b.n	80065c2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f868 	bl	8006688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80065c0:	e057      	b.n	8006672 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c2:	bf00      	nop
    return;
 80065c4:	e055      	b.n	8006672 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00d      	beq.n	80065ec <HAL_UART_IRQHandler+0x230>
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d008      	beq.n	80065ec <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80065e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 fe67 	bl	80082b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065ea:	e045      	b.n	8006678 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d012      	beq.n	800661c <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d104      	bne.n	800660a <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d008      	beq.n	800661c <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660e:	2b00      	cmp	r3, #0
 8006610:	d031      	beq.n	8006676 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	4798      	blx	r3
    }
    return;
 800661a:	e02c      	b.n	8006676 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	d008      	beq.n	8006638 <HAL_UART_IRQHandler+0x27c>
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662c:	2b00      	cmp	r3, #0
 800662e:	d003      	beq.n	8006638 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 fc74 	bl	8007f1e <UART_EndTransmit_IT>
    return;
 8006636:	e01f      	b.n	8006678 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d008      	beq.n	8006654 <HAL_UART_IRQHandler+0x298>
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 fe47 	bl	80082e0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006652:	e011      	b.n	8006678 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <HAL_UART_IRQHandler+0x2bc>
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	2b00      	cmp	r3, #0
 8006662:	da09      	bge.n	8006678 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f001 fe31 	bl	80082cc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800666a:	bf00      	nop
 800666c:	e004      	b.n	8006678 <HAL_UART_IRQHandler+0x2bc>
      return;
 800666e:	bf00      	nop
 8006670:	e002      	b.n	8006678 <HAL_UART_IRQHandler+0x2bc>
    return;
 8006672:	bf00      	nop
 8006674:	e000      	b.n	8006678 <HAL_UART_IRQHandler+0x2bc>
    return;
 8006676:	bf00      	nop
  }
}
 8006678:	3720      	adds	r7, #32
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	10000001 	.word	0x10000001
 8006684:	08007cc3 	.word	0x08007cc3

08006688 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	0000      	movs	r0, r0
	...

080066a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80066a4:	b08a      	sub	sp, #40	; 0x28
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	695b      	ldr	r3, [r3, #20]
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d4:	4313      	orrs	r3, r2
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	4ba4      	ldr	r3, [pc, #656]	; (8006970 <UART_SetConfig+0x2d0>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066e8:	430b      	orrs	r3, r1
 80066ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a99      	ldr	r2, [pc, #612]	; (8006974 <UART_SetConfig+0x2d4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d004      	beq.n	800671c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006718:	4313      	orrs	r3, r2
 800671a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006726:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6812      	ldr	r2, [r2, #0]
 800672e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006730:	430b      	orrs	r3, r1
 8006732:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800673a:	f023 010f 	bic.w	r1, r3, #15
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a8a      	ldr	r2, [pc, #552]	; (8006978 <UART_SetConfig+0x2d8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d126      	bne.n	80067a2 <UART_SetConfig+0x102>
 8006754:	4b89      	ldr	r3, [pc, #548]	; (800697c <UART_SetConfig+0x2dc>)
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675a:	f003 0303 	and.w	r3, r3, #3
 800675e:	2b03      	cmp	r3, #3
 8006760:	d81a      	bhi.n	8006798 <UART_SetConfig+0xf8>
 8006762:	a201      	add	r2, pc, #4	; (adr r2, 8006768 <UART_SetConfig+0xc8>)
 8006764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006768:	08006779 	.word	0x08006779
 800676c:	08006789 	.word	0x08006789
 8006770:	08006781 	.word	0x08006781
 8006774:	08006791 	.word	0x08006791
 8006778:	2301      	movs	r3, #1
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677e:	e0d6      	b.n	800692e <UART_SetConfig+0x28e>
 8006780:	2302      	movs	r3, #2
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006786:	e0d2      	b.n	800692e <UART_SetConfig+0x28e>
 8006788:	2304      	movs	r3, #4
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678e:	e0ce      	b.n	800692e <UART_SetConfig+0x28e>
 8006790:	2308      	movs	r3, #8
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006796:	e0ca      	b.n	800692e <UART_SetConfig+0x28e>
 8006798:	2310      	movs	r3, #16
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679e:	bf00      	nop
 80067a0:	e0c5      	b.n	800692e <UART_SetConfig+0x28e>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a76      	ldr	r2, [pc, #472]	; (8006980 <UART_SetConfig+0x2e0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d138      	bne.n	800681e <UART_SetConfig+0x17e>
 80067ac:	4b73      	ldr	r3, [pc, #460]	; (800697c <UART_SetConfig+0x2dc>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b2:	f003 030c 	and.w	r3, r3, #12
 80067b6:	2b0c      	cmp	r3, #12
 80067b8:	d82c      	bhi.n	8006814 <UART_SetConfig+0x174>
 80067ba:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <UART_SetConfig+0x120>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	080067f5 	.word	0x080067f5
 80067c4:	08006815 	.word	0x08006815
 80067c8:	08006815 	.word	0x08006815
 80067cc:	08006815 	.word	0x08006815
 80067d0:	08006805 	.word	0x08006805
 80067d4:	08006815 	.word	0x08006815
 80067d8:	08006815 	.word	0x08006815
 80067dc:	08006815 	.word	0x08006815
 80067e0:	080067fd 	.word	0x080067fd
 80067e4:	08006815 	.word	0x08006815
 80067e8:	08006815 	.word	0x08006815
 80067ec:	08006815 	.word	0x08006815
 80067f0:	0800680d 	.word	0x0800680d
 80067f4:	2300      	movs	r3, #0
 80067f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fa:	e098      	b.n	800692e <UART_SetConfig+0x28e>
 80067fc:	2302      	movs	r3, #2
 80067fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006802:	e094      	b.n	800692e <UART_SetConfig+0x28e>
 8006804:	2304      	movs	r3, #4
 8006806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680a:	e090      	b.n	800692e <UART_SetConfig+0x28e>
 800680c:	2308      	movs	r3, #8
 800680e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006812:	e08c      	b.n	800692e <UART_SetConfig+0x28e>
 8006814:	2310      	movs	r3, #16
 8006816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800681a:	bf00      	nop
 800681c:	e087      	b.n	800692e <UART_SetConfig+0x28e>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a58      	ldr	r2, [pc, #352]	; (8006984 <UART_SetConfig+0x2e4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d125      	bne.n	8006874 <UART_SetConfig+0x1d4>
 8006828:	4b54      	ldr	r3, [pc, #336]	; (800697c <UART_SetConfig+0x2dc>)
 800682a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006832:	2b10      	cmp	r3, #16
 8006834:	d011      	beq.n	800685a <UART_SetConfig+0x1ba>
 8006836:	2b10      	cmp	r3, #16
 8006838:	d802      	bhi.n	8006840 <UART_SetConfig+0x1a0>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d005      	beq.n	800684a <UART_SetConfig+0x1aa>
 800683e:	e014      	b.n	800686a <UART_SetConfig+0x1ca>
 8006840:	2b20      	cmp	r3, #32
 8006842:	d006      	beq.n	8006852 <UART_SetConfig+0x1b2>
 8006844:	2b30      	cmp	r3, #48	; 0x30
 8006846:	d00c      	beq.n	8006862 <UART_SetConfig+0x1c2>
 8006848:	e00f      	b.n	800686a <UART_SetConfig+0x1ca>
 800684a:	2300      	movs	r3, #0
 800684c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006850:	e06d      	b.n	800692e <UART_SetConfig+0x28e>
 8006852:	2302      	movs	r3, #2
 8006854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006858:	e069      	b.n	800692e <UART_SetConfig+0x28e>
 800685a:	2304      	movs	r3, #4
 800685c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006860:	e065      	b.n	800692e <UART_SetConfig+0x28e>
 8006862:	2308      	movs	r3, #8
 8006864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006868:	e061      	b.n	800692e <UART_SetConfig+0x28e>
 800686a:	2310      	movs	r3, #16
 800686c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006870:	bf00      	nop
 8006872:	e05c      	b.n	800692e <UART_SetConfig+0x28e>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a43      	ldr	r2, [pc, #268]	; (8006988 <UART_SetConfig+0x2e8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d125      	bne.n	80068ca <UART_SetConfig+0x22a>
 800687e:	4b3f      	ldr	r3, [pc, #252]	; (800697c <UART_SetConfig+0x2dc>)
 8006880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006884:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	d011      	beq.n	80068b0 <UART_SetConfig+0x210>
 800688c:	2b40      	cmp	r3, #64	; 0x40
 800688e:	d802      	bhi.n	8006896 <UART_SetConfig+0x1f6>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d005      	beq.n	80068a0 <UART_SetConfig+0x200>
 8006894:	e014      	b.n	80068c0 <UART_SetConfig+0x220>
 8006896:	2b80      	cmp	r3, #128	; 0x80
 8006898:	d006      	beq.n	80068a8 <UART_SetConfig+0x208>
 800689a:	2bc0      	cmp	r3, #192	; 0xc0
 800689c:	d00c      	beq.n	80068b8 <UART_SetConfig+0x218>
 800689e:	e00f      	b.n	80068c0 <UART_SetConfig+0x220>
 80068a0:	2300      	movs	r3, #0
 80068a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a6:	e042      	b.n	800692e <UART_SetConfig+0x28e>
 80068a8:	2302      	movs	r3, #2
 80068aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ae:	e03e      	b.n	800692e <UART_SetConfig+0x28e>
 80068b0:	2304      	movs	r3, #4
 80068b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b6:	e03a      	b.n	800692e <UART_SetConfig+0x28e>
 80068b8:	2308      	movs	r3, #8
 80068ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068be:	e036      	b.n	800692e <UART_SetConfig+0x28e>
 80068c0:	2310      	movs	r3, #16
 80068c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c6:	bf00      	nop
 80068c8:	e031      	b.n	800692e <UART_SetConfig+0x28e>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a29      	ldr	r2, [pc, #164]	; (8006974 <UART_SetConfig+0x2d4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d129      	bne.n	8006928 <UART_SetConfig+0x288>
 80068d4:	4b29      	ldr	r3, [pc, #164]	; (800697c <UART_SetConfig+0x2dc>)
 80068d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e2:	d014      	beq.n	800690e <UART_SetConfig+0x26e>
 80068e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e8:	d802      	bhi.n	80068f0 <UART_SetConfig+0x250>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d007      	beq.n	80068fe <UART_SetConfig+0x25e>
 80068ee:	e016      	b.n	800691e <UART_SetConfig+0x27e>
 80068f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f4:	d007      	beq.n	8006906 <UART_SetConfig+0x266>
 80068f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068fa:	d00c      	beq.n	8006916 <UART_SetConfig+0x276>
 80068fc:	e00f      	b.n	800691e <UART_SetConfig+0x27e>
 80068fe:	2300      	movs	r3, #0
 8006900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006904:	e013      	b.n	800692e <UART_SetConfig+0x28e>
 8006906:	2302      	movs	r3, #2
 8006908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800690c:	e00f      	b.n	800692e <UART_SetConfig+0x28e>
 800690e:	2304      	movs	r3, #4
 8006910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006914:	e00b      	b.n	800692e <UART_SetConfig+0x28e>
 8006916:	2308      	movs	r3, #8
 8006918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800691c:	e007      	b.n	800692e <UART_SetConfig+0x28e>
 800691e:	2310      	movs	r3, #16
 8006920:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006924:	bf00      	nop
 8006926:	e002      	b.n	800692e <UART_SetConfig+0x28e>
 8006928:	2310      	movs	r3, #16
 800692a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a10      	ldr	r2, [pc, #64]	; (8006974 <UART_SetConfig+0x2d4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	f040 842e 	bne.w	8007196 <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800693a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800693e:	2b08      	cmp	r3, #8
 8006940:	f200 8169 	bhi.w	8006c16 <UART_SetConfig+0x576>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0x2ac>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	0800698d 	.word	0x0800698d
 8006950:	08006c17 	.word	0x08006c17
 8006954:	08006a2f 	.word	0x08006a2f
 8006958:	08006c17 	.word	0x08006c17
 800695c:	08006ac7 	.word	0x08006ac7
 8006960:	08006c17 	.word	0x08006c17
 8006964:	08006c17 	.word	0x08006c17
 8006968:	08006c17 	.word	0x08006c17
 800696c:	08006b69 	.word	0x08006b69
 8006970:	cfff69f3 	.word	0xcfff69f3
 8006974:	40008000 	.word	0x40008000
 8006978:	40013800 	.word	0x40013800
 800697c:	40021000 	.word	0x40021000
 8006980:	40004400 	.word	0x40004400
 8006984:	40004800 	.word	0x40004800
 8006988:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800698c:	f7fd fff6 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 8006990:	4602      	mov	r2, r0
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	2b00      	cmp	r3, #0
 8006998:	d044      	beq.n	8006a24 <UART_SetConfig+0x384>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d03e      	beq.n	8006a20 <UART_SetConfig+0x380>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d038      	beq.n	8006a1c <UART_SetConfig+0x37c>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	d032      	beq.n	8006a18 <UART_SetConfig+0x378>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b6:	2b04      	cmp	r3, #4
 80069b8:	d02c      	beq.n	8006a14 <UART_SetConfig+0x374>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069be:	2b05      	cmp	r3, #5
 80069c0:	d026      	beq.n	8006a10 <UART_SetConfig+0x370>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	2b06      	cmp	r3, #6
 80069c8:	d020      	beq.n	8006a0c <UART_SetConfig+0x36c>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	2b07      	cmp	r3, #7
 80069d0:	d01a      	beq.n	8006a08 <UART_SetConfig+0x368>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	d014      	beq.n	8006a04 <UART_SetConfig+0x364>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	2b09      	cmp	r3, #9
 80069e0:	d00e      	beq.n	8006a00 <UART_SetConfig+0x360>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	2b0a      	cmp	r3, #10
 80069e8:	d008      	beq.n	80069fc <UART_SetConfig+0x35c>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	2b0b      	cmp	r3, #11
 80069f0:	d102      	bne.n	80069f8 <UART_SetConfig+0x358>
 80069f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069f6:	e016      	b.n	8006a26 <UART_SetConfig+0x386>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e014      	b.n	8006a26 <UART_SetConfig+0x386>
 80069fc:	2380      	movs	r3, #128	; 0x80
 80069fe:	e012      	b.n	8006a26 <UART_SetConfig+0x386>
 8006a00:	2340      	movs	r3, #64	; 0x40
 8006a02:	e010      	b.n	8006a26 <UART_SetConfig+0x386>
 8006a04:	2320      	movs	r3, #32
 8006a06:	e00e      	b.n	8006a26 <UART_SetConfig+0x386>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	e00c      	b.n	8006a26 <UART_SetConfig+0x386>
 8006a0c:	230c      	movs	r3, #12
 8006a0e:	e00a      	b.n	8006a26 <UART_SetConfig+0x386>
 8006a10:	230a      	movs	r3, #10
 8006a12:	e008      	b.n	8006a26 <UART_SetConfig+0x386>
 8006a14:	2308      	movs	r3, #8
 8006a16:	e006      	b.n	8006a26 <UART_SetConfig+0x386>
 8006a18:	2306      	movs	r3, #6
 8006a1a:	e004      	b.n	8006a26 <UART_SetConfig+0x386>
 8006a1c:	2304      	movs	r3, #4
 8006a1e:	e002      	b.n	8006a26 <UART_SetConfig+0x386>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e000      	b.n	8006a26 <UART_SetConfig+0x386>
 8006a24:	2301      	movs	r3, #1
 8006a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2a:	617b      	str	r3, [r7, #20]
        break;
 8006a2c:	e0f6      	b.n	8006c1c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d044      	beq.n	8006ac0 <UART_SetConfig+0x420>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d03e      	beq.n	8006abc <UART_SetConfig+0x41c>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d038      	beq.n	8006ab8 <UART_SetConfig+0x418>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d032      	beq.n	8006ab4 <UART_SetConfig+0x414>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d02c      	beq.n	8006ab0 <UART_SetConfig+0x410>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	2b05      	cmp	r3, #5
 8006a5c:	d026      	beq.n	8006aac <UART_SetConfig+0x40c>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2b06      	cmp	r3, #6
 8006a64:	d020      	beq.n	8006aa8 <UART_SetConfig+0x408>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6a:	2b07      	cmp	r3, #7
 8006a6c:	d01a      	beq.n	8006aa4 <UART_SetConfig+0x404>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d014      	beq.n	8006aa0 <UART_SetConfig+0x400>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	2b09      	cmp	r3, #9
 8006a7c:	d00e      	beq.n	8006a9c <UART_SetConfig+0x3fc>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	2b0a      	cmp	r3, #10
 8006a84:	d008      	beq.n	8006a98 <UART_SetConfig+0x3f8>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8a:	2b0b      	cmp	r3, #11
 8006a8c:	d102      	bne.n	8006a94 <UART_SetConfig+0x3f4>
 8006a8e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006a92:	e016      	b.n	8006ac2 <UART_SetConfig+0x422>
 8006a94:	4ba1      	ldr	r3, [pc, #644]	; (8006d1c <UART_SetConfig+0x67c>)
 8006a96:	e014      	b.n	8006ac2 <UART_SetConfig+0x422>
 8006a98:	4ba1      	ldr	r3, [pc, #644]	; (8006d20 <UART_SetConfig+0x680>)
 8006a9a:	e012      	b.n	8006ac2 <UART_SetConfig+0x422>
 8006a9c:	4ba1      	ldr	r3, [pc, #644]	; (8006d24 <UART_SetConfig+0x684>)
 8006a9e:	e010      	b.n	8006ac2 <UART_SetConfig+0x422>
 8006aa0:	4ba1      	ldr	r3, [pc, #644]	; (8006d28 <UART_SetConfig+0x688>)
 8006aa2:	e00e      	b.n	8006ac2 <UART_SetConfig+0x422>
 8006aa4:	4ba1      	ldr	r3, [pc, #644]	; (8006d2c <UART_SetConfig+0x68c>)
 8006aa6:	e00c      	b.n	8006ac2 <UART_SetConfig+0x422>
 8006aa8:	4ba1      	ldr	r3, [pc, #644]	; (8006d30 <UART_SetConfig+0x690>)
 8006aaa:	e00a      	b.n	8006ac2 <UART_SetConfig+0x422>
 8006aac:	4ba1      	ldr	r3, [pc, #644]	; (8006d34 <UART_SetConfig+0x694>)
 8006aae:	e008      	b.n	8006ac2 <UART_SetConfig+0x422>
 8006ab0:	4ba1      	ldr	r3, [pc, #644]	; (8006d38 <UART_SetConfig+0x698>)
 8006ab2:	e006      	b.n	8006ac2 <UART_SetConfig+0x422>
 8006ab4:	4ba1      	ldr	r3, [pc, #644]	; (8006d3c <UART_SetConfig+0x69c>)
 8006ab6:	e004      	b.n	8006ac2 <UART_SetConfig+0x422>
 8006ab8:	4ba1      	ldr	r3, [pc, #644]	; (8006d40 <UART_SetConfig+0x6a0>)
 8006aba:	e002      	b.n	8006ac2 <UART_SetConfig+0x422>
 8006abc:	4ba1      	ldr	r3, [pc, #644]	; (8006d44 <UART_SetConfig+0x6a4>)
 8006abe:	e000      	b.n	8006ac2 <UART_SetConfig+0x422>
 8006ac0:	4b96      	ldr	r3, [pc, #600]	; (8006d1c <UART_SetConfig+0x67c>)
 8006ac2:	617b      	str	r3, [r7, #20]
        break;
 8006ac4:	e0aa      	b.n	8006c1c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006ac6:	f7fd feeb 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 8006aca:	4602      	mov	r2, r0
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d044      	beq.n	8006b5e <UART_SetConfig+0x4be>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d03e      	beq.n	8006b5a <UART_SetConfig+0x4ba>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d038      	beq.n	8006b56 <UART_SetConfig+0x4b6>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d032      	beq.n	8006b52 <UART_SetConfig+0x4b2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	d02c      	beq.n	8006b4e <UART_SetConfig+0x4ae>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	2b05      	cmp	r3, #5
 8006afa:	d026      	beq.n	8006b4a <UART_SetConfig+0x4aa>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	2b06      	cmp	r3, #6
 8006b02:	d020      	beq.n	8006b46 <UART_SetConfig+0x4a6>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	2b07      	cmp	r3, #7
 8006b0a:	d01a      	beq.n	8006b42 <UART_SetConfig+0x4a2>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	2b08      	cmp	r3, #8
 8006b12:	d014      	beq.n	8006b3e <UART_SetConfig+0x49e>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	2b09      	cmp	r3, #9
 8006b1a:	d00e      	beq.n	8006b3a <UART_SetConfig+0x49a>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	2b0a      	cmp	r3, #10
 8006b22:	d008      	beq.n	8006b36 <UART_SetConfig+0x496>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	2b0b      	cmp	r3, #11
 8006b2a:	d102      	bne.n	8006b32 <UART_SetConfig+0x492>
 8006b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b30:	e016      	b.n	8006b60 <UART_SetConfig+0x4c0>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e014      	b.n	8006b60 <UART_SetConfig+0x4c0>
 8006b36:	2380      	movs	r3, #128	; 0x80
 8006b38:	e012      	b.n	8006b60 <UART_SetConfig+0x4c0>
 8006b3a:	2340      	movs	r3, #64	; 0x40
 8006b3c:	e010      	b.n	8006b60 <UART_SetConfig+0x4c0>
 8006b3e:	2320      	movs	r3, #32
 8006b40:	e00e      	b.n	8006b60 <UART_SetConfig+0x4c0>
 8006b42:	2310      	movs	r3, #16
 8006b44:	e00c      	b.n	8006b60 <UART_SetConfig+0x4c0>
 8006b46:	230c      	movs	r3, #12
 8006b48:	e00a      	b.n	8006b60 <UART_SetConfig+0x4c0>
 8006b4a:	230a      	movs	r3, #10
 8006b4c:	e008      	b.n	8006b60 <UART_SetConfig+0x4c0>
 8006b4e:	2308      	movs	r3, #8
 8006b50:	e006      	b.n	8006b60 <UART_SetConfig+0x4c0>
 8006b52:	2306      	movs	r3, #6
 8006b54:	e004      	b.n	8006b60 <UART_SetConfig+0x4c0>
 8006b56:	2304      	movs	r3, #4
 8006b58:	e002      	b.n	8006b60 <UART_SetConfig+0x4c0>
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	e000      	b.n	8006b60 <UART_SetConfig+0x4c0>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b64:	617b      	str	r3, [r7, #20]
        break;
 8006b66:	e059      	b.n	8006c1c <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d04e      	beq.n	8006c0e <UART_SetConfig+0x56e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d047      	beq.n	8006c08 <UART_SetConfig+0x568>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d040      	beq.n	8006c02 <UART_SetConfig+0x562>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	2b03      	cmp	r3, #3
 8006b86:	d039      	beq.n	8006bfc <UART_SetConfig+0x55c>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d032      	beq.n	8006bf6 <UART_SetConfig+0x556>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	2b05      	cmp	r3, #5
 8006b96:	d02b      	beq.n	8006bf0 <UART_SetConfig+0x550>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	2b06      	cmp	r3, #6
 8006b9e:	d024      	beq.n	8006bea <UART_SetConfig+0x54a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	2b07      	cmp	r3, #7
 8006ba6:	d01d      	beq.n	8006be4 <UART_SetConfig+0x544>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d016      	beq.n	8006bde <UART_SetConfig+0x53e>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb4:	2b09      	cmp	r3, #9
 8006bb6:	d00f      	beq.n	8006bd8 <UART_SetConfig+0x538>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	2b0a      	cmp	r3, #10
 8006bbe:	d008      	beq.n	8006bd2 <UART_SetConfig+0x532>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	2b0b      	cmp	r3, #11
 8006bc6:	d101      	bne.n	8006bcc <UART_SetConfig+0x52c>
 8006bc8:	2380      	movs	r3, #128	; 0x80
 8006bca:	e022      	b.n	8006c12 <UART_SetConfig+0x572>
 8006bcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bd0:	e01f      	b.n	8006c12 <UART_SetConfig+0x572>
 8006bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bd6:	e01c      	b.n	8006c12 <UART_SetConfig+0x572>
 8006bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bdc:	e019      	b.n	8006c12 <UART_SetConfig+0x572>
 8006bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006be2:	e016      	b.n	8006c12 <UART_SetConfig+0x572>
 8006be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006be8:	e013      	b.n	8006c12 <UART_SetConfig+0x572>
 8006bea:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006bee:	e010      	b.n	8006c12 <UART_SetConfig+0x572>
 8006bf0:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006bf4:	e00d      	b.n	8006c12 <UART_SetConfig+0x572>
 8006bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bfa:	e00a      	b.n	8006c12 <UART_SetConfig+0x572>
 8006bfc:	f241 5355 	movw	r3, #5461	; 0x1555
 8006c00:	e007      	b.n	8006c12 <UART_SetConfig+0x572>
 8006c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c06:	e004      	b.n	8006c12 <UART_SetConfig+0x572>
 8006c08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c0c:	e001      	b.n	8006c12 <UART_SetConfig+0x572>
 8006c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c12:	617b      	str	r3, [r7, #20]
        break;
 8006c14:	e002      	b.n	8006c1c <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	76fb      	strb	r3, [r7, #27]
        break;
 8006c1a:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 86cd 	beq.w	80079be <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	4413      	add	r3, r2
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d305      	bcc.n	8006c40 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d903      	bls.n	8006c48 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	76fb      	strb	r3, [r7, #27]
 8006c44:	f000 bebb 	b.w	80079be <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8006c48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	f200 828d 	bhi.w	800716c <UART_SetConfig+0xacc>
 8006c52:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <UART_SetConfig+0x5b8>)
 8006c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c58:	08006c7d 	.word	0x08006c7d
 8006c5c:	0800716d 	.word	0x0800716d
 8006c60:	08006de7 	.word	0x08006de7
 8006c64:	0800716d 	.word	0x0800716d
 8006c68:	08006edd 	.word	0x08006edd
 8006c6c:	0800716d 	.word	0x0800716d
 8006c70:	0800716d 	.word	0x0800716d
 8006c74:	0800716d 	.word	0x0800716d
 8006c78:	0800701b 	.word	0x0800701b
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006c7c:	f7fd fe7e 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 8006c80:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f04f 0100 	mov.w	r1, #0
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d07d      	beq.n	8006d8e <UART_SetConfig+0x6ee>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d074      	beq.n	8006d84 <UART_SetConfig+0x6e4>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d06b      	beq.n	8006d7a <UART_SetConfig+0x6da>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d062      	beq.n	8006d70 <UART_SetConfig+0x6d0>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d059      	beq.n	8006d66 <UART_SetConfig+0x6c6>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	2b05      	cmp	r3, #5
 8006cb8:	d050      	beq.n	8006d5c <UART_SetConfig+0x6bc>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	2b06      	cmp	r3, #6
 8006cc0:	d047      	beq.n	8006d52 <UART_SetConfig+0x6b2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	2b07      	cmp	r3, #7
 8006cc8:	d03e      	beq.n	8006d48 <UART_SetConfig+0x6a8>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	2b08      	cmp	r3, #8
 8006cd0:	d01f      	beq.n	8006d12 <UART_SetConfig+0x672>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	2b09      	cmp	r3, #9
 8006cd8:	d016      	beq.n	8006d08 <UART_SetConfig+0x668>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	2b0a      	cmp	r3, #10
 8006ce0:	d00d      	beq.n	8006cfe <UART_SetConfig+0x65e>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	2b0b      	cmp	r3, #11
 8006ce8:	d104      	bne.n	8006cf4 <UART_SetConfig+0x654>
 8006cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cee:	f04f 0400 	mov.w	r4, #0
 8006cf2:	e050      	b.n	8006d96 <UART_SetConfig+0x6f6>
 8006cf4:	f04f 0301 	mov.w	r3, #1
 8006cf8:	f04f 0400 	mov.w	r4, #0
 8006cfc:	e04b      	b.n	8006d96 <UART_SetConfig+0x6f6>
 8006cfe:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006d02:	f04f 0400 	mov.w	r4, #0
 8006d06:	e046      	b.n	8006d96 <UART_SetConfig+0x6f6>
 8006d08:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006d0c:	f04f 0400 	mov.w	r4, #0
 8006d10:	e041      	b.n	8006d96 <UART_SetConfig+0x6f6>
 8006d12:	f04f 0320 	mov.w	r3, #32
 8006d16:	f04f 0400 	mov.w	r4, #0
 8006d1a:	e03c      	b.n	8006d96 <UART_SetConfig+0x6f6>
 8006d1c:	00f42400 	.word	0x00f42400
 8006d20:	0001e848 	.word	0x0001e848
 8006d24:	0003d090 	.word	0x0003d090
 8006d28:	0007a120 	.word	0x0007a120
 8006d2c:	000f4240 	.word	0x000f4240
 8006d30:	00145855 	.word	0x00145855
 8006d34:	00186a00 	.word	0x00186a00
 8006d38:	001e8480 	.word	0x001e8480
 8006d3c:	0028b0aa 	.word	0x0028b0aa
 8006d40:	003d0900 	.word	0x003d0900
 8006d44:	007a1200 	.word	0x007a1200
 8006d48:	f04f 0310 	mov.w	r3, #16
 8006d4c:	f04f 0400 	mov.w	r4, #0
 8006d50:	e021      	b.n	8006d96 <UART_SetConfig+0x6f6>
 8006d52:	f04f 030c 	mov.w	r3, #12
 8006d56:	f04f 0400 	mov.w	r4, #0
 8006d5a:	e01c      	b.n	8006d96 <UART_SetConfig+0x6f6>
 8006d5c:	f04f 030a 	mov.w	r3, #10
 8006d60:	f04f 0400 	mov.w	r4, #0
 8006d64:	e017      	b.n	8006d96 <UART_SetConfig+0x6f6>
 8006d66:	f04f 0308 	mov.w	r3, #8
 8006d6a:	f04f 0400 	mov.w	r4, #0
 8006d6e:	e012      	b.n	8006d96 <UART_SetConfig+0x6f6>
 8006d70:	f04f 0306 	mov.w	r3, #6
 8006d74:	f04f 0400 	mov.w	r4, #0
 8006d78:	e00d      	b.n	8006d96 <UART_SetConfig+0x6f6>
 8006d7a:	f04f 0304 	mov.w	r3, #4
 8006d7e:	f04f 0400 	mov.w	r4, #0
 8006d82:	e008      	b.n	8006d96 <UART_SetConfig+0x6f6>
 8006d84:	f04f 0302 	mov.w	r3, #2
 8006d88:	f04f 0400 	mov.w	r4, #0
 8006d8c:	e003      	b.n	8006d96 <UART_SetConfig+0x6f6>
 8006d8e:	f04f 0301 	mov.w	r3, #1
 8006d92:	f04f 0400 	mov.w	r4, #0
 8006d96:	461a      	mov	r2, r3
 8006d98:	4623      	mov	r3, r4
 8006d9a:	f7f9 ff9d 	bl	8000cd8 <__aeabi_uldivmod>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	460c      	mov	r4, r1
 8006da2:	4619      	mov	r1, r3
 8006da4:	4622      	mov	r2, r4
 8006da6:	f04f 0300 	mov.w	r3, #0
 8006daa:	f04f 0400 	mov.w	r4, #0
 8006dae:	0214      	lsls	r4, r2, #8
 8006db0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006db4:	020b      	lsls	r3, r1, #8
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	6852      	ldr	r2, [r2, #4]
 8006dba:	0852      	lsrs	r2, r2, #1
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	f04f 0200 	mov.w	r2, #0
 8006dc2:	eb13 0b01 	adds.w	fp, r3, r1
 8006dc6:	eb44 0c02 	adc.w	ip, r4, r2
 8006dca:	4658      	mov	r0, fp
 8006dcc:	4661      	mov	r1, ip
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f04f 0400 	mov.w	r4, #0
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	4623      	mov	r3, r4
 8006dda:	f7f9 ff7d 	bl	8000cd8 <__aeabi_uldivmod>
 8006dde:	4603      	mov	r3, r0
 8006de0:	460c      	mov	r4, r1
 8006de2:	61fb      	str	r3, [r7, #28]
            break;
 8006de4:	e1c5      	b.n	8007172 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d05b      	beq.n	8006ea6 <UART_SetConfig+0x806>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d053      	beq.n	8006e9e <UART_SetConfig+0x7fe>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d04b      	beq.n	8006e96 <UART_SetConfig+0x7f6>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d043      	beq.n	8006e8e <UART_SetConfig+0x7ee>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d03b      	beq.n	8006e86 <UART_SetConfig+0x7e6>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e12:	2b05      	cmp	r3, #5
 8006e14:	d033      	beq.n	8006e7e <UART_SetConfig+0x7de>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	2b06      	cmp	r3, #6
 8006e1c:	d02b      	beq.n	8006e76 <UART_SetConfig+0x7d6>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	2b07      	cmp	r3, #7
 8006e24:	d023      	beq.n	8006e6e <UART_SetConfig+0x7ce>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d01b      	beq.n	8006e66 <UART_SetConfig+0x7c6>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	2b09      	cmp	r3, #9
 8006e34:	d013      	beq.n	8006e5e <UART_SetConfig+0x7be>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	2b0a      	cmp	r3, #10
 8006e3c:	d00b      	beq.n	8006e56 <UART_SetConfig+0x7b6>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	2b0b      	cmp	r3, #11
 8006e44:	d103      	bne.n	8006e4e <UART_SetConfig+0x7ae>
 8006e46:	4bae      	ldr	r3, [pc, #696]	; (8007100 <UART_SetConfig+0xa60>)
 8006e48:	f04f 0400 	mov.w	r4, #0
 8006e4c:	e02e      	b.n	8006eac <UART_SetConfig+0x80c>
 8006e4e:	4bad      	ldr	r3, [pc, #692]	; (8007104 <UART_SetConfig+0xa64>)
 8006e50:	f04f 0400 	mov.w	r4, #0
 8006e54:	e02a      	b.n	8006eac <UART_SetConfig+0x80c>
 8006e56:	4bac      	ldr	r3, [pc, #688]	; (8007108 <UART_SetConfig+0xa68>)
 8006e58:	f04f 0400 	mov.w	r4, #0
 8006e5c:	e026      	b.n	8006eac <UART_SetConfig+0x80c>
 8006e5e:	4bab      	ldr	r3, [pc, #684]	; (800710c <UART_SetConfig+0xa6c>)
 8006e60:	f04f 0400 	mov.w	r4, #0
 8006e64:	e022      	b.n	8006eac <UART_SetConfig+0x80c>
 8006e66:	4baa      	ldr	r3, [pc, #680]	; (8007110 <UART_SetConfig+0xa70>)
 8006e68:	f04f 0400 	mov.w	r4, #0
 8006e6c:	e01e      	b.n	8006eac <UART_SetConfig+0x80c>
 8006e6e:	4ba9      	ldr	r3, [pc, #676]	; (8007114 <UART_SetConfig+0xa74>)
 8006e70:	f04f 0400 	mov.w	r4, #0
 8006e74:	e01a      	b.n	8006eac <UART_SetConfig+0x80c>
 8006e76:	a49e      	add	r4, pc, #632	; (adr r4, 80070f0 <UART_SetConfig+0xa50>)
 8006e78:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006e7c:	e016      	b.n	8006eac <UART_SetConfig+0x80c>
 8006e7e:	4ba6      	ldr	r3, [pc, #664]	; (8007118 <UART_SetConfig+0xa78>)
 8006e80:	f04f 0400 	mov.w	r4, #0
 8006e84:	e012      	b.n	8006eac <UART_SetConfig+0x80c>
 8006e86:	4ba5      	ldr	r3, [pc, #660]	; (800711c <UART_SetConfig+0xa7c>)
 8006e88:	f04f 0400 	mov.w	r4, #0
 8006e8c:	e00e      	b.n	8006eac <UART_SetConfig+0x80c>
 8006e8e:	a49a      	add	r4, pc, #616	; (adr r4, 80070f8 <UART_SetConfig+0xa58>)
 8006e90:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006e94:	e00a      	b.n	8006eac <UART_SetConfig+0x80c>
 8006e96:	4ba2      	ldr	r3, [pc, #648]	; (8007120 <UART_SetConfig+0xa80>)
 8006e98:	f04f 0400 	mov.w	r4, #0
 8006e9c:	e006      	b.n	8006eac <UART_SetConfig+0x80c>
 8006e9e:	4ba1      	ldr	r3, [pc, #644]	; (8007124 <UART_SetConfig+0xa84>)
 8006ea0:	f04f 0400 	mov.w	r4, #0
 8006ea4:	e002      	b.n	8006eac <UART_SetConfig+0x80c>
 8006ea6:	4b97      	ldr	r3, [pc, #604]	; (8007104 <UART_SetConfig+0xa64>)
 8006ea8:	f04f 0400 	mov.w	r4, #0
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6852      	ldr	r2, [r2, #4]
 8006eb0:	0852      	lsrs	r2, r2, #1
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	eb13 0b01 	adds.w	fp, r3, r1
 8006ebc:	eb44 0c02 	adc.w	ip, r4, r2
 8006ec0:	4658      	mov	r0, fp
 8006ec2:	4661      	mov	r1, ip
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f04f 0400 	mov.w	r4, #0
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4623      	mov	r3, r4
 8006ed0:	f7f9 ff02 	bl	8000cd8 <__aeabi_uldivmod>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	61fb      	str	r3, [r7, #28]
            break;
 8006eda:	e14a      	b.n	8007172 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006edc:	f7fd fce0 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 8006ee0:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f04f 0100 	mov.w	r1, #0
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d067      	beq.n	8006fc2 <UART_SetConfig+0x922>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d05e      	beq.n	8006fb8 <UART_SetConfig+0x918>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d055      	beq.n	8006fae <UART_SetConfig+0x90e>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b03      	cmp	r3, #3
 8006f08:	d04c      	beq.n	8006fa4 <UART_SetConfig+0x904>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b04      	cmp	r3, #4
 8006f10:	d043      	beq.n	8006f9a <UART_SetConfig+0x8fa>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	2b05      	cmp	r3, #5
 8006f18:	d03a      	beq.n	8006f90 <UART_SetConfig+0x8f0>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	2b06      	cmp	r3, #6
 8006f20:	d031      	beq.n	8006f86 <UART_SetConfig+0x8e6>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	2b07      	cmp	r3, #7
 8006f28:	d028      	beq.n	8006f7c <UART_SetConfig+0x8dc>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	2b08      	cmp	r3, #8
 8006f30:	d01f      	beq.n	8006f72 <UART_SetConfig+0x8d2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b09      	cmp	r3, #9
 8006f38:	d016      	beq.n	8006f68 <UART_SetConfig+0x8c8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	2b0a      	cmp	r3, #10
 8006f40:	d00d      	beq.n	8006f5e <UART_SetConfig+0x8be>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f46:	2b0b      	cmp	r3, #11
 8006f48:	d104      	bne.n	8006f54 <UART_SetConfig+0x8b4>
 8006f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f4e:	f04f 0400 	mov.w	r4, #0
 8006f52:	e03a      	b.n	8006fca <UART_SetConfig+0x92a>
 8006f54:	f04f 0301 	mov.w	r3, #1
 8006f58:	f04f 0400 	mov.w	r4, #0
 8006f5c:	e035      	b.n	8006fca <UART_SetConfig+0x92a>
 8006f5e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006f62:	f04f 0400 	mov.w	r4, #0
 8006f66:	e030      	b.n	8006fca <UART_SetConfig+0x92a>
 8006f68:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006f6c:	f04f 0400 	mov.w	r4, #0
 8006f70:	e02b      	b.n	8006fca <UART_SetConfig+0x92a>
 8006f72:	f04f 0320 	mov.w	r3, #32
 8006f76:	f04f 0400 	mov.w	r4, #0
 8006f7a:	e026      	b.n	8006fca <UART_SetConfig+0x92a>
 8006f7c:	f04f 0310 	mov.w	r3, #16
 8006f80:	f04f 0400 	mov.w	r4, #0
 8006f84:	e021      	b.n	8006fca <UART_SetConfig+0x92a>
 8006f86:	f04f 030c 	mov.w	r3, #12
 8006f8a:	f04f 0400 	mov.w	r4, #0
 8006f8e:	e01c      	b.n	8006fca <UART_SetConfig+0x92a>
 8006f90:	f04f 030a 	mov.w	r3, #10
 8006f94:	f04f 0400 	mov.w	r4, #0
 8006f98:	e017      	b.n	8006fca <UART_SetConfig+0x92a>
 8006f9a:	f04f 0308 	mov.w	r3, #8
 8006f9e:	f04f 0400 	mov.w	r4, #0
 8006fa2:	e012      	b.n	8006fca <UART_SetConfig+0x92a>
 8006fa4:	f04f 0306 	mov.w	r3, #6
 8006fa8:	f04f 0400 	mov.w	r4, #0
 8006fac:	e00d      	b.n	8006fca <UART_SetConfig+0x92a>
 8006fae:	f04f 0304 	mov.w	r3, #4
 8006fb2:	f04f 0400 	mov.w	r4, #0
 8006fb6:	e008      	b.n	8006fca <UART_SetConfig+0x92a>
 8006fb8:	f04f 0302 	mov.w	r3, #2
 8006fbc:	f04f 0400 	mov.w	r4, #0
 8006fc0:	e003      	b.n	8006fca <UART_SetConfig+0x92a>
 8006fc2:	f04f 0301 	mov.w	r3, #1
 8006fc6:	f04f 0400 	mov.w	r4, #0
 8006fca:	461a      	mov	r2, r3
 8006fcc:	4623      	mov	r3, r4
 8006fce:	f7f9 fe83 	bl	8000cd8 <__aeabi_uldivmod>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4622      	mov	r2, r4
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	f04f 0400 	mov.w	r4, #0
 8006fe2:	0214      	lsls	r4, r2, #8
 8006fe4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006fe8:	020b      	lsls	r3, r1, #8
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6852      	ldr	r2, [r2, #4]
 8006fee:	0852      	lsrs	r2, r2, #1
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	f04f 0200 	mov.w	r2, #0
 8006ff6:	eb13 0b01 	adds.w	fp, r3, r1
 8006ffa:	eb44 0c02 	adc.w	ip, r4, r2
 8006ffe:	4658      	mov	r0, fp
 8007000:	4661      	mov	r1, ip
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f04f 0400 	mov.w	r4, #0
 800700a:	461a      	mov	r2, r3
 800700c:	4623      	mov	r3, r4
 800700e:	f7f9 fe63 	bl	8000cd8 <__aeabi_uldivmod>
 8007012:	4603      	mov	r3, r0
 8007014:	460c      	mov	r4, r1
 8007016:	61fb      	str	r3, [r7, #28]
            break;
 8007018:	e0ab      	b.n	8007172 <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 8088 	beq.w	8007134 <UART_SetConfig+0xa94>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	2b01      	cmp	r3, #1
 800702a:	d05b      	beq.n	80070e4 <UART_SetConfig+0xa44>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	2b02      	cmp	r3, #2
 8007032:	d052      	beq.n	80070da <UART_SetConfig+0xa3a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	2b03      	cmp	r3, #3
 800703a:	d04a      	beq.n	80070d2 <UART_SetConfig+0xa32>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007040:	2b04      	cmp	r3, #4
 8007042:	d041      	beq.n	80070c8 <UART_SetConfig+0xa28>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	2b05      	cmp	r3, #5
 800704a:	d039      	beq.n	80070c0 <UART_SetConfig+0xa20>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	2b06      	cmp	r3, #6
 8007052:	d031      	beq.n	80070b8 <UART_SetConfig+0xa18>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007058:	2b07      	cmp	r3, #7
 800705a:	d028      	beq.n	80070ae <UART_SetConfig+0xa0e>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	2b08      	cmp	r3, #8
 8007062:	d01f      	beq.n	80070a4 <UART_SetConfig+0xa04>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	2b09      	cmp	r3, #9
 800706a:	d016      	beq.n	800709a <UART_SetConfig+0x9fa>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007070:	2b0a      	cmp	r3, #10
 8007072:	d00d      	beq.n	8007090 <UART_SetConfig+0x9f0>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	2b0b      	cmp	r3, #11
 800707a:	d104      	bne.n	8007086 <UART_SetConfig+0x9e6>
 800707c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007080:	f04f 0400 	mov.w	r4, #0
 8007084:	e05a      	b.n	800713c <UART_SetConfig+0xa9c>
 8007086:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800708a:	f04f 0400 	mov.w	r4, #0
 800708e:	e055      	b.n	800713c <UART_SetConfig+0xa9c>
 8007090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007094:	f04f 0400 	mov.w	r4, #0
 8007098:	e050      	b.n	800713c <UART_SetConfig+0xa9c>
 800709a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800709e:	f04f 0400 	mov.w	r4, #0
 80070a2:	e04b      	b.n	800713c <UART_SetConfig+0xa9c>
 80070a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80070a8:	f04f 0400 	mov.w	r4, #0
 80070ac:	e046      	b.n	800713c <UART_SetConfig+0xa9c>
 80070ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80070b2:	f04f 0400 	mov.w	r4, #0
 80070b6:	e041      	b.n	800713c <UART_SetConfig+0xa9c>
 80070b8:	4b1b      	ldr	r3, [pc, #108]	; (8007128 <UART_SetConfig+0xa88>)
 80070ba:	f04f 0400 	mov.w	r4, #0
 80070be:	e03d      	b.n	800713c <UART_SetConfig+0xa9c>
 80070c0:	4b1a      	ldr	r3, [pc, #104]	; (800712c <UART_SetConfig+0xa8c>)
 80070c2:	f04f 0400 	mov.w	r4, #0
 80070c6:	e039      	b.n	800713c <UART_SetConfig+0xa9c>
 80070c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80070cc:	f04f 0400 	mov.w	r4, #0
 80070d0:	e034      	b.n	800713c <UART_SetConfig+0xa9c>
 80070d2:	4b17      	ldr	r3, [pc, #92]	; (8007130 <UART_SetConfig+0xa90>)
 80070d4:	f04f 0400 	mov.w	r4, #0
 80070d8:	e030      	b.n	800713c <UART_SetConfig+0xa9c>
 80070da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80070de:	f04f 0400 	mov.w	r4, #0
 80070e2:	e02b      	b.n	800713c <UART_SetConfig+0xa9c>
 80070e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80070e8:	f04f 0400 	mov.w	r4, #0
 80070ec:	e026      	b.n	800713c <UART_SetConfig+0xa9c>
 80070ee:	bf00      	nop
 80070f0:	14585500 	.word	0x14585500
 80070f4:	00000000 	.word	0x00000000
 80070f8:	28b0aa00 	.word	0x28b0aa00
 80070fc:	00000000 	.word	0x00000000
 8007100:	00f42400 	.word	0x00f42400
 8007104:	f4240000 	.word	0xf4240000
 8007108:	01e84800 	.word	0x01e84800
 800710c:	03d09000 	.word	0x03d09000
 8007110:	07a12000 	.word	0x07a12000
 8007114:	0f424000 	.word	0x0f424000
 8007118:	186a0000 	.word	0x186a0000
 800711c:	1e848000 	.word	0x1e848000
 8007120:	3d090000 	.word	0x3d090000
 8007124:	7a120000 	.word	0x7a120000
 8007128:	000aaa00 	.word	0x000aaa00
 800712c:	000ccc00 	.word	0x000ccc00
 8007130:	00155500 	.word	0x00155500
 8007134:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007138:	f04f 0400 	mov.w	r4, #0
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	6852      	ldr	r2, [r2, #4]
 8007140:	0852      	lsrs	r2, r2, #1
 8007142:	4611      	mov	r1, r2
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	eb13 0b01 	adds.w	fp, r3, r1
 800714c:	eb44 0c02 	adc.w	ip, r4, r2
 8007150:	4658      	mov	r0, fp
 8007152:	4661      	mov	r1, ip
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f04f 0400 	mov.w	r4, #0
 800715c:	461a      	mov	r2, r3
 800715e:	4623      	mov	r3, r4
 8007160:	f7f9 fdba 	bl	8000cd8 <__aeabi_uldivmod>
 8007164:	4603      	mov	r3, r0
 8007166:	460c      	mov	r4, r1
 8007168:	61fb      	str	r3, [r7, #28]
            break;
 800716a:	e002      	b.n	8007172 <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	76fb      	strb	r3, [r7, #27]
            break;
 8007170:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007178:	d309      	bcc.n	800718e <UART_SetConfig+0xaee>
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007180:	d205      	bcs.n	800718e <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	60da      	str	r2, [r3, #12]
 800718a:	f000 bc18 	b.w	80079be <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	76fb      	strb	r3, [r7, #27]
 8007192:	f000 bc14 	b.w	80079be <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800719e:	f040 8204 	bne.w	80075aa <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 80071a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071a6:	2b08      	cmp	r3, #8
 80071a8:	f200 81df 	bhi.w	800756a <UART_SetConfig+0xeca>
 80071ac:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <UART_SetConfig+0xb14>)
 80071ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b2:	bf00      	nop
 80071b4:	080071d9 	.word	0x080071d9
 80071b8:	08007291 	.word	0x08007291
 80071bc:	08007349 	.word	0x08007349
 80071c0:	0800756b 	.word	0x0800756b
 80071c4:	080073f1 	.word	0x080073f1
 80071c8:	0800756b 	.word	0x0800756b
 80071cc:	0800756b 	.word	0x0800756b
 80071d0:	0800756b 	.word	0x0800756b
 80071d4:	080074a9 	.word	0x080074a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071d8:	f7fd fbd0 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 80071dc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d044      	beq.n	8007270 <UART_SetConfig+0xbd0>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d03e      	beq.n	800726c <UART_SetConfig+0xbcc>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d038      	beq.n	8007268 <UART_SetConfig+0xbc8>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d032      	beq.n	8007264 <UART_SetConfig+0xbc4>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007202:	2b04      	cmp	r3, #4
 8007204:	d02c      	beq.n	8007260 <UART_SetConfig+0xbc0>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	2b05      	cmp	r3, #5
 800720c:	d026      	beq.n	800725c <UART_SetConfig+0xbbc>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007212:	2b06      	cmp	r3, #6
 8007214:	d020      	beq.n	8007258 <UART_SetConfig+0xbb8>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	2b07      	cmp	r3, #7
 800721c:	d01a      	beq.n	8007254 <UART_SetConfig+0xbb4>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007222:	2b08      	cmp	r3, #8
 8007224:	d014      	beq.n	8007250 <UART_SetConfig+0xbb0>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	2b09      	cmp	r3, #9
 800722c:	d00e      	beq.n	800724c <UART_SetConfig+0xbac>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007232:	2b0a      	cmp	r3, #10
 8007234:	d008      	beq.n	8007248 <UART_SetConfig+0xba8>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723a:	2b0b      	cmp	r3, #11
 800723c:	d102      	bne.n	8007244 <UART_SetConfig+0xba4>
 800723e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007242:	e016      	b.n	8007272 <UART_SetConfig+0xbd2>
 8007244:	2301      	movs	r3, #1
 8007246:	e014      	b.n	8007272 <UART_SetConfig+0xbd2>
 8007248:	2380      	movs	r3, #128	; 0x80
 800724a:	e012      	b.n	8007272 <UART_SetConfig+0xbd2>
 800724c:	2340      	movs	r3, #64	; 0x40
 800724e:	e010      	b.n	8007272 <UART_SetConfig+0xbd2>
 8007250:	2320      	movs	r3, #32
 8007252:	e00e      	b.n	8007272 <UART_SetConfig+0xbd2>
 8007254:	2310      	movs	r3, #16
 8007256:	e00c      	b.n	8007272 <UART_SetConfig+0xbd2>
 8007258:	230c      	movs	r3, #12
 800725a:	e00a      	b.n	8007272 <UART_SetConfig+0xbd2>
 800725c:	230a      	movs	r3, #10
 800725e:	e008      	b.n	8007272 <UART_SetConfig+0xbd2>
 8007260:	2308      	movs	r3, #8
 8007262:	e006      	b.n	8007272 <UART_SetConfig+0xbd2>
 8007264:	2306      	movs	r3, #6
 8007266:	e004      	b.n	8007272 <UART_SetConfig+0xbd2>
 8007268:	2304      	movs	r3, #4
 800726a:	e002      	b.n	8007272 <UART_SetConfig+0xbd2>
 800726c:	2302      	movs	r3, #2
 800726e:	e000      	b.n	8007272 <UART_SetConfig+0xbd2>
 8007270:	2301      	movs	r3, #1
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	fbb2 f3f3 	udiv	r3, r2, r3
 8007278:	005a      	lsls	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	085b      	lsrs	r3, r3, #1
 8007280:	441a      	add	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	fbb2 f3f3 	udiv	r3, r2, r3
 800728a:	b29b      	uxth	r3, r3
 800728c:	61fb      	str	r3, [r7, #28]
        break;
 800728e:	e16f      	b.n	8007570 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007290:	f7fd fb8a 	bl	80049a8 <HAL_RCC_GetPCLK2Freq>
 8007294:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	2b00      	cmp	r3, #0
 800729c:	d044      	beq.n	8007328 <UART_SetConfig+0xc88>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d03e      	beq.n	8007324 <UART_SetConfig+0xc84>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d038      	beq.n	8007320 <UART_SetConfig+0xc80>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	d032      	beq.n	800731c <UART_SetConfig+0xc7c>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d02c      	beq.n	8007318 <UART_SetConfig+0xc78>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c2:	2b05      	cmp	r3, #5
 80072c4:	d026      	beq.n	8007314 <UART_SetConfig+0xc74>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	2b06      	cmp	r3, #6
 80072cc:	d020      	beq.n	8007310 <UART_SetConfig+0xc70>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	2b07      	cmp	r3, #7
 80072d4:	d01a      	beq.n	800730c <UART_SetConfig+0xc6c>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d014      	beq.n	8007308 <UART_SetConfig+0xc68>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	2b09      	cmp	r3, #9
 80072e4:	d00e      	beq.n	8007304 <UART_SetConfig+0xc64>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	2b0a      	cmp	r3, #10
 80072ec:	d008      	beq.n	8007300 <UART_SetConfig+0xc60>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f2:	2b0b      	cmp	r3, #11
 80072f4:	d102      	bne.n	80072fc <UART_SetConfig+0xc5c>
 80072f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072fa:	e016      	b.n	800732a <UART_SetConfig+0xc8a>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e014      	b.n	800732a <UART_SetConfig+0xc8a>
 8007300:	2380      	movs	r3, #128	; 0x80
 8007302:	e012      	b.n	800732a <UART_SetConfig+0xc8a>
 8007304:	2340      	movs	r3, #64	; 0x40
 8007306:	e010      	b.n	800732a <UART_SetConfig+0xc8a>
 8007308:	2320      	movs	r3, #32
 800730a:	e00e      	b.n	800732a <UART_SetConfig+0xc8a>
 800730c:	2310      	movs	r3, #16
 800730e:	e00c      	b.n	800732a <UART_SetConfig+0xc8a>
 8007310:	230c      	movs	r3, #12
 8007312:	e00a      	b.n	800732a <UART_SetConfig+0xc8a>
 8007314:	230a      	movs	r3, #10
 8007316:	e008      	b.n	800732a <UART_SetConfig+0xc8a>
 8007318:	2308      	movs	r3, #8
 800731a:	e006      	b.n	800732a <UART_SetConfig+0xc8a>
 800731c:	2306      	movs	r3, #6
 800731e:	e004      	b.n	800732a <UART_SetConfig+0xc8a>
 8007320:	2304      	movs	r3, #4
 8007322:	e002      	b.n	800732a <UART_SetConfig+0xc8a>
 8007324:	2302      	movs	r3, #2
 8007326:	e000      	b.n	800732a <UART_SetConfig+0xc8a>
 8007328:	2301      	movs	r3, #1
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007330:	005a      	lsls	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	085b      	lsrs	r3, r3, #1
 8007338:	441a      	add	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007342:	b29b      	uxth	r3, r3
 8007344:	61fb      	str	r3, [r7, #28]
        break;
 8007346:	e113      	b.n	8007570 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	2b00      	cmp	r3, #0
 800734e:	d043      	beq.n	80073d8 <UART_SetConfig+0xd38>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	2b01      	cmp	r3, #1
 8007356:	d03d      	beq.n	80073d4 <UART_SetConfig+0xd34>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	2b02      	cmp	r3, #2
 800735e:	d037      	beq.n	80073d0 <UART_SetConfig+0xd30>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	2b03      	cmp	r3, #3
 8007366:	d031      	beq.n	80073cc <UART_SetConfig+0xd2c>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	2b04      	cmp	r3, #4
 800736e:	d02b      	beq.n	80073c8 <UART_SetConfig+0xd28>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	2b05      	cmp	r3, #5
 8007376:	d025      	beq.n	80073c4 <UART_SetConfig+0xd24>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	2b06      	cmp	r3, #6
 800737e:	d01f      	beq.n	80073c0 <UART_SetConfig+0xd20>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	2b07      	cmp	r3, #7
 8007386:	d019      	beq.n	80073bc <UART_SetConfig+0xd1c>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	2b08      	cmp	r3, #8
 800738e:	d013      	beq.n	80073b8 <UART_SetConfig+0xd18>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	2b09      	cmp	r3, #9
 8007396:	d00d      	beq.n	80073b4 <UART_SetConfig+0xd14>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	2b0a      	cmp	r3, #10
 800739e:	d007      	beq.n	80073b0 <UART_SetConfig+0xd10>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	2b0b      	cmp	r3, #11
 80073a6:	d101      	bne.n	80073ac <UART_SetConfig+0xd0c>
 80073a8:	4b8d      	ldr	r3, [pc, #564]	; (80075e0 <UART_SetConfig+0xf40>)
 80073aa:	e016      	b.n	80073da <UART_SetConfig+0xd3a>
 80073ac:	4b8d      	ldr	r3, [pc, #564]	; (80075e4 <UART_SetConfig+0xf44>)
 80073ae:	e014      	b.n	80073da <UART_SetConfig+0xd3a>
 80073b0:	4b8d      	ldr	r3, [pc, #564]	; (80075e8 <UART_SetConfig+0xf48>)
 80073b2:	e012      	b.n	80073da <UART_SetConfig+0xd3a>
 80073b4:	4b8d      	ldr	r3, [pc, #564]	; (80075ec <UART_SetConfig+0xf4c>)
 80073b6:	e010      	b.n	80073da <UART_SetConfig+0xd3a>
 80073b8:	4b8d      	ldr	r3, [pc, #564]	; (80075f0 <UART_SetConfig+0xf50>)
 80073ba:	e00e      	b.n	80073da <UART_SetConfig+0xd3a>
 80073bc:	4b8d      	ldr	r3, [pc, #564]	; (80075f4 <UART_SetConfig+0xf54>)
 80073be:	e00c      	b.n	80073da <UART_SetConfig+0xd3a>
 80073c0:	4b8d      	ldr	r3, [pc, #564]	; (80075f8 <UART_SetConfig+0xf58>)
 80073c2:	e00a      	b.n	80073da <UART_SetConfig+0xd3a>
 80073c4:	4b8d      	ldr	r3, [pc, #564]	; (80075fc <UART_SetConfig+0xf5c>)
 80073c6:	e008      	b.n	80073da <UART_SetConfig+0xd3a>
 80073c8:	4b8d      	ldr	r3, [pc, #564]	; (8007600 <UART_SetConfig+0xf60>)
 80073ca:	e006      	b.n	80073da <UART_SetConfig+0xd3a>
 80073cc:	4b8d      	ldr	r3, [pc, #564]	; (8007604 <UART_SetConfig+0xf64>)
 80073ce:	e004      	b.n	80073da <UART_SetConfig+0xd3a>
 80073d0:	4b8d      	ldr	r3, [pc, #564]	; (8007608 <UART_SetConfig+0xf68>)
 80073d2:	e002      	b.n	80073da <UART_SetConfig+0xd3a>
 80073d4:	4b8d      	ldr	r3, [pc, #564]	; (800760c <UART_SetConfig+0xf6c>)
 80073d6:	e000      	b.n	80073da <UART_SetConfig+0xd3a>
 80073d8:	4b82      	ldr	r3, [pc, #520]	; (80075e4 <UART_SetConfig+0xf44>)
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6852      	ldr	r2, [r2, #4]
 80073de:	0852      	lsrs	r2, r2, #1
 80073e0:	441a      	add	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	61fb      	str	r3, [r7, #28]
        break;
 80073ee:	e0bf      	b.n	8007570 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073f0:	f7fd fa56 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 80073f4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d044      	beq.n	8007488 <UART_SetConfig+0xde8>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	2b01      	cmp	r3, #1
 8007404:	d03e      	beq.n	8007484 <UART_SetConfig+0xde4>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	2b02      	cmp	r3, #2
 800740c:	d038      	beq.n	8007480 <UART_SetConfig+0xde0>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	2b03      	cmp	r3, #3
 8007414:	d032      	beq.n	800747c <UART_SetConfig+0xddc>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	2b04      	cmp	r3, #4
 800741c:	d02c      	beq.n	8007478 <UART_SetConfig+0xdd8>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	2b05      	cmp	r3, #5
 8007424:	d026      	beq.n	8007474 <UART_SetConfig+0xdd4>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	2b06      	cmp	r3, #6
 800742c:	d020      	beq.n	8007470 <UART_SetConfig+0xdd0>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	2b07      	cmp	r3, #7
 8007434:	d01a      	beq.n	800746c <UART_SetConfig+0xdcc>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	2b08      	cmp	r3, #8
 800743c:	d014      	beq.n	8007468 <UART_SetConfig+0xdc8>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	2b09      	cmp	r3, #9
 8007444:	d00e      	beq.n	8007464 <UART_SetConfig+0xdc4>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744a:	2b0a      	cmp	r3, #10
 800744c:	d008      	beq.n	8007460 <UART_SetConfig+0xdc0>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007452:	2b0b      	cmp	r3, #11
 8007454:	d102      	bne.n	800745c <UART_SetConfig+0xdbc>
 8007456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800745a:	e016      	b.n	800748a <UART_SetConfig+0xdea>
 800745c:	2301      	movs	r3, #1
 800745e:	e014      	b.n	800748a <UART_SetConfig+0xdea>
 8007460:	2380      	movs	r3, #128	; 0x80
 8007462:	e012      	b.n	800748a <UART_SetConfig+0xdea>
 8007464:	2340      	movs	r3, #64	; 0x40
 8007466:	e010      	b.n	800748a <UART_SetConfig+0xdea>
 8007468:	2320      	movs	r3, #32
 800746a:	e00e      	b.n	800748a <UART_SetConfig+0xdea>
 800746c:	2310      	movs	r3, #16
 800746e:	e00c      	b.n	800748a <UART_SetConfig+0xdea>
 8007470:	230c      	movs	r3, #12
 8007472:	e00a      	b.n	800748a <UART_SetConfig+0xdea>
 8007474:	230a      	movs	r3, #10
 8007476:	e008      	b.n	800748a <UART_SetConfig+0xdea>
 8007478:	2308      	movs	r3, #8
 800747a:	e006      	b.n	800748a <UART_SetConfig+0xdea>
 800747c:	2306      	movs	r3, #6
 800747e:	e004      	b.n	800748a <UART_SetConfig+0xdea>
 8007480:	2304      	movs	r3, #4
 8007482:	e002      	b.n	800748a <UART_SetConfig+0xdea>
 8007484:	2302      	movs	r3, #2
 8007486:	e000      	b.n	800748a <UART_SetConfig+0xdea>
 8007488:	2301      	movs	r3, #1
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007490:	005a      	lsls	r2, r3, #1
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	085b      	lsrs	r3, r3, #1
 8007498:	441a      	add	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	61fb      	str	r3, [r7, #28]
        break;
 80074a6:	e063      	b.n	8007570 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d04f      	beq.n	8007550 <UART_SetConfig+0xeb0>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d048      	beq.n	800754a <UART_SetConfig+0xeaa>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d041      	beq.n	8007544 <UART_SetConfig+0xea4>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d03a      	beq.n	800753e <UART_SetConfig+0xe9e>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d033      	beq.n	8007538 <UART_SetConfig+0xe98>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	2b05      	cmp	r3, #5
 80074d6:	d02c      	beq.n	8007532 <UART_SetConfig+0xe92>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	2b06      	cmp	r3, #6
 80074de:	d025      	beq.n	800752c <UART_SetConfig+0xe8c>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	2b07      	cmp	r3, #7
 80074e6:	d01e      	beq.n	8007526 <UART_SetConfig+0xe86>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d017      	beq.n	8007520 <UART_SetConfig+0xe80>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	2b09      	cmp	r3, #9
 80074f6:	d010      	beq.n	800751a <UART_SetConfig+0xe7a>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	2b0a      	cmp	r3, #10
 80074fe:	d009      	beq.n	8007514 <UART_SetConfig+0xe74>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	2b0b      	cmp	r3, #11
 8007506:	d102      	bne.n	800750e <UART_SetConfig+0xe6e>
 8007508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800750c:	e022      	b.n	8007554 <UART_SetConfig+0xeb4>
 800750e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007512:	e01f      	b.n	8007554 <UART_SetConfig+0xeb4>
 8007514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007518:	e01c      	b.n	8007554 <UART_SetConfig+0xeb4>
 800751a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800751e:	e019      	b.n	8007554 <UART_SetConfig+0xeb4>
 8007520:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007524:	e016      	b.n	8007554 <UART_SetConfig+0xeb4>
 8007526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800752a:	e013      	b.n	8007554 <UART_SetConfig+0xeb4>
 800752c:	f241 5354 	movw	r3, #5460	; 0x1554
 8007530:	e010      	b.n	8007554 <UART_SetConfig+0xeb4>
 8007532:	f641 1398 	movw	r3, #6552	; 0x1998
 8007536:	e00d      	b.n	8007554 <UART_SetConfig+0xeb4>
 8007538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800753c:	e00a      	b.n	8007554 <UART_SetConfig+0xeb4>
 800753e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8007542:	e007      	b.n	8007554 <UART_SetConfig+0xeb4>
 8007544:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007548:	e004      	b.n	8007554 <UART_SetConfig+0xeb4>
 800754a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800754e:	e001      	b.n	8007554 <UART_SetConfig+0xeb4>
 8007550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6852      	ldr	r2, [r2, #4]
 8007558:	0852      	lsrs	r2, r2, #1
 800755a:	441a      	add	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	fbb2 f3f3 	udiv	r3, r2, r3
 8007564:	b29b      	uxth	r3, r3
 8007566:	61fb      	str	r3, [r7, #28]
        break;
 8007568:	e002      	b.n	8007570 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	76fb      	strb	r3, [r7, #27]
        break;
 800756e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	2b0f      	cmp	r3, #15
 8007574:	d916      	bls.n	80075a4 <UART_SetConfig+0xf04>
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757c:	d212      	bcs.n	80075a4 <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	b29b      	uxth	r3, r3
 8007582:	f023 030f 	bic.w	r3, r3, #15
 8007586:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	085b      	lsrs	r3, r3, #1
 800758c:	b29b      	uxth	r3, r3
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	b29a      	uxth	r2, r3
 8007594:	89fb      	ldrh	r3, [r7, #14]
 8007596:	4313      	orrs	r3, r2
 8007598:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	89fa      	ldrh	r2, [r7, #14]
 80075a0:	60da      	str	r2, [r3, #12]
 80075a2:	e20c      	b.n	80079be <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	76fb      	strb	r3, [r7, #27]
 80075a8:	e209      	b.n	80079be <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 80075aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075ae:	2b08      	cmp	r3, #8
 80075b0:	f200 81f4 	bhi.w	800799c <UART_SetConfig+0x12fc>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <UART_SetConfig+0xf1c>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	08007611 	.word	0x08007611
 80075c0:	080076c7 	.word	0x080076c7
 80075c4:	0800777d 	.word	0x0800777d
 80075c8:	0800799d 	.word	0x0800799d
 80075cc:	08007827 	.word	0x08007827
 80075d0:	0800799d 	.word	0x0800799d
 80075d4:	0800799d 	.word	0x0800799d
 80075d8:	0800799d 	.word	0x0800799d
 80075dc:	080078dd 	.word	0x080078dd
 80075e0:	0001e848 	.word	0x0001e848
 80075e4:	01e84800 	.word	0x01e84800
 80075e8:	0003d090 	.word	0x0003d090
 80075ec:	0007a120 	.word	0x0007a120
 80075f0:	000f4240 	.word	0x000f4240
 80075f4:	001e8480 	.word	0x001e8480
 80075f8:	0028b0aa 	.word	0x0028b0aa
 80075fc:	0030d400 	.word	0x0030d400
 8007600:	003d0900 	.word	0x003d0900
 8007604:	00516154 	.word	0x00516154
 8007608:	007a1200 	.word	0x007a1200
 800760c:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007610:	f7fd f9b4 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 8007614:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	d044      	beq.n	80076a8 <UART_SetConfig+0x1008>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	2b01      	cmp	r3, #1
 8007624:	d03e      	beq.n	80076a4 <UART_SetConfig+0x1004>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	2b02      	cmp	r3, #2
 800762c:	d038      	beq.n	80076a0 <UART_SetConfig+0x1000>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	2b03      	cmp	r3, #3
 8007634:	d032      	beq.n	800769c <UART_SetConfig+0xffc>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	2b04      	cmp	r3, #4
 800763c:	d02c      	beq.n	8007698 <UART_SetConfig+0xff8>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	2b05      	cmp	r3, #5
 8007644:	d026      	beq.n	8007694 <UART_SetConfig+0xff4>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	2b06      	cmp	r3, #6
 800764c:	d020      	beq.n	8007690 <UART_SetConfig+0xff0>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	2b07      	cmp	r3, #7
 8007654:	d01a      	beq.n	800768c <UART_SetConfig+0xfec>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	2b08      	cmp	r3, #8
 800765c:	d014      	beq.n	8007688 <UART_SetConfig+0xfe8>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	2b09      	cmp	r3, #9
 8007664:	d00e      	beq.n	8007684 <UART_SetConfig+0xfe4>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	2b0a      	cmp	r3, #10
 800766c:	d008      	beq.n	8007680 <UART_SetConfig+0xfe0>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	2b0b      	cmp	r3, #11
 8007674:	d102      	bne.n	800767c <UART_SetConfig+0xfdc>
 8007676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800767a:	e016      	b.n	80076aa <UART_SetConfig+0x100a>
 800767c:	2301      	movs	r3, #1
 800767e:	e014      	b.n	80076aa <UART_SetConfig+0x100a>
 8007680:	2380      	movs	r3, #128	; 0x80
 8007682:	e012      	b.n	80076aa <UART_SetConfig+0x100a>
 8007684:	2340      	movs	r3, #64	; 0x40
 8007686:	e010      	b.n	80076aa <UART_SetConfig+0x100a>
 8007688:	2320      	movs	r3, #32
 800768a:	e00e      	b.n	80076aa <UART_SetConfig+0x100a>
 800768c:	2310      	movs	r3, #16
 800768e:	e00c      	b.n	80076aa <UART_SetConfig+0x100a>
 8007690:	230c      	movs	r3, #12
 8007692:	e00a      	b.n	80076aa <UART_SetConfig+0x100a>
 8007694:	230a      	movs	r3, #10
 8007696:	e008      	b.n	80076aa <UART_SetConfig+0x100a>
 8007698:	2308      	movs	r3, #8
 800769a:	e006      	b.n	80076aa <UART_SetConfig+0x100a>
 800769c:	2306      	movs	r3, #6
 800769e:	e004      	b.n	80076aa <UART_SetConfig+0x100a>
 80076a0:	2304      	movs	r3, #4
 80076a2:	e002      	b.n	80076aa <UART_SetConfig+0x100a>
 80076a4:	2302      	movs	r3, #2
 80076a6:	e000      	b.n	80076aa <UART_SetConfig+0x100a>
 80076a8:	2301      	movs	r3, #1
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	085b      	lsrs	r3, r3, #1
 80076b6:	441a      	add	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	61fb      	str	r3, [r7, #28]
        break;
 80076c4:	e16d      	b.n	80079a2 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076c6:	f7fd f96f 	bl	80049a8 <HAL_RCC_GetPCLK2Freq>
 80076ca:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d044      	beq.n	800775e <UART_SetConfig+0x10be>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d03e      	beq.n	800775a <UART_SetConfig+0x10ba>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d038      	beq.n	8007756 <UART_SetConfig+0x10b6>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d032      	beq.n	8007752 <UART_SetConfig+0x10b2>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d02c      	beq.n	800774e <UART_SetConfig+0x10ae>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	2b05      	cmp	r3, #5
 80076fa:	d026      	beq.n	800774a <UART_SetConfig+0x10aa>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	2b06      	cmp	r3, #6
 8007702:	d020      	beq.n	8007746 <UART_SetConfig+0x10a6>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	2b07      	cmp	r3, #7
 800770a:	d01a      	beq.n	8007742 <UART_SetConfig+0x10a2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2b08      	cmp	r3, #8
 8007712:	d014      	beq.n	800773e <UART_SetConfig+0x109e>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	2b09      	cmp	r3, #9
 800771a:	d00e      	beq.n	800773a <UART_SetConfig+0x109a>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	2b0a      	cmp	r3, #10
 8007722:	d008      	beq.n	8007736 <UART_SetConfig+0x1096>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	2b0b      	cmp	r3, #11
 800772a:	d102      	bne.n	8007732 <UART_SetConfig+0x1092>
 800772c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007730:	e016      	b.n	8007760 <UART_SetConfig+0x10c0>
 8007732:	2301      	movs	r3, #1
 8007734:	e014      	b.n	8007760 <UART_SetConfig+0x10c0>
 8007736:	2380      	movs	r3, #128	; 0x80
 8007738:	e012      	b.n	8007760 <UART_SetConfig+0x10c0>
 800773a:	2340      	movs	r3, #64	; 0x40
 800773c:	e010      	b.n	8007760 <UART_SetConfig+0x10c0>
 800773e:	2320      	movs	r3, #32
 8007740:	e00e      	b.n	8007760 <UART_SetConfig+0x10c0>
 8007742:	2310      	movs	r3, #16
 8007744:	e00c      	b.n	8007760 <UART_SetConfig+0x10c0>
 8007746:	230c      	movs	r3, #12
 8007748:	e00a      	b.n	8007760 <UART_SetConfig+0x10c0>
 800774a:	230a      	movs	r3, #10
 800774c:	e008      	b.n	8007760 <UART_SetConfig+0x10c0>
 800774e:	2308      	movs	r3, #8
 8007750:	e006      	b.n	8007760 <UART_SetConfig+0x10c0>
 8007752:	2306      	movs	r3, #6
 8007754:	e004      	b.n	8007760 <UART_SetConfig+0x10c0>
 8007756:	2304      	movs	r3, #4
 8007758:	e002      	b.n	8007760 <UART_SetConfig+0x10c0>
 800775a:	2302      	movs	r3, #2
 800775c:	e000      	b.n	8007760 <UART_SetConfig+0x10c0>
 800775e:	2301      	movs	r3, #1
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	fbb2 f2f3 	udiv	r2, r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	085b      	lsrs	r3, r3, #1
 800776c:	441a      	add	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	fbb2 f3f3 	udiv	r3, r2, r3
 8007776:	b29b      	uxth	r3, r3
 8007778:	61fb      	str	r3, [r7, #28]
        break;
 800777a:	e112      	b.n	80079a2 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	2b00      	cmp	r3, #0
 8007782:	d044      	beq.n	800780e <UART_SetConfig+0x116e>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	2b01      	cmp	r3, #1
 800778a:	d03e      	beq.n	800780a <UART_SetConfig+0x116a>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2b02      	cmp	r3, #2
 8007792:	d038      	beq.n	8007806 <UART_SetConfig+0x1166>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2b03      	cmp	r3, #3
 800779a:	d032      	beq.n	8007802 <UART_SetConfig+0x1162>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d02c      	beq.n	80077fe <UART_SetConfig+0x115e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	2b05      	cmp	r3, #5
 80077aa:	d026      	beq.n	80077fa <UART_SetConfig+0x115a>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	2b06      	cmp	r3, #6
 80077b2:	d020      	beq.n	80077f6 <UART_SetConfig+0x1156>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	2b07      	cmp	r3, #7
 80077ba:	d01a      	beq.n	80077f2 <UART_SetConfig+0x1152>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d014      	beq.n	80077ee <UART_SetConfig+0x114e>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	2b09      	cmp	r3, #9
 80077ca:	d00e      	beq.n	80077ea <UART_SetConfig+0x114a>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	2b0a      	cmp	r3, #10
 80077d2:	d008      	beq.n	80077e6 <UART_SetConfig+0x1146>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	2b0b      	cmp	r3, #11
 80077da:	d102      	bne.n	80077e2 <UART_SetConfig+0x1142>
 80077dc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80077e0:	e016      	b.n	8007810 <UART_SetConfig+0x1170>
 80077e2:	4b81      	ldr	r3, [pc, #516]	; (80079e8 <UART_SetConfig+0x1348>)
 80077e4:	e014      	b.n	8007810 <UART_SetConfig+0x1170>
 80077e6:	4b81      	ldr	r3, [pc, #516]	; (80079ec <UART_SetConfig+0x134c>)
 80077e8:	e012      	b.n	8007810 <UART_SetConfig+0x1170>
 80077ea:	4b81      	ldr	r3, [pc, #516]	; (80079f0 <UART_SetConfig+0x1350>)
 80077ec:	e010      	b.n	8007810 <UART_SetConfig+0x1170>
 80077ee:	4b81      	ldr	r3, [pc, #516]	; (80079f4 <UART_SetConfig+0x1354>)
 80077f0:	e00e      	b.n	8007810 <UART_SetConfig+0x1170>
 80077f2:	4b81      	ldr	r3, [pc, #516]	; (80079f8 <UART_SetConfig+0x1358>)
 80077f4:	e00c      	b.n	8007810 <UART_SetConfig+0x1170>
 80077f6:	4b81      	ldr	r3, [pc, #516]	; (80079fc <UART_SetConfig+0x135c>)
 80077f8:	e00a      	b.n	8007810 <UART_SetConfig+0x1170>
 80077fa:	4b81      	ldr	r3, [pc, #516]	; (8007a00 <UART_SetConfig+0x1360>)
 80077fc:	e008      	b.n	8007810 <UART_SetConfig+0x1170>
 80077fe:	4b81      	ldr	r3, [pc, #516]	; (8007a04 <UART_SetConfig+0x1364>)
 8007800:	e006      	b.n	8007810 <UART_SetConfig+0x1170>
 8007802:	4b81      	ldr	r3, [pc, #516]	; (8007a08 <UART_SetConfig+0x1368>)
 8007804:	e004      	b.n	8007810 <UART_SetConfig+0x1170>
 8007806:	4b81      	ldr	r3, [pc, #516]	; (8007a0c <UART_SetConfig+0x136c>)
 8007808:	e002      	b.n	8007810 <UART_SetConfig+0x1170>
 800780a:	4b81      	ldr	r3, [pc, #516]	; (8007a10 <UART_SetConfig+0x1370>)
 800780c:	e000      	b.n	8007810 <UART_SetConfig+0x1170>
 800780e:	4b76      	ldr	r3, [pc, #472]	; (80079e8 <UART_SetConfig+0x1348>)
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6852      	ldr	r2, [r2, #4]
 8007814:	0852      	lsrs	r2, r2, #1
 8007816:	441a      	add	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007820:	b29b      	uxth	r3, r3
 8007822:	61fb      	str	r3, [r7, #28]
        break;
 8007824:	e0bd      	b.n	80079a2 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007826:	f7fd f83b 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 800782a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	d044      	beq.n	80078be <UART_SetConfig+0x121e>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	2b01      	cmp	r3, #1
 800783a:	d03e      	beq.n	80078ba <UART_SetConfig+0x121a>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	2b02      	cmp	r3, #2
 8007842:	d038      	beq.n	80078b6 <UART_SetConfig+0x1216>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	2b03      	cmp	r3, #3
 800784a:	d032      	beq.n	80078b2 <UART_SetConfig+0x1212>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	2b04      	cmp	r3, #4
 8007852:	d02c      	beq.n	80078ae <UART_SetConfig+0x120e>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	2b05      	cmp	r3, #5
 800785a:	d026      	beq.n	80078aa <UART_SetConfig+0x120a>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007860:	2b06      	cmp	r3, #6
 8007862:	d020      	beq.n	80078a6 <UART_SetConfig+0x1206>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	2b07      	cmp	r3, #7
 800786a:	d01a      	beq.n	80078a2 <UART_SetConfig+0x1202>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	2b08      	cmp	r3, #8
 8007872:	d014      	beq.n	800789e <UART_SetConfig+0x11fe>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007878:	2b09      	cmp	r3, #9
 800787a:	d00e      	beq.n	800789a <UART_SetConfig+0x11fa>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	2b0a      	cmp	r3, #10
 8007882:	d008      	beq.n	8007896 <UART_SetConfig+0x11f6>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	2b0b      	cmp	r3, #11
 800788a:	d102      	bne.n	8007892 <UART_SetConfig+0x11f2>
 800788c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007890:	e016      	b.n	80078c0 <UART_SetConfig+0x1220>
 8007892:	2301      	movs	r3, #1
 8007894:	e014      	b.n	80078c0 <UART_SetConfig+0x1220>
 8007896:	2380      	movs	r3, #128	; 0x80
 8007898:	e012      	b.n	80078c0 <UART_SetConfig+0x1220>
 800789a:	2340      	movs	r3, #64	; 0x40
 800789c:	e010      	b.n	80078c0 <UART_SetConfig+0x1220>
 800789e:	2320      	movs	r3, #32
 80078a0:	e00e      	b.n	80078c0 <UART_SetConfig+0x1220>
 80078a2:	2310      	movs	r3, #16
 80078a4:	e00c      	b.n	80078c0 <UART_SetConfig+0x1220>
 80078a6:	230c      	movs	r3, #12
 80078a8:	e00a      	b.n	80078c0 <UART_SetConfig+0x1220>
 80078aa:	230a      	movs	r3, #10
 80078ac:	e008      	b.n	80078c0 <UART_SetConfig+0x1220>
 80078ae:	2308      	movs	r3, #8
 80078b0:	e006      	b.n	80078c0 <UART_SetConfig+0x1220>
 80078b2:	2306      	movs	r3, #6
 80078b4:	e004      	b.n	80078c0 <UART_SetConfig+0x1220>
 80078b6:	2304      	movs	r3, #4
 80078b8:	e002      	b.n	80078c0 <UART_SetConfig+0x1220>
 80078ba:	2302      	movs	r3, #2
 80078bc:	e000      	b.n	80078c0 <UART_SetConfig+0x1220>
 80078be:	2301      	movs	r3, #1
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	085b      	lsrs	r3, r3, #1
 80078cc:	441a      	add	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	61fb      	str	r3, [r7, #28]
        break;
 80078da:	e062      	b.n	80079a2 <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d04e      	beq.n	8007982 <UART_SetConfig+0x12e2>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d047      	beq.n	800797c <UART_SetConfig+0x12dc>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d040      	beq.n	8007976 <UART_SetConfig+0x12d6>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	2b03      	cmp	r3, #3
 80078fa:	d039      	beq.n	8007970 <UART_SetConfig+0x12d0>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	2b04      	cmp	r3, #4
 8007902:	d032      	beq.n	800796a <UART_SetConfig+0x12ca>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	2b05      	cmp	r3, #5
 800790a:	d02b      	beq.n	8007964 <UART_SetConfig+0x12c4>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	2b06      	cmp	r3, #6
 8007912:	d024      	beq.n	800795e <UART_SetConfig+0x12be>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	2b07      	cmp	r3, #7
 800791a:	d01d      	beq.n	8007958 <UART_SetConfig+0x12b8>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	2b08      	cmp	r3, #8
 8007922:	d016      	beq.n	8007952 <UART_SetConfig+0x12b2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	2b09      	cmp	r3, #9
 800792a:	d00f      	beq.n	800794c <UART_SetConfig+0x12ac>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	2b0a      	cmp	r3, #10
 8007932:	d008      	beq.n	8007946 <UART_SetConfig+0x12a6>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	2b0b      	cmp	r3, #11
 800793a:	d101      	bne.n	8007940 <UART_SetConfig+0x12a0>
 800793c:	2380      	movs	r3, #128	; 0x80
 800793e:	e022      	b.n	8007986 <UART_SetConfig+0x12e6>
 8007940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007944:	e01f      	b.n	8007986 <UART_SetConfig+0x12e6>
 8007946:	f44f 7380 	mov.w	r3, #256	; 0x100
 800794a:	e01c      	b.n	8007986 <UART_SetConfig+0x12e6>
 800794c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007950:	e019      	b.n	8007986 <UART_SetConfig+0x12e6>
 8007952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007956:	e016      	b.n	8007986 <UART_SetConfig+0x12e6>
 8007958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800795c:	e013      	b.n	8007986 <UART_SetConfig+0x12e6>
 800795e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007962:	e010      	b.n	8007986 <UART_SetConfig+0x12e6>
 8007964:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007968:	e00d      	b.n	8007986 <UART_SetConfig+0x12e6>
 800796a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800796e:	e00a      	b.n	8007986 <UART_SetConfig+0x12e6>
 8007970:	f241 5355 	movw	r3, #5461	; 0x1555
 8007974:	e007      	b.n	8007986 <UART_SetConfig+0x12e6>
 8007976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800797a:	e004      	b.n	8007986 <UART_SetConfig+0x12e6>
 800797c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007980:	e001      	b.n	8007986 <UART_SetConfig+0x12e6>
 8007982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6852      	ldr	r2, [r2, #4]
 800798a:	0852      	lsrs	r2, r2, #1
 800798c:	441a      	add	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	fbb2 f3f3 	udiv	r3, r2, r3
 8007996:	b29b      	uxth	r3, r3
 8007998:	61fb      	str	r3, [r7, #28]
        break;
 800799a:	e002      	b.n	80079a2 <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	76fb      	strb	r3, [r7, #27]
        break;
 80079a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	2b0f      	cmp	r3, #15
 80079a6:	d908      	bls.n	80079ba <UART_SetConfig+0x131a>
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ae:	d204      	bcs.n	80079ba <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	60da      	str	r2, [r3, #12]
 80079b8:	e001      	b.n	80079be <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80079da:	7efb      	ldrb	r3, [r7, #27]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3728      	adds	r7, #40	; 0x28
 80079e0:	46bd      	mov	sp, r7
 80079e2:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80079e6:	bf00      	nop
 80079e8:	00f42400 	.word	0x00f42400
 80079ec:	0001e848 	.word	0x0001e848
 80079f0:	0003d090 	.word	0x0003d090
 80079f4:	0007a120 	.word	0x0007a120
 80079f8:	000f4240 	.word	0x000f4240
 80079fc:	00145855 	.word	0x00145855
 8007a00:	00186a00 	.word	0x00186a00
 8007a04:	001e8480 	.word	0x001e8480
 8007a08:	0028b0aa 	.word	0x0028b0aa
 8007a0c:	003d0900 	.word	0x003d0900
 8007a10:	007a1200 	.word	0x007a1200

08007a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00a      	beq.n	8007a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	f003 0304 	and.w	r3, r3, #4
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00a      	beq.n	8007a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a86:	f003 0308 	and.w	r3, r3, #8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa8:	f003 0310 	and.w	r3, r3, #16
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	f003 0320 	and.w	r3, r3, #32
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d01a      	beq.n	8007b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b12:	d10a      	bne.n	8007b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00a      	beq.n	8007b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	605a      	str	r2, [r3, #4]
  }
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007b68:	f7fa ffa0 	bl	8002aac <HAL_GetTick>
 8007b6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0308 	and.w	r3, r3, #8
 8007b78:	2b08      	cmp	r3, #8
 8007b7a:	d10e      	bne.n	8007b9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b80:	9300      	str	r3, [sp, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f82c 	bl	8007be8 <UART_WaitOnFlagUntilTimeout>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e022      	b.n	8007be0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0304 	and.w	r3, r3, #4
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d10e      	bne.n	8007bc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f816 	bl	8007be8 <UART_WaitOnFlagUntilTimeout>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e00c      	b.n	8007be0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	603b      	str	r3, [r7, #0]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bf8:	e02c      	b.n	8007c54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c00:	d028      	beq.n	8007c54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c02:	f7fa ff53 	bl	8002aac <HAL_GetTick>
 8007c06:	4602      	mov	r2, r0
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	69ba      	ldr	r2, [r7, #24]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d302      	bcc.n	8007c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d11d      	bne.n	8007c54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007c26:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689a      	ldr	r2, [r3, #8]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f022 0201 	bic.w	r2, r2, #1
 8007c36:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2220      	movs	r2, #32
 8007c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2220      	movs	r2, #32
 8007c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e00f      	b.n	8007c74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	69da      	ldr	r2, [r3, #28]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	bf0c      	ite	eq
 8007c64:	2301      	moveq	r3, #1
 8007c66:	2300      	movne	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	79fb      	ldrb	r3, [r7, #7]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d0c3      	beq.n	8007bfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c92:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6812      	ldr	r2, [r2, #0]
 8007c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ca2:	f023 0301 	bic.w	r3, r3, #1
 8007ca6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b084      	sub	sp, #16
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7fe fcd1 	bl	8006688 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cfc:	2b21      	cmp	r3, #33	; 0x21
 8007cfe:	d12a      	bne.n	8007d56 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d110      	bne.n	8007d2e <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d1a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d2a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007d2c:	e013      	b.n	8007d56 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d32:	781a      	ldrb	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3e:	1c5a      	adds	r2, r3, #1
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b085      	sub	sp, #20
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d70:	2b21      	cmp	r3, #33	; 0x21
 8007d72:	d12f      	bne.n	8007dd4 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d110      	bne.n	8007da2 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d8e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d9e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007da0:	e018      	b.n	8007dd4 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da6:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007db6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dbc:	1c9a      	adds	r2, r3, #2
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007dd4:	bf00      	nop
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dee:	2b21      	cmp	r3, #33	; 0x21
 8007df0:	d13d      	bne.n	8007e6e <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007df8:	81fb      	strh	r3, [r7, #14]
 8007dfa:	e035      	b.n	8007e68 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d111      	bne.n	8007e2c <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007e16:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e26:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8007e28:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8007e2a:	e020      	b.n	8007e6e <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d013      	beq.n	8007e62 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e3e:	781a      	ldrb	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007e62:	89fb      	ldrh	r3, [r7, #14]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	81fb      	strh	r3, [r7, #14]
 8007e68:	89fb      	ldrh	r3, [r7, #14]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1c6      	bne.n	8007dfc <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8007e6e:	bf00      	nop
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b085      	sub	sp, #20
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e88:	2b21      	cmp	r3, #33	; 0x21
 8007e8a:	d142      	bne.n	8007f12 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e92:	81fb      	strh	r3, [r7, #14]
 8007e94:	e03a      	b.n	8007f0c <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d111      	bne.n	8007ec6 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007eb0:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ec0:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8007ec2:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8007ec4:	e025      	b.n	8007f12 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d018      	beq.n	8007f06 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed8:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ee8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eee:	1c9a      	adds	r2, r3, #2
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007f06:	89fb      	ldrh	r3, [r7, #14]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	81fb      	strh	r3, [r7, #14]
 8007f0c:	89fb      	ldrh	r3, [r7, #14]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1c1      	bne.n	8007e96 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8007f12:	bf00      	nop
 8007f14:	3714      	adds	r7, #20
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f34:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7f9 fbdb 	bl	8001700 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f4a:	bf00      	nop
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f60:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f68:	2b22      	cmp	r3, #34	; 0x22
 8007f6a:	d13b      	bne.n	8007fe4 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f74:	89bb      	ldrh	r3, [r7, #12]
 8007f76:	b2d9      	uxtb	r1, r3
 8007f78:	89fb      	ldrh	r3, [r7, #14]
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f80:	400a      	ands	r2, r1
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d122      	bne.n	8007ff4 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fbc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0201 	bic.w	r2, r2, #1
 8007fcc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7f9 fb9f 	bl	8001720 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fe2:	e007      	b.n	8007ff4 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0208 	orr.w	r2, r2, #8
 8007ff2:	619a      	str	r2, [r3, #24]
}
 8007ff4:	bf00      	nop
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800800a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008012:	2b22      	cmp	r3, #34	; 0x22
 8008014:	d13b      	bne.n	800808e <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008022:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008024:	89ba      	ldrh	r2, [r7, #12]
 8008026:	89fb      	ldrh	r3, [r7, #14]
 8008028:	4013      	ands	r3, r2
 800802a:	b29a      	uxth	r2, r3
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008034:	1c9a      	adds	r2, r3, #2
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008052:	b29b      	uxth	r3, r3
 8008054:	2b00      	cmp	r3, #0
 8008056:	d122      	bne.n	800809e <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008066:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689a      	ldr	r2, [r3, #8]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0201 	bic.w	r2, r2, #1
 8008076:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2220      	movs	r2, #32
 800807c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7f9 fb4a 	bl	8001720 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800808c:	e007      	b.n	800809e <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	699a      	ldr	r2, [r3, #24]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f042 0208 	orr.w	r2, r2, #8
 800809c:	619a      	str	r2, [r3, #24]
}
 800809e:	bf00      	nop
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80080b6:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080be:	2b22      	cmp	r3, #34	; 0x22
 80080c0:	d168      	bne.n	8008194 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080c8:	81fb      	strh	r3, [r7, #14]
 80080ca:	e03f      	b.n	800814c <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80080d4:	893b      	ldrh	r3, [r7, #8]
 80080d6:	b2d9      	uxtb	r1, r3
 80080d8:	89bb      	ldrh	r3, [r7, #12]
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e0:	400a      	ands	r2, r1
 80080e2:	b2d2      	uxtb	r2, r2
 80080e4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	3b01      	subs	r3, #1
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008108:	b29b      	uxth	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d11b      	bne.n	8008146 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800811c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	6812      	ldr	r2, [r2, #0]
 8008128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800812c:	f023 0301 	bic.w	r3, r3, #1
 8008130:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2220      	movs	r2, #32
 8008136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7f9 faed 	bl	8001720 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008146:	89fb      	ldrh	r3, [r7, #14]
 8008148:	3b01      	subs	r3, #1
 800814a:	81fb      	strh	r3, [r7, #14]
 800814c:	89fb      	ldrh	r3, [r7, #14]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1bc      	bne.n	80080cc <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008158:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800815a:	897b      	ldrh	r3, [r7, #10]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d021      	beq.n	80081a4 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008166:	897a      	ldrh	r2, [r7, #10]
 8008168:	429a      	cmp	r2, r3
 800816a:	d21b      	bcs.n	80081a4 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800817a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a0b      	ldr	r2, [pc, #44]	; (80081ac <UART_RxISR_8BIT_FIFOEN+0x104>)
 8008180:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f042 0220 	orr.w	r2, r2, #32
 8008190:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008192:	e007      	b.n	80081a4 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	699a      	ldr	r2, [r3, #24]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f042 0208 	orr.w	r2, r2, #8
 80081a2:	619a      	str	r2, [r3, #24]
}
 80081a4:	bf00      	nop
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	08007f53 	.word	0x08007f53

080081b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081be:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081c6:	2b22      	cmp	r3, #34	; 0x22
 80081c8:	d168      	bne.n	800829c <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80081d0:	82fb      	strh	r3, [r7, #22]
 80081d2:	e03f      	b.n	8008254 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e0:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80081e2:	8a3a      	ldrh	r2, [r7, #16]
 80081e4:	8abb      	ldrh	r3, [r7, #20]
 80081e6:	4013      	ands	r3, r2
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f2:	1c9a      	adds	r2, r3, #2
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081fe:	b29b      	uxth	r3, r3
 8008200:	3b01      	subs	r3, #1
 8008202:	b29a      	uxth	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008210:	b29b      	uxth	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d11b      	bne.n	800824e <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008224:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008234:	f023 0301 	bic.w	r3, r3, #1
 8008238:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7f9 fa69 	bl	8001720 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800824e:	8afb      	ldrh	r3, [r7, #22]
 8008250:	3b01      	subs	r3, #1
 8008252:	82fb      	strh	r3, [r7, #22]
 8008254:	8afb      	ldrh	r3, [r7, #22]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1bc      	bne.n	80081d4 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008260:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008262:	8a7b      	ldrh	r3, [r7, #18]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d021      	beq.n	80082ac <UART_RxISR_16BIT_FIFOEN+0xfc>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800826e:	8a7a      	ldrh	r2, [r7, #18]
 8008270:	429a      	cmp	r2, r3
 8008272:	d21b      	bcs.n	80082ac <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008282:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a0b      	ldr	r2, [pc, #44]	; (80082b4 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8008288:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f042 0220 	orr.w	r2, r2, #32
 8008298:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800829a:	e007      	b.n	80082ac <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699a      	ldr	r2, [r3, #24]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f042 0208 	orr.w	r2, r2, #8
 80082aa:	619a      	str	r2, [r3, #24]
}
 80082ac:	bf00      	nop
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	08007ffd 	.word	0x08007ffd

080082b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008302:	2b01      	cmp	r3, #1
 8008304:	d101      	bne.n	800830a <HAL_UARTEx_DisableFifoMode+0x16>
 8008306:	2302      	movs	r3, #2
 8008308:	e027      	b.n	800835a <HAL_UARTEx_DisableFifoMode+0x66>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2224      	movs	r2, #36	; 0x24
 8008316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f022 0201 	bic.w	r2, r2, #1
 8008330:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008338:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2220      	movs	r2, #32
 800834c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008376:	2b01      	cmp	r3, #1
 8008378:	d101      	bne.n	800837e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800837a:	2302      	movs	r3, #2
 800837c:	e02d      	b.n	80083da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2224      	movs	r2, #36	; 0x24
 800838a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f022 0201 	bic.w	r2, r2, #1
 80083a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f850 	bl	8008460 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d101      	bne.n	80083fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083f6:	2302      	movs	r3, #2
 80083f8:	e02d      	b.n	8008456 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2224      	movs	r2, #36	; 0x24
 8008406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0201 	bic.w	r2, r2, #1
 8008420:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f812 	bl	8008460 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2220      	movs	r2, #32
 8008448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008460:	b480      	push	{r7}
 8008462:	b089      	sub	sp, #36	; 0x24
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008468:	4a2f      	ldr	r2, [pc, #188]	; (8008528 <UARTEx_SetNbDataToProcess+0xc8>)
 800846a:	f107 0314 	add.w	r3, r7, #20
 800846e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008472:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008476:	4a2d      	ldr	r2, [pc, #180]	; (800852c <UARTEx_SetNbDataToProcess+0xcc>)
 8008478:	f107 030c 	add.w	r3, r7, #12
 800847c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008480:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008488:	2b00      	cmp	r3, #0
 800848a:	d108      	bne.n	800849e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800849c:	e03d      	b.n	800851a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800849e:	2308      	movs	r3, #8
 80084a0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084a2:	2308      	movs	r3, #8
 80084a4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	0e5b      	lsrs	r3, r3, #25
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	f003 0307 	and.w	r3, r3, #7
 80084b4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	0f5b      	lsrs	r3, r3, #29
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	f003 0307 	and.w	r3, r3, #7
 80084c4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80084c6:	7fbb      	ldrb	r3, [r7, #30]
 80084c8:	7f3a      	ldrb	r2, [r7, #28]
 80084ca:	f107 0120 	add.w	r1, r7, #32
 80084ce:	440a      	add	r2, r1
 80084d0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80084d4:	fb02 f303 	mul.w	r3, r2, r3
 80084d8:	7f3a      	ldrb	r2, [r7, #28]
 80084da:	f107 0120 	add.w	r1, r7, #32
 80084de:	440a      	add	r2, r1
 80084e0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80084e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80084f0:	7ffb      	ldrb	r3, [r7, #31]
 80084f2:	7f7a      	ldrb	r2, [r7, #29]
 80084f4:	f107 0120 	add.w	r1, r7, #32
 80084f8:	440a      	add	r2, r1
 80084fa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80084fe:	fb02 f303 	mul.w	r3, r2, r3
 8008502:	7f7a      	ldrb	r2, [r7, #29]
 8008504:	f107 0120 	add.w	r1, r7, #32
 8008508:	440a      	add	r2, r1
 800850a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800850e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008512:	b29a      	uxth	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800851a:	bf00      	nop
 800851c:	3724      	adds	r7, #36	; 0x24
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	0800ca00 	.word	0x0800ca00
 800852c:	0800ca08 	.word	0x0800ca08

08008530 <__errno>:
 8008530:	4b01      	ldr	r3, [pc, #4]	; (8008538 <__errno+0x8>)
 8008532:	6818      	ldr	r0, [r3, #0]
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	2000002c 	.word	0x2000002c

0800853c <__libc_init_array>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	4e0d      	ldr	r6, [pc, #52]	; (8008574 <__libc_init_array+0x38>)
 8008540:	4c0d      	ldr	r4, [pc, #52]	; (8008578 <__libc_init_array+0x3c>)
 8008542:	1ba4      	subs	r4, r4, r6
 8008544:	10a4      	asrs	r4, r4, #2
 8008546:	2500      	movs	r5, #0
 8008548:	42a5      	cmp	r5, r4
 800854a:	d109      	bne.n	8008560 <__libc_init_array+0x24>
 800854c:	4e0b      	ldr	r6, [pc, #44]	; (800857c <__libc_init_array+0x40>)
 800854e:	4c0c      	ldr	r4, [pc, #48]	; (8008580 <__libc_init_array+0x44>)
 8008550:	f003 ffea 	bl	800c528 <_init>
 8008554:	1ba4      	subs	r4, r4, r6
 8008556:	10a4      	asrs	r4, r4, #2
 8008558:	2500      	movs	r5, #0
 800855a:	42a5      	cmp	r5, r4
 800855c:	d105      	bne.n	800856a <__libc_init_array+0x2e>
 800855e:	bd70      	pop	{r4, r5, r6, pc}
 8008560:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008564:	4798      	blx	r3
 8008566:	3501      	adds	r5, #1
 8008568:	e7ee      	b.n	8008548 <__libc_init_array+0xc>
 800856a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800856e:	4798      	blx	r3
 8008570:	3501      	adds	r5, #1
 8008572:	e7f2      	b.n	800855a <__libc_init_array+0x1e>
 8008574:	0800ccec 	.word	0x0800ccec
 8008578:	0800ccec 	.word	0x0800ccec
 800857c:	0800ccec 	.word	0x0800ccec
 8008580:	0800ccf0 	.word	0x0800ccf0

08008584 <memcpy>:
 8008584:	b510      	push	{r4, lr}
 8008586:	1e43      	subs	r3, r0, #1
 8008588:	440a      	add	r2, r1
 800858a:	4291      	cmp	r1, r2
 800858c:	d100      	bne.n	8008590 <memcpy+0xc>
 800858e:	bd10      	pop	{r4, pc}
 8008590:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008594:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008598:	e7f7      	b.n	800858a <memcpy+0x6>

0800859a <memset>:
 800859a:	4402      	add	r2, r0
 800859c:	4603      	mov	r3, r0
 800859e:	4293      	cmp	r3, r2
 80085a0:	d100      	bne.n	80085a4 <memset+0xa>
 80085a2:	4770      	bx	lr
 80085a4:	f803 1b01 	strb.w	r1, [r3], #1
 80085a8:	e7f9      	b.n	800859e <memset+0x4>

080085aa <__cvt>:
 80085aa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085ae:	ec55 4b10 	vmov	r4, r5, d0
 80085b2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80085b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085b8:	2d00      	cmp	r5, #0
 80085ba:	460e      	mov	r6, r1
 80085bc:	4691      	mov	r9, r2
 80085be:	4619      	mov	r1, r3
 80085c0:	bfb8      	it	lt
 80085c2:	4622      	movlt	r2, r4
 80085c4:	462b      	mov	r3, r5
 80085c6:	f027 0720 	bic.w	r7, r7, #32
 80085ca:	bfbb      	ittet	lt
 80085cc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085d0:	461d      	movlt	r5, r3
 80085d2:	2300      	movge	r3, #0
 80085d4:	232d      	movlt	r3, #45	; 0x2d
 80085d6:	bfb8      	it	lt
 80085d8:	4614      	movlt	r4, r2
 80085da:	2f46      	cmp	r7, #70	; 0x46
 80085dc:	700b      	strb	r3, [r1, #0]
 80085de:	d004      	beq.n	80085ea <__cvt+0x40>
 80085e0:	2f45      	cmp	r7, #69	; 0x45
 80085e2:	d100      	bne.n	80085e6 <__cvt+0x3c>
 80085e4:	3601      	adds	r6, #1
 80085e6:	2102      	movs	r1, #2
 80085e8:	e000      	b.n	80085ec <__cvt+0x42>
 80085ea:	2103      	movs	r1, #3
 80085ec:	ab03      	add	r3, sp, #12
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	ab02      	add	r3, sp, #8
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	4632      	mov	r2, r6
 80085f6:	4653      	mov	r3, sl
 80085f8:	ec45 4b10 	vmov	d0, r4, r5
 80085fc:	f001 fddc 	bl	800a1b8 <_dtoa_r>
 8008600:	2f47      	cmp	r7, #71	; 0x47
 8008602:	4680      	mov	r8, r0
 8008604:	d102      	bne.n	800860c <__cvt+0x62>
 8008606:	f019 0f01 	tst.w	r9, #1
 800860a:	d026      	beq.n	800865a <__cvt+0xb0>
 800860c:	2f46      	cmp	r7, #70	; 0x46
 800860e:	eb08 0906 	add.w	r9, r8, r6
 8008612:	d111      	bne.n	8008638 <__cvt+0x8e>
 8008614:	f898 3000 	ldrb.w	r3, [r8]
 8008618:	2b30      	cmp	r3, #48	; 0x30
 800861a:	d10a      	bne.n	8008632 <__cvt+0x88>
 800861c:	2200      	movs	r2, #0
 800861e:	2300      	movs	r3, #0
 8008620:	4620      	mov	r0, r4
 8008622:	4629      	mov	r1, r5
 8008624:	f7f8 fa78 	bl	8000b18 <__aeabi_dcmpeq>
 8008628:	b918      	cbnz	r0, 8008632 <__cvt+0x88>
 800862a:	f1c6 0601 	rsb	r6, r6, #1
 800862e:	f8ca 6000 	str.w	r6, [sl]
 8008632:	f8da 3000 	ldr.w	r3, [sl]
 8008636:	4499      	add	r9, r3
 8008638:	2200      	movs	r2, #0
 800863a:	2300      	movs	r3, #0
 800863c:	4620      	mov	r0, r4
 800863e:	4629      	mov	r1, r5
 8008640:	f7f8 fa6a 	bl	8000b18 <__aeabi_dcmpeq>
 8008644:	b938      	cbnz	r0, 8008656 <__cvt+0xac>
 8008646:	2230      	movs	r2, #48	; 0x30
 8008648:	9b03      	ldr	r3, [sp, #12]
 800864a:	454b      	cmp	r3, r9
 800864c:	d205      	bcs.n	800865a <__cvt+0xb0>
 800864e:	1c59      	adds	r1, r3, #1
 8008650:	9103      	str	r1, [sp, #12]
 8008652:	701a      	strb	r2, [r3, #0]
 8008654:	e7f8      	b.n	8008648 <__cvt+0x9e>
 8008656:	f8cd 900c 	str.w	r9, [sp, #12]
 800865a:	9b03      	ldr	r3, [sp, #12]
 800865c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800865e:	eba3 0308 	sub.w	r3, r3, r8
 8008662:	4640      	mov	r0, r8
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	b004      	add	sp, #16
 8008668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800866c <__exponent>:
 800866c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800866e:	2900      	cmp	r1, #0
 8008670:	4604      	mov	r4, r0
 8008672:	bfba      	itte	lt
 8008674:	4249      	neglt	r1, r1
 8008676:	232d      	movlt	r3, #45	; 0x2d
 8008678:	232b      	movge	r3, #43	; 0x2b
 800867a:	2909      	cmp	r1, #9
 800867c:	f804 2b02 	strb.w	r2, [r4], #2
 8008680:	7043      	strb	r3, [r0, #1]
 8008682:	dd20      	ble.n	80086c6 <__exponent+0x5a>
 8008684:	f10d 0307 	add.w	r3, sp, #7
 8008688:	461f      	mov	r7, r3
 800868a:	260a      	movs	r6, #10
 800868c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008690:	fb06 1115 	mls	r1, r6, r5, r1
 8008694:	3130      	adds	r1, #48	; 0x30
 8008696:	2d09      	cmp	r5, #9
 8008698:	f803 1c01 	strb.w	r1, [r3, #-1]
 800869c:	f103 32ff 	add.w	r2, r3, #4294967295
 80086a0:	4629      	mov	r1, r5
 80086a2:	dc09      	bgt.n	80086b8 <__exponent+0x4c>
 80086a4:	3130      	adds	r1, #48	; 0x30
 80086a6:	3b02      	subs	r3, #2
 80086a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80086ac:	42bb      	cmp	r3, r7
 80086ae:	4622      	mov	r2, r4
 80086b0:	d304      	bcc.n	80086bc <__exponent+0x50>
 80086b2:	1a10      	subs	r0, r2, r0
 80086b4:	b003      	add	sp, #12
 80086b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086b8:	4613      	mov	r3, r2
 80086ba:	e7e7      	b.n	800868c <__exponent+0x20>
 80086bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086c0:	f804 2b01 	strb.w	r2, [r4], #1
 80086c4:	e7f2      	b.n	80086ac <__exponent+0x40>
 80086c6:	2330      	movs	r3, #48	; 0x30
 80086c8:	4419      	add	r1, r3
 80086ca:	7083      	strb	r3, [r0, #2]
 80086cc:	1d02      	adds	r2, r0, #4
 80086ce:	70c1      	strb	r1, [r0, #3]
 80086d0:	e7ef      	b.n	80086b2 <__exponent+0x46>
	...

080086d4 <_printf_float>:
 80086d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d8:	b08d      	sub	sp, #52	; 0x34
 80086da:	460c      	mov	r4, r1
 80086dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80086e0:	4616      	mov	r6, r2
 80086e2:	461f      	mov	r7, r3
 80086e4:	4605      	mov	r5, r0
 80086e6:	f002 fe4b 	bl	800b380 <_localeconv_r>
 80086ea:	6803      	ldr	r3, [r0, #0]
 80086ec:	9304      	str	r3, [sp, #16]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7f7 fd96 	bl	8000220 <strlen>
 80086f4:	2300      	movs	r3, #0
 80086f6:	930a      	str	r3, [sp, #40]	; 0x28
 80086f8:	f8d8 3000 	ldr.w	r3, [r8]
 80086fc:	9005      	str	r0, [sp, #20]
 80086fe:	3307      	adds	r3, #7
 8008700:	f023 0307 	bic.w	r3, r3, #7
 8008704:	f103 0208 	add.w	r2, r3, #8
 8008708:	f894 a018 	ldrb.w	sl, [r4, #24]
 800870c:	f8d4 b000 	ldr.w	fp, [r4]
 8008710:	f8c8 2000 	str.w	r2, [r8]
 8008714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008718:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800871c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008720:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008724:	9307      	str	r3, [sp, #28]
 8008726:	f8cd 8018 	str.w	r8, [sp, #24]
 800872a:	f04f 32ff 	mov.w	r2, #4294967295
 800872e:	4ba7      	ldr	r3, [pc, #668]	; (80089cc <_printf_float+0x2f8>)
 8008730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008734:	f7f8 fa22 	bl	8000b7c <__aeabi_dcmpun>
 8008738:	bb70      	cbnz	r0, 8008798 <_printf_float+0xc4>
 800873a:	f04f 32ff 	mov.w	r2, #4294967295
 800873e:	4ba3      	ldr	r3, [pc, #652]	; (80089cc <_printf_float+0x2f8>)
 8008740:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008744:	f7f8 f9fc 	bl	8000b40 <__aeabi_dcmple>
 8008748:	bb30      	cbnz	r0, 8008798 <_printf_float+0xc4>
 800874a:	2200      	movs	r2, #0
 800874c:	2300      	movs	r3, #0
 800874e:	4640      	mov	r0, r8
 8008750:	4649      	mov	r1, r9
 8008752:	f7f8 f9eb 	bl	8000b2c <__aeabi_dcmplt>
 8008756:	b110      	cbz	r0, 800875e <_printf_float+0x8a>
 8008758:	232d      	movs	r3, #45	; 0x2d
 800875a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800875e:	4a9c      	ldr	r2, [pc, #624]	; (80089d0 <_printf_float+0x2fc>)
 8008760:	4b9c      	ldr	r3, [pc, #624]	; (80089d4 <_printf_float+0x300>)
 8008762:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008766:	bf8c      	ite	hi
 8008768:	4690      	movhi	r8, r2
 800876a:	4698      	movls	r8, r3
 800876c:	2303      	movs	r3, #3
 800876e:	f02b 0204 	bic.w	r2, fp, #4
 8008772:	6123      	str	r3, [r4, #16]
 8008774:	6022      	str	r2, [r4, #0]
 8008776:	f04f 0900 	mov.w	r9, #0
 800877a:	9700      	str	r7, [sp, #0]
 800877c:	4633      	mov	r3, r6
 800877e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008780:	4621      	mov	r1, r4
 8008782:	4628      	mov	r0, r5
 8008784:	f000 f9e6 	bl	8008b54 <_printf_common>
 8008788:	3001      	adds	r0, #1
 800878a:	f040 808d 	bne.w	80088a8 <_printf_float+0x1d4>
 800878e:	f04f 30ff 	mov.w	r0, #4294967295
 8008792:	b00d      	add	sp, #52	; 0x34
 8008794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008798:	4642      	mov	r2, r8
 800879a:	464b      	mov	r3, r9
 800879c:	4640      	mov	r0, r8
 800879e:	4649      	mov	r1, r9
 80087a0:	f7f8 f9ec 	bl	8000b7c <__aeabi_dcmpun>
 80087a4:	b110      	cbz	r0, 80087ac <_printf_float+0xd8>
 80087a6:	4a8c      	ldr	r2, [pc, #560]	; (80089d8 <_printf_float+0x304>)
 80087a8:	4b8c      	ldr	r3, [pc, #560]	; (80089dc <_printf_float+0x308>)
 80087aa:	e7da      	b.n	8008762 <_printf_float+0x8e>
 80087ac:	6861      	ldr	r1, [r4, #4]
 80087ae:	1c4b      	adds	r3, r1, #1
 80087b0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80087b4:	a80a      	add	r0, sp, #40	; 0x28
 80087b6:	d13e      	bne.n	8008836 <_printf_float+0x162>
 80087b8:	2306      	movs	r3, #6
 80087ba:	6063      	str	r3, [r4, #4]
 80087bc:	2300      	movs	r3, #0
 80087be:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80087c2:	ab09      	add	r3, sp, #36	; 0x24
 80087c4:	9300      	str	r3, [sp, #0]
 80087c6:	ec49 8b10 	vmov	d0, r8, r9
 80087ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087ce:	6022      	str	r2, [r4, #0]
 80087d0:	f8cd a004 	str.w	sl, [sp, #4]
 80087d4:	6861      	ldr	r1, [r4, #4]
 80087d6:	4628      	mov	r0, r5
 80087d8:	f7ff fee7 	bl	80085aa <__cvt>
 80087dc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80087e0:	2b47      	cmp	r3, #71	; 0x47
 80087e2:	4680      	mov	r8, r0
 80087e4:	d109      	bne.n	80087fa <_printf_float+0x126>
 80087e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e8:	1cd8      	adds	r0, r3, #3
 80087ea:	db02      	blt.n	80087f2 <_printf_float+0x11e>
 80087ec:	6862      	ldr	r2, [r4, #4]
 80087ee:	4293      	cmp	r3, r2
 80087f0:	dd47      	ble.n	8008882 <_printf_float+0x1ae>
 80087f2:	f1aa 0a02 	sub.w	sl, sl, #2
 80087f6:	fa5f fa8a 	uxtb.w	sl, sl
 80087fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80087fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008800:	d824      	bhi.n	800884c <_printf_float+0x178>
 8008802:	3901      	subs	r1, #1
 8008804:	4652      	mov	r2, sl
 8008806:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800880a:	9109      	str	r1, [sp, #36]	; 0x24
 800880c:	f7ff ff2e 	bl	800866c <__exponent>
 8008810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008812:	1813      	adds	r3, r2, r0
 8008814:	2a01      	cmp	r2, #1
 8008816:	4681      	mov	r9, r0
 8008818:	6123      	str	r3, [r4, #16]
 800881a:	dc02      	bgt.n	8008822 <_printf_float+0x14e>
 800881c:	6822      	ldr	r2, [r4, #0]
 800881e:	07d1      	lsls	r1, r2, #31
 8008820:	d501      	bpl.n	8008826 <_printf_float+0x152>
 8008822:	3301      	adds	r3, #1
 8008824:	6123      	str	r3, [r4, #16]
 8008826:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800882a:	2b00      	cmp	r3, #0
 800882c:	d0a5      	beq.n	800877a <_printf_float+0xa6>
 800882e:	232d      	movs	r3, #45	; 0x2d
 8008830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008834:	e7a1      	b.n	800877a <_printf_float+0xa6>
 8008836:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800883a:	f000 8177 	beq.w	8008b2c <_printf_float+0x458>
 800883e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008842:	d1bb      	bne.n	80087bc <_printf_float+0xe8>
 8008844:	2900      	cmp	r1, #0
 8008846:	d1b9      	bne.n	80087bc <_printf_float+0xe8>
 8008848:	2301      	movs	r3, #1
 800884a:	e7b6      	b.n	80087ba <_printf_float+0xe6>
 800884c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008850:	d119      	bne.n	8008886 <_printf_float+0x1b2>
 8008852:	2900      	cmp	r1, #0
 8008854:	6863      	ldr	r3, [r4, #4]
 8008856:	dd0c      	ble.n	8008872 <_printf_float+0x19e>
 8008858:	6121      	str	r1, [r4, #16]
 800885a:	b913      	cbnz	r3, 8008862 <_printf_float+0x18e>
 800885c:	6822      	ldr	r2, [r4, #0]
 800885e:	07d2      	lsls	r2, r2, #31
 8008860:	d502      	bpl.n	8008868 <_printf_float+0x194>
 8008862:	3301      	adds	r3, #1
 8008864:	440b      	add	r3, r1
 8008866:	6123      	str	r3, [r4, #16]
 8008868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800886a:	65a3      	str	r3, [r4, #88]	; 0x58
 800886c:	f04f 0900 	mov.w	r9, #0
 8008870:	e7d9      	b.n	8008826 <_printf_float+0x152>
 8008872:	b913      	cbnz	r3, 800887a <_printf_float+0x1a6>
 8008874:	6822      	ldr	r2, [r4, #0]
 8008876:	07d0      	lsls	r0, r2, #31
 8008878:	d501      	bpl.n	800887e <_printf_float+0x1aa>
 800887a:	3302      	adds	r3, #2
 800887c:	e7f3      	b.n	8008866 <_printf_float+0x192>
 800887e:	2301      	movs	r3, #1
 8008880:	e7f1      	b.n	8008866 <_printf_float+0x192>
 8008882:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008886:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800888a:	4293      	cmp	r3, r2
 800888c:	db05      	blt.n	800889a <_printf_float+0x1c6>
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	6123      	str	r3, [r4, #16]
 8008892:	07d1      	lsls	r1, r2, #31
 8008894:	d5e8      	bpl.n	8008868 <_printf_float+0x194>
 8008896:	3301      	adds	r3, #1
 8008898:	e7e5      	b.n	8008866 <_printf_float+0x192>
 800889a:	2b00      	cmp	r3, #0
 800889c:	bfd4      	ite	le
 800889e:	f1c3 0302 	rsble	r3, r3, #2
 80088a2:	2301      	movgt	r3, #1
 80088a4:	4413      	add	r3, r2
 80088a6:	e7de      	b.n	8008866 <_printf_float+0x192>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	055a      	lsls	r2, r3, #21
 80088ac:	d407      	bmi.n	80088be <_printf_float+0x1ea>
 80088ae:	6923      	ldr	r3, [r4, #16]
 80088b0:	4642      	mov	r2, r8
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b8      	blx	r7
 80088b8:	3001      	adds	r0, #1
 80088ba:	d12b      	bne.n	8008914 <_printf_float+0x240>
 80088bc:	e767      	b.n	800878e <_printf_float+0xba>
 80088be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80088c2:	f240 80dc 	bls.w	8008a7e <_printf_float+0x3aa>
 80088c6:	2200      	movs	r2, #0
 80088c8:	2300      	movs	r3, #0
 80088ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088ce:	f7f8 f923 	bl	8000b18 <__aeabi_dcmpeq>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	d033      	beq.n	800893e <_printf_float+0x26a>
 80088d6:	2301      	movs	r3, #1
 80088d8:	4a41      	ldr	r2, [pc, #260]	; (80089e0 <_printf_float+0x30c>)
 80088da:	4631      	mov	r1, r6
 80088dc:	4628      	mov	r0, r5
 80088de:	47b8      	blx	r7
 80088e0:	3001      	adds	r0, #1
 80088e2:	f43f af54 	beq.w	800878e <_printf_float+0xba>
 80088e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088ea:	429a      	cmp	r2, r3
 80088ec:	db02      	blt.n	80088f4 <_printf_float+0x220>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	07d8      	lsls	r0, r3, #31
 80088f2:	d50f      	bpl.n	8008914 <_printf_float+0x240>
 80088f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088f8:	4631      	mov	r1, r6
 80088fa:	4628      	mov	r0, r5
 80088fc:	47b8      	blx	r7
 80088fe:	3001      	adds	r0, #1
 8008900:	f43f af45 	beq.w	800878e <_printf_float+0xba>
 8008904:	f04f 0800 	mov.w	r8, #0
 8008908:	f104 091a 	add.w	r9, r4, #26
 800890c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890e:	3b01      	subs	r3, #1
 8008910:	4543      	cmp	r3, r8
 8008912:	dc09      	bgt.n	8008928 <_printf_float+0x254>
 8008914:	6823      	ldr	r3, [r4, #0]
 8008916:	079b      	lsls	r3, r3, #30
 8008918:	f100 8103 	bmi.w	8008b22 <_printf_float+0x44e>
 800891c:	68e0      	ldr	r0, [r4, #12]
 800891e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008920:	4298      	cmp	r0, r3
 8008922:	bfb8      	it	lt
 8008924:	4618      	movlt	r0, r3
 8008926:	e734      	b.n	8008792 <_printf_float+0xbe>
 8008928:	2301      	movs	r3, #1
 800892a:	464a      	mov	r2, r9
 800892c:	4631      	mov	r1, r6
 800892e:	4628      	mov	r0, r5
 8008930:	47b8      	blx	r7
 8008932:	3001      	adds	r0, #1
 8008934:	f43f af2b 	beq.w	800878e <_printf_float+0xba>
 8008938:	f108 0801 	add.w	r8, r8, #1
 800893c:	e7e6      	b.n	800890c <_printf_float+0x238>
 800893e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008940:	2b00      	cmp	r3, #0
 8008942:	dc2b      	bgt.n	800899c <_printf_float+0x2c8>
 8008944:	2301      	movs	r3, #1
 8008946:	4a26      	ldr	r2, [pc, #152]	; (80089e0 <_printf_float+0x30c>)
 8008948:	4631      	mov	r1, r6
 800894a:	4628      	mov	r0, r5
 800894c:	47b8      	blx	r7
 800894e:	3001      	adds	r0, #1
 8008950:	f43f af1d 	beq.w	800878e <_printf_float+0xba>
 8008954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008956:	b923      	cbnz	r3, 8008962 <_printf_float+0x28e>
 8008958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800895a:	b913      	cbnz	r3, 8008962 <_printf_float+0x28e>
 800895c:	6823      	ldr	r3, [r4, #0]
 800895e:	07d9      	lsls	r1, r3, #31
 8008960:	d5d8      	bpl.n	8008914 <_printf_float+0x240>
 8008962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008966:	4631      	mov	r1, r6
 8008968:	4628      	mov	r0, r5
 800896a:	47b8      	blx	r7
 800896c:	3001      	adds	r0, #1
 800896e:	f43f af0e 	beq.w	800878e <_printf_float+0xba>
 8008972:	f04f 0900 	mov.w	r9, #0
 8008976:	f104 0a1a 	add.w	sl, r4, #26
 800897a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800897c:	425b      	negs	r3, r3
 800897e:	454b      	cmp	r3, r9
 8008980:	dc01      	bgt.n	8008986 <_printf_float+0x2b2>
 8008982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008984:	e794      	b.n	80088b0 <_printf_float+0x1dc>
 8008986:	2301      	movs	r3, #1
 8008988:	4652      	mov	r2, sl
 800898a:	4631      	mov	r1, r6
 800898c:	4628      	mov	r0, r5
 800898e:	47b8      	blx	r7
 8008990:	3001      	adds	r0, #1
 8008992:	f43f aefc 	beq.w	800878e <_printf_float+0xba>
 8008996:	f109 0901 	add.w	r9, r9, #1
 800899a:	e7ee      	b.n	800897a <_printf_float+0x2a6>
 800899c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800899e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089a0:	429a      	cmp	r2, r3
 80089a2:	bfa8      	it	ge
 80089a4:	461a      	movge	r2, r3
 80089a6:	2a00      	cmp	r2, #0
 80089a8:	4691      	mov	r9, r2
 80089aa:	dd07      	ble.n	80089bc <_printf_float+0x2e8>
 80089ac:	4613      	mov	r3, r2
 80089ae:	4631      	mov	r1, r6
 80089b0:	4642      	mov	r2, r8
 80089b2:	4628      	mov	r0, r5
 80089b4:	47b8      	blx	r7
 80089b6:	3001      	adds	r0, #1
 80089b8:	f43f aee9 	beq.w	800878e <_printf_float+0xba>
 80089bc:	f104 031a 	add.w	r3, r4, #26
 80089c0:	f04f 0b00 	mov.w	fp, #0
 80089c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089c8:	9306      	str	r3, [sp, #24]
 80089ca:	e015      	b.n	80089f8 <_printf_float+0x324>
 80089cc:	7fefffff 	.word	0x7fefffff
 80089d0:	0800ca2c 	.word	0x0800ca2c
 80089d4:	0800ca28 	.word	0x0800ca28
 80089d8:	0800ca34 	.word	0x0800ca34
 80089dc:	0800ca30 	.word	0x0800ca30
 80089e0:	0800ca38 	.word	0x0800ca38
 80089e4:	2301      	movs	r3, #1
 80089e6:	9a06      	ldr	r2, [sp, #24]
 80089e8:	4631      	mov	r1, r6
 80089ea:	4628      	mov	r0, r5
 80089ec:	47b8      	blx	r7
 80089ee:	3001      	adds	r0, #1
 80089f0:	f43f aecd 	beq.w	800878e <_printf_float+0xba>
 80089f4:	f10b 0b01 	add.w	fp, fp, #1
 80089f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80089fc:	ebaa 0309 	sub.w	r3, sl, r9
 8008a00:	455b      	cmp	r3, fp
 8008a02:	dcef      	bgt.n	80089e4 <_printf_float+0x310>
 8008a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	44d0      	add	r8, sl
 8008a0c:	db15      	blt.n	8008a3a <_printf_float+0x366>
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	07da      	lsls	r2, r3, #31
 8008a12:	d412      	bmi.n	8008a3a <_printf_float+0x366>
 8008a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a18:	eba3 020a 	sub.w	r2, r3, sl
 8008a1c:	eba3 0a01 	sub.w	sl, r3, r1
 8008a20:	4592      	cmp	sl, r2
 8008a22:	bfa8      	it	ge
 8008a24:	4692      	movge	sl, r2
 8008a26:	f1ba 0f00 	cmp.w	sl, #0
 8008a2a:	dc0e      	bgt.n	8008a4a <_printf_float+0x376>
 8008a2c:	f04f 0800 	mov.w	r8, #0
 8008a30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a34:	f104 091a 	add.w	r9, r4, #26
 8008a38:	e019      	b.n	8008a6e <_printf_float+0x39a>
 8008a3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a3e:	4631      	mov	r1, r6
 8008a40:	4628      	mov	r0, r5
 8008a42:	47b8      	blx	r7
 8008a44:	3001      	adds	r0, #1
 8008a46:	d1e5      	bne.n	8008a14 <_printf_float+0x340>
 8008a48:	e6a1      	b.n	800878e <_printf_float+0xba>
 8008a4a:	4653      	mov	r3, sl
 8008a4c:	4642      	mov	r2, r8
 8008a4e:	4631      	mov	r1, r6
 8008a50:	4628      	mov	r0, r5
 8008a52:	47b8      	blx	r7
 8008a54:	3001      	adds	r0, #1
 8008a56:	d1e9      	bne.n	8008a2c <_printf_float+0x358>
 8008a58:	e699      	b.n	800878e <_printf_float+0xba>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	464a      	mov	r2, r9
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b8      	blx	r7
 8008a64:	3001      	adds	r0, #1
 8008a66:	f43f ae92 	beq.w	800878e <_printf_float+0xba>
 8008a6a:	f108 0801 	add.w	r8, r8, #1
 8008a6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a72:	1a9b      	subs	r3, r3, r2
 8008a74:	eba3 030a 	sub.w	r3, r3, sl
 8008a78:	4543      	cmp	r3, r8
 8008a7a:	dcee      	bgt.n	8008a5a <_printf_float+0x386>
 8008a7c:	e74a      	b.n	8008914 <_printf_float+0x240>
 8008a7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a80:	2a01      	cmp	r2, #1
 8008a82:	dc01      	bgt.n	8008a88 <_printf_float+0x3b4>
 8008a84:	07db      	lsls	r3, r3, #31
 8008a86:	d53a      	bpl.n	8008afe <_printf_float+0x42a>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	4642      	mov	r2, r8
 8008a8c:	4631      	mov	r1, r6
 8008a8e:	4628      	mov	r0, r5
 8008a90:	47b8      	blx	r7
 8008a92:	3001      	adds	r0, #1
 8008a94:	f43f ae7b 	beq.w	800878e <_printf_float+0xba>
 8008a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	47b8      	blx	r7
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	f108 0801 	add.w	r8, r8, #1
 8008aa8:	f43f ae71 	beq.w	800878e <_printf_float+0xba>
 8008aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f103 3aff 	add.w	sl, r3, #4294967295
 8008ab4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f7f8 f82d 	bl	8000b18 <__aeabi_dcmpeq>
 8008abe:	b9c8      	cbnz	r0, 8008af4 <_printf_float+0x420>
 8008ac0:	4653      	mov	r3, sl
 8008ac2:	4642      	mov	r2, r8
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	47b8      	blx	r7
 8008aca:	3001      	adds	r0, #1
 8008acc:	d10e      	bne.n	8008aec <_printf_float+0x418>
 8008ace:	e65e      	b.n	800878e <_printf_float+0xba>
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	4652      	mov	r2, sl
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	f43f ae57 	beq.w	800878e <_printf_float+0xba>
 8008ae0:	f108 0801 	add.w	r8, r8, #1
 8008ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	4543      	cmp	r3, r8
 8008aea:	dcf1      	bgt.n	8008ad0 <_printf_float+0x3fc>
 8008aec:	464b      	mov	r3, r9
 8008aee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008af2:	e6de      	b.n	80088b2 <_printf_float+0x1de>
 8008af4:	f04f 0800 	mov.w	r8, #0
 8008af8:	f104 0a1a 	add.w	sl, r4, #26
 8008afc:	e7f2      	b.n	8008ae4 <_printf_float+0x410>
 8008afe:	2301      	movs	r3, #1
 8008b00:	e7df      	b.n	8008ac2 <_printf_float+0x3ee>
 8008b02:	2301      	movs	r3, #1
 8008b04:	464a      	mov	r2, r9
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f43f ae3e 	beq.w	800878e <_printf_float+0xba>
 8008b12:	f108 0801 	add.w	r8, r8, #1
 8008b16:	68e3      	ldr	r3, [r4, #12]
 8008b18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b1a:	1a9b      	subs	r3, r3, r2
 8008b1c:	4543      	cmp	r3, r8
 8008b1e:	dcf0      	bgt.n	8008b02 <_printf_float+0x42e>
 8008b20:	e6fc      	b.n	800891c <_printf_float+0x248>
 8008b22:	f04f 0800 	mov.w	r8, #0
 8008b26:	f104 0919 	add.w	r9, r4, #25
 8008b2a:	e7f4      	b.n	8008b16 <_printf_float+0x442>
 8008b2c:	2900      	cmp	r1, #0
 8008b2e:	f43f ae8b 	beq.w	8008848 <_printf_float+0x174>
 8008b32:	2300      	movs	r3, #0
 8008b34:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008b38:	ab09      	add	r3, sp, #36	; 0x24
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	ec49 8b10 	vmov	d0, r8, r9
 8008b40:	6022      	str	r2, [r4, #0]
 8008b42:	f8cd a004 	str.w	sl, [sp, #4]
 8008b46:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f7ff fd2d 	bl	80085aa <__cvt>
 8008b50:	4680      	mov	r8, r0
 8008b52:	e648      	b.n	80087e6 <_printf_float+0x112>

08008b54 <_printf_common>:
 8008b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b58:	4691      	mov	r9, r2
 8008b5a:	461f      	mov	r7, r3
 8008b5c:	688a      	ldr	r2, [r1, #8]
 8008b5e:	690b      	ldr	r3, [r1, #16]
 8008b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b64:	4293      	cmp	r3, r2
 8008b66:	bfb8      	it	lt
 8008b68:	4613      	movlt	r3, r2
 8008b6a:	f8c9 3000 	str.w	r3, [r9]
 8008b6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b72:	4606      	mov	r6, r0
 8008b74:	460c      	mov	r4, r1
 8008b76:	b112      	cbz	r2, 8008b7e <_printf_common+0x2a>
 8008b78:	3301      	adds	r3, #1
 8008b7a:	f8c9 3000 	str.w	r3, [r9]
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	0699      	lsls	r1, r3, #26
 8008b82:	bf42      	ittt	mi
 8008b84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008b88:	3302      	addmi	r3, #2
 8008b8a:	f8c9 3000 	strmi.w	r3, [r9]
 8008b8e:	6825      	ldr	r5, [r4, #0]
 8008b90:	f015 0506 	ands.w	r5, r5, #6
 8008b94:	d107      	bne.n	8008ba6 <_printf_common+0x52>
 8008b96:	f104 0a19 	add.w	sl, r4, #25
 8008b9a:	68e3      	ldr	r3, [r4, #12]
 8008b9c:	f8d9 2000 	ldr.w	r2, [r9]
 8008ba0:	1a9b      	subs	r3, r3, r2
 8008ba2:	42ab      	cmp	r3, r5
 8008ba4:	dc28      	bgt.n	8008bf8 <_printf_common+0xa4>
 8008ba6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008baa:	6822      	ldr	r2, [r4, #0]
 8008bac:	3300      	adds	r3, #0
 8008bae:	bf18      	it	ne
 8008bb0:	2301      	movne	r3, #1
 8008bb2:	0692      	lsls	r2, r2, #26
 8008bb4:	d42d      	bmi.n	8008c12 <_printf_common+0xbe>
 8008bb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bba:	4639      	mov	r1, r7
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	47c0      	blx	r8
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d020      	beq.n	8008c06 <_printf_common+0xb2>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	68e5      	ldr	r5, [r4, #12]
 8008bc8:	f8d9 2000 	ldr.w	r2, [r9]
 8008bcc:	f003 0306 	and.w	r3, r3, #6
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	bf08      	it	eq
 8008bd4:	1aad      	subeq	r5, r5, r2
 8008bd6:	68a3      	ldr	r3, [r4, #8]
 8008bd8:	6922      	ldr	r2, [r4, #16]
 8008bda:	bf0c      	ite	eq
 8008bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008be0:	2500      	movne	r5, #0
 8008be2:	4293      	cmp	r3, r2
 8008be4:	bfc4      	itt	gt
 8008be6:	1a9b      	subgt	r3, r3, r2
 8008be8:	18ed      	addgt	r5, r5, r3
 8008bea:	f04f 0900 	mov.w	r9, #0
 8008bee:	341a      	adds	r4, #26
 8008bf0:	454d      	cmp	r5, r9
 8008bf2:	d11a      	bne.n	8008c2a <_printf_common+0xd6>
 8008bf4:	2000      	movs	r0, #0
 8008bf6:	e008      	b.n	8008c0a <_printf_common+0xb6>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	4652      	mov	r2, sl
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	4630      	mov	r0, r6
 8008c00:	47c0      	blx	r8
 8008c02:	3001      	adds	r0, #1
 8008c04:	d103      	bne.n	8008c0e <_printf_common+0xba>
 8008c06:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c0e:	3501      	adds	r5, #1
 8008c10:	e7c3      	b.n	8008b9a <_printf_common+0x46>
 8008c12:	18e1      	adds	r1, r4, r3
 8008c14:	1c5a      	adds	r2, r3, #1
 8008c16:	2030      	movs	r0, #48	; 0x30
 8008c18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c1c:	4422      	add	r2, r4
 8008c1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c26:	3302      	adds	r3, #2
 8008c28:	e7c5      	b.n	8008bb6 <_printf_common+0x62>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4622      	mov	r2, r4
 8008c2e:	4639      	mov	r1, r7
 8008c30:	4630      	mov	r0, r6
 8008c32:	47c0      	blx	r8
 8008c34:	3001      	adds	r0, #1
 8008c36:	d0e6      	beq.n	8008c06 <_printf_common+0xb2>
 8008c38:	f109 0901 	add.w	r9, r9, #1
 8008c3c:	e7d8      	b.n	8008bf0 <_printf_common+0x9c>
	...

08008c40 <_printf_i>:
 8008c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008c48:	460c      	mov	r4, r1
 8008c4a:	7e09      	ldrb	r1, [r1, #24]
 8008c4c:	b085      	sub	sp, #20
 8008c4e:	296e      	cmp	r1, #110	; 0x6e
 8008c50:	4617      	mov	r7, r2
 8008c52:	4606      	mov	r6, r0
 8008c54:	4698      	mov	r8, r3
 8008c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c58:	f000 80b3 	beq.w	8008dc2 <_printf_i+0x182>
 8008c5c:	d822      	bhi.n	8008ca4 <_printf_i+0x64>
 8008c5e:	2963      	cmp	r1, #99	; 0x63
 8008c60:	d036      	beq.n	8008cd0 <_printf_i+0x90>
 8008c62:	d80a      	bhi.n	8008c7a <_printf_i+0x3a>
 8008c64:	2900      	cmp	r1, #0
 8008c66:	f000 80b9 	beq.w	8008ddc <_printf_i+0x19c>
 8008c6a:	2958      	cmp	r1, #88	; 0x58
 8008c6c:	f000 8083 	beq.w	8008d76 <_printf_i+0x136>
 8008c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c78:	e032      	b.n	8008ce0 <_printf_i+0xa0>
 8008c7a:	2964      	cmp	r1, #100	; 0x64
 8008c7c:	d001      	beq.n	8008c82 <_printf_i+0x42>
 8008c7e:	2969      	cmp	r1, #105	; 0x69
 8008c80:	d1f6      	bne.n	8008c70 <_printf_i+0x30>
 8008c82:	6820      	ldr	r0, [r4, #0]
 8008c84:	6813      	ldr	r3, [r2, #0]
 8008c86:	0605      	lsls	r5, r0, #24
 8008c88:	f103 0104 	add.w	r1, r3, #4
 8008c8c:	d52a      	bpl.n	8008ce4 <_printf_i+0xa4>
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6011      	str	r1, [r2, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	da03      	bge.n	8008c9e <_printf_i+0x5e>
 8008c96:	222d      	movs	r2, #45	; 0x2d
 8008c98:	425b      	negs	r3, r3
 8008c9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008c9e:	486f      	ldr	r0, [pc, #444]	; (8008e5c <_printf_i+0x21c>)
 8008ca0:	220a      	movs	r2, #10
 8008ca2:	e039      	b.n	8008d18 <_printf_i+0xd8>
 8008ca4:	2973      	cmp	r1, #115	; 0x73
 8008ca6:	f000 809d 	beq.w	8008de4 <_printf_i+0x1a4>
 8008caa:	d808      	bhi.n	8008cbe <_printf_i+0x7e>
 8008cac:	296f      	cmp	r1, #111	; 0x6f
 8008cae:	d020      	beq.n	8008cf2 <_printf_i+0xb2>
 8008cb0:	2970      	cmp	r1, #112	; 0x70
 8008cb2:	d1dd      	bne.n	8008c70 <_printf_i+0x30>
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	f043 0320 	orr.w	r3, r3, #32
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	e003      	b.n	8008cc6 <_printf_i+0x86>
 8008cbe:	2975      	cmp	r1, #117	; 0x75
 8008cc0:	d017      	beq.n	8008cf2 <_printf_i+0xb2>
 8008cc2:	2978      	cmp	r1, #120	; 0x78
 8008cc4:	d1d4      	bne.n	8008c70 <_printf_i+0x30>
 8008cc6:	2378      	movs	r3, #120	; 0x78
 8008cc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008ccc:	4864      	ldr	r0, [pc, #400]	; (8008e60 <_printf_i+0x220>)
 8008cce:	e055      	b.n	8008d7c <_printf_i+0x13c>
 8008cd0:	6813      	ldr	r3, [r2, #0]
 8008cd2:	1d19      	adds	r1, r3, #4
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6011      	str	r1, [r2, #0]
 8008cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e08c      	b.n	8008dfe <_printf_i+0x1be>
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	6011      	str	r1, [r2, #0]
 8008ce8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cec:	bf18      	it	ne
 8008cee:	b21b      	sxthne	r3, r3
 8008cf0:	e7cf      	b.n	8008c92 <_printf_i+0x52>
 8008cf2:	6813      	ldr	r3, [r2, #0]
 8008cf4:	6825      	ldr	r5, [r4, #0]
 8008cf6:	1d18      	adds	r0, r3, #4
 8008cf8:	6010      	str	r0, [r2, #0]
 8008cfa:	0628      	lsls	r0, r5, #24
 8008cfc:	d501      	bpl.n	8008d02 <_printf_i+0xc2>
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	e002      	b.n	8008d08 <_printf_i+0xc8>
 8008d02:	0668      	lsls	r0, r5, #25
 8008d04:	d5fb      	bpl.n	8008cfe <_printf_i+0xbe>
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	4854      	ldr	r0, [pc, #336]	; (8008e5c <_printf_i+0x21c>)
 8008d0a:	296f      	cmp	r1, #111	; 0x6f
 8008d0c:	bf14      	ite	ne
 8008d0e:	220a      	movne	r2, #10
 8008d10:	2208      	moveq	r2, #8
 8008d12:	2100      	movs	r1, #0
 8008d14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d18:	6865      	ldr	r5, [r4, #4]
 8008d1a:	60a5      	str	r5, [r4, #8]
 8008d1c:	2d00      	cmp	r5, #0
 8008d1e:	f2c0 8095 	blt.w	8008e4c <_printf_i+0x20c>
 8008d22:	6821      	ldr	r1, [r4, #0]
 8008d24:	f021 0104 	bic.w	r1, r1, #4
 8008d28:	6021      	str	r1, [r4, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d13d      	bne.n	8008daa <_printf_i+0x16a>
 8008d2e:	2d00      	cmp	r5, #0
 8008d30:	f040 808e 	bne.w	8008e50 <_printf_i+0x210>
 8008d34:	4665      	mov	r5, ip
 8008d36:	2a08      	cmp	r2, #8
 8008d38:	d10b      	bne.n	8008d52 <_printf_i+0x112>
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	07db      	lsls	r3, r3, #31
 8008d3e:	d508      	bpl.n	8008d52 <_printf_i+0x112>
 8008d40:	6923      	ldr	r3, [r4, #16]
 8008d42:	6862      	ldr	r2, [r4, #4]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	bfde      	ittt	le
 8008d48:	2330      	movle	r3, #48	; 0x30
 8008d4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d52:	ebac 0305 	sub.w	r3, ip, r5
 8008d56:	6123      	str	r3, [r4, #16]
 8008d58:	f8cd 8000 	str.w	r8, [sp]
 8008d5c:	463b      	mov	r3, r7
 8008d5e:	aa03      	add	r2, sp, #12
 8008d60:	4621      	mov	r1, r4
 8008d62:	4630      	mov	r0, r6
 8008d64:	f7ff fef6 	bl	8008b54 <_printf_common>
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d14d      	bne.n	8008e08 <_printf_i+0x1c8>
 8008d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d70:	b005      	add	sp, #20
 8008d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d76:	4839      	ldr	r0, [pc, #228]	; (8008e5c <_printf_i+0x21c>)
 8008d78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d7c:	6813      	ldr	r3, [r2, #0]
 8008d7e:	6821      	ldr	r1, [r4, #0]
 8008d80:	1d1d      	adds	r5, r3, #4
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6015      	str	r5, [r2, #0]
 8008d86:	060a      	lsls	r2, r1, #24
 8008d88:	d50b      	bpl.n	8008da2 <_printf_i+0x162>
 8008d8a:	07ca      	lsls	r2, r1, #31
 8008d8c:	bf44      	itt	mi
 8008d8e:	f041 0120 	orrmi.w	r1, r1, #32
 8008d92:	6021      	strmi	r1, [r4, #0]
 8008d94:	b91b      	cbnz	r3, 8008d9e <_printf_i+0x15e>
 8008d96:	6822      	ldr	r2, [r4, #0]
 8008d98:	f022 0220 	bic.w	r2, r2, #32
 8008d9c:	6022      	str	r2, [r4, #0]
 8008d9e:	2210      	movs	r2, #16
 8008da0:	e7b7      	b.n	8008d12 <_printf_i+0xd2>
 8008da2:	064d      	lsls	r5, r1, #25
 8008da4:	bf48      	it	mi
 8008da6:	b29b      	uxthmi	r3, r3
 8008da8:	e7ef      	b.n	8008d8a <_printf_i+0x14a>
 8008daa:	4665      	mov	r5, ip
 8008dac:	fbb3 f1f2 	udiv	r1, r3, r2
 8008db0:	fb02 3311 	mls	r3, r2, r1, r3
 8008db4:	5cc3      	ldrb	r3, [r0, r3]
 8008db6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008dba:	460b      	mov	r3, r1
 8008dbc:	2900      	cmp	r1, #0
 8008dbe:	d1f5      	bne.n	8008dac <_printf_i+0x16c>
 8008dc0:	e7b9      	b.n	8008d36 <_printf_i+0xf6>
 8008dc2:	6813      	ldr	r3, [r2, #0]
 8008dc4:	6825      	ldr	r5, [r4, #0]
 8008dc6:	6961      	ldr	r1, [r4, #20]
 8008dc8:	1d18      	adds	r0, r3, #4
 8008dca:	6010      	str	r0, [r2, #0]
 8008dcc:	0628      	lsls	r0, r5, #24
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	d501      	bpl.n	8008dd6 <_printf_i+0x196>
 8008dd2:	6019      	str	r1, [r3, #0]
 8008dd4:	e002      	b.n	8008ddc <_printf_i+0x19c>
 8008dd6:	066a      	lsls	r2, r5, #25
 8008dd8:	d5fb      	bpl.n	8008dd2 <_printf_i+0x192>
 8008dda:	8019      	strh	r1, [r3, #0]
 8008ddc:	2300      	movs	r3, #0
 8008dde:	6123      	str	r3, [r4, #16]
 8008de0:	4665      	mov	r5, ip
 8008de2:	e7b9      	b.n	8008d58 <_printf_i+0x118>
 8008de4:	6813      	ldr	r3, [r2, #0]
 8008de6:	1d19      	adds	r1, r3, #4
 8008de8:	6011      	str	r1, [r2, #0]
 8008dea:	681d      	ldr	r5, [r3, #0]
 8008dec:	6862      	ldr	r2, [r4, #4]
 8008dee:	2100      	movs	r1, #0
 8008df0:	4628      	mov	r0, r5
 8008df2:	f7f7 fa1d 	bl	8000230 <memchr>
 8008df6:	b108      	cbz	r0, 8008dfc <_printf_i+0x1bc>
 8008df8:	1b40      	subs	r0, r0, r5
 8008dfa:	6060      	str	r0, [r4, #4]
 8008dfc:	6863      	ldr	r3, [r4, #4]
 8008dfe:	6123      	str	r3, [r4, #16]
 8008e00:	2300      	movs	r3, #0
 8008e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e06:	e7a7      	b.n	8008d58 <_printf_i+0x118>
 8008e08:	6923      	ldr	r3, [r4, #16]
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	4630      	mov	r0, r6
 8008e10:	47c0      	blx	r8
 8008e12:	3001      	adds	r0, #1
 8008e14:	d0aa      	beq.n	8008d6c <_printf_i+0x12c>
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	079b      	lsls	r3, r3, #30
 8008e1a:	d413      	bmi.n	8008e44 <_printf_i+0x204>
 8008e1c:	68e0      	ldr	r0, [r4, #12]
 8008e1e:	9b03      	ldr	r3, [sp, #12]
 8008e20:	4298      	cmp	r0, r3
 8008e22:	bfb8      	it	lt
 8008e24:	4618      	movlt	r0, r3
 8008e26:	e7a3      	b.n	8008d70 <_printf_i+0x130>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	464a      	mov	r2, r9
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	4630      	mov	r0, r6
 8008e30:	47c0      	blx	r8
 8008e32:	3001      	adds	r0, #1
 8008e34:	d09a      	beq.n	8008d6c <_printf_i+0x12c>
 8008e36:	3501      	adds	r5, #1
 8008e38:	68e3      	ldr	r3, [r4, #12]
 8008e3a:	9a03      	ldr	r2, [sp, #12]
 8008e3c:	1a9b      	subs	r3, r3, r2
 8008e3e:	42ab      	cmp	r3, r5
 8008e40:	dcf2      	bgt.n	8008e28 <_printf_i+0x1e8>
 8008e42:	e7eb      	b.n	8008e1c <_printf_i+0x1dc>
 8008e44:	2500      	movs	r5, #0
 8008e46:	f104 0919 	add.w	r9, r4, #25
 8008e4a:	e7f5      	b.n	8008e38 <_printf_i+0x1f8>
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1ac      	bne.n	8008daa <_printf_i+0x16a>
 8008e50:	7803      	ldrb	r3, [r0, #0]
 8008e52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e5a:	e76c      	b.n	8008d36 <_printf_i+0xf6>
 8008e5c:	0800ca3a 	.word	0x0800ca3a
 8008e60:	0800ca4b 	.word	0x0800ca4b

08008e64 <_scanf_float>:
 8008e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	469a      	mov	sl, r3
 8008e6a:	688b      	ldr	r3, [r1, #8]
 8008e6c:	4616      	mov	r6, r2
 8008e6e:	1e5a      	subs	r2, r3, #1
 8008e70:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e74:	b087      	sub	sp, #28
 8008e76:	bf83      	ittte	hi
 8008e78:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008e7c:	189b      	addhi	r3, r3, r2
 8008e7e:	9301      	strhi	r3, [sp, #4]
 8008e80:	2300      	movls	r3, #0
 8008e82:	bf86      	itte	hi
 8008e84:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e88:	608b      	strhi	r3, [r1, #8]
 8008e8a:	9301      	strls	r3, [sp, #4]
 8008e8c:	680b      	ldr	r3, [r1, #0]
 8008e8e:	4688      	mov	r8, r1
 8008e90:	f04f 0b00 	mov.w	fp, #0
 8008e94:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e98:	f848 3b1c 	str.w	r3, [r8], #28
 8008e9c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008ea0:	4607      	mov	r7, r0
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	4645      	mov	r5, r8
 8008ea6:	465a      	mov	r2, fp
 8008ea8:	46d9      	mov	r9, fp
 8008eaa:	f8cd b008 	str.w	fp, [sp, #8]
 8008eae:	68a1      	ldr	r1, [r4, #8]
 8008eb0:	b181      	cbz	r1, 8008ed4 <_scanf_float+0x70>
 8008eb2:	6833      	ldr	r3, [r6, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	2b49      	cmp	r3, #73	; 0x49
 8008eb8:	d071      	beq.n	8008f9e <_scanf_float+0x13a>
 8008eba:	d84d      	bhi.n	8008f58 <_scanf_float+0xf4>
 8008ebc:	2b39      	cmp	r3, #57	; 0x39
 8008ebe:	d840      	bhi.n	8008f42 <_scanf_float+0xde>
 8008ec0:	2b31      	cmp	r3, #49	; 0x31
 8008ec2:	f080 8088 	bcs.w	8008fd6 <_scanf_float+0x172>
 8008ec6:	2b2d      	cmp	r3, #45	; 0x2d
 8008ec8:	f000 8090 	beq.w	8008fec <_scanf_float+0x188>
 8008ecc:	d815      	bhi.n	8008efa <_scanf_float+0x96>
 8008ece:	2b2b      	cmp	r3, #43	; 0x2b
 8008ed0:	f000 808c 	beq.w	8008fec <_scanf_float+0x188>
 8008ed4:	f1b9 0f00 	cmp.w	r9, #0
 8008ed8:	d003      	beq.n	8008ee2 <_scanf_float+0x7e>
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	3a01      	subs	r2, #1
 8008ee4:	2a01      	cmp	r2, #1
 8008ee6:	f200 80ea 	bhi.w	80090be <_scanf_float+0x25a>
 8008eea:	4545      	cmp	r5, r8
 8008eec:	f200 80dc 	bhi.w	80090a8 <_scanf_float+0x244>
 8008ef0:	2601      	movs	r6, #1
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	b007      	add	sp, #28
 8008ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efa:	2b2e      	cmp	r3, #46	; 0x2e
 8008efc:	f000 809f 	beq.w	800903e <_scanf_float+0x1da>
 8008f00:	2b30      	cmp	r3, #48	; 0x30
 8008f02:	d1e7      	bne.n	8008ed4 <_scanf_float+0x70>
 8008f04:	6820      	ldr	r0, [r4, #0]
 8008f06:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008f0a:	d064      	beq.n	8008fd6 <_scanf_float+0x172>
 8008f0c:	9b01      	ldr	r3, [sp, #4]
 8008f0e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008f12:	6020      	str	r0, [r4, #0]
 8008f14:	f109 0901 	add.w	r9, r9, #1
 8008f18:	b11b      	cbz	r3, 8008f22 <_scanf_float+0xbe>
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	3101      	adds	r1, #1
 8008f1e:	9301      	str	r3, [sp, #4]
 8008f20:	60a1      	str	r1, [r4, #8]
 8008f22:	68a3      	ldr	r3, [r4, #8]
 8008f24:	3b01      	subs	r3, #1
 8008f26:	60a3      	str	r3, [r4, #8]
 8008f28:	6923      	ldr	r3, [r4, #16]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	6123      	str	r3, [r4, #16]
 8008f2e:	6873      	ldr	r3, [r6, #4]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	6073      	str	r3, [r6, #4]
 8008f36:	f340 80ac 	ble.w	8009092 <_scanf_float+0x22e>
 8008f3a:	6833      	ldr	r3, [r6, #0]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	6033      	str	r3, [r6, #0]
 8008f40:	e7b5      	b.n	8008eae <_scanf_float+0x4a>
 8008f42:	2b45      	cmp	r3, #69	; 0x45
 8008f44:	f000 8085 	beq.w	8009052 <_scanf_float+0x1ee>
 8008f48:	2b46      	cmp	r3, #70	; 0x46
 8008f4a:	d06a      	beq.n	8009022 <_scanf_float+0x1be>
 8008f4c:	2b41      	cmp	r3, #65	; 0x41
 8008f4e:	d1c1      	bne.n	8008ed4 <_scanf_float+0x70>
 8008f50:	2a01      	cmp	r2, #1
 8008f52:	d1bf      	bne.n	8008ed4 <_scanf_float+0x70>
 8008f54:	2202      	movs	r2, #2
 8008f56:	e046      	b.n	8008fe6 <_scanf_float+0x182>
 8008f58:	2b65      	cmp	r3, #101	; 0x65
 8008f5a:	d07a      	beq.n	8009052 <_scanf_float+0x1ee>
 8008f5c:	d818      	bhi.n	8008f90 <_scanf_float+0x12c>
 8008f5e:	2b54      	cmp	r3, #84	; 0x54
 8008f60:	d066      	beq.n	8009030 <_scanf_float+0x1cc>
 8008f62:	d811      	bhi.n	8008f88 <_scanf_float+0x124>
 8008f64:	2b4e      	cmp	r3, #78	; 0x4e
 8008f66:	d1b5      	bne.n	8008ed4 <_scanf_float+0x70>
 8008f68:	2a00      	cmp	r2, #0
 8008f6a:	d146      	bne.n	8008ffa <_scanf_float+0x196>
 8008f6c:	f1b9 0f00 	cmp.w	r9, #0
 8008f70:	d145      	bne.n	8008ffe <_scanf_float+0x19a>
 8008f72:	6821      	ldr	r1, [r4, #0]
 8008f74:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008f78:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008f7c:	d13f      	bne.n	8008ffe <_scanf_float+0x19a>
 8008f7e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008f82:	6021      	str	r1, [r4, #0]
 8008f84:	2201      	movs	r2, #1
 8008f86:	e02e      	b.n	8008fe6 <_scanf_float+0x182>
 8008f88:	2b59      	cmp	r3, #89	; 0x59
 8008f8a:	d01e      	beq.n	8008fca <_scanf_float+0x166>
 8008f8c:	2b61      	cmp	r3, #97	; 0x61
 8008f8e:	e7de      	b.n	8008f4e <_scanf_float+0xea>
 8008f90:	2b6e      	cmp	r3, #110	; 0x6e
 8008f92:	d0e9      	beq.n	8008f68 <_scanf_float+0x104>
 8008f94:	d815      	bhi.n	8008fc2 <_scanf_float+0x15e>
 8008f96:	2b66      	cmp	r3, #102	; 0x66
 8008f98:	d043      	beq.n	8009022 <_scanf_float+0x1be>
 8008f9a:	2b69      	cmp	r3, #105	; 0x69
 8008f9c:	d19a      	bne.n	8008ed4 <_scanf_float+0x70>
 8008f9e:	f1bb 0f00 	cmp.w	fp, #0
 8008fa2:	d138      	bne.n	8009016 <_scanf_float+0x1b2>
 8008fa4:	f1b9 0f00 	cmp.w	r9, #0
 8008fa8:	d197      	bne.n	8008eda <_scanf_float+0x76>
 8008faa:	6821      	ldr	r1, [r4, #0]
 8008fac:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008fb0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008fb4:	d195      	bne.n	8008ee2 <_scanf_float+0x7e>
 8008fb6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008fba:	6021      	str	r1, [r4, #0]
 8008fbc:	f04f 0b01 	mov.w	fp, #1
 8008fc0:	e011      	b.n	8008fe6 <_scanf_float+0x182>
 8008fc2:	2b74      	cmp	r3, #116	; 0x74
 8008fc4:	d034      	beq.n	8009030 <_scanf_float+0x1cc>
 8008fc6:	2b79      	cmp	r3, #121	; 0x79
 8008fc8:	d184      	bne.n	8008ed4 <_scanf_float+0x70>
 8008fca:	f1bb 0f07 	cmp.w	fp, #7
 8008fce:	d181      	bne.n	8008ed4 <_scanf_float+0x70>
 8008fd0:	f04f 0b08 	mov.w	fp, #8
 8008fd4:	e007      	b.n	8008fe6 <_scanf_float+0x182>
 8008fd6:	eb12 0f0b 	cmn.w	r2, fp
 8008fda:	f47f af7b 	bne.w	8008ed4 <_scanf_float+0x70>
 8008fde:	6821      	ldr	r1, [r4, #0]
 8008fe0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8008fe4:	6021      	str	r1, [r4, #0]
 8008fe6:	702b      	strb	r3, [r5, #0]
 8008fe8:	3501      	adds	r5, #1
 8008fea:	e79a      	b.n	8008f22 <_scanf_float+0xbe>
 8008fec:	6821      	ldr	r1, [r4, #0]
 8008fee:	0608      	lsls	r0, r1, #24
 8008ff0:	f57f af70 	bpl.w	8008ed4 <_scanf_float+0x70>
 8008ff4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ff8:	e7f4      	b.n	8008fe4 <_scanf_float+0x180>
 8008ffa:	2a02      	cmp	r2, #2
 8008ffc:	d047      	beq.n	800908e <_scanf_float+0x22a>
 8008ffe:	f1bb 0f01 	cmp.w	fp, #1
 8009002:	d003      	beq.n	800900c <_scanf_float+0x1a8>
 8009004:	f1bb 0f04 	cmp.w	fp, #4
 8009008:	f47f af64 	bne.w	8008ed4 <_scanf_float+0x70>
 800900c:	f10b 0b01 	add.w	fp, fp, #1
 8009010:	fa5f fb8b 	uxtb.w	fp, fp
 8009014:	e7e7      	b.n	8008fe6 <_scanf_float+0x182>
 8009016:	f1bb 0f03 	cmp.w	fp, #3
 800901a:	d0f7      	beq.n	800900c <_scanf_float+0x1a8>
 800901c:	f1bb 0f05 	cmp.w	fp, #5
 8009020:	e7f2      	b.n	8009008 <_scanf_float+0x1a4>
 8009022:	f1bb 0f02 	cmp.w	fp, #2
 8009026:	f47f af55 	bne.w	8008ed4 <_scanf_float+0x70>
 800902a:	f04f 0b03 	mov.w	fp, #3
 800902e:	e7da      	b.n	8008fe6 <_scanf_float+0x182>
 8009030:	f1bb 0f06 	cmp.w	fp, #6
 8009034:	f47f af4e 	bne.w	8008ed4 <_scanf_float+0x70>
 8009038:	f04f 0b07 	mov.w	fp, #7
 800903c:	e7d3      	b.n	8008fe6 <_scanf_float+0x182>
 800903e:	6821      	ldr	r1, [r4, #0]
 8009040:	0588      	lsls	r0, r1, #22
 8009042:	f57f af47 	bpl.w	8008ed4 <_scanf_float+0x70>
 8009046:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800904a:	6021      	str	r1, [r4, #0]
 800904c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009050:	e7c9      	b.n	8008fe6 <_scanf_float+0x182>
 8009052:	6821      	ldr	r1, [r4, #0]
 8009054:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009058:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800905c:	d006      	beq.n	800906c <_scanf_float+0x208>
 800905e:	0548      	lsls	r0, r1, #21
 8009060:	f57f af38 	bpl.w	8008ed4 <_scanf_float+0x70>
 8009064:	f1b9 0f00 	cmp.w	r9, #0
 8009068:	f43f af3b 	beq.w	8008ee2 <_scanf_float+0x7e>
 800906c:	0588      	lsls	r0, r1, #22
 800906e:	bf58      	it	pl
 8009070:	9802      	ldrpl	r0, [sp, #8]
 8009072:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009076:	bf58      	it	pl
 8009078:	eba9 0000 	subpl.w	r0, r9, r0
 800907c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009080:	bf58      	it	pl
 8009082:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009086:	6021      	str	r1, [r4, #0]
 8009088:	f04f 0900 	mov.w	r9, #0
 800908c:	e7ab      	b.n	8008fe6 <_scanf_float+0x182>
 800908e:	2203      	movs	r2, #3
 8009090:	e7a9      	b.n	8008fe6 <_scanf_float+0x182>
 8009092:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009096:	9205      	str	r2, [sp, #20]
 8009098:	4631      	mov	r1, r6
 800909a:	4638      	mov	r0, r7
 800909c:	4798      	blx	r3
 800909e:	9a05      	ldr	r2, [sp, #20]
 80090a0:	2800      	cmp	r0, #0
 80090a2:	f43f af04 	beq.w	8008eae <_scanf_float+0x4a>
 80090a6:	e715      	b.n	8008ed4 <_scanf_float+0x70>
 80090a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80090b0:	4632      	mov	r2, r6
 80090b2:	4638      	mov	r0, r7
 80090b4:	4798      	blx	r3
 80090b6:	6923      	ldr	r3, [r4, #16]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	6123      	str	r3, [r4, #16]
 80090bc:	e715      	b.n	8008eea <_scanf_float+0x86>
 80090be:	f10b 33ff 	add.w	r3, fp, #4294967295
 80090c2:	2b06      	cmp	r3, #6
 80090c4:	d80a      	bhi.n	80090dc <_scanf_float+0x278>
 80090c6:	f1bb 0f02 	cmp.w	fp, #2
 80090ca:	d968      	bls.n	800919e <_scanf_float+0x33a>
 80090cc:	f1ab 0b03 	sub.w	fp, fp, #3
 80090d0:	fa5f fb8b 	uxtb.w	fp, fp
 80090d4:	eba5 0b0b 	sub.w	fp, r5, fp
 80090d8:	455d      	cmp	r5, fp
 80090da:	d14b      	bne.n	8009174 <_scanf_float+0x310>
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	05da      	lsls	r2, r3, #23
 80090e0:	d51f      	bpl.n	8009122 <_scanf_float+0x2be>
 80090e2:	055b      	lsls	r3, r3, #21
 80090e4:	d468      	bmi.n	80091b8 <_scanf_float+0x354>
 80090e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80090ea:	6923      	ldr	r3, [r4, #16]
 80090ec:	2965      	cmp	r1, #101	; 0x65
 80090ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80090f2:	f105 3bff 	add.w	fp, r5, #4294967295
 80090f6:	6123      	str	r3, [r4, #16]
 80090f8:	d00d      	beq.n	8009116 <_scanf_float+0x2b2>
 80090fa:	2945      	cmp	r1, #69	; 0x45
 80090fc:	d00b      	beq.n	8009116 <_scanf_float+0x2b2>
 80090fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009102:	4632      	mov	r2, r6
 8009104:	4638      	mov	r0, r7
 8009106:	4798      	blx	r3
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800910e:	3b01      	subs	r3, #1
 8009110:	f1a5 0b02 	sub.w	fp, r5, #2
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800911a:	4632      	mov	r2, r6
 800911c:	4638      	mov	r0, r7
 800911e:	4798      	blx	r3
 8009120:	465d      	mov	r5, fp
 8009122:	6826      	ldr	r6, [r4, #0]
 8009124:	f016 0610 	ands.w	r6, r6, #16
 8009128:	d17a      	bne.n	8009220 <_scanf_float+0x3bc>
 800912a:	702e      	strb	r6, [r5, #0]
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009136:	d142      	bne.n	80091be <_scanf_float+0x35a>
 8009138:	9b02      	ldr	r3, [sp, #8]
 800913a:	eba9 0303 	sub.w	r3, r9, r3
 800913e:	425a      	negs	r2, r3
 8009140:	2b00      	cmp	r3, #0
 8009142:	d149      	bne.n	80091d8 <_scanf_float+0x374>
 8009144:	2200      	movs	r2, #0
 8009146:	4641      	mov	r1, r8
 8009148:	4638      	mov	r0, r7
 800914a:	f000 feb5 	bl	8009eb8 <_strtod_r>
 800914e:	6825      	ldr	r5, [r4, #0]
 8009150:	f8da 3000 	ldr.w	r3, [sl]
 8009154:	f015 0f02 	tst.w	r5, #2
 8009158:	f103 0204 	add.w	r2, r3, #4
 800915c:	ec59 8b10 	vmov	r8, r9, d0
 8009160:	f8ca 2000 	str.w	r2, [sl]
 8009164:	d043      	beq.n	80091ee <_scanf_float+0x38a>
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	e9c3 8900 	strd	r8, r9, [r3]
 800916c:	68e3      	ldr	r3, [r4, #12]
 800916e:	3301      	adds	r3, #1
 8009170:	60e3      	str	r3, [r4, #12]
 8009172:	e6be      	b.n	8008ef2 <_scanf_float+0x8e>
 8009174:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009178:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800917c:	4632      	mov	r2, r6
 800917e:	4638      	mov	r0, r7
 8009180:	4798      	blx	r3
 8009182:	6923      	ldr	r3, [r4, #16]
 8009184:	3b01      	subs	r3, #1
 8009186:	6123      	str	r3, [r4, #16]
 8009188:	e7a6      	b.n	80090d8 <_scanf_float+0x274>
 800918a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800918e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009192:	4632      	mov	r2, r6
 8009194:	4638      	mov	r0, r7
 8009196:	4798      	blx	r3
 8009198:	6923      	ldr	r3, [r4, #16]
 800919a:	3b01      	subs	r3, #1
 800919c:	6123      	str	r3, [r4, #16]
 800919e:	4545      	cmp	r5, r8
 80091a0:	d8f3      	bhi.n	800918a <_scanf_float+0x326>
 80091a2:	e6a5      	b.n	8008ef0 <_scanf_float+0x8c>
 80091a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80091ac:	4632      	mov	r2, r6
 80091ae:	4638      	mov	r0, r7
 80091b0:	4798      	blx	r3
 80091b2:	6923      	ldr	r3, [r4, #16]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	6123      	str	r3, [r4, #16]
 80091b8:	4545      	cmp	r5, r8
 80091ba:	d8f3      	bhi.n	80091a4 <_scanf_float+0x340>
 80091bc:	e698      	b.n	8008ef0 <_scanf_float+0x8c>
 80091be:	9b03      	ldr	r3, [sp, #12]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d0bf      	beq.n	8009144 <_scanf_float+0x2e0>
 80091c4:	9904      	ldr	r1, [sp, #16]
 80091c6:	230a      	movs	r3, #10
 80091c8:	4632      	mov	r2, r6
 80091ca:	3101      	adds	r1, #1
 80091cc:	4638      	mov	r0, r7
 80091ce:	f000 ff53 	bl	800a078 <_strtol_r>
 80091d2:	9b03      	ldr	r3, [sp, #12]
 80091d4:	9d04      	ldr	r5, [sp, #16]
 80091d6:	1ac2      	subs	r2, r0, r3
 80091d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80091dc:	429d      	cmp	r5, r3
 80091de:	bf28      	it	cs
 80091e0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80091e4:	490f      	ldr	r1, [pc, #60]	; (8009224 <_scanf_float+0x3c0>)
 80091e6:	4628      	mov	r0, r5
 80091e8:	f000 f824 	bl	8009234 <siprintf>
 80091ec:	e7aa      	b.n	8009144 <_scanf_float+0x2e0>
 80091ee:	f015 0504 	ands.w	r5, r5, #4
 80091f2:	d1b8      	bne.n	8009166 <_scanf_float+0x302>
 80091f4:	681f      	ldr	r7, [r3, #0]
 80091f6:	ee10 2a10 	vmov	r2, s0
 80091fa:	464b      	mov	r3, r9
 80091fc:	ee10 0a10 	vmov	r0, s0
 8009200:	4649      	mov	r1, r9
 8009202:	f7f7 fcbb 	bl	8000b7c <__aeabi_dcmpun>
 8009206:	b128      	cbz	r0, 8009214 <_scanf_float+0x3b0>
 8009208:	4628      	mov	r0, r5
 800920a:	f000 f80d 	bl	8009228 <nanf>
 800920e:	ed87 0a00 	vstr	s0, [r7]
 8009212:	e7ab      	b.n	800916c <_scanf_float+0x308>
 8009214:	4640      	mov	r0, r8
 8009216:	4649      	mov	r1, r9
 8009218:	f7f7 fd0e 	bl	8000c38 <__aeabi_d2f>
 800921c:	6038      	str	r0, [r7, #0]
 800921e:	e7a5      	b.n	800916c <_scanf_float+0x308>
 8009220:	2600      	movs	r6, #0
 8009222:	e666      	b.n	8008ef2 <_scanf_float+0x8e>
 8009224:	0800ca5c 	.word	0x0800ca5c

08009228 <nanf>:
 8009228:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009230 <nanf+0x8>
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	7fc00000 	.word	0x7fc00000

08009234 <siprintf>:
 8009234:	b40e      	push	{r1, r2, r3}
 8009236:	b500      	push	{lr}
 8009238:	b09c      	sub	sp, #112	; 0x70
 800923a:	ab1d      	add	r3, sp, #116	; 0x74
 800923c:	9002      	str	r0, [sp, #8]
 800923e:	9006      	str	r0, [sp, #24]
 8009240:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009244:	4809      	ldr	r0, [pc, #36]	; (800926c <siprintf+0x38>)
 8009246:	9107      	str	r1, [sp, #28]
 8009248:	9104      	str	r1, [sp, #16]
 800924a:	4909      	ldr	r1, [pc, #36]	; (8009270 <siprintf+0x3c>)
 800924c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009250:	9105      	str	r1, [sp, #20]
 8009252:	6800      	ldr	r0, [r0, #0]
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	a902      	add	r1, sp, #8
 8009258:	f002 fdca 	bl	800bdf0 <_svfiprintf_r>
 800925c:	9b02      	ldr	r3, [sp, #8]
 800925e:	2200      	movs	r2, #0
 8009260:	701a      	strb	r2, [r3, #0]
 8009262:	b01c      	add	sp, #112	; 0x70
 8009264:	f85d eb04 	ldr.w	lr, [sp], #4
 8009268:	b003      	add	sp, #12
 800926a:	4770      	bx	lr
 800926c:	2000002c 	.word	0x2000002c
 8009270:	ffff0208 	.word	0xffff0208

08009274 <strncmp>:
 8009274:	b510      	push	{r4, lr}
 8009276:	b16a      	cbz	r2, 8009294 <strncmp+0x20>
 8009278:	3901      	subs	r1, #1
 800927a:	1884      	adds	r4, r0, r2
 800927c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009280:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009284:	4293      	cmp	r3, r2
 8009286:	d103      	bne.n	8009290 <strncmp+0x1c>
 8009288:	42a0      	cmp	r0, r4
 800928a:	d001      	beq.n	8009290 <strncmp+0x1c>
 800928c:	2b00      	cmp	r3, #0
 800928e:	d1f5      	bne.n	800927c <strncmp+0x8>
 8009290:	1a98      	subs	r0, r3, r2
 8009292:	bd10      	pop	{r4, pc}
 8009294:	4610      	mov	r0, r2
 8009296:	e7fc      	b.n	8009292 <strncmp+0x1e>

08009298 <sulp>:
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	4604      	mov	r4, r0
 800929c:	460d      	mov	r5, r1
 800929e:	ec45 4b10 	vmov	d0, r4, r5
 80092a2:	4616      	mov	r6, r2
 80092a4:	f002 fb60 	bl	800b968 <__ulp>
 80092a8:	ec51 0b10 	vmov	r0, r1, d0
 80092ac:	b17e      	cbz	r6, 80092ce <sulp+0x36>
 80092ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80092b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	dd09      	ble.n	80092ce <sulp+0x36>
 80092ba:	051b      	lsls	r3, r3, #20
 80092bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80092c0:	2400      	movs	r4, #0
 80092c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80092c6:	4622      	mov	r2, r4
 80092c8:	462b      	mov	r3, r5
 80092ca:	f7f7 f9bd 	bl	8000648 <__aeabi_dmul>
 80092ce:	bd70      	pop	{r4, r5, r6, pc}

080092d0 <_strtod_l>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	461f      	mov	r7, r3
 80092d6:	b0a1      	sub	sp, #132	; 0x84
 80092d8:	2300      	movs	r3, #0
 80092da:	4681      	mov	r9, r0
 80092dc:	4638      	mov	r0, r7
 80092de:	460e      	mov	r6, r1
 80092e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80092e2:	931c      	str	r3, [sp, #112]	; 0x70
 80092e4:	f002 f849 	bl	800b37a <__localeconv_l>
 80092e8:	4680      	mov	r8, r0
 80092ea:	6800      	ldr	r0, [r0, #0]
 80092ec:	f7f6 ff98 	bl	8000220 <strlen>
 80092f0:	f04f 0a00 	mov.w	sl, #0
 80092f4:	4604      	mov	r4, r0
 80092f6:	f04f 0b00 	mov.w	fp, #0
 80092fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80092fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092fe:	781a      	ldrb	r2, [r3, #0]
 8009300:	2a0d      	cmp	r2, #13
 8009302:	d832      	bhi.n	800936a <_strtod_l+0x9a>
 8009304:	2a09      	cmp	r2, #9
 8009306:	d236      	bcs.n	8009376 <_strtod_l+0xa6>
 8009308:	2a00      	cmp	r2, #0
 800930a:	d03e      	beq.n	800938a <_strtod_l+0xba>
 800930c:	2300      	movs	r3, #0
 800930e:	930d      	str	r3, [sp, #52]	; 0x34
 8009310:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009312:	782b      	ldrb	r3, [r5, #0]
 8009314:	2b30      	cmp	r3, #48	; 0x30
 8009316:	f040 80ac 	bne.w	8009472 <_strtod_l+0x1a2>
 800931a:	786b      	ldrb	r3, [r5, #1]
 800931c:	2b58      	cmp	r3, #88	; 0x58
 800931e:	d001      	beq.n	8009324 <_strtod_l+0x54>
 8009320:	2b78      	cmp	r3, #120	; 0x78
 8009322:	d167      	bne.n	80093f4 <_strtod_l+0x124>
 8009324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	ab1c      	add	r3, sp, #112	; 0x70
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	9702      	str	r7, [sp, #8]
 800932e:	ab1d      	add	r3, sp, #116	; 0x74
 8009330:	4a88      	ldr	r2, [pc, #544]	; (8009554 <_strtod_l+0x284>)
 8009332:	a91b      	add	r1, sp, #108	; 0x6c
 8009334:	4648      	mov	r0, r9
 8009336:	f001 fd46 	bl	800adc6 <__gethex>
 800933a:	f010 0407 	ands.w	r4, r0, #7
 800933e:	4606      	mov	r6, r0
 8009340:	d005      	beq.n	800934e <_strtod_l+0x7e>
 8009342:	2c06      	cmp	r4, #6
 8009344:	d12b      	bne.n	800939e <_strtod_l+0xce>
 8009346:	3501      	adds	r5, #1
 8009348:	2300      	movs	r3, #0
 800934a:	951b      	str	r5, [sp, #108]	; 0x6c
 800934c:	930d      	str	r3, [sp, #52]	; 0x34
 800934e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009350:	2b00      	cmp	r3, #0
 8009352:	f040 859a 	bne.w	8009e8a <_strtod_l+0xbba>
 8009356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009358:	b1e3      	cbz	r3, 8009394 <_strtod_l+0xc4>
 800935a:	4652      	mov	r2, sl
 800935c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009360:	ec43 2b10 	vmov	d0, r2, r3
 8009364:	b021      	add	sp, #132	; 0x84
 8009366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936a:	2a2b      	cmp	r2, #43	; 0x2b
 800936c:	d015      	beq.n	800939a <_strtod_l+0xca>
 800936e:	2a2d      	cmp	r2, #45	; 0x2d
 8009370:	d004      	beq.n	800937c <_strtod_l+0xac>
 8009372:	2a20      	cmp	r2, #32
 8009374:	d1ca      	bne.n	800930c <_strtod_l+0x3c>
 8009376:	3301      	adds	r3, #1
 8009378:	931b      	str	r3, [sp, #108]	; 0x6c
 800937a:	e7bf      	b.n	80092fc <_strtod_l+0x2c>
 800937c:	2201      	movs	r2, #1
 800937e:	920d      	str	r2, [sp, #52]	; 0x34
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	921b      	str	r2, [sp, #108]	; 0x6c
 8009384:	785b      	ldrb	r3, [r3, #1]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1c2      	bne.n	8009310 <_strtod_l+0x40>
 800938a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800938c:	961b      	str	r6, [sp, #108]	; 0x6c
 800938e:	2b00      	cmp	r3, #0
 8009390:	f040 8579 	bne.w	8009e86 <_strtod_l+0xbb6>
 8009394:	4652      	mov	r2, sl
 8009396:	465b      	mov	r3, fp
 8009398:	e7e2      	b.n	8009360 <_strtod_l+0x90>
 800939a:	2200      	movs	r2, #0
 800939c:	e7ef      	b.n	800937e <_strtod_l+0xae>
 800939e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80093a0:	b13a      	cbz	r2, 80093b2 <_strtod_l+0xe2>
 80093a2:	2135      	movs	r1, #53	; 0x35
 80093a4:	a81e      	add	r0, sp, #120	; 0x78
 80093a6:	f002 fbd7 	bl	800bb58 <__copybits>
 80093aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80093ac:	4648      	mov	r0, r9
 80093ae:	f002 f843 	bl	800b438 <_Bfree>
 80093b2:	3c01      	subs	r4, #1
 80093b4:	2c04      	cmp	r4, #4
 80093b6:	d806      	bhi.n	80093c6 <_strtod_l+0xf6>
 80093b8:	e8df f004 	tbb	[pc, r4]
 80093bc:	1714030a 	.word	0x1714030a
 80093c0:	0a          	.byte	0x0a
 80093c1:	00          	.byte	0x00
 80093c2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80093c6:	0730      	lsls	r0, r6, #28
 80093c8:	d5c1      	bpl.n	800934e <_strtod_l+0x7e>
 80093ca:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80093ce:	e7be      	b.n	800934e <_strtod_l+0x7e>
 80093d0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80093d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80093d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80093da:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093de:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80093e2:	e7f0      	b.n	80093c6 <_strtod_l+0xf6>
 80093e4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009558 <_strtod_l+0x288>
 80093e8:	e7ed      	b.n	80093c6 <_strtod_l+0xf6>
 80093ea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80093ee:	f04f 3aff 	mov.w	sl, #4294967295
 80093f2:	e7e8      	b.n	80093c6 <_strtod_l+0xf6>
 80093f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80093fa:	785b      	ldrb	r3, [r3, #1]
 80093fc:	2b30      	cmp	r3, #48	; 0x30
 80093fe:	d0f9      	beq.n	80093f4 <_strtod_l+0x124>
 8009400:	2b00      	cmp	r3, #0
 8009402:	d0a4      	beq.n	800934e <_strtod_l+0x7e>
 8009404:	2301      	movs	r3, #1
 8009406:	2500      	movs	r5, #0
 8009408:	9306      	str	r3, [sp, #24]
 800940a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800940c:	9308      	str	r3, [sp, #32]
 800940e:	9507      	str	r5, [sp, #28]
 8009410:	9505      	str	r5, [sp, #20]
 8009412:	220a      	movs	r2, #10
 8009414:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009416:	7807      	ldrb	r7, [r0, #0]
 8009418:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800941c:	b2d9      	uxtb	r1, r3
 800941e:	2909      	cmp	r1, #9
 8009420:	d929      	bls.n	8009476 <_strtod_l+0x1a6>
 8009422:	4622      	mov	r2, r4
 8009424:	f8d8 1000 	ldr.w	r1, [r8]
 8009428:	f7ff ff24 	bl	8009274 <strncmp>
 800942c:	2800      	cmp	r0, #0
 800942e:	d031      	beq.n	8009494 <_strtod_l+0x1c4>
 8009430:	2000      	movs	r0, #0
 8009432:	9c05      	ldr	r4, [sp, #20]
 8009434:	9004      	str	r0, [sp, #16]
 8009436:	463b      	mov	r3, r7
 8009438:	4602      	mov	r2, r0
 800943a:	2b65      	cmp	r3, #101	; 0x65
 800943c:	d001      	beq.n	8009442 <_strtod_l+0x172>
 800943e:	2b45      	cmp	r3, #69	; 0x45
 8009440:	d114      	bne.n	800946c <_strtod_l+0x19c>
 8009442:	b924      	cbnz	r4, 800944e <_strtod_l+0x17e>
 8009444:	b910      	cbnz	r0, 800944c <_strtod_l+0x17c>
 8009446:	9b06      	ldr	r3, [sp, #24]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d09e      	beq.n	800938a <_strtod_l+0xba>
 800944c:	2400      	movs	r4, #0
 800944e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009450:	1c73      	adds	r3, r6, #1
 8009452:	931b      	str	r3, [sp, #108]	; 0x6c
 8009454:	7873      	ldrb	r3, [r6, #1]
 8009456:	2b2b      	cmp	r3, #43	; 0x2b
 8009458:	d078      	beq.n	800954c <_strtod_l+0x27c>
 800945a:	2b2d      	cmp	r3, #45	; 0x2d
 800945c:	d070      	beq.n	8009540 <_strtod_l+0x270>
 800945e:	f04f 0c00 	mov.w	ip, #0
 8009462:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009466:	2f09      	cmp	r7, #9
 8009468:	d97c      	bls.n	8009564 <_strtod_l+0x294>
 800946a:	961b      	str	r6, [sp, #108]	; 0x6c
 800946c:	f04f 0e00 	mov.w	lr, #0
 8009470:	e09a      	b.n	80095a8 <_strtod_l+0x2d8>
 8009472:	2300      	movs	r3, #0
 8009474:	e7c7      	b.n	8009406 <_strtod_l+0x136>
 8009476:	9905      	ldr	r1, [sp, #20]
 8009478:	2908      	cmp	r1, #8
 800947a:	bfdd      	ittte	le
 800947c:	9907      	ldrle	r1, [sp, #28]
 800947e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009482:	9307      	strle	r3, [sp, #28]
 8009484:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009488:	9b05      	ldr	r3, [sp, #20]
 800948a:	3001      	adds	r0, #1
 800948c:	3301      	adds	r3, #1
 800948e:	9305      	str	r3, [sp, #20]
 8009490:	901b      	str	r0, [sp, #108]	; 0x6c
 8009492:	e7bf      	b.n	8009414 <_strtod_l+0x144>
 8009494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009496:	191a      	adds	r2, r3, r4
 8009498:	921b      	str	r2, [sp, #108]	; 0x6c
 800949a:	9a05      	ldr	r2, [sp, #20]
 800949c:	5d1b      	ldrb	r3, [r3, r4]
 800949e:	2a00      	cmp	r2, #0
 80094a0:	d037      	beq.n	8009512 <_strtod_l+0x242>
 80094a2:	9c05      	ldr	r4, [sp, #20]
 80094a4:	4602      	mov	r2, r0
 80094a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80094aa:	2909      	cmp	r1, #9
 80094ac:	d913      	bls.n	80094d6 <_strtod_l+0x206>
 80094ae:	2101      	movs	r1, #1
 80094b0:	9104      	str	r1, [sp, #16]
 80094b2:	e7c2      	b.n	800943a <_strtod_l+0x16a>
 80094b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80094ba:	785b      	ldrb	r3, [r3, #1]
 80094bc:	3001      	adds	r0, #1
 80094be:	2b30      	cmp	r3, #48	; 0x30
 80094c0:	d0f8      	beq.n	80094b4 <_strtod_l+0x1e4>
 80094c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80094c6:	2a08      	cmp	r2, #8
 80094c8:	f200 84e4 	bhi.w	8009e94 <_strtod_l+0xbc4>
 80094cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80094ce:	9208      	str	r2, [sp, #32]
 80094d0:	4602      	mov	r2, r0
 80094d2:	2000      	movs	r0, #0
 80094d4:	4604      	mov	r4, r0
 80094d6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80094da:	f100 0101 	add.w	r1, r0, #1
 80094de:	d012      	beq.n	8009506 <_strtod_l+0x236>
 80094e0:	440a      	add	r2, r1
 80094e2:	eb00 0c04 	add.w	ip, r0, r4
 80094e6:	4621      	mov	r1, r4
 80094e8:	270a      	movs	r7, #10
 80094ea:	458c      	cmp	ip, r1
 80094ec:	d113      	bne.n	8009516 <_strtod_l+0x246>
 80094ee:	1821      	adds	r1, r4, r0
 80094f0:	2908      	cmp	r1, #8
 80094f2:	f104 0401 	add.w	r4, r4, #1
 80094f6:	4404      	add	r4, r0
 80094f8:	dc19      	bgt.n	800952e <_strtod_l+0x25e>
 80094fa:	9b07      	ldr	r3, [sp, #28]
 80094fc:	210a      	movs	r1, #10
 80094fe:	fb01 e303 	mla	r3, r1, r3, lr
 8009502:	9307      	str	r3, [sp, #28]
 8009504:	2100      	movs	r1, #0
 8009506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009508:	1c58      	adds	r0, r3, #1
 800950a:	901b      	str	r0, [sp, #108]	; 0x6c
 800950c:	785b      	ldrb	r3, [r3, #1]
 800950e:	4608      	mov	r0, r1
 8009510:	e7c9      	b.n	80094a6 <_strtod_l+0x1d6>
 8009512:	9805      	ldr	r0, [sp, #20]
 8009514:	e7d3      	b.n	80094be <_strtod_l+0x1ee>
 8009516:	2908      	cmp	r1, #8
 8009518:	f101 0101 	add.w	r1, r1, #1
 800951c:	dc03      	bgt.n	8009526 <_strtod_l+0x256>
 800951e:	9b07      	ldr	r3, [sp, #28]
 8009520:	437b      	muls	r3, r7
 8009522:	9307      	str	r3, [sp, #28]
 8009524:	e7e1      	b.n	80094ea <_strtod_l+0x21a>
 8009526:	2910      	cmp	r1, #16
 8009528:	bfd8      	it	le
 800952a:	437d      	mulle	r5, r7
 800952c:	e7dd      	b.n	80094ea <_strtod_l+0x21a>
 800952e:	2c10      	cmp	r4, #16
 8009530:	bfdc      	itt	le
 8009532:	210a      	movle	r1, #10
 8009534:	fb01 e505 	mlale	r5, r1, r5, lr
 8009538:	e7e4      	b.n	8009504 <_strtod_l+0x234>
 800953a:	2301      	movs	r3, #1
 800953c:	9304      	str	r3, [sp, #16]
 800953e:	e781      	b.n	8009444 <_strtod_l+0x174>
 8009540:	f04f 0c01 	mov.w	ip, #1
 8009544:	1cb3      	adds	r3, r6, #2
 8009546:	931b      	str	r3, [sp, #108]	; 0x6c
 8009548:	78b3      	ldrb	r3, [r6, #2]
 800954a:	e78a      	b.n	8009462 <_strtod_l+0x192>
 800954c:	f04f 0c00 	mov.w	ip, #0
 8009550:	e7f8      	b.n	8009544 <_strtod_l+0x274>
 8009552:	bf00      	nop
 8009554:	0800ca64 	.word	0x0800ca64
 8009558:	7ff00000 	.word	0x7ff00000
 800955c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800955e:	1c5f      	adds	r7, r3, #1
 8009560:	971b      	str	r7, [sp, #108]	; 0x6c
 8009562:	785b      	ldrb	r3, [r3, #1]
 8009564:	2b30      	cmp	r3, #48	; 0x30
 8009566:	d0f9      	beq.n	800955c <_strtod_l+0x28c>
 8009568:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800956c:	2f08      	cmp	r7, #8
 800956e:	f63f af7d 	bhi.w	800946c <_strtod_l+0x19c>
 8009572:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009576:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009578:	930a      	str	r3, [sp, #40]	; 0x28
 800957a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800957c:	1c5f      	adds	r7, r3, #1
 800957e:	971b      	str	r7, [sp, #108]	; 0x6c
 8009580:	785b      	ldrb	r3, [r3, #1]
 8009582:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009586:	f1b8 0f09 	cmp.w	r8, #9
 800958a:	d937      	bls.n	80095fc <_strtod_l+0x32c>
 800958c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800958e:	1a7f      	subs	r7, r7, r1
 8009590:	2f08      	cmp	r7, #8
 8009592:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009596:	dc37      	bgt.n	8009608 <_strtod_l+0x338>
 8009598:	45be      	cmp	lr, r7
 800959a:	bfa8      	it	ge
 800959c:	46be      	movge	lr, r7
 800959e:	f1bc 0f00 	cmp.w	ip, #0
 80095a2:	d001      	beq.n	80095a8 <_strtod_l+0x2d8>
 80095a4:	f1ce 0e00 	rsb	lr, lr, #0
 80095a8:	2c00      	cmp	r4, #0
 80095aa:	d151      	bne.n	8009650 <_strtod_l+0x380>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	f47f aece 	bne.w	800934e <_strtod_l+0x7e>
 80095b2:	9a06      	ldr	r2, [sp, #24]
 80095b4:	2a00      	cmp	r2, #0
 80095b6:	f47f aeca 	bne.w	800934e <_strtod_l+0x7e>
 80095ba:	9a04      	ldr	r2, [sp, #16]
 80095bc:	2a00      	cmp	r2, #0
 80095be:	f47f aee4 	bne.w	800938a <_strtod_l+0xba>
 80095c2:	2b4e      	cmp	r3, #78	; 0x4e
 80095c4:	d027      	beq.n	8009616 <_strtod_l+0x346>
 80095c6:	dc21      	bgt.n	800960c <_strtod_l+0x33c>
 80095c8:	2b49      	cmp	r3, #73	; 0x49
 80095ca:	f47f aede 	bne.w	800938a <_strtod_l+0xba>
 80095ce:	49a0      	ldr	r1, [pc, #640]	; (8009850 <_strtod_l+0x580>)
 80095d0:	a81b      	add	r0, sp, #108	; 0x6c
 80095d2:	f001 fe2b 	bl	800b22c <__match>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f43f aed7 	beq.w	800938a <_strtod_l+0xba>
 80095dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095de:	499d      	ldr	r1, [pc, #628]	; (8009854 <_strtod_l+0x584>)
 80095e0:	3b01      	subs	r3, #1
 80095e2:	a81b      	add	r0, sp, #108	; 0x6c
 80095e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80095e6:	f001 fe21 	bl	800b22c <__match>
 80095ea:	b910      	cbnz	r0, 80095f2 <_strtod_l+0x322>
 80095ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095ee:	3301      	adds	r3, #1
 80095f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80095f2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009868 <_strtod_l+0x598>
 80095f6:	f04f 0a00 	mov.w	sl, #0
 80095fa:	e6a8      	b.n	800934e <_strtod_l+0x7e>
 80095fc:	210a      	movs	r1, #10
 80095fe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009602:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009606:	e7b8      	b.n	800957a <_strtod_l+0x2aa>
 8009608:	46be      	mov	lr, r7
 800960a:	e7c8      	b.n	800959e <_strtod_l+0x2ce>
 800960c:	2b69      	cmp	r3, #105	; 0x69
 800960e:	d0de      	beq.n	80095ce <_strtod_l+0x2fe>
 8009610:	2b6e      	cmp	r3, #110	; 0x6e
 8009612:	f47f aeba 	bne.w	800938a <_strtod_l+0xba>
 8009616:	4990      	ldr	r1, [pc, #576]	; (8009858 <_strtod_l+0x588>)
 8009618:	a81b      	add	r0, sp, #108	; 0x6c
 800961a:	f001 fe07 	bl	800b22c <__match>
 800961e:	2800      	cmp	r0, #0
 8009620:	f43f aeb3 	beq.w	800938a <_strtod_l+0xba>
 8009624:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	2b28      	cmp	r3, #40	; 0x28
 800962a:	d10e      	bne.n	800964a <_strtod_l+0x37a>
 800962c:	aa1e      	add	r2, sp, #120	; 0x78
 800962e:	498b      	ldr	r1, [pc, #556]	; (800985c <_strtod_l+0x58c>)
 8009630:	a81b      	add	r0, sp, #108	; 0x6c
 8009632:	f001 fe0f 	bl	800b254 <__hexnan>
 8009636:	2805      	cmp	r0, #5
 8009638:	d107      	bne.n	800964a <_strtod_l+0x37a>
 800963a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800963c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009640:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009644:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009648:	e681      	b.n	800934e <_strtod_l+0x7e>
 800964a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009870 <_strtod_l+0x5a0>
 800964e:	e7d2      	b.n	80095f6 <_strtod_l+0x326>
 8009650:	ebae 0302 	sub.w	r3, lr, r2
 8009654:	9306      	str	r3, [sp, #24]
 8009656:	9b05      	ldr	r3, [sp, #20]
 8009658:	9807      	ldr	r0, [sp, #28]
 800965a:	2b00      	cmp	r3, #0
 800965c:	bf08      	it	eq
 800965e:	4623      	moveq	r3, r4
 8009660:	2c10      	cmp	r4, #16
 8009662:	9305      	str	r3, [sp, #20]
 8009664:	46a0      	mov	r8, r4
 8009666:	bfa8      	it	ge
 8009668:	f04f 0810 	movge.w	r8, #16
 800966c:	f7f6 ff72 	bl	8000554 <__aeabi_ui2d>
 8009670:	2c09      	cmp	r4, #9
 8009672:	4682      	mov	sl, r0
 8009674:	468b      	mov	fp, r1
 8009676:	dc13      	bgt.n	80096a0 <_strtod_l+0x3d0>
 8009678:	9b06      	ldr	r3, [sp, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f43f ae67 	beq.w	800934e <_strtod_l+0x7e>
 8009680:	9b06      	ldr	r3, [sp, #24]
 8009682:	dd7a      	ble.n	800977a <_strtod_l+0x4aa>
 8009684:	2b16      	cmp	r3, #22
 8009686:	dc61      	bgt.n	800974c <_strtod_l+0x47c>
 8009688:	4a75      	ldr	r2, [pc, #468]	; (8009860 <_strtod_l+0x590>)
 800968a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800968e:	e9de 0100 	ldrd	r0, r1, [lr]
 8009692:	4652      	mov	r2, sl
 8009694:	465b      	mov	r3, fp
 8009696:	f7f6 ffd7 	bl	8000648 <__aeabi_dmul>
 800969a:	4682      	mov	sl, r0
 800969c:	468b      	mov	fp, r1
 800969e:	e656      	b.n	800934e <_strtod_l+0x7e>
 80096a0:	4b6f      	ldr	r3, [pc, #444]	; (8009860 <_strtod_l+0x590>)
 80096a2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80096a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80096aa:	f7f6 ffcd 	bl	8000648 <__aeabi_dmul>
 80096ae:	4606      	mov	r6, r0
 80096b0:	4628      	mov	r0, r5
 80096b2:	460f      	mov	r7, r1
 80096b4:	f7f6 ff4e 	bl	8000554 <__aeabi_ui2d>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4630      	mov	r0, r6
 80096be:	4639      	mov	r1, r7
 80096c0:	f7f6 fe0c 	bl	80002dc <__adddf3>
 80096c4:	2c0f      	cmp	r4, #15
 80096c6:	4682      	mov	sl, r0
 80096c8:	468b      	mov	fp, r1
 80096ca:	ddd5      	ble.n	8009678 <_strtod_l+0x3a8>
 80096cc:	9b06      	ldr	r3, [sp, #24]
 80096ce:	eba4 0808 	sub.w	r8, r4, r8
 80096d2:	4498      	add	r8, r3
 80096d4:	f1b8 0f00 	cmp.w	r8, #0
 80096d8:	f340 8096 	ble.w	8009808 <_strtod_l+0x538>
 80096dc:	f018 030f 	ands.w	r3, r8, #15
 80096e0:	d00a      	beq.n	80096f8 <_strtod_l+0x428>
 80096e2:	495f      	ldr	r1, [pc, #380]	; (8009860 <_strtod_l+0x590>)
 80096e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096e8:	4652      	mov	r2, sl
 80096ea:	465b      	mov	r3, fp
 80096ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096f0:	f7f6 ffaa 	bl	8000648 <__aeabi_dmul>
 80096f4:	4682      	mov	sl, r0
 80096f6:	468b      	mov	fp, r1
 80096f8:	f038 080f 	bics.w	r8, r8, #15
 80096fc:	d073      	beq.n	80097e6 <_strtod_l+0x516>
 80096fe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009702:	dd47      	ble.n	8009794 <_strtod_l+0x4c4>
 8009704:	2400      	movs	r4, #0
 8009706:	46a0      	mov	r8, r4
 8009708:	9407      	str	r4, [sp, #28]
 800970a:	9405      	str	r4, [sp, #20]
 800970c:	2322      	movs	r3, #34	; 0x22
 800970e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009868 <_strtod_l+0x598>
 8009712:	f8c9 3000 	str.w	r3, [r9]
 8009716:	f04f 0a00 	mov.w	sl, #0
 800971a:	9b07      	ldr	r3, [sp, #28]
 800971c:	2b00      	cmp	r3, #0
 800971e:	f43f ae16 	beq.w	800934e <_strtod_l+0x7e>
 8009722:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009724:	4648      	mov	r0, r9
 8009726:	f001 fe87 	bl	800b438 <_Bfree>
 800972a:	9905      	ldr	r1, [sp, #20]
 800972c:	4648      	mov	r0, r9
 800972e:	f001 fe83 	bl	800b438 <_Bfree>
 8009732:	4641      	mov	r1, r8
 8009734:	4648      	mov	r0, r9
 8009736:	f001 fe7f 	bl	800b438 <_Bfree>
 800973a:	9907      	ldr	r1, [sp, #28]
 800973c:	4648      	mov	r0, r9
 800973e:	f001 fe7b 	bl	800b438 <_Bfree>
 8009742:	4621      	mov	r1, r4
 8009744:	4648      	mov	r0, r9
 8009746:	f001 fe77 	bl	800b438 <_Bfree>
 800974a:	e600      	b.n	800934e <_strtod_l+0x7e>
 800974c:	9a06      	ldr	r2, [sp, #24]
 800974e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009752:	4293      	cmp	r3, r2
 8009754:	dbba      	blt.n	80096cc <_strtod_l+0x3fc>
 8009756:	4d42      	ldr	r5, [pc, #264]	; (8009860 <_strtod_l+0x590>)
 8009758:	f1c4 040f 	rsb	r4, r4, #15
 800975c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009760:	4652      	mov	r2, sl
 8009762:	465b      	mov	r3, fp
 8009764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009768:	f7f6 ff6e 	bl	8000648 <__aeabi_dmul>
 800976c:	9b06      	ldr	r3, [sp, #24]
 800976e:	1b1c      	subs	r4, r3, r4
 8009770:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009774:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009778:	e78d      	b.n	8009696 <_strtod_l+0x3c6>
 800977a:	f113 0f16 	cmn.w	r3, #22
 800977e:	dba5      	blt.n	80096cc <_strtod_l+0x3fc>
 8009780:	4a37      	ldr	r2, [pc, #220]	; (8009860 <_strtod_l+0x590>)
 8009782:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009786:	e9d2 2300 	ldrd	r2, r3, [r2]
 800978a:	4650      	mov	r0, sl
 800978c:	4659      	mov	r1, fp
 800978e:	f7f7 f885 	bl	800089c <__aeabi_ddiv>
 8009792:	e782      	b.n	800969a <_strtod_l+0x3ca>
 8009794:	2300      	movs	r3, #0
 8009796:	4e33      	ldr	r6, [pc, #204]	; (8009864 <_strtod_l+0x594>)
 8009798:	ea4f 1828 	mov.w	r8, r8, asr #4
 800979c:	4650      	mov	r0, sl
 800979e:	4659      	mov	r1, fp
 80097a0:	461d      	mov	r5, r3
 80097a2:	f1b8 0f01 	cmp.w	r8, #1
 80097a6:	dc21      	bgt.n	80097ec <_strtod_l+0x51c>
 80097a8:	b10b      	cbz	r3, 80097ae <_strtod_l+0x4de>
 80097aa:	4682      	mov	sl, r0
 80097ac:	468b      	mov	fp, r1
 80097ae:	4b2d      	ldr	r3, [pc, #180]	; (8009864 <_strtod_l+0x594>)
 80097b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80097b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80097b8:	4652      	mov	r2, sl
 80097ba:	465b      	mov	r3, fp
 80097bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80097c0:	f7f6 ff42 	bl	8000648 <__aeabi_dmul>
 80097c4:	4b28      	ldr	r3, [pc, #160]	; (8009868 <_strtod_l+0x598>)
 80097c6:	460a      	mov	r2, r1
 80097c8:	400b      	ands	r3, r1
 80097ca:	4928      	ldr	r1, [pc, #160]	; (800986c <_strtod_l+0x59c>)
 80097cc:	428b      	cmp	r3, r1
 80097ce:	4682      	mov	sl, r0
 80097d0:	d898      	bhi.n	8009704 <_strtod_l+0x434>
 80097d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80097d6:	428b      	cmp	r3, r1
 80097d8:	bf86      	itte	hi
 80097da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009874 <_strtod_l+0x5a4>
 80097de:	f04f 3aff 	movhi.w	sl, #4294967295
 80097e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80097e6:	2300      	movs	r3, #0
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	e077      	b.n	80098dc <_strtod_l+0x60c>
 80097ec:	f018 0f01 	tst.w	r8, #1
 80097f0:	d006      	beq.n	8009800 <_strtod_l+0x530>
 80097f2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	f7f6 ff25 	bl	8000648 <__aeabi_dmul>
 80097fe:	2301      	movs	r3, #1
 8009800:	3501      	adds	r5, #1
 8009802:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009806:	e7cc      	b.n	80097a2 <_strtod_l+0x4d2>
 8009808:	d0ed      	beq.n	80097e6 <_strtod_l+0x516>
 800980a:	f1c8 0800 	rsb	r8, r8, #0
 800980e:	f018 020f 	ands.w	r2, r8, #15
 8009812:	d00a      	beq.n	800982a <_strtod_l+0x55a>
 8009814:	4b12      	ldr	r3, [pc, #72]	; (8009860 <_strtod_l+0x590>)
 8009816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800981a:	4650      	mov	r0, sl
 800981c:	4659      	mov	r1, fp
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	f7f7 f83b 	bl	800089c <__aeabi_ddiv>
 8009826:	4682      	mov	sl, r0
 8009828:	468b      	mov	fp, r1
 800982a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800982e:	d0da      	beq.n	80097e6 <_strtod_l+0x516>
 8009830:	f1b8 0f1f 	cmp.w	r8, #31
 8009834:	dd20      	ble.n	8009878 <_strtod_l+0x5a8>
 8009836:	2400      	movs	r4, #0
 8009838:	46a0      	mov	r8, r4
 800983a:	9407      	str	r4, [sp, #28]
 800983c:	9405      	str	r4, [sp, #20]
 800983e:	2322      	movs	r3, #34	; 0x22
 8009840:	f04f 0a00 	mov.w	sl, #0
 8009844:	f04f 0b00 	mov.w	fp, #0
 8009848:	f8c9 3000 	str.w	r3, [r9]
 800984c:	e765      	b.n	800971a <_strtod_l+0x44a>
 800984e:	bf00      	nop
 8009850:	0800ca2d 	.word	0x0800ca2d
 8009854:	0800cabb 	.word	0x0800cabb
 8009858:	0800ca35 	.word	0x0800ca35
 800985c:	0800ca78 	.word	0x0800ca78
 8009860:	0800caf8 	.word	0x0800caf8
 8009864:	0800cad0 	.word	0x0800cad0
 8009868:	7ff00000 	.word	0x7ff00000
 800986c:	7ca00000 	.word	0x7ca00000
 8009870:	fff80000 	.word	0xfff80000
 8009874:	7fefffff 	.word	0x7fefffff
 8009878:	f018 0310 	ands.w	r3, r8, #16
 800987c:	bf18      	it	ne
 800987e:	236a      	movne	r3, #106	; 0x6a
 8009880:	4da0      	ldr	r5, [pc, #640]	; (8009b04 <_strtod_l+0x834>)
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	4650      	mov	r0, sl
 8009886:	4659      	mov	r1, fp
 8009888:	2300      	movs	r3, #0
 800988a:	f1b8 0f00 	cmp.w	r8, #0
 800988e:	f300 810a 	bgt.w	8009aa6 <_strtod_l+0x7d6>
 8009892:	b10b      	cbz	r3, 8009898 <_strtod_l+0x5c8>
 8009894:	4682      	mov	sl, r0
 8009896:	468b      	mov	fp, r1
 8009898:	9b04      	ldr	r3, [sp, #16]
 800989a:	b1bb      	cbz	r3, 80098cc <_strtod_l+0x5fc>
 800989c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80098a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	4659      	mov	r1, fp
 80098a8:	dd10      	ble.n	80098cc <_strtod_l+0x5fc>
 80098aa:	2b1f      	cmp	r3, #31
 80098ac:	f340 8107 	ble.w	8009abe <_strtod_l+0x7ee>
 80098b0:	2b34      	cmp	r3, #52	; 0x34
 80098b2:	bfde      	ittt	le
 80098b4:	3b20      	suble	r3, #32
 80098b6:	f04f 32ff 	movle.w	r2, #4294967295
 80098ba:	fa02 f303 	lslle.w	r3, r2, r3
 80098be:	f04f 0a00 	mov.w	sl, #0
 80098c2:	bfcc      	ite	gt
 80098c4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80098c8:	ea03 0b01 	andle.w	fp, r3, r1
 80098cc:	2200      	movs	r2, #0
 80098ce:	2300      	movs	r3, #0
 80098d0:	4650      	mov	r0, sl
 80098d2:	4659      	mov	r1, fp
 80098d4:	f7f7 f920 	bl	8000b18 <__aeabi_dcmpeq>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d1ac      	bne.n	8009836 <_strtod_l+0x566>
 80098dc:	9b07      	ldr	r3, [sp, #28]
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	9a05      	ldr	r2, [sp, #20]
 80098e2:	9908      	ldr	r1, [sp, #32]
 80098e4:	4623      	mov	r3, r4
 80098e6:	4648      	mov	r0, r9
 80098e8:	f001 fdf8 	bl	800b4dc <__s2b>
 80098ec:	9007      	str	r0, [sp, #28]
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f43f af08 	beq.w	8009704 <_strtod_l+0x434>
 80098f4:	9a06      	ldr	r2, [sp, #24]
 80098f6:	9b06      	ldr	r3, [sp, #24]
 80098f8:	2a00      	cmp	r2, #0
 80098fa:	f1c3 0300 	rsb	r3, r3, #0
 80098fe:	bfa8      	it	ge
 8009900:	2300      	movge	r3, #0
 8009902:	930e      	str	r3, [sp, #56]	; 0x38
 8009904:	2400      	movs	r4, #0
 8009906:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800990a:	9316      	str	r3, [sp, #88]	; 0x58
 800990c:	46a0      	mov	r8, r4
 800990e:	9b07      	ldr	r3, [sp, #28]
 8009910:	4648      	mov	r0, r9
 8009912:	6859      	ldr	r1, [r3, #4]
 8009914:	f001 fd5c 	bl	800b3d0 <_Balloc>
 8009918:	9005      	str	r0, [sp, #20]
 800991a:	2800      	cmp	r0, #0
 800991c:	f43f aef6 	beq.w	800970c <_strtod_l+0x43c>
 8009920:	9b07      	ldr	r3, [sp, #28]
 8009922:	691a      	ldr	r2, [r3, #16]
 8009924:	3202      	adds	r2, #2
 8009926:	f103 010c 	add.w	r1, r3, #12
 800992a:	0092      	lsls	r2, r2, #2
 800992c:	300c      	adds	r0, #12
 800992e:	f7fe fe29 	bl	8008584 <memcpy>
 8009932:	aa1e      	add	r2, sp, #120	; 0x78
 8009934:	a91d      	add	r1, sp, #116	; 0x74
 8009936:	ec4b ab10 	vmov	d0, sl, fp
 800993a:	4648      	mov	r0, r9
 800993c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009940:	f002 f888 	bl	800ba54 <__d2b>
 8009944:	901c      	str	r0, [sp, #112]	; 0x70
 8009946:	2800      	cmp	r0, #0
 8009948:	f43f aee0 	beq.w	800970c <_strtod_l+0x43c>
 800994c:	2101      	movs	r1, #1
 800994e:	4648      	mov	r0, r9
 8009950:	f001 fe50 	bl	800b5f4 <__i2b>
 8009954:	4680      	mov	r8, r0
 8009956:	2800      	cmp	r0, #0
 8009958:	f43f aed8 	beq.w	800970c <_strtod_l+0x43c>
 800995c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800995e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009960:	2e00      	cmp	r6, #0
 8009962:	bfab      	itete	ge
 8009964:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009966:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009968:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800996a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800996c:	bfac      	ite	ge
 800996e:	18f7      	addge	r7, r6, r3
 8009970:	1b9d      	sublt	r5, r3, r6
 8009972:	9b04      	ldr	r3, [sp, #16]
 8009974:	1af6      	subs	r6, r6, r3
 8009976:	4416      	add	r6, r2
 8009978:	4b63      	ldr	r3, [pc, #396]	; (8009b08 <_strtod_l+0x838>)
 800997a:	3e01      	subs	r6, #1
 800997c:	429e      	cmp	r6, r3
 800997e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009982:	f280 80af 	bge.w	8009ae4 <_strtod_l+0x814>
 8009986:	1b9b      	subs	r3, r3, r6
 8009988:	2b1f      	cmp	r3, #31
 800998a:	eba2 0203 	sub.w	r2, r2, r3
 800998e:	f04f 0101 	mov.w	r1, #1
 8009992:	f300 809b 	bgt.w	8009acc <_strtod_l+0x7fc>
 8009996:	fa01 f303 	lsl.w	r3, r1, r3
 800999a:	930f      	str	r3, [sp, #60]	; 0x3c
 800999c:	2300      	movs	r3, #0
 800999e:	930a      	str	r3, [sp, #40]	; 0x28
 80099a0:	18be      	adds	r6, r7, r2
 80099a2:	9b04      	ldr	r3, [sp, #16]
 80099a4:	42b7      	cmp	r7, r6
 80099a6:	4415      	add	r5, r2
 80099a8:	441d      	add	r5, r3
 80099aa:	463b      	mov	r3, r7
 80099ac:	bfa8      	it	ge
 80099ae:	4633      	movge	r3, r6
 80099b0:	42ab      	cmp	r3, r5
 80099b2:	bfa8      	it	ge
 80099b4:	462b      	movge	r3, r5
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	bfc2      	ittt	gt
 80099ba:	1af6      	subgt	r6, r6, r3
 80099bc:	1aed      	subgt	r5, r5, r3
 80099be:	1aff      	subgt	r7, r7, r3
 80099c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099c2:	b1bb      	cbz	r3, 80099f4 <_strtod_l+0x724>
 80099c4:	4641      	mov	r1, r8
 80099c6:	461a      	mov	r2, r3
 80099c8:	4648      	mov	r0, r9
 80099ca:	f001 feb3 	bl	800b734 <__pow5mult>
 80099ce:	4680      	mov	r8, r0
 80099d0:	2800      	cmp	r0, #0
 80099d2:	f43f ae9b 	beq.w	800970c <_strtod_l+0x43c>
 80099d6:	4601      	mov	r1, r0
 80099d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80099da:	4648      	mov	r0, r9
 80099dc:	f001 fe13 	bl	800b606 <__multiply>
 80099e0:	900c      	str	r0, [sp, #48]	; 0x30
 80099e2:	2800      	cmp	r0, #0
 80099e4:	f43f ae92 	beq.w	800970c <_strtod_l+0x43c>
 80099e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80099ea:	4648      	mov	r0, r9
 80099ec:	f001 fd24 	bl	800b438 <_Bfree>
 80099f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099f2:	931c      	str	r3, [sp, #112]	; 0x70
 80099f4:	2e00      	cmp	r6, #0
 80099f6:	dc7a      	bgt.n	8009aee <_strtod_l+0x81e>
 80099f8:	9b06      	ldr	r3, [sp, #24]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	dd08      	ble.n	8009a10 <_strtod_l+0x740>
 80099fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009a00:	9905      	ldr	r1, [sp, #20]
 8009a02:	4648      	mov	r0, r9
 8009a04:	f001 fe96 	bl	800b734 <__pow5mult>
 8009a08:	9005      	str	r0, [sp, #20]
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	f43f ae7e 	beq.w	800970c <_strtod_l+0x43c>
 8009a10:	2d00      	cmp	r5, #0
 8009a12:	dd08      	ble.n	8009a26 <_strtod_l+0x756>
 8009a14:	462a      	mov	r2, r5
 8009a16:	9905      	ldr	r1, [sp, #20]
 8009a18:	4648      	mov	r0, r9
 8009a1a:	f001 fed9 	bl	800b7d0 <__lshift>
 8009a1e:	9005      	str	r0, [sp, #20]
 8009a20:	2800      	cmp	r0, #0
 8009a22:	f43f ae73 	beq.w	800970c <_strtod_l+0x43c>
 8009a26:	2f00      	cmp	r7, #0
 8009a28:	dd08      	ble.n	8009a3c <_strtod_l+0x76c>
 8009a2a:	4641      	mov	r1, r8
 8009a2c:	463a      	mov	r2, r7
 8009a2e:	4648      	mov	r0, r9
 8009a30:	f001 fece 	bl	800b7d0 <__lshift>
 8009a34:	4680      	mov	r8, r0
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f43f ae68 	beq.w	800970c <_strtod_l+0x43c>
 8009a3c:	9a05      	ldr	r2, [sp, #20]
 8009a3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a40:	4648      	mov	r0, r9
 8009a42:	f001 ff33 	bl	800b8ac <__mdiff>
 8009a46:	4604      	mov	r4, r0
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	f43f ae5f 	beq.w	800970c <_strtod_l+0x43c>
 8009a4e:	68c3      	ldr	r3, [r0, #12]
 8009a50:	930c      	str	r3, [sp, #48]	; 0x30
 8009a52:	2300      	movs	r3, #0
 8009a54:	60c3      	str	r3, [r0, #12]
 8009a56:	4641      	mov	r1, r8
 8009a58:	f001 ff0e 	bl	800b878 <__mcmp>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	da55      	bge.n	8009b0c <_strtod_l+0x83c>
 8009a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a62:	b9e3      	cbnz	r3, 8009a9e <_strtod_l+0x7ce>
 8009a64:	f1ba 0f00 	cmp.w	sl, #0
 8009a68:	d119      	bne.n	8009a9e <_strtod_l+0x7ce>
 8009a6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a6e:	b9b3      	cbnz	r3, 8009a9e <_strtod_l+0x7ce>
 8009a70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a74:	0d1b      	lsrs	r3, r3, #20
 8009a76:	051b      	lsls	r3, r3, #20
 8009a78:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a7c:	d90f      	bls.n	8009a9e <_strtod_l+0x7ce>
 8009a7e:	6963      	ldr	r3, [r4, #20]
 8009a80:	b913      	cbnz	r3, 8009a88 <_strtod_l+0x7b8>
 8009a82:	6923      	ldr	r3, [r4, #16]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	dd0a      	ble.n	8009a9e <_strtod_l+0x7ce>
 8009a88:	4621      	mov	r1, r4
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	4648      	mov	r0, r9
 8009a8e:	f001 fe9f 	bl	800b7d0 <__lshift>
 8009a92:	4641      	mov	r1, r8
 8009a94:	4604      	mov	r4, r0
 8009a96:	f001 feef 	bl	800b878 <__mcmp>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	dc67      	bgt.n	8009b6e <_strtod_l+0x89e>
 8009a9e:	9b04      	ldr	r3, [sp, #16]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d171      	bne.n	8009b88 <_strtod_l+0x8b8>
 8009aa4:	e63d      	b.n	8009722 <_strtod_l+0x452>
 8009aa6:	f018 0f01 	tst.w	r8, #1
 8009aaa:	d004      	beq.n	8009ab6 <_strtod_l+0x7e6>
 8009aac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ab0:	f7f6 fdca 	bl	8000648 <__aeabi_dmul>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009aba:	3508      	adds	r5, #8
 8009abc:	e6e5      	b.n	800988a <_strtod_l+0x5ba>
 8009abe:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac6:	ea03 0a0a 	and.w	sl, r3, sl
 8009aca:	e6ff      	b.n	80098cc <_strtod_l+0x5fc>
 8009acc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009ad0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009ad4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009ad8:	36e2      	adds	r6, #226	; 0xe2
 8009ada:	fa01 f306 	lsl.w	r3, r1, r6
 8009ade:	930a      	str	r3, [sp, #40]	; 0x28
 8009ae0:	910f      	str	r1, [sp, #60]	; 0x3c
 8009ae2:	e75d      	b.n	80099a0 <_strtod_l+0x6d0>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ae8:	2301      	movs	r3, #1
 8009aea:	930f      	str	r3, [sp, #60]	; 0x3c
 8009aec:	e758      	b.n	80099a0 <_strtod_l+0x6d0>
 8009aee:	4632      	mov	r2, r6
 8009af0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009af2:	4648      	mov	r0, r9
 8009af4:	f001 fe6c 	bl	800b7d0 <__lshift>
 8009af8:	901c      	str	r0, [sp, #112]	; 0x70
 8009afa:	2800      	cmp	r0, #0
 8009afc:	f47f af7c 	bne.w	80099f8 <_strtod_l+0x728>
 8009b00:	e604      	b.n	800970c <_strtod_l+0x43c>
 8009b02:	bf00      	nop
 8009b04:	0800ca90 	.word	0x0800ca90
 8009b08:	fffffc02 	.word	0xfffffc02
 8009b0c:	465d      	mov	r5, fp
 8009b0e:	f040 8086 	bne.w	8009c1e <_strtod_l+0x94e>
 8009b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b18:	b32a      	cbz	r2, 8009b66 <_strtod_l+0x896>
 8009b1a:	4aaf      	ldr	r2, [pc, #700]	; (8009dd8 <_strtod_l+0xb08>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d153      	bne.n	8009bc8 <_strtod_l+0x8f8>
 8009b20:	9b04      	ldr	r3, [sp, #16]
 8009b22:	4650      	mov	r0, sl
 8009b24:	b1d3      	cbz	r3, 8009b5c <_strtod_l+0x88c>
 8009b26:	4aad      	ldr	r2, [pc, #692]	; (8009ddc <_strtod_l+0xb0c>)
 8009b28:	402a      	ands	r2, r5
 8009b2a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8009b32:	d816      	bhi.n	8009b62 <_strtod_l+0x892>
 8009b34:	0d12      	lsrs	r2, r2, #20
 8009b36:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b3e:	4298      	cmp	r0, r3
 8009b40:	d142      	bne.n	8009bc8 <_strtod_l+0x8f8>
 8009b42:	4ba7      	ldr	r3, [pc, #668]	; (8009de0 <_strtod_l+0xb10>)
 8009b44:	429d      	cmp	r5, r3
 8009b46:	d102      	bne.n	8009b4e <_strtod_l+0x87e>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f43f addf 	beq.w	800970c <_strtod_l+0x43c>
 8009b4e:	4ba3      	ldr	r3, [pc, #652]	; (8009ddc <_strtod_l+0xb0c>)
 8009b50:	402b      	ands	r3, r5
 8009b52:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009b56:	f04f 0a00 	mov.w	sl, #0
 8009b5a:	e7a0      	b.n	8009a9e <_strtod_l+0x7ce>
 8009b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b60:	e7ed      	b.n	8009b3e <_strtod_l+0x86e>
 8009b62:	460b      	mov	r3, r1
 8009b64:	e7eb      	b.n	8009b3e <_strtod_l+0x86e>
 8009b66:	bb7b      	cbnz	r3, 8009bc8 <_strtod_l+0x8f8>
 8009b68:	f1ba 0f00 	cmp.w	sl, #0
 8009b6c:	d12c      	bne.n	8009bc8 <_strtod_l+0x8f8>
 8009b6e:	9904      	ldr	r1, [sp, #16]
 8009b70:	4a9a      	ldr	r2, [pc, #616]	; (8009ddc <_strtod_l+0xb0c>)
 8009b72:	465b      	mov	r3, fp
 8009b74:	b1f1      	cbz	r1, 8009bb4 <_strtod_l+0x8e4>
 8009b76:	ea02 010b 	and.w	r1, r2, fp
 8009b7a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b7e:	dc19      	bgt.n	8009bb4 <_strtod_l+0x8e4>
 8009b80:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b84:	f77f ae5b 	ble.w	800983e <_strtod_l+0x56e>
 8009b88:	4a96      	ldr	r2, [pc, #600]	; (8009de4 <_strtod_l+0xb14>)
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009b90:	4650      	mov	r0, sl
 8009b92:	4659      	mov	r1, fp
 8009b94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009b98:	f7f6 fd56 	bl	8000648 <__aeabi_dmul>
 8009b9c:	4682      	mov	sl, r0
 8009b9e:	468b      	mov	fp, r1
 8009ba0:	2900      	cmp	r1, #0
 8009ba2:	f47f adbe 	bne.w	8009722 <_strtod_l+0x452>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	f47f adbb 	bne.w	8009722 <_strtod_l+0x452>
 8009bac:	2322      	movs	r3, #34	; 0x22
 8009bae:	f8c9 3000 	str.w	r3, [r9]
 8009bb2:	e5b6      	b.n	8009722 <_strtod_l+0x452>
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009bba:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009bbe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009bc2:	f04f 3aff 	mov.w	sl, #4294967295
 8009bc6:	e76a      	b.n	8009a9e <_strtod_l+0x7ce>
 8009bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bca:	b193      	cbz	r3, 8009bf2 <_strtod_l+0x922>
 8009bcc:	422b      	tst	r3, r5
 8009bce:	f43f af66 	beq.w	8009a9e <_strtod_l+0x7ce>
 8009bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bd4:	9a04      	ldr	r2, [sp, #16]
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	4659      	mov	r1, fp
 8009bda:	b173      	cbz	r3, 8009bfa <_strtod_l+0x92a>
 8009bdc:	f7ff fb5c 	bl	8009298 <sulp>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009be8:	f7f6 fb78 	bl	80002dc <__adddf3>
 8009bec:	4682      	mov	sl, r0
 8009bee:	468b      	mov	fp, r1
 8009bf0:	e755      	b.n	8009a9e <_strtod_l+0x7ce>
 8009bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bf4:	ea13 0f0a 	tst.w	r3, sl
 8009bf8:	e7e9      	b.n	8009bce <_strtod_l+0x8fe>
 8009bfa:	f7ff fb4d 	bl	8009298 <sulp>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c06:	f7f6 fb67 	bl	80002d8 <__aeabi_dsub>
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4682      	mov	sl, r0
 8009c10:	468b      	mov	fp, r1
 8009c12:	f7f6 ff81 	bl	8000b18 <__aeabi_dcmpeq>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	f47f ae11 	bne.w	800983e <_strtod_l+0x56e>
 8009c1c:	e73f      	b.n	8009a9e <_strtod_l+0x7ce>
 8009c1e:	4641      	mov	r1, r8
 8009c20:	4620      	mov	r0, r4
 8009c22:	f001 ff66 	bl	800baf2 <__ratio>
 8009c26:	ec57 6b10 	vmov	r6, r7, d0
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c30:	ee10 0a10 	vmov	r0, s0
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 ff83 	bl	8000b40 <__aeabi_dcmple>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d077      	beq.n	8009d2e <_strtod_l+0xa5e>
 8009c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d04a      	beq.n	8009cda <_strtod_l+0xa0a>
 8009c44:	4b68      	ldr	r3, [pc, #416]	; (8009de8 <_strtod_l+0xb18>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009c4c:	4f66      	ldr	r7, [pc, #408]	; (8009de8 <_strtod_l+0xb18>)
 8009c4e:	2600      	movs	r6, #0
 8009c50:	4b62      	ldr	r3, [pc, #392]	; (8009ddc <_strtod_l+0xb0c>)
 8009c52:	402b      	ands	r3, r5
 8009c54:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c58:	4b64      	ldr	r3, [pc, #400]	; (8009dec <_strtod_l+0xb1c>)
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	f040 80ce 	bne.w	8009dfc <_strtod_l+0xb2c>
 8009c60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c68:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009c6c:	ec4b ab10 	vmov	d0, sl, fp
 8009c70:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009c74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009c78:	f001 fe76 	bl	800b968 <__ulp>
 8009c7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c80:	ec53 2b10 	vmov	r2, r3, d0
 8009c84:	f7f6 fce0 	bl	8000648 <__aeabi_dmul>
 8009c88:	4652      	mov	r2, sl
 8009c8a:	465b      	mov	r3, fp
 8009c8c:	f7f6 fb26 	bl	80002dc <__adddf3>
 8009c90:	460b      	mov	r3, r1
 8009c92:	4952      	ldr	r1, [pc, #328]	; (8009ddc <_strtod_l+0xb0c>)
 8009c94:	4a56      	ldr	r2, [pc, #344]	; (8009df0 <_strtod_l+0xb20>)
 8009c96:	4019      	ands	r1, r3
 8009c98:	4291      	cmp	r1, r2
 8009c9a:	4682      	mov	sl, r0
 8009c9c:	d95b      	bls.n	8009d56 <_strtod_l+0xa86>
 8009c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d103      	bne.n	8009cb0 <_strtod_l+0x9e0>
 8009ca8:	9b08      	ldr	r3, [sp, #32]
 8009caa:	3301      	adds	r3, #1
 8009cac:	f43f ad2e 	beq.w	800970c <_strtod_l+0x43c>
 8009cb0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009de0 <_strtod_l+0xb10>
 8009cb4:	f04f 3aff 	mov.w	sl, #4294967295
 8009cb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009cba:	4648      	mov	r0, r9
 8009cbc:	f001 fbbc 	bl	800b438 <_Bfree>
 8009cc0:	9905      	ldr	r1, [sp, #20]
 8009cc2:	4648      	mov	r0, r9
 8009cc4:	f001 fbb8 	bl	800b438 <_Bfree>
 8009cc8:	4641      	mov	r1, r8
 8009cca:	4648      	mov	r0, r9
 8009ccc:	f001 fbb4 	bl	800b438 <_Bfree>
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	4648      	mov	r0, r9
 8009cd4:	f001 fbb0 	bl	800b438 <_Bfree>
 8009cd8:	e619      	b.n	800990e <_strtod_l+0x63e>
 8009cda:	f1ba 0f00 	cmp.w	sl, #0
 8009cde:	d11a      	bne.n	8009d16 <_strtod_l+0xa46>
 8009ce0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ce4:	b9eb      	cbnz	r3, 8009d22 <_strtod_l+0xa52>
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	4b3f      	ldr	r3, [pc, #252]	; (8009de8 <_strtod_l+0xb18>)
 8009cea:	4630      	mov	r0, r6
 8009cec:	4639      	mov	r1, r7
 8009cee:	f7f6 ff1d 	bl	8000b2c <__aeabi_dcmplt>
 8009cf2:	b9c8      	cbnz	r0, 8009d28 <_strtod_l+0xa58>
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4b3e      	ldr	r3, [pc, #248]	; (8009df4 <_strtod_l+0xb24>)
 8009cfc:	f7f6 fca4 	bl	8000648 <__aeabi_dmul>
 8009d00:	4606      	mov	r6, r0
 8009d02:	460f      	mov	r7, r1
 8009d04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009d08:	9618      	str	r6, [sp, #96]	; 0x60
 8009d0a:	9319      	str	r3, [sp, #100]	; 0x64
 8009d0c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009d10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009d14:	e79c      	b.n	8009c50 <_strtod_l+0x980>
 8009d16:	f1ba 0f01 	cmp.w	sl, #1
 8009d1a:	d102      	bne.n	8009d22 <_strtod_l+0xa52>
 8009d1c:	2d00      	cmp	r5, #0
 8009d1e:	f43f ad8e 	beq.w	800983e <_strtod_l+0x56e>
 8009d22:	2200      	movs	r2, #0
 8009d24:	4b34      	ldr	r3, [pc, #208]	; (8009df8 <_strtod_l+0xb28>)
 8009d26:	e78f      	b.n	8009c48 <_strtod_l+0x978>
 8009d28:	2600      	movs	r6, #0
 8009d2a:	4f32      	ldr	r7, [pc, #200]	; (8009df4 <_strtod_l+0xb24>)
 8009d2c:	e7ea      	b.n	8009d04 <_strtod_l+0xa34>
 8009d2e:	4b31      	ldr	r3, [pc, #196]	; (8009df4 <_strtod_l+0xb24>)
 8009d30:	4630      	mov	r0, r6
 8009d32:	4639      	mov	r1, r7
 8009d34:	2200      	movs	r2, #0
 8009d36:	f7f6 fc87 	bl	8000648 <__aeabi_dmul>
 8009d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d3c:	4606      	mov	r6, r0
 8009d3e:	460f      	mov	r7, r1
 8009d40:	b933      	cbnz	r3, 8009d50 <_strtod_l+0xa80>
 8009d42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d46:	9010      	str	r0, [sp, #64]	; 0x40
 8009d48:	9311      	str	r3, [sp, #68]	; 0x44
 8009d4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d4e:	e7df      	b.n	8009d10 <_strtod_l+0xa40>
 8009d50:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009d54:	e7f9      	b.n	8009d4a <_strtod_l+0xa7a>
 8009d56:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009d5a:	9b04      	ldr	r3, [sp, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1ab      	bne.n	8009cb8 <_strtod_l+0x9e8>
 8009d60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d64:	0d1b      	lsrs	r3, r3, #20
 8009d66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d68:	051b      	lsls	r3, r3, #20
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	465d      	mov	r5, fp
 8009d6e:	d1a3      	bne.n	8009cb8 <_strtod_l+0x9e8>
 8009d70:	4639      	mov	r1, r7
 8009d72:	4630      	mov	r0, r6
 8009d74:	f7f6 ff18 	bl	8000ba8 <__aeabi_d2iz>
 8009d78:	f7f6 fbfc 	bl	8000574 <__aeabi_i2d>
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4602      	mov	r2, r0
 8009d80:	4639      	mov	r1, r7
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7f6 faa8 	bl	80002d8 <__aeabi_dsub>
 8009d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	460f      	mov	r7, r1
 8009d8e:	b933      	cbnz	r3, 8009d9e <_strtod_l+0xace>
 8009d90:	f1ba 0f00 	cmp.w	sl, #0
 8009d94:	d103      	bne.n	8009d9e <_strtod_l+0xace>
 8009d96:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009d9a:	2d00      	cmp	r5, #0
 8009d9c:	d06d      	beq.n	8009e7a <_strtod_l+0xbaa>
 8009d9e:	a30a      	add	r3, pc, #40	; (adr r3, 8009dc8 <_strtod_l+0xaf8>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	4630      	mov	r0, r6
 8009da6:	4639      	mov	r1, r7
 8009da8:	f7f6 fec0 	bl	8000b2c <__aeabi_dcmplt>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	f47f acb8 	bne.w	8009722 <_strtod_l+0x452>
 8009db2:	a307      	add	r3, pc, #28	; (adr r3, 8009dd0 <_strtod_l+0xb00>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	4630      	mov	r0, r6
 8009dba:	4639      	mov	r1, r7
 8009dbc:	f7f6 fed4 	bl	8000b68 <__aeabi_dcmpgt>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	f43f af79 	beq.w	8009cb8 <_strtod_l+0x9e8>
 8009dc6:	e4ac      	b.n	8009722 <_strtod_l+0x452>
 8009dc8:	94a03595 	.word	0x94a03595
 8009dcc:	3fdfffff 	.word	0x3fdfffff
 8009dd0:	35afe535 	.word	0x35afe535
 8009dd4:	3fe00000 	.word	0x3fe00000
 8009dd8:	000fffff 	.word	0x000fffff
 8009ddc:	7ff00000 	.word	0x7ff00000
 8009de0:	7fefffff 	.word	0x7fefffff
 8009de4:	39500000 	.word	0x39500000
 8009de8:	3ff00000 	.word	0x3ff00000
 8009dec:	7fe00000 	.word	0x7fe00000
 8009df0:	7c9fffff 	.word	0x7c9fffff
 8009df4:	3fe00000 	.word	0x3fe00000
 8009df8:	bff00000 	.word	0xbff00000
 8009dfc:	9b04      	ldr	r3, [sp, #16]
 8009dfe:	b333      	cbz	r3, 8009e4e <_strtod_l+0xb7e>
 8009e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e02:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e06:	d822      	bhi.n	8009e4e <_strtod_l+0xb7e>
 8009e08:	a327      	add	r3, pc, #156	; (adr r3, 8009ea8 <_strtod_l+0xbd8>)
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	4630      	mov	r0, r6
 8009e10:	4639      	mov	r1, r7
 8009e12:	f7f6 fe95 	bl	8000b40 <__aeabi_dcmple>
 8009e16:	b1a0      	cbz	r0, 8009e42 <_strtod_l+0xb72>
 8009e18:	4639      	mov	r1, r7
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f7f6 feec 	bl	8000bf8 <__aeabi_d2uiz>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	bf08      	it	eq
 8009e24:	2001      	moveq	r0, #1
 8009e26:	f7f6 fb95 	bl	8000554 <__aeabi_ui2d>
 8009e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	460f      	mov	r7, r1
 8009e30:	bb03      	cbnz	r3, 8009e74 <_strtod_l+0xba4>
 8009e32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e36:	9012      	str	r0, [sp, #72]	; 0x48
 8009e38:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e3a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009e3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e46:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009e4a:	1a9b      	subs	r3, r3, r2
 8009e4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e4e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009e52:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009e56:	f001 fd87 	bl	800b968 <__ulp>
 8009e5a:	4650      	mov	r0, sl
 8009e5c:	ec53 2b10 	vmov	r2, r3, d0
 8009e60:	4659      	mov	r1, fp
 8009e62:	f7f6 fbf1 	bl	8000648 <__aeabi_dmul>
 8009e66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e6a:	f7f6 fa37 	bl	80002dc <__adddf3>
 8009e6e:	4682      	mov	sl, r0
 8009e70:	468b      	mov	fp, r1
 8009e72:	e772      	b.n	8009d5a <_strtod_l+0xa8a>
 8009e74:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009e78:	e7df      	b.n	8009e3a <_strtod_l+0xb6a>
 8009e7a:	a30d      	add	r3, pc, #52	; (adr r3, 8009eb0 <_strtod_l+0xbe0>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	f7f6 fe54 	bl	8000b2c <__aeabi_dcmplt>
 8009e84:	e79c      	b.n	8009dc0 <_strtod_l+0xaf0>
 8009e86:	2300      	movs	r3, #0
 8009e88:	930d      	str	r3, [sp, #52]	; 0x34
 8009e8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	f7ff ba61 	b.w	8009356 <_strtod_l+0x86>
 8009e94:	2b65      	cmp	r3, #101	; 0x65
 8009e96:	f04f 0200 	mov.w	r2, #0
 8009e9a:	f43f ab4e 	beq.w	800953a <_strtod_l+0x26a>
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	4614      	mov	r4, r2
 8009ea2:	9104      	str	r1, [sp, #16]
 8009ea4:	f7ff bacb 	b.w	800943e <_strtod_l+0x16e>
 8009ea8:	ffc00000 	.word	0xffc00000
 8009eac:	41dfffff 	.word	0x41dfffff
 8009eb0:	94a03595 	.word	0x94a03595
 8009eb4:	3fcfffff 	.word	0x3fcfffff

08009eb8 <_strtod_r>:
 8009eb8:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <_strtod_r+0x18>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	b410      	push	{r4}
 8009ebe:	6a1b      	ldr	r3, [r3, #32]
 8009ec0:	4c04      	ldr	r4, [pc, #16]	; (8009ed4 <_strtod_r+0x1c>)
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	bf08      	it	eq
 8009ec6:	4623      	moveq	r3, r4
 8009ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ecc:	f7ff ba00 	b.w	80092d0 <_strtod_l>
 8009ed0:	2000002c 	.word	0x2000002c
 8009ed4:	20000090 	.word	0x20000090

08009ed8 <strtok>:
 8009ed8:	4b13      	ldr	r3, [pc, #76]	; (8009f28 <strtok+0x50>)
 8009eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ede:	681d      	ldr	r5, [r3, #0]
 8009ee0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	460f      	mov	r7, r1
 8009ee6:	b9b4      	cbnz	r4, 8009f16 <strtok+0x3e>
 8009ee8:	2050      	movs	r0, #80	; 0x50
 8009eea:	f001 fa57 	bl	800b39c <malloc>
 8009eee:	65a8      	str	r0, [r5, #88]	; 0x58
 8009ef0:	e9c0 4400 	strd	r4, r4, [r0]
 8009ef4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009ef8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009efc:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009f00:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009f04:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009f08:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009f0c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009f10:	6184      	str	r4, [r0, #24]
 8009f12:	7704      	strb	r4, [r0, #28]
 8009f14:	6244      	str	r4, [r0, #36]	; 0x24
 8009f16:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8009f18:	4639      	mov	r1, r7
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f22:	f000 b803 	b.w	8009f2c <__strtok_r>
 8009f26:	bf00      	nop
 8009f28:	2000002c 	.word	0x2000002c

08009f2c <__strtok_r>:
 8009f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f2e:	b918      	cbnz	r0, 8009f38 <__strtok_r+0xc>
 8009f30:	6810      	ldr	r0, [r2, #0]
 8009f32:	b908      	cbnz	r0, 8009f38 <__strtok_r+0xc>
 8009f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f36:	4620      	mov	r0, r4
 8009f38:	4604      	mov	r4, r0
 8009f3a:	460f      	mov	r7, r1
 8009f3c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009f40:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009f44:	b91e      	cbnz	r6, 8009f4e <__strtok_r+0x22>
 8009f46:	b96d      	cbnz	r5, 8009f64 <__strtok_r+0x38>
 8009f48:	6015      	str	r5, [r2, #0]
 8009f4a:	4628      	mov	r0, r5
 8009f4c:	e7f2      	b.n	8009f34 <__strtok_r+0x8>
 8009f4e:	42b5      	cmp	r5, r6
 8009f50:	d1f6      	bne.n	8009f40 <__strtok_r+0x14>
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d1ef      	bne.n	8009f36 <__strtok_r+0xa>
 8009f56:	6014      	str	r4, [r2, #0]
 8009f58:	7003      	strb	r3, [r0, #0]
 8009f5a:	e7eb      	b.n	8009f34 <__strtok_r+0x8>
 8009f5c:	462b      	mov	r3, r5
 8009f5e:	e00d      	b.n	8009f7c <__strtok_r+0x50>
 8009f60:	b926      	cbnz	r6, 8009f6c <__strtok_r+0x40>
 8009f62:	461c      	mov	r4, r3
 8009f64:	4623      	mov	r3, r4
 8009f66:	460f      	mov	r7, r1
 8009f68:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009f6c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009f70:	42b5      	cmp	r5, r6
 8009f72:	d1f5      	bne.n	8009f60 <__strtok_r+0x34>
 8009f74:	2d00      	cmp	r5, #0
 8009f76:	d0f1      	beq.n	8009f5c <__strtok_r+0x30>
 8009f78:	2100      	movs	r1, #0
 8009f7a:	7021      	strb	r1, [r4, #0]
 8009f7c:	6013      	str	r3, [r2, #0]
 8009f7e:	e7d9      	b.n	8009f34 <__strtok_r+0x8>

08009f80 <_strtol_l.isra.0>:
 8009f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f84:	4680      	mov	r8, r0
 8009f86:	4689      	mov	r9, r1
 8009f88:	4692      	mov	sl, r2
 8009f8a:	461e      	mov	r6, r3
 8009f8c:	460f      	mov	r7, r1
 8009f8e:	463d      	mov	r5, r7
 8009f90:	9808      	ldr	r0, [sp, #32]
 8009f92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f96:	f001 f9ed 	bl	800b374 <__locale_ctype_ptr_l>
 8009f9a:	4420      	add	r0, r4
 8009f9c:	7843      	ldrb	r3, [r0, #1]
 8009f9e:	f013 0308 	ands.w	r3, r3, #8
 8009fa2:	d132      	bne.n	800a00a <_strtol_l.isra.0+0x8a>
 8009fa4:	2c2d      	cmp	r4, #45	; 0x2d
 8009fa6:	d132      	bne.n	800a00e <_strtol_l.isra.0+0x8e>
 8009fa8:	787c      	ldrb	r4, [r7, #1]
 8009faa:	1cbd      	adds	r5, r7, #2
 8009fac:	2201      	movs	r2, #1
 8009fae:	2e00      	cmp	r6, #0
 8009fb0:	d05d      	beq.n	800a06e <_strtol_l.isra.0+0xee>
 8009fb2:	2e10      	cmp	r6, #16
 8009fb4:	d109      	bne.n	8009fca <_strtol_l.isra.0+0x4a>
 8009fb6:	2c30      	cmp	r4, #48	; 0x30
 8009fb8:	d107      	bne.n	8009fca <_strtol_l.isra.0+0x4a>
 8009fba:	782b      	ldrb	r3, [r5, #0]
 8009fbc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009fc0:	2b58      	cmp	r3, #88	; 0x58
 8009fc2:	d14f      	bne.n	800a064 <_strtol_l.isra.0+0xe4>
 8009fc4:	786c      	ldrb	r4, [r5, #1]
 8009fc6:	2610      	movs	r6, #16
 8009fc8:	3502      	adds	r5, #2
 8009fca:	2a00      	cmp	r2, #0
 8009fcc:	bf14      	ite	ne
 8009fce:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009fd2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009fd6:	2700      	movs	r7, #0
 8009fd8:	fbb1 fcf6 	udiv	ip, r1, r6
 8009fdc:	4638      	mov	r0, r7
 8009fde:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009fe2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009fe6:	2b09      	cmp	r3, #9
 8009fe8:	d817      	bhi.n	800a01a <_strtol_l.isra.0+0x9a>
 8009fea:	461c      	mov	r4, r3
 8009fec:	42a6      	cmp	r6, r4
 8009fee:	dd23      	ble.n	800a038 <_strtol_l.isra.0+0xb8>
 8009ff0:	1c7b      	adds	r3, r7, #1
 8009ff2:	d007      	beq.n	800a004 <_strtol_l.isra.0+0x84>
 8009ff4:	4584      	cmp	ip, r0
 8009ff6:	d31c      	bcc.n	800a032 <_strtol_l.isra.0+0xb2>
 8009ff8:	d101      	bne.n	8009ffe <_strtol_l.isra.0+0x7e>
 8009ffa:	45a6      	cmp	lr, r4
 8009ffc:	db19      	blt.n	800a032 <_strtol_l.isra.0+0xb2>
 8009ffe:	fb00 4006 	mla	r0, r0, r6, r4
 800a002:	2701      	movs	r7, #1
 800a004:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a008:	e7eb      	b.n	8009fe2 <_strtol_l.isra.0+0x62>
 800a00a:	462f      	mov	r7, r5
 800a00c:	e7bf      	b.n	8009f8e <_strtol_l.isra.0+0xe>
 800a00e:	2c2b      	cmp	r4, #43	; 0x2b
 800a010:	bf04      	itt	eq
 800a012:	1cbd      	addeq	r5, r7, #2
 800a014:	787c      	ldrbeq	r4, [r7, #1]
 800a016:	461a      	mov	r2, r3
 800a018:	e7c9      	b.n	8009fae <_strtol_l.isra.0+0x2e>
 800a01a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a01e:	2b19      	cmp	r3, #25
 800a020:	d801      	bhi.n	800a026 <_strtol_l.isra.0+0xa6>
 800a022:	3c37      	subs	r4, #55	; 0x37
 800a024:	e7e2      	b.n	8009fec <_strtol_l.isra.0+0x6c>
 800a026:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a02a:	2b19      	cmp	r3, #25
 800a02c:	d804      	bhi.n	800a038 <_strtol_l.isra.0+0xb8>
 800a02e:	3c57      	subs	r4, #87	; 0x57
 800a030:	e7dc      	b.n	8009fec <_strtol_l.isra.0+0x6c>
 800a032:	f04f 37ff 	mov.w	r7, #4294967295
 800a036:	e7e5      	b.n	800a004 <_strtol_l.isra.0+0x84>
 800a038:	1c7b      	adds	r3, r7, #1
 800a03a:	d108      	bne.n	800a04e <_strtol_l.isra.0+0xce>
 800a03c:	2322      	movs	r3, #34	; 0x22
 800a03e:	f8c8 3000 	str.w	r3, [r8]
 800a042:	4608      	mov	r0, r1
 800a044:	f1ba 0f00 	cmp.w	sl, #0
 800a048:	d107      	bne.n	800a05a <_strtol_l.isra.0+0xda>
 800a04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a04e:	b102      	cbz	r2, 800a052 <_strtol_l.isra.0+0xd2>
 800a050:	4240      	negs	r0, r0
 800a052:	f1ba 0f00 	cmp.w	sl, #0
 800a056:	d0f8      	beq.n	800a04a <_strtol_l.isra.0+0xca>
 800a058:	b10f      	cbz	r7, 800a05e <_strtol_l.isra.0+0xde>
 800a05a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a05e:	f8ca 9000 	str.w	r9, [sl]
 800a062:	e7f2      	b.n	800a04a <_strtol_l.isra.0+0xca>
 800a064:	2430      	movs	r4, #48	; 0x30
 800a066:	2e00      	cmp	r6, #0
 800a068:	d1af      	bne.n	8009fca <_strtol_l.isra.0+0x4a>
 800a06a:	2608      	movs	r6, #8
 800a06c:	e7ad      	b.n	8009fca <_strtol_l.isra.0+0x4a>
 800a06e:	2c30      	cmp	r4, #48	; 0x30
 800a070:	d0a3      	beq.n	8009fba <_strtol_l.isra.0+0x3a>
 800a072:	260a      	movs	r6, #10
 800a074:	e7a9      	b.n	8009fca <_strtol_l.isra.0+0x4a>
	...

0800a078 <_strtol_r>:
 800a078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a07a:	4c06      	ldr	r4, [pc, #24]	; (800a094 <_strtol_r+0x1c>)
 800a07c:	4d06      	ldr	r5, [pc, #24]	; (800a098 <_strtol_r+0x20>)
 800a07e:	6824      	ldr	r4, [r4, #0]
 800a080:	6a24      	ldr	r4, [r4, #32]
 800a082:	2c00      	cmp	r4, #0
 800a084:	bf08      	it	eq
 800a086:	462c      	moveq	r4, r5
 800a088:	9400      	str	r4, [sp, #0]
 800a08a:	f7ff ff79 	bl	8009f80 <_strtol_l.isra.0>
 800a08e:	b003      	add	sp, #12
 800a090:	bd30      	pop	{r4, r5, pc}
 800a092:	bf00      	nop
 800a094:	2000002c 	.word	0x2000002c
 800a098:	20000090 	.word	0x20000090

0800a09c <quorem>:
 800a09c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a0:	6903      	ldr	r3, [r0, #16]
 800a0a2:	690c      	ldr	r4, [r1, #16]
 800a0a4:	42a3      	cmp	r3, r4
 800a0a6:	4680      	mov	r8, r0
 800a0a8:	f2c0 8082 	blt.w	800a1b0 <quorem+0x114>
 800a0ac:	3c01      	subs	r4, #1
 800a0ae:	f101 0714 	add.w	r7, r1, #20
 800a0b2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a0b6:	f100 0614 	add.w	r6, r0, #20
 800a0ba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a0be:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a0c2:	eb06 030c 	add.w	r3, r6, ip
 800a0c6:	3501      	adds	r5, #1
 800a0c8:	eb07 090c 	add.w	r9, r7, ip
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	fbb0 f5f5 	udiv	r5, r0, r5
 800a0d2:	b395      	cbz	r5, 800a13a <quorem+0x9e>
 800a0d4:	f04f 0a00 	mov.w	sl, #0
 800a0d8:	4638      	mov	r0, r7
 800a0da:	46b6      	mov	lr, r6
 800a0dc:	46d3      	mov	fp, sl
 800a0de:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0e2:	b293      	uxth	r3, r2
 800a0e4:	fb05 a303 	mla	r3, r5, r3, sl
 800a0e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	ebab 0303 	sub.w	r3, fp, r3
 800a0f2:	0c12      	lsrs	r2, r2, #16
 800a0f4:	f8de b000 	ldr.w	fp, [lr]
 800a0f8:	fb05 a202 	mla	r2, r5, r2, sl
 800a0fc:	fa13 f38b 	uxtah	r3, r3, fp
 800a100:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a104:	fa1f fb82 	uxth.w	fp, r2
 800a108:	f8de 2000 	ldr.w	r2, [lr]
 800a10c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a110:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a114:	b29b      	uxth	r3, r3
 800a116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a11a:	4581      	cmp	r9, r0
 800a11c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a120:	f84e 3b04 	str.w	r3, [lr], #4
 800a124:	d2db      	bcs.n	800a0de <quorem+0x42>
 800a126:	f856 300c 	ldr.w	r3, [r6, ip]
 800a12a:	b933      	cbnz	r3, 800a13a <quorem+0x9e>
 800a12c:	9b01      	ldr	r3, [sp, #4]
 800a12e:	3b04      	subs	r3, #4
 800a130:	429e      	cmp	r6, r3
 800a132:	461a      	mov	r2, r3
 800a134:	d330      	bcc.n	800a198 <quorem+0xfc>
 800a136:	f8c8 4010 	str.w	r4, [r8, #16]
 800a13a:	4640      	mov	r0, r8
 800a13c:	f001 fb9c 	bl	800b878 <__mcmp>
 800a140:	2800      	cmp	r0, #0
 800a142:	db25      	blt.n	800a190 <quorem+0xf4>
 800a144:	3501      	adds	r5, #1
 800a146:	4630      	mov	r0, r6
 800a148:	f04f 0c00 	mov.w	ip, #0
 800a14c:	f857 2b04 	ldr.w	r2, [r7], #4
 800a150:	f8d0 e000 	ldr.w	lr, [r0]
 800a154:	b293      	uxth	r3, r2
 800a156:	ebac 0303 	sub.w	r3, ip, r3
 800a15a:	0c12      	lsrs	r2, r2, #16
 800a15c:	fa13 f38e 	uxtah	r3, r3, lr
 800a160:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a164:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a168:	b29b      	uxth	r3, r3
 800a16a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a16e:	45b9      	cmp	r9, r7
 800a170:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a174:	f840 3b04 	str.w	r3, [r0], #4
 800a178:	d2e8      	bcs.n	800a14c <quorem+0xb0>
 800a17a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a17e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a182:	b92a      	cbnz	r2, 800a190 <quorem+0xf4>
 800a184:	3b04      	subs	r3, #4
 800a186:	429e      	cmp	r6, r3
 800a188:	461a      	mov	r2, r3
 800a18a:	d30b      	bcc.n	800a1a4 <quorem+0x108>
 800a18c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a190:	4628      	mov	r0, r5
 800a192:	b003      	add	sp, #12
 800a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	6812      	ldr	r2, [r2, #0]
 800a19a:	3b04      	subs	r3, #4
 800a19c:	2a00      	cmp	r2, #0
 800a19e:	d1ca      	bne.n	800a136 <quorem+0x9a>
 800a1a0:	3c01      	subs	r4, #1
 800a1a2:	e7c5      	b.n	800a130 <quorem+0x94>
 800a1a4:	6812      	ldr	r2, [r2, #0]
 800a1a6:	3b04      	subs	r3, #4
 800a1a8:	2a00      	cmp	r2, #0
 800a1aa:	d1ef      	bne.n	800a18c <quorem+0xf0>
 800a1ac:	3c01      	subs	r4, #1
 800a1ae:	e7ea      	b.n	800a186 <quorem+0xea>
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	e7ee      	b.n	800a192 <quorem+0xf6>
 800a1b4:	0000      	movs	r0, r0
	...

0800a1b8 <_dtoa_r>:
 800a1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1bc:	ec57 6b10 	vmov	r6, r7, d0
 800a1c0:	b097      	sub	sp, #92	; 0x5c
 800a1c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a1c4:	9106      	str	r1, [sp, #24]
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a1ca:	9312      	str	r3, [sp, #72]	; 0x48
 800a1cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a1d0:	e9cd 6700 	strd	r6, r7, [sp]
 800a1d4:	b93d      	cbnz	r5, 800a1e6 <_dtoa_r+0x2e>
 800a1d6:	2010      	movs	r0, #16
 800a1d8:	f001 f8e0 	bl	800b39c <malloc>
 800a1dc:	6260      	str	r0, [r4, #36]	; 0x24
 800a1de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a1e2:	6005      	str	r5, [r0, #0]
 800a1e4:	60c5      	str	r5, [r0, #12]
 800a1e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1e8:	6819      	ldr	r1, [r3, #0]
 800a1ea:	b151      	cbz	r1, 800a202 <_dtoa_r+0x4a>
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	604a      	str	r2, [r1, #4]
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4093      	lsls	r3, r2
 800a1f4:	608b      	str	r3, [r1, #8]
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f001 f91e 	bl	800b438 <_Bfree>
 800a1fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1fe:	2200      	movs	r2, #0
 800a200:	601a      	str	r2, [r3, #0]
 800a202:	1e3b      	subs	r3, r7, #0
 800a204:	bfbb      	ittet	lt
 800a206:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a20a:	9301      	strlt	r3, [sp, #4]
 800a20c:	2300      	movge	r3, #0
 800a20e:	2201      	movlt	r2, #1
 800a210:	bfac      	ite	ge
 800a212:	f8c8 3000 	strge.w	r3, [r8]
 800a216:	f8c8 2000 	strlt.w	r2, [r8]
 800a21a:	4baf      	ldr	r3, [pc, #700]	; (800a4d8 <_dtoa_r+0x320>)
 800a21c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a220:	ea33 0308 	bics.w	r3, r3, r8
 800a224:	d114      	bne.n	800a250 <_dtoa_r+0x98>
 800a226:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a228:	f242 730f 	movw	r3, #9999	; 0x270f
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	9b00      	ldr	r3, [sp, #0]
 800a230:	b923      	cbnz	r3, 800a23c <_dtoa_r+0x84>
 800a232:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a236:	2800      	cmp	r0, #0
 800a238:	f000 8542 	beq.w	800acc0 <_dtoa_r+0xb08>
 800a23c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a23e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a4ec <_dtoa_r+0x334>
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 8544 	beq.w	800acd0 <_dtoa_r+0xb18>
 800a248:	f10b 0303 	add.w	r3, fp, #3
 800a24c:	f000 bd3e 	b.w	800accc <_dtoa_r+0xb14>
 800a250:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a254:	2200      	movs	r2, #0
 800a256:	2300      	movs	r3, #0
 800a258:	4630      	mov	r0, r6
 800a25a:	4639      	mov	r1, r7
 800a25c:	f7f6 fc5c 	bl	8000b18 <__aeabi_dcmpeq>
 800a260:	4681      	mov	r9, r0
 800a262:	b168      	cbz	r0, 800a280 <_dtoa_r+0xc8>
 800a264:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a266:	2301      	movs	r3, #1
 800a268:	6013      	str	r3, [r2, #0]
 800a26a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 8524 	beq.w	800acba <_dtoa_r+0xb02>
 800a272:	4b9a      	ldr	r3, [pc, #616]	; (800a4dc <_dtoa_r+0x324>)
 800a274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a276:	f103 3bff 	add.w	fp, r3, #4294967295
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	f000 bd28 	b.w	800acd0 <_dtoa_r+0xb18>
 800a280:	aa14      	add	r2, sp, #80	; 0x50
 800a282:	a915      	add	r1, sp, #84	; 0x54
 800a284:	ec47 6b10 	vmov	d0, r6, r7
 800a288:	4620      	mov	r0, r4
 800a28a:	f001 fbe3 	bl	800ba54 <__d2b>
 800a28e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a292:	9004      	str	r0, [sp, #16]
 800a294:	2d00      	cmp	r5, #0
 800a296:	d07c      	beq.n	800a392 <_dtoa_r+0x1da>
 800a298:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a29c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a2a0:	46b2      	mov	sl, r6
 800a2a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a2a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a2aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	4b8b      	ldr	r3, [pc, #556]	; (800a4e0 <_dtoa_r+0x328>)
 800a2b2:	4650      	mov	r0, sl
 800a2b4:	4659      	mov	r1, fp
 800a2b6:	f7f6 f80f 	bl	80002d8 <__aeabi_dsub>
 800a2ba:	a381      	add	r3, pc, #516	; (adr r3, 800a4c0 <_dtoa_r+0x308>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f7f6 f9c2 	bl	8000648 <__aeabi_dmul>
 800a2c4:	a380      	add	r3, pc, #512	; (adr r3, 800a4c8 <_dtoa_r+0x310>)
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	f7f6 f807 	bl	80002dc <__adddf3>
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	4628      	mov	r0, r5
 800a2d2:	460f      	mov	r7, r1
 800a2d4:	f7f6 f94e 	bl	8000574 <__aeabi_i2d>
 800a2d8:	a37d      	add	r3, pc, #500	; (adr r3, 800a4d0 <_dtoa_r+0x318>)
 800a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2de:	f7f6 f9b3 	bl	8000648 <__aeabi_dmul>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	4639      	mov	r1, r7
 800a2ea:	f7f5 fff7 	bl	80002dc <__adddf3>
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	460f      	mov	r7, r1
 800a2f2:	f7f6 fc59 	bl	8000ba8 <__aeabi_d2iz>
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	4682      	mov	sl, r0
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	4639      	mov	r1, r7
 800a300:	f7f6 fc14 	bl	8000b2c <__aeabi_dcmplt>
 800a304:	b148      	cbz	r0, 800a31a <_dtoa_r+0x162>
 800a306:	4650      	mov	r0, sl
 800a308:	f7f6 f934 	bl	8000574 <__aeabi_i2d>
 800a30c:	4632      	mov	r2, r6
 800a30e:	463b      	mov	r3, r7
 800a310:	f7f6 fc02 	bl	8000b18 <__aeabi_dcmpeq>
 800a314:	b908      	cbnz	r0, 800a31a <_dtoa_r+0x162>
 800a316:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a31a:	f1ba 0f16 	cmp.w	sl, #22
 800a31e:	d859      	bhi.n	800a3d4 <_dtoa_r+0x21c>
 800a320:	4970      	ldr	r1, [pc, #448]	; (800a4e4 <_dtoa_r+0x32c>)
 800a322:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a326:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a32a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a32e:	f7f6 fc1b 	bl	8000b68 <__aeabi_dcmpgt>
 800a332:	2800      	cmp	r0, #0
 800a334:	d050      	beq.n	800a3d8 <_dtoa_r+0x220>
 800a336:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a33a:	2300      	movs	r3, #0
 800a33c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a33e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a340:	1b5d      	subs	r5, r3, r5
 800a342:	f1b5 0801 	subs.w	r8, r5, #1
 800a346:	bf49      	itett	mi
 800a348:	f1c5 0301 	rsbmi	r3, r5, #1
 800a34c:	2300      	movpl	r3, #0
 800a34e:	9305      	strmi	r3, [sp, #20]
 800a350:	f04f 0800 	movmi.w	r8, #0
 800a354:	bf58      	it	pl
 800a356:	9305      	strpl	r3, [sp, #20]
 800a358:	f1ba 0f00 	cmp.w	sl, #0
 800a35c:	db3e      	blt.n	800a3dc <_dtoa_r+0x224>
 800a35e:	2300      	movs	r3, #0
 800a360:	44d0      	add	r8, sl
 800a362:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a366:	9307      	str	r3, [sp, #28]
 800a368:	9b06      	ldr	r3, [sp, #24]
 800a36a:	2b09      	cmp	r3, #9
 800a36c:	f200 8090 	bhi.w	800a490 <_dtoa_r+0x2d8>
 800a370:	2b05      	cmp	r3, #5
 800a372:	bfc4      	itt	gt
 800a374:	3b04      	subgt	r3, #4
 800a376:	9306      	strgt	r3, [sp, #24]
 800a378:	9b06      	ldr	r3, [sp, #24]
 800a37a:	f1a3 0302 	sub.w	r3, r3, #2
 800a37e:	bfcc      	ite	gt
 800a380:	2500      	movgt	r5, #0
 800a382:	2501      	movle	r5, #1
 800a384:	2b03      	cmp	r3, #3
 800a386:	f200 808f 	bhi.w	800a4a8 <_dtoa_r+0x2f0>
 800a38a:	e8df f003 	tbb	[pc, r3]
 800a38e:	7f7d      	.short	0x7f7d
 800a390:	7131      	.short	0x7131
 800a392:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a396:	441d      	add	r5, r3
 800a398:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a39c:	2820      	cmp	r0, #32
 800a39e:	dd13      	ble.n	800a3c8 <_dtoa_r+0x210>
 800a3a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a3a4:	9b00      	ldr	r3, [sp, #0]
 800a3a6:	fa08 f800 	lsl.w	r8, r8, r0
 800a3aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a3ae:	fa23 f000 	lsr.w	r0, r3, r0
 800a3b2:	ea48 0000 	orr.w	r0, r8, r0
 800a3b6:	f7f6 f8cd 	bl	8000554 <__aeabi_ui2d>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	4682      	mov	sl, r0
 800a3be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a3c2:	3d01      	subs	r5, #1
 800a3c4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a3c6:	e772      	b.n	800a2ae <_dtoa_r+0xf6>
 800a3c8:	9b00      	ldr	r3, [sp, #0]
 800a3ca:	f1c0 0020 	rsb	r0, r0, #32
 800a3ce:	fa03 f000 	lsl.w	r0, r3, r0
 800a3d2:	e7f0      	b.n	800a3b6 <_dtoa_r+0x1fe>
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e7b1      	b.n	800a33c <_dtoa_r+0x184>
 800a3d8:	900f      	str	r0, [sp, #60]	; 0x3c
 800a3da:	e7b0      	b.n	800a33e <_dtoa_r+0x186>
 800a3dc:	9b05      	ldr	r3, [sp, #20]
 800a3de:	eba3 030a 	sub.w	r3, r3, sl
 800a3e2:	9305      	str	r3, [sp, #20]
 800a3e4:	f1ca 0300 	rsb	r3, sl, #0
 800a3e8:	9307      	str	r3, [sp, #28]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	930e      	str	r3, [sp, #56]	; 0x38
 800a3ee:	e7bb      	b.n	800a368 <_dtoa_r+0x1b0>
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a3f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	dd59      	ble.n	800a4ae <_dtoa_r+0x2f6>
 800a3fa:	9302      	str	r3, [sp, #8]
 800a3fc:	4699      	mov	r9, r3
 800a3fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a400:	2200      	movs	r2, #0
 800a402:	6072      	str	r2, [r6, #4]
 800a404:	2204      	movs	r2, #4
 800a406:	f102 0014 	add.w	r0, r2, #20
 800a40a:	4298      	cmp	r0, r3
 800a40c:	6871      	ldr	r1, [r6, #4]
 800a40e:	d953      	bls.n	800a4b8 <_dtoa_r+0x300>
 800a410:	4620      	mov	r0, r4
 800a412:	f000 ffdd 	bl	800b3d0 <_Balloc>
 800a416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a418:	6030      	str	r0, [r6, #0]
 800a41a:	f1b9 0f0e 	cmp.w	r9, #14
 800a41e:	f8d3 b000 	ldr.w	fp, [r3]
 800a422:	f200 80e6 	bhi.w	800a5f2 <_dtoa_r+0x43a>
 800a426:	2d00      	cmp	r5, #0
 800a428:	f000 80e3 	beq.w	800a5f2 <_dtoa_r+0x43a>
 800a42c:	ed9d 7b00 	vldr	d7, [sp]
 800a430:	f1ba 0f00 	cmp.w	sl, #0
 800a434:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a438:	dd74      	ble.n	800a524 <_dtoa_r+0x36c>
 800a43a:	4a2a      	ldr	r2, [pc, #168]	; (800a4e4 <_dtoa_r+0x32c>)
 800a43c:	f00a 030f 	and.w	r3, sl, #15
 800a440:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a444:	ed93 7b00 	vldr	d7, [r3]
 800a448:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a44c:	06f0      	lsls	r0, r6, #27
 800a44e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a452:	d565      	bpl.n	800a520 <_dtoa_r+0x368>
 800a454:	4b24      	ldr	r3, [pc, #144]	; (800a4e8 <_dtoa_r+0x330>)
 800a456:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a45a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a45e:	f7f6 fa1d 	bl	800089c <__aeabi_ddiv>
 800a462:	e9cd 0100 	strd	r0, r1, [sp]
 800a466:	f006 060f 	and.w	r6, r6, #15
 800a46a:	2503      	movs	r5, #3
 800a46c:	4f1e      	ldr	r7, [pc, #120]	; (800a4e8 <_dtoa_r+0x330>)
 800a46e:	e04c      	b.n	800a50a <_dtoa_r+0x352>
 800a470:	2301      	movs	r3, #1
 800a472:	930a      	str	r3, [sp, #40]	; 0x28
 800a474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a476:	4453      	add	r3, sl
 800a478:	f103 0901 	add.w	r9, r3, #1
 800a47c:	9302      	str	r3, [sp, #8]
 800a47e:	464b      	mov	r3, r9
 800a480:	2b01      	cmp	r3, #1
 800a482:	bfb8      	it	lt
 800a484:	2301      	movlt	r3, #1
 800a486:	e7ba      	b.n	800a3fe <_dtoa_r+0x246>
 800a488:	2300      	movs	r3, #0
 800a48a:	e7b2      	b.n	800a3f2 <_dtoa_r+0x23a>
 800a48c:	2300      	movs	r3, #0
 800a48e:	e7f0      	b.n	800a472 <_dtoa_r+0x2ba>
 800a490:	2501      	movs	r5, #1
 800a492:	2300      	movs	r3, #0
 800a494:	9306      	str	r3, [sp, #24]
 800a496:	950a      	str	r5, [sp, #40]	; 0x28
 800a498:	f04f 33ff 	mov.w	r3, #4294967295
 800a49c:	9302      	str	r3, [sp, #8]
 800a49e:	4699      	mov	r9, r3
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2312      	movs	r3, #18
 800a4a4:	920b      	str	r2, [sp, #44]	; 0x2c
 800a4a6:	e7aa      	b.n	800a3fe <_dtoa_r+0x246>
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a4ac:	e7f4      	b.n	800a498 <_dtoa_r+0x2e0>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	9302      	str	r3, [sp, #8]
 800a4b2:	4699      	mov	r9, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	e7f5      	b.n	800a4a4 <_dtoa_r+0x2ec>
 800a4b8:	3101      	adds	r1, #1
 800a4ba:	6071      	str	r1, [r6, #4]
 800a4bc:	0052      	lsls	r2, r2, #1
 800a4be:	e7a2      	b.n	800a406 <_dtoa_r+0x24e>
 800a4c0:	636f4361 	.word	0x636f4361
 800a4c4:	3fd287a7 	.word	0x3fd287a7
 800a4c8:	8b60c8b3 	.word	0x8b60c8b3
 800a4cc:	3fc68a28 	.word	0x3fc68a28
 800a4d0:	509f79fb 	.word	0x509f79fb
 800a4d4:	3fd34413 	.word	0x3fd34413
 800a4d8:	7ff00000 	.word	0x7ff00000
 800a4dc:	0800ca39 	.word	0x0800ca39
 800a4e0:	3ff80000 	.word	0x3ff80000
 800a4e4:	0800caf8 	.word	0x0800caf8
 800a4e8:	0800cad0 	.word	0x0800cad0
 800a4ec:	0800cac1 	.word	0x0800cac1
 800a4f0:	07f1      	lsls	r1, r6, #31
 800a4f2:	d508      	bpl.n	800a506 <_dtoa_r+0x34e>
 800a4f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a4f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4fc:	f7f6 f8a4 	bl	8000648 <__aeabi_dmul>
 800a500:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a504:	3501      	adds	r5, #1
 800a506:	1076      	asrs	r6, r6, #1
 800a508:	3708      	adds	r7, #8
 800a50a:	2e00      	cmp	r6, #0
 800a50c:	d1f0      	bne.n	800a4f0 <_dtoa_r+0x338>
 800a50e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a512:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a516:	f7f6 f9c1 	bl	800089c <__aeabi_ddiv>
 800a51a:	e9cd 0100 	strd	r0, r1, [sp]
 800a51e:	e01a      	b.n	800a556 <_dtoa_r+0x39e>
 800a520:	2502      	movs	r5, #2
 800a522:	e7a3      	b.n	800a46c <_dtoa_r+0x2b4>
 800a524:	f000 80a0 	beq.w	800a668 <_dtoa_r+0x4b0>
 800a528:	f1ca 0600 	rsb	r6, sl, #0
 800a52c:	4b9f      	ldr	r3, [pc, #636]	; (800a7ac <_dtoa_r+0x5f4>)
 800a52e:	4fa0      	ldr	r7, [pc, #640]	; (800a7b0 <_dtoa_r+0x5f8>)
 800a530:	f006 020f 	and.w	r2, r6, #15
 800a534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a540:	f7f6 f882 	bl	8000648 <__aeabi_dmul>
 800a544:	e9cd 0100 	strd	r0, r1, [sp]
 800a548:	1136      	asrs	r6, r6, #4
 800a54a:	2300      	movs	r3, #0
 800a54c:	2502      	movs	r5, #2
 800a54e:	2e00      	cmp	r6, #0
 800a550:	d17f      	bne.n	800a652 <_dtoa_r+0x49a>
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1e1      	bne.n	800a51a <_dtoa_r+0x362>
 800a556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f000 8087 	beq.w	800a66c <_dtoa_r+0x4b4>
 800a55e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a562:	2200      	movs	r2, #0
 800a564:	4b93      	ldr	r3, [pc, #588]	; (800a7b4 <_dtoa_r+0x5fc>)
 800a566:	4630      	mov	r0, r6
 800a568:	4639      	mov	r1, r7
 800a56a:	f7f6 fadf 	bl	8000b2c <__aeabi_dcmplt>
 800a56e:	2800      	cmp	r0, #0
 800a570:	d07c      	beq.n	800a66c <_dtoa_r+0x4b4>
 800a572:	f1b9 0f00 	cmp.w	r9, #0
 800a576:	d079      	beq.n	800a66c <_dtoa_r+0x4b4>
 800a578:	9b02      	ldr	r3, [sp, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	dd35      	ble.n	800a5ea <_dtoa_r+0x432>
 800a57e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a582:	9308      	str	r3, [sp, #32]
 800a584:	4639      	mov	r1, r7
 800a586:	2200      	movs	r2, #0
 800a588:	4b8b      	ldr	r3, [pc, #556]	; (800a7b8 <_dtoa_r+0x600>)
 800a58a:	4630      	mov	r0, r6
 800a58c:	f7f6 f85c 	bl	8000648 <__aeabi_dmul>
 800a590:	e9cd 0100 	strd	r0, r1, [sp]
 800a594:	9f02      	ldr	r7, [sp, #8]
 800a596:	3501      	adds	r5, #1
 800a598:	4628      	mov	r0, r5
 800a59a:	f7f5 ffeb 	bl	8000574 <__aeabi_i2d>
 800a59e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5a2:	f7f6 f851 	bl	8000648 <__aeabi_dmul>
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	4b84      	ldr	r3, [pc, #528]	; (800a7bc <_dtoa_r+0x604>)
 800a5aa:	f7f5 fe97 	bl	80002dc <__adddf3>
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a5b4:	2f00      	cmp	r7, #0
 800a5b6:	d15d      	bne.n	800a674 <_dtoa_r+0x4bc>
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	4b81      	ldr	r3, [pc, #516]	; (800a7c0 <_dtoa_r+0x608>)
 800a5bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5c0:	f7f5 fe8a 	bl	80002d8 <__aeabi_dsub>
 800a5c4:	462a      	mov	r2, r5
 800a5c6:	4633      	mov	r3, r6
 800a5c8:	e9cd 0100 	strd	r0, r1, [sp]
 800a5cc:	f7f6 facc 	bl	8000b68 <__aeabi_dcmpgt>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	f040 8288 	bne.w	800aae6 <_dtoa_r+0x92e>
 800a5d6:	462a      	mov	r2, r5
 800a5d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a5dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5e0:	f7f6 faa4 	bl	8000b2c <__aeabi_dcmplt>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	f040 827c 	bne.w	800aae2 <_dtoa_r+0x92a>
 800a5ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5ee:	e9cd 2300 	strd	r2, r3, [sp]
 800a5f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f2c0 8150 	blt.w	800a89a <_dtoa_r+0x6e2>
 800a5fa:	f1ba 0f0e 	cmp.w	sl, #14
 800a5fe:	f300 814c 	bgt.w	800a89a <_dtoa_r+0x6e2>
 800a602:	4b6a      	ldr	r3, [pc, #424]	; (800a7ac <_dtoa_r+0x5f4>)
 800a604:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a608:	ed93 7b00 	vldr	d7, [r3]
 800a60c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a614:	f280 80d8 	bge.w	800a7c8 <_dtoa_r+0x610>
 800a618:	f1b9 0f00 	cmp.w	r9, #0
 800a61c:	f300 80d4 	bgt.w	800a7c8 <_dtoa_r+0x610>
 800a620:	f040 825e 	bne.w	800aae0 <_dtoa_r+0x928>
 800a624:	2200      	movs	r2, #0
 800a626:	4b66      	ldr	r3, [pc, #408]	; (800a7c0 <_dtoa_r+0x608>)
 800a628:	ec51 0b17 	vmov	r0, r1, d7
 800a62c:	f7f6 f80c 	bl	8000648 <__aeabi_dmul>
 800a630:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a634:	f7f6 fa8e 	bl	8000b54 <__aeabi_dcmpge>
 800a638:	464f      	mov	r7, r9
 800a63a:	464e      	mov	r6, r9
 800a63c:	2800      	cmp	r0, #0
 800a63e:	f040 8234 	bne.w	800aaaa <_dtoa_r+0x8f2>
 800a642:	2331      	movs	r3, #49	; 0x31
 800a644:	f10b 0501 	add.w	r5, fp, #1
 800a648:	f88b 3000 	strb.w	r3, [fp]
 800a64c:	f10a 0a01 	add.w	sl, sl, #1
 800a650:	e22f      	b.n	800aab2 <_dtoa_r+0x8fa>
 800a652:	07f2      	lsls	r2, r6, #31
 800a654:	d505      	bpl.n	800a662 <_dtoa_r+0x4aa>
 800a656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a65a:	f7f5 fff5 	bl	8000648 <__aeabi_dmul>
 800a65e:	3501      	adds	r5, #1
 800a660:	2301      	movs	r3, #1
 800a662:	1076      	asrs	r6, r6, #1
 800a664:	3708      	adds	r7, #8
 800a666:	e772      	b.n	800a54e <_dtoa_r+0x396>
 800a668:	2502      	movs	r5, #2
 800a66a:	e774      	b.n	800a556 <_dtoa_r+0x39e>
 800a66c:	f8cd a020 	str.w	sl, [sp, #32]
 800a670:	464f      	mov	r7, r9
 800a672:	e791      	b.n	800a598 <_dtoa_r+0x3e0>
 800a674:	4b4d      	ldr	r3, [pc, #308]	; (800a7ac <_dtoa_r+0x5f4>)
 800a676:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a67a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a680:	2b00      	cmp	r3, #0
 800a682:	d047      	beq.n	800a714 <_dtoa_r+0x55c>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	2000      	movs	r0, #0
 800a68a:	494e      	ldr	r1, [pc, #312]	; (800a7c4 <_dtoa_r+0x60c>)
 800a68c:	f7f6 f906 	bl	800089c <__aeabi_ddiv>
 800a690:	462a      	mov	r2, r5
 800a692:	4633      	mov	r3, r6
 800a694:	f7f5 fe20 	bl	80002d8 <__aeabi_dsub>
 800a698:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a69c:	465d      	mov	r5, fp
 800a69e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6a2:	f7f6 fa81 	bl	8000ba8 <__aeabi_d2iz>
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	f7f5 ff64 	bl	8000574 <__aeabi_i2d>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6b4:	f7f5 fe10 	bl	80002d8 <__aeabi_dsub>
 800a6b8:	3630      	adds	r6, #48	; 0x30
 800a6ba:	f805 6b01 	strb.w	r6, [r5], #1
 800a6be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a6c2:	e9cd 0100 	strd	r0, r1, [sp]
 800a6c6:	f7f6 fa31 	bl	8000b2c <__aeabi_dcmplt>
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	d163      	bne.n	800a796 <_dtoa_r+0x5de>
 800a6ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6d2:	2000      	movs	r0, #0
 800a6d4:	4937      	ldr	r1, [pc, #220]	; (800a7b4 <_dtoa_r+0x5fc>)
 800a6d6:	f7f5 fdff 	bl	80002d8 <__aeabi_dsub>
 800a6da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a6de:	f7f6 fa25 	bl	8000b2c <__aeabi_dcmplt>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	f040 80b7 	bne.w	800a856 <_dtoa_r+0x69e>
 800a6e8:	eba5 030b 	sub.w	r3, r5, fp
 800a6ec:	429f      	cmp	r7, r3
 800a6ee:	f77f af7c 	ble.w	800a5ea <_dtoa_r+0x432>
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	4b30      	ldr	r3, [pc, #192]	; (800a7b8 <_dtoa_r+0x600>)
 800a6f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6fa:	f7f5 ffa5 	bl	8000648 <__aeabi_dmul>
 800a6fe:	2200      	movs	r2, #0
 800a700:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a704:	4b2c      	ldr	r3, [pc, #176]	; (800a7b8 <_dtoa_r+0x600>)
 800a706:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a70a:	f7f5 ff9d 	bl	8000648 <__aeabi_dmul>
 800a70e:	e9cd 0100 	strd	r0, r1, [sp]
 800a712:	e7c4      	b.n	800a69e <_dtoa_r+0x4e6>
 800a714:	462a      	mov	r2, r5
 800a716:	4633      	mov	r3, r6
 800a718:	f7f5 ff96 	bl	8000648 <__aeabi_dmul>
 800a71c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a720:	eb0b 0507 	add.w	r5, fp, r7
 800a724:	465e      	mov	r6, fp
 800a726:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a72a:	f7f6 fa3d 	bl	8000ba8 <__aeabi_d2iz>
 800a72e:	4607      	mov	r7, r0
 800a730:	f7f5 ff20 	bl	8000574 <__aeabi_i2d>
 800a734:	3730      	adds	r7, #48	; 0x30
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a73e:	f7f5 fdcb 	bl	80002d8 <__aeabi_dsub>
 800a742:	f806 7b01 	strb.w	r7, [r6], #1
 800a746:	42ae      	cmp	r6, r5
 800a748:	e9cd 0100 	strd	r0, r1, [sp]
 800a74c:	f04f 0200 	mov.w	r2, #0
 800a750:	d126      	bne.n	800a7a0 <_dtoa_r+0x5e8>
 800a752:	4b1c      	ldr	r3, [pc, #112]	; (800a7c4 <_dtoa_r+0x60c>)
 800a754:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a758:	f7f5 fdc0 	bl	80002dc <__adddf3>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a764:	f7f6 fa00 	bl	8000b68 <__aeabi_dcmpgt>
 800a768:	2800      	cmp	r0, #0
 800a76a:	d174      	bne.n	800a856 <_dtoa_r+0x69e>
 800a76c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a770:	2000      	movs	r0, #0
 800a772:	4914      	ldr	r1, [pc, #80]	; (800a7c4 <_dtoa_r+0x60c>)
 800a774:	f7f5 fdb0 	bl	80002d8 <__aeabi_dsub>
 800a778:	4602      	mov	r2, r0
 800a77a:	460b      	mov	r3, r1
 800a77c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a780:	f7f6 f9d4 	bl	8000b2c <__aeabi_dcmplt>
 800a784:	2800      	cmp	r0, #0
 800a786:	f43f af30 	beq.w	800a5ea <_dtoa_r+0x432>
 800a78a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a78e:	2b30      	cmp	r3, #48	; 0x30
 800a790:	f105 32ff 	add.w	r2, r5, #4294967295
 800a794:	d002      	beq.n	800a79c <_dtoa_r+0x5e4>
 800a796:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a79a:	e04a      	b.n	800a832 <_dtoa_r+0x67a>
 800a79c:	4615      	mov	r5, r2
 800a79e:	e7f4      	b.n	800a78a <_dtoa_r+0x5d2>
 800a7a0:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <_dtoa_r+0x600>)
 800a7a2:	f7f5 ff51 	bl	8000648 <__aeabi_dmul>
 800a7a6:	e9cd 0100 	strd	r0, r1, [sp]
 800a7aa:	e7bc      	b.n	800a726 <_dtoa_r+0x56e>
 800a7ac:	0800caf8 	.word	0x0800caf8
 800a7b0:	0800cad0 	.word	0x0800cad0
 800a7b4:	3ff00000 	.word	0x3ff00000
 800a7b8:	40240000 	.word	0x40240000
 800a7bc:	401c0000 	.word	0x401c0000
 800a7c0:	40140000 	.word	0x40140000
 800a7c4:	3fe00000 	.word	0x3fe00000
 800a7c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a7cc:	465d      	mov	r5, fp
 800a7ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	f7f6 f861 	bl	800089c <__aeabi_ddiv>
 800a7da:	f7f6 f9e5 	bl	8000ba8 <__aeabi_d2iz>
 800a7de:	4680      	mov	r8, r0
 800a7e0:	f7f5 fec8 	bl	8000574 <__aeabi_i2d>
 800a7e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7e8:	f7f5 ff2e 	bl	8000648 <__aeabi_dmul>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a7f8:	f7f5 fd6e 	bl	80002d8 <__aeabi_dsub>
 800a7fc:	f805 6b01 	strb.w	r6, [r5], #1
 800a800:	eba5 060b 	sub.w	r6, r5, fp
 800a804:	45b1      	cmp	r9, r6
 800a806:	4602      	mov	r2, r0
 800a808:	460b      	mov	r3, r1
 800a80a:	d139      	bne.n	800a880 <_dtoa_r+0x6c8>
 800a80c:	f7f5 fd66 	bl	80002dc <__adddf3>
 800a810:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a814:	4606      	mov	r6, r0
 800a816:	460f      	mov	r7, r1
 800a818:	f7f6 f9a6 	bl	8000b68 <__aeabi_dcmpgt>
 800a81c:	b9c8      	cbnz	r0, 800a852 <_dtoa_r+0x69a>
 800a81e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a822:	4630      	mov	r0, r6
 800a824:	4639      	mov	r1, r7
 800a826:	f7f6 f977 	bl	8000b18 <__aeabi_dcmpeq>
 800a82a:	b110      	cbz	r0, 800a832 <_dtoa_r+0x67a>
 800a82c:	f018 0f01 	tst.w	r8, #1
 800a830:	d10f      	bne.n	800a852 <_dtoa_r+0x69a>
 800a832:	9904      	ldr	r1, [sp, #16]
 800a834:	4620      	mov	r0, r4
 800a836:	f000 fdff 	bl	800b438 <_Bfree>
 800a83a:	2300      	movs	r3, #0
 800a83c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a83e:	702b      	strb	r3, [r5, #0]
 800a840:	f10a 0301 	add.w	r3, sl, #1
 800a844:	6013      	str	r3, [r2, #0]
 800a846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f000 8241 	beq.w	800acd0 <_dtoa_r+0xb18>
 800a84e:	601d      	str	r5, [r3, #0]
 800a850:	e23e      	b.n	800acd0 <_dtoa_r+0xb18>
 800a852:	f8cd a020 	str.w	sl, [sp, #32]
 800a856:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a85a:	2a39      	cmp	r2, #57	; 0x39
 800a85c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a860:	d108      	bne.n	800a874 <_dtoa_r+0x6bc>
 800a862:	459b      	cmp	fp, r3
 800a864:	d10a      	bne.n	800a87c <_dtoa_r+0x6c4>
 800a866:	9b08      	ldr	r3, [sp, #32]
 800a868:	3301      	adds	r3, #1
 800a86a:	9308      	str	r3, [sp, #32]
 800a86c:	2330      	movs	r3, #48	; 0x30
 800a86e:	f88b 3000 	strb.w	r3, [fp]
 800a872:	465b      	mov	r3, fp
 800a874:	781a      	ldrb	r2, [r3, #0]
 800a876:	3201      	adds	r2, #1
 800a878:	701a      	strb	r2, [r3, #0]
 800a87a:	e78c      	b.n	800a796 <_dtoa_r+0x5de>
 800a87c:	461d      	mov	r5, r3
 800a87e:	e7ea      	b.n	800a856 <_dtoa_r+0x69e>
 800a880:	2200      	movs	r2, #0
 800a882:	4b9b      	ldr	r3, [pc, #620]	; (800aaf0 <_dtoa_r+0x938>)
 800a884:	f7f5 fee0 	bl	8000648 <__aeabi_dmul>
 800a888:	2200      	movs	r2, #0
 800a88a:	2300      	movs	r3, #0
 800a88c:	4606      	mov	r6, r0
 800a88e:	460f      	mov	r7, r1
 800a890:	f7f6 f942 	bl	8000b18 <__aeabi_dcmpeq>
 800a894:	2800      	cmp	r0, #0
 800a896:	d09a      	beq.n	800a7ce <_dtoa_r+0x616>
 800a898:	e7cb      	b.n	800a832 <_dtoa_r+0x67a>
 800a89a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a89c:	2a00      	cmp	r2, #0
 800a89e:	f000 808b 	beq.w	800a9b8 <_dtoa_r+0x800>
 800a8a2:	9a06      	ldr	r2, [sp, #24]
 800a8a4:	2a01      	cmp	r2, #1
 800a8a6:	dc6e      	bgt.n	800a986 <_dtoa_r+0x7ce>
 800a8a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8aa:	2a00      	cmp	r2, #0
 800a8ac:	d067      	beq.n	800a97e <_dtoa_r+0x7c6>
 800a8ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8b2:	9f07      	ldr	r7, [sp, #28]
 800a8b4:	9d05      	ldr	r5, [sp, #20]
 800a8b6:	9a05      	ldr	r2, [sp, #20]
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	441a      	add	r2, r3
 800a8bc:	4620      	mov	r0, r4
 800a8be:	9205      	str	r2, [sp, #20]
 800a8c0:	4498      	add	r8, r3
 800a8c2:	f000 fe97 	bl	800b5f4 <__i2b>
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	2d00      	cmp	r5, #0
 800a8ca:	dd0c      	ble.n	800a8e6 <_dtoa_r+0x72e>
 800a8cc:	f1b8 0f00 	cmp.w	r8, #0
 800a8d0:	dd09      	ble.n	800a8e6 <_dtoa_r+0x72e>
 800a8d2:	4545      	cmp	r5, r8
 800a8d4:	9a05      	ldr	r2, [sp, #20]
 800a8d6:	462b      	mov	r3, r5
 800a8d8:	bfa8      	it	ge
 800a8da:	4643      	movge	r3, r8
 800a8dc:	1ad2      	subs	r2, r2, r3
 800a8de:	9205      	str	r2, [sp, #20]
 800a8e0:	1aed      	subs	r5, r5, r3
 800a8e2:	eba8 0803 	sub.w	r8, r8, r3
 800a8e6:	9b07      	ldr	r3, [sp, #28]
 800a8e8:	b1eb      	cbz	r3, 800a926 <_dtoa_r+0x76e>
 800a8ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d067      	beq.n	800a9c0 <_dtoa_r+0x808>
 800a8f0:	b18f      	cbz	r7, 800a916 <_dtoa_r+0x75e>
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	463a      	mov	r2, r7
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 ff1c 	bl	800b734 <__pow5mult>
 800a8fc:	9a04      	ldr	r2, [sp, #16]
 800a8fe:	4601      	mov	r1, r0
 800a900:	4606      	mov	r6, r0
 800a902:	4620      	mov	r0, r4
 800a904:	f000 fe7f 	bl	800b606 <__multiply>
 800a908:	9904      	ldr	r1, [sp, #16]
 800a90a:	9008      	str	r0, [sp, #32]
 800a90c:	4620      	mov	r0, r4
 800a90e:	f000 fd93 	bl	800b438 <_Bfree>
 800a912:	9b08      	ldr	r3, [sp, #32]
 800a914:	9304      	str	r3, [sp, #16]
 800a916:	9b07      	ldr	r3, [sp, #28]
 800a918:	1bda      	subs	r2, r3, r7
 800a91a:	d004      	beq.n	800a926 <_dtoa_r+0x76e>
 800a91c:	9904      	ldr	r1, [sp, #16]
 800a91e:	4620      	mov	r0, r4
 800a920:	f000 ff08 	bl	800b734 <__pow5mult>
 800a924:	9004      	str	r0, [sp, #16]
 800a926:	2101      	movs	r1, #1
 800a928:	4620      	mov	r0, r4
 800a92a:	f000 fe63 	bl	800b5f4 <__i2b>
 800a92e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a930:	4607      	mov	r7, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 81d0 	beq.w	800acd8 <_dtoa_r+0xb20>
 800a938:	461a      	mov	r2, r3
 800a93a:	4601      	mov	r1, r0
 800a93c:	4620      	mov	r0, r4
 800a93e:	f000 fef9 	bl	800b734 <__pow5mult>
 800a942:	9b06      	ldr	r3, [sp, #24]
 800a944:	2b01      	cmp	r3, #1
 800a946:	4607      	mov	r7, r0
 800a948:	dc40      	bgt.n	800a9cc <_dtoa_r+0x814>
 800a94a:	9b00      	ldr	r3, [sp, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d139      	bne.n	800a9c4 <_dtoa_r+0x80c>
 800a950:	9b01      	ldr	r3, [sp, #4]
 800a952:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a956:	2b00      	cmp	r3, #0
 800a958:	d136      	bne.n	800a9c8 <_dtoa_r+0x810>
 800a95a:	9b01      	ldr	r3, [sp, #4]
 800a95c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a960:	0d1b      	lsrs	r3, r3, #20
 800a962:	051b      	lsls	r3, r3, #20
 800a964:	b12b      	cbz	r3, 800a972 <_dtoa_r+0x7ba>
 800a966:	9b05      	ldr	r3, [sp, #20]
 800a968:	3301      	adds	r3, #1
 800a96a:	9305      	str	r3, [sp, #20]
 800a96c:	f108 0801 	add.w	r8, r8, #1
 800a970:	2301      	movs	r3, #1
 800a972:	9307      	str	r3, [sp, #28]
 800a974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a976:	2b00      	cmp	r3, #0
 800a978:	d12a      	bne.n	800a9d0 <_dtoa_r+0x818>
 800a97a:	2001      	movs	r0, #1
 800a97c:	e030      	b.n	800a9e0 <_dtoa_r+0x828>
 800a97e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a980:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a984:	e795      	b.n	800a8b2 <_dtoa_r+0x6fa>
 800a986:	9b07      	ldr	r3, [sp, #28]
 800a988:	f109 37ff 	add.w	r7, r9, #4294967295
 800a98c:	42bb      	cmp	r3, r7
 800a98e:	bfbf      	itttt	lt
 800a990:	9b07      	ldrlt	r3, [sp, #28]
 800a992:	9707      	strlt	r7, [sp, #28]
 800a994:	1afa      	sublt	r2, r7, r3
 800a996:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a998:	bfbb      	ittet	lt
 800a99a:	189b      	addlt	r3, r3, r2
 800a99c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a99e:	1bdf      	subge	r7, r3, r7
 800a9a0:	2700      	movlt	r7, #0
 800a9a2:	f1b9 0f00 	cmp.w	r9, #0
 800a9a6:	bfb5      	itete	lt
 800a9a8:	9b05      	ldrlt	r3, [sp, #20]
 800a9aa:	9d05      	ldrge	r5, [sp, #20]
 800a9ac:	eba3 0509 	sublt.w	r5, r3, r9
 800a9b0:	464b      	movge	r3, r9
 800a9b2:	bfb8      	it	lt
 800a9b4:	2300      	movlt	r3, #0
 800a9b6:	e77e      	b.n	800a8b6 <_dtoa_r+0x6fe>
 800a9b8:	9f07      	ldr	r7, [sp, #28]
 800a9ba:	9d05      	ldr	r5, [sp, #20]
 800a9bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a9be:	e783      	b.n	800a8c8 <_dtoa_r+0x710>
 800a9c0:	9a07      	ldr	r2, [sp, #28]
 800a9c2:	e7ab      	b.n	800a91c <_dtoa_r+0x764>
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	e7d4      	b.n	800a972 <_dtoa_r+0x7ba>
 800a9c8:	9b00      	ldr	r3, [sp, #0]
 800a9ca:	e7d2      	b.n	800a972 <_dtoa_r+0x7ba>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9307      	str	r3, [sp, #28]
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a9d6:	6918      	ldr	r0, [r3, #16]
 800a9d8:	f000 fdbe 	bl	800b558 <__hi0bits>
 800a9dc:	f1c0 0020 	rsb	r0, r0, #32
 800a9e0:	4440      	add	r0, r8
 800a9e2:	f010 001f 	ands.w	r0, r0, #31
 800a9e6:	d047      	beq.n	800aa78 <_dtoa_r+0x8c0>
 800a9e8:	f1c0 0320 	rsb	r3, r0, #32
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	dd3b      	ble.n	800aa68 <_dtoa_r+0x8b0>
 800a9f0:	9b05      	ldr	r3, [sp, #20]
 800a9f2:	f1c0 001c 	rsb	r0, r0, #28
 800a9f6:	4403      	add	r3, r0
 800a9f8:	9305      	str	r3, [sp, #20]
 800a9fa:	4405      	add	r5, r0
 800a9fc:	4480      	add	r8, r0
 800a9fe:	9b05      	ldr	r3, [sp, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	dd05      	ble.n	800aa10 <_dtoa_r+0x858>
 800aa04:	461a      	mov	r2, r3
 800aa06:	9904      	ldr	r1, [sp, #16]
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 fee1 	bl	800b7d0 <__lshift>
 800aa0e:	9004      	str	r0, [sp, #16]
 800aa10:	f1b8 0f00 	cmp.w	r8, #0
 800aa14:	dd05      	ble.n	800aa22 <_dtoa_r+0x86a>
 800aa16:	4639      	mov	r1, r7
 800aa18:	4642      	mov	r2, r8
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f000 fed8 	bl	800b7d0 <__lshift>
 800aa20:	4607      	mov	r7, r0
 800aa22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa24:	b353      	cbz	r3, 800aa7c <_dtoa_r+0x8c4>
 800aa26:	4639      	mov	r1, r7
 800aa28:	9804      	ldr	r0, [sp, #16]
 800aa2a:	f000 ff25 	bl	800b878 <__mcmp>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	da24      	bge.n	800aa7c <_dtoa_r+0x8c4>
 800aa32:	2300      	movs	r3, #0
 800aa34:	220a      	movs	r2, #10
 800aa36:	9904      	ldr	r1, [sp, #16]
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 fd14 	bl	800b466 <__multadd>
 800aa3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa40:	9004      	str	r0, [sp, #16]
 800aa42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f000 814d 	beq.w	800ace6 <_dtoa_r+0xb2e>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4631      	mov	r1, r6
 800aa50:	220a      	movs	r2, #10
 800aa52:	4620      	mov	r0, r4
 800aa54:	f000 fd07 	bl	800b466 <__multadd>
 800aa58:	9b02      	ldr	r3, [sp, #8]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	4606      	mov	r6, r0
 800aa5e:	dc4f      	bgt.n	800ab00 <_dtoa_r+0x948>
 800aa60:	9b06      	ldr	r3, [sp, #24]
 800aa62:	2b02      	cmp	r3, #2
 800aa64:	dd4c      	ble.n	800ab00 <_dtoa_r+0x948>
 800aa66:	e011      	b.n	800aa8c <_dtoa_r+0x8d4>
 800aa68:	d0c9      	beq.n	800a9fe <_dtoa_r+0x846>
 800aa6a:	9a05      	ldr	r2, [sp, #20]
 800aa6c:	331c      	adds	r3, #28
 800aa6e:	441a      	add	r2, r3
 800aa70:	9205      	str	r2, [sp, #20]
 800aa72:	441d      	add	r5, r3
 800aa74:	4498      	add	r8, r3
 800aa76:	e7c2      	b.n	800a9fe <_dtoa_r+0x846>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	e7f6      	b.n	800aa6a <_dtoa_r+0x8b2>
 800aa7c:	f1b9 0f00 	cmp.w	r9, #0
 800aa80:	dc38      	bgt.n	800aaf4 <_dtoa_r+0x93c>
 800aa82:	9b06      	ldr	r3, [sp, #24]
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	dd35      	ble.n	800aaf4 <_dtoa_r+0x93c>
 800aa88:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa8c:	9b02      	ldr	r3, [sp, #8]
 800aa8e:	b963      	cbnz	r3, 800aaaa <_dtoa_r+0x8f2>
 800aa90:	4639      	mov	r1, r7
 800aa92:	2205      	movs	r2, #5
 800aa94:	4620      	mov	r0, r4
 800aa96:	f000 fce6 	bl	800b466 <__multadd>
 800aa9a:	4601      	mov	r1, r0
 800aa9c:	4607      	mov	r7, r0
 800aa9e:	9804      	ldr	r0, [sp, #16]
 800aaa0:	f000 feea 	bl	800b878 <__mcmp>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	f73f adcc 	bgt.w	800a642 <_dtoa_r+0x48a>
 800aaaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaac:	465d      	mov	r5, fp
 800aaae:	ea6f 0a03 	mvn.w	sl, r3
 800aab2:	f04f 0900 	mov.w	r9, #0
 800aab6:	4639      	mov	r1, r7
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 fcbd 	bl	800b438 <_Bfree>
 800aabe:	2e00      	cmp	r6, #0
 800aac0:	f43f aeb7 	beq.w	800a832 <_dtoa_r+0x67a>
 800aac4:	f1b9 0f00 	cmp.w	r9, #0
 800aac8:	d005      	beq.n	800aad6 <_dtoa_r+0x91e>
 800aaca:	45b1      	cmp	r9, r6
 800aacc:	d003      	beq.n	800aad6 <_dtoa_r+0x91e>
 800aace:	4649      	mov	r1, r9
 800aad0:	4620      	mov	r0, r4
 800aad2:	f000 fcb1 	bl	800b438 <_Bfree>
 800aad6:	4631      	mov	r1, r6
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 fcad 	bl	800b438 <_Bfree>
 800aade:	e6a8      	b.n	800a832 <_dtoa_r+0x67a>
 800aae0:	2700      	movs	r7, #0
 800aae2:	463e      	mov	r6, r7
 800aae4:	e7e1      	b.n	800aaaa <_dtoa_r+0x8f2>
 800aae6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aaea:	463e      	mov	r6, r7
 800aaec:	e5a9      	b.n	800a642 <_dtoa_r+0x48a>
 800aaee:	bf00      	nop
 800aaf0:	40240000 	.word	0x40240000
 800aaf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaf6:	f8cd 9008 	str.w	r9, [sp, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 80fa 	beq.w	800acf4 <_dtoa_r+0xb3c>
 800ab00:	2d00      	cmp	r5, #0
 800ab02:	dd05      	ble.n	800ab10 <_dtoa_r+0x958>
 800ab04:	4631      	mov	r1, r6
 800ab06:	462a      	mov	r2, r5
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f000 fe61 	bl	800b7d0 <__lshift>
 800ab0e:	4606      	mov	r6, r0
 800ab10:	9b07      	ldr	r3, [sp, #28]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d04c      	beq.n	800abb0 <_dtoa_r+0x9f8>
 800ab16:	6871      	ldr	r1, [r6, #4]
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f000 fc59 	bl	800b3d0 <_Balloc>
 800ab1e:	6932      	ldr	r2, [r6, #16]
 800ab20:	3202      	adds	r2, #2
 800ab22:	4605      	mov	r5, r0
 800ab24:	0092      	lsls	r2, r2, #2
 800ab26:	f106 010c 	add.w	r1, r6, #12
 800ab2a:	300c      	adds	r0, #12
 800ab2c:	f7fd fd2a 	bl	8008584 <memcpy>
 800ab30:	2201      	movs	r2, #1
 800ab32:	4629      	mov	r1, r5
 800ab34:	4620      	mov	r0, r4
 800ab36:	f000 fe4b 	bl	800b7d0 <__lshift>
 800ab3a:	9b00      	ldr	r3, [sp, #0]
 800ab3c:	f8cd b014 	str.w	fp, [sp, #20]
 800ab40:	f003 0301 	and.w	r3, r3, #1
 800ab44:	46b1      	mov	r9, r6
 800ab46:	9307      	str	r3, [sp, #28]
 800ab48:	4606      	mov	r6, r0
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	9804      	ldr	r0, [sp, #16]
 800ab4e:	f7ff faa5 	bl	800a09c <quorem>
 800ab52:	4649      	mov	r1, r9
 800ab54:	4605      	mov	r5, r0
 800ab56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ab5a:	9804      	ldr	r0, [sp, #16]
 800ab5c:	f000 fe8c 	bl	800b878 <__mcmp>
 800ab60:	4632      	mov	r2, r6
 800ab62:	9000      	str	r0, [sp, #0]
 800ab64:	4639      	mov	r1, r7
 800ab66:	4620      	mov	r0, r4
 800ab68:	f000 fea0 	bl	800b8ac <__mdiff>
 800ab6c:	68c3      	ldr	r3, [r0, #12]
 800ab6e:	4602      	mov	r2, r0
 800ab70:	bb03      	cbnz	r3, 800abb4 <_dtoa_r+0x9fc>
 800ab72:	4601      	mov	r1, r0
 800ab74:	9008      	str	r0, [sp, #32]
 800ab76:	9804      	ldr	r0, [sp, #16]
 800ab78:	f000 fe7e 	bl	800b878 <__mcmp>
 800ab7c:	9a08      	ldr	r2, [sp, #32]
 800ab7e:	4603      	mov	r3, r0
 800ab80:	4611      	mov	r1, r2
 800ab82:	4620      	mov	r0, r4
 800ab84:	9308      	str	r3, [sp, #32]
 800ab86:	f000 fc57 	bl	800b438 <_Bfree>
 800ab8a:	9b08      	ldr	r3, [sp, #32]
 800ab8c:	b9a3      	cbnz	r3, 800abb8 <_dtoa_r+0xa00>
 800ab8e:	9a06      	ldr	r2, [sp, #24]
 800ab90:	b992      	cbnz	r2, 800abb8 <_dtoa_r+0xa00>
 800ab92:	9a07      	ldr	r2, [sp, #28]
 800ab94:	b982      	cbnz	r2, 800abb8 <_dtoa_r+0xa00>
 800ab96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ab9a:	d029      	beq.n	800abf0 <_dtoa_r+0xa38>
 800ab9c:	9b00      	ldr	r3, [sp, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	dd01      	ble.n	800aba6 <_dtoa_r+0x9ee>
 800aba2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800aba6:	9b05      	ldr	r3, [sp, #20]
 800aba8:	1c5d      	adds	r5, r3, #1
 800abaa:	f883 8000 	strb.w	r8, [r3]
 800abae:	e782      	b.n	800aab6 <_dtoa_r+0x8fe>
 800abb0:	4630      	mov	r0, r6
 800abb2:	e7c2      	b.n	800ab3a <_dtoa_r+0x982>
 800abb4:	2301      	movs	r3, #1
 800abb6:	e7e3      	b.n	800ab80 <_dtoa_r+0x9c8>
 800abb8:	9a00      	ldr	r2, [sp, #0]
 800abba:	2a00      	cmp	r2, #0
 800abbc:	db04      	blt.n	800abc8 <_dtoa_r+0xa10>
 800abbe:	d125      	bne.n	800ac0c <_dtoa_r+0xa54>
 800abc0:	9a06      	ldr	r2, [sp, #24]
 800abc2:	bb1a      	cbnz	r2, 800ac0c <_dtoa_r+0xa54>
 800abc4:	9a07      	ldr	r2, [sp, #28]
 800abc6:	bb0a      	cbnz	r2, 800ac0c <_dtoa_r+0xa54>
 800abc8:	2b00      	cmp	r3, #0
 800abca:	ddec      	ble.n	800aba6 <_dtoa_r+0x9ee>
 800abcc:	2201      	movs	r2, #1
 800abce:	9904      	ldr	r1, [sp, #16]
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 fdfd 	bl	800b7d0 <__lshift>
 800abd6:	4639      	mov	r1, r7
 800abd8:	9004      	str	r0, [sp, #16]
 800abda:	f000 fe4d 	bl	800b878 <__mcmp>
 800abde:	2800      	cmp	r0, #0
 800abe0:	dc03      	bgt.n	800abea <_dtoa_r+0xa32>
 800abe2:	d1e0      	bne.n	800aba6 <_dtoa_r+0x9ee>
 800abe4:	f018 0f01 	tst.w	r8, #1
 800abe8:	d0dd      	beq.n	800aba6 <_dtoa_r+0x9ee>
 800abea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800abee:	d1d8      	bne.n	800aba2 <_dtoa_r+0x9ea>
 800abf0:	9b05      	ldr	r3, [sp, #20]
 800abf2:	9a05      	ldr	r2, [sp, #20]
 800abf4:	1c5d      	adds	r5, r3, #1
 800abf6:	2339      	movs	r3, #57	; 0x39
 800abf8:	7013      	strb	r3, [r2, #0]
 800abfa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abfe:	2b39      	cmp	r3, #57	; 0x39
 800ac00:	f105 32ff 	add.w	r2, r5, #4294967295
 800ac04:	d04f      	beq.n	800aca6 <_dtoa_r+0xaee>
 800ac06:	3301      	adds	r3, #1
 800ac08:	7013      	strb	r3, [r2, #0]
 800ac0a:	e754      	b.n	800aab6 <_dtoa_r+0x8fe>
 800ac0c:	9a05      	ldr	r2, [sp, #20]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f102 0501 	add.w	r5, r2, #1
 800ac14:	dd06      	ble.n	800ac24 <_dtoa_r+0xa6c>
 800ac16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ac1a:	d0e9      	beq.n	800abf0 <_dtoa_r+0xa38>
 800ac1c:	f108 0801 	add.w	r8, r8, #1
 800ac20:	9b05      	ldr	r3, [sp, #20]
 800ac22:	e7c2      	b.n	800abaa <_dtoa_r+0x9f2>
 800ac24:	9a02      	ldr	r2, [sp, #8]
 800ac26:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ac2a:	eba5 030b 	sub.w	r3, r5, fp
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d021      	beq.n	800ac76 <_dtoa_r+0xabe>
 800ac32:	2300      	movs	r3, #0
 800ac34:	220a      	movs	r2, #10
 800ac36:	9904      	ldr	r1, [sp, #16]
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f000 fc14 	bl	800b466 <__multadd>
 800ac3e:	45b1      	cmp	r9, r6
 800ac40:	9004      	str	r0, [sp, #16]
 800ac42:	f04f 0300 	mov.w	r3, #0
 800ac46:	f04f 020a 	mov.w	r2, #10
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	d105      	bne.n	800ac5c <_dtoa_r+0xaa4>
 800ac50:	f000 fc09 	bl	800b466 <__multadd>
 800ac54:	4681      	mov	r9, r0
 800ac56:	4606      	mov	r6, r0
 800ac58:	9505      	str	r5, [sp, #20]
 800ac5a:	e776      	b.n	800ab4a <_dtoa_r+0x992>
 800ac5c:	f000 fc03 	bl	800b466 <__multadd>
 800ac60:	4631      	mov	r1, r6
 800ac62:	4681      	mov	r9, r0
 800ac64:	2300      	movs	r3, #0
 800ac66:	220a      	movs	r2, #10
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 fbfc 	bl	800b466 <__multadd>
 800ac6e:	4606      	mov	r6, r0
 800ac70:	e7f2      	b.n	800ac58 <_dtoa_r+0xaa0>
 800ac72:	f04f 0900 	mov.w	r9, #0
 800ac76:	2201      	movs	r2, #1
 800ac78:	9904      	ldr	r1, [sp, #16]
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f000 fda8 	bl	800b7d0 <__lshift>
 800ac80:	4639      	mov	r1, r7
 800ac82:	9004      	str	r0, [sp, #16]
 800ac84:	f000 fdf8 	bl	800b878 <__mcmp>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	dcb6      	bgt.n	800abfa <_dtoa_r+0xa42>
 800ac8c:	d102      	bne.n	800ac94 <_dtoa_r+0xadc>
 800ac8e:	f018 0f01 	tst.w	r8, #1
 800ac92:	d1b2      	bne.n	800abfa <_dtoa_r+0xa42>
 800ac94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac98:	2b30      	cmp	r3, #48	; 0x30
 800ac9a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ac9e:	f47f af0a 	bne.w	800aab6 <_dtoa_r+0x8fe>
 800aca2:	4615      	mov	r5, r2
 800aca4:	e7f6      	b.n	800ac94 <_dtoa_r+0xadc>
 800aca6:	4593      	cmp	fp, r2
 800aca8:	d105      	bne.n	800acb6 <_dtoa_r+0xafe>
 800acaa:	2331      	movs	r3, #49	; 0x31
 800acac:	f10a 0a01 	add.w	sl, sl, #1
 800acb0:	f88b 3000 	strb.w	r3, [fp]
 800acb4:	e6ff      	b.n	800aab6 <_dtoa_r+0x8fe>
 800acb6:	4615      	mov	r5, r2
 800acb8:	e79f      	b.n	800abfa <_dtoa_r+0xa42>
 800acba:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ad20 <_dtoa_r+0xb68>
 800acbe:	e007      	b.n	800acd0 <_dtoa_r+0xb18>
 800acc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acc2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ad24 <_dtoa_r+0xb6c>
 800acc6:	b11b      	cbz	r3, 800acd0 <_dtoa_r+0xb18>
 800acc8:	f10b 0308 	add.w	r3, fp, #8
 800accc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800acce:	6013      	str	r3, [r2, #0]
 800acd0:	4658      	mov	r0, fp
 800acd2:	b017      	add	sp, #92	; 0x5c
 800acd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd8:	9b06      	ldr	r3, [sp, #24]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	f77f ae35 	ble.w	800a94a <_dtoa_r+0x792>
 800ace0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ace2:	9307      	str	r3, [sp, #28]
 800ace4:	e649      	b.n	800a97a <_dtoa_r+0x7c2>
 800ace6:	9b02      	ldr	r3, [sp, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	dc03      	bgt.n	800acf4 <_dtoa_r+0xb3c>
 800acec:	9b06      	ldr	r3, [sp, #24]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	f73f aecc 	bgt.w	800aa8c <_dtoa_r+0x8d4>
 800acf4:	465d      	mov	r5, fp
 800acf6:	4639      	mov	r1, r7
 800acf8:	9804      	ldr	r0, [sp, #16]
 800acfa:	f7ff f9cf 	bl	800a09c <quorem>
 800acfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ad02:	f805 8b01 	strb.w	r8, [r5], #1
 800ad06:	9a02      	ldr	r2, [sp, #8]
 800ad08:	eba5 030b 	sub.w	r3, r5, fp
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	ddb0      	ble.n	800ac72 <_dtoa_r+0xaba>
 800ad10:	2300      	movs	r3, #0
 800ad12:	220a      	movs	r2, #10
 800ad14:	9904      	ldr	r1, [sp, #16]
 800ad16:	4620      	mov	r0, r4
 800ad18:	f000 fba5 	bl	800b466 <__multadd>
 800ad1c:	9004      	str	r0, [sp, #16]
 800ad1e:	e7ea      	b.n	800acf6 <_dtoa_r+0xb3e>
 800ad20:	0800ca38 	.word	0x0800ca38
 800ad24:	0800cab8 	.word	0x0800cab8

0800ad28 <rshift>:
 800ad28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad2a:	6906      	ldr	r6, [r0, #16]
 800ad2c:	114b      	asrs	r3, r1, #5
 800ad2e:	429e      	cmp	r6, r3
 800ad30:	f100 0414 	add.w	r4, r0, #20
 800ad34:	dd30      	ble.n	800ad98 <rshift+0x70>
 800ad36:	f011 011f 	ands.w	r1, r1, #31
 800ad3a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ad3e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ad42:	d108      	bne.n	800ad56 <rshift+0x2e>
 800ad44:	4621      	mov	r1, r4
 800ad46:	42b2      	cmp	r2, r6
 800ad48:	460b      	mov	r3, r1
 800ad4a:	d211      	bcs.n	800ad70 <rshift+0x48>
 800ad4c:	f852 3b04 	ldr.w	r3, [r2], #4
 800ad50:	f841 3b04 	str.w	r3, [r1], #4
 800ad54:	e7f7      	b.n	800ad46 <rshift+0x1e>
 800ad56:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ad5a:	f1c1 0c20 	rsb	ip, r1, #32
 800ad5e:	40cd      	lsrs	r5, r1
 800ad60:	3204      	adds	r2, #4
 800ad62:	4623      	mov	r3, r4
 800ad64:	42b2      	cmp	r2, r6
 800ad66:	4617      	mov	r7, r2
 800ad68:	d30c      	bcc.n	800ad84 <rshift+0x5c>
 800ad6a:	601d      	str	r5, [r3, #0]
 800ad6c:	b105      	cbz	r5, 800ad70 <rshift+0x48>
 800ad6e:	3304      	adds	r3, #4
 800ad70:	1b1a      	subs	r2, r3, r4
 800ad72:	42a3      	cmp	r3, r4
 800ad74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ad78:	bf08      	it	eq
 800ad7a:	2300      	moveq	r3, #0
 800ad7c:	6102      	str	r2, [r0, #16]
 800ad7e:	bf08      	it	eq
 800ad80:	6143      	streq	r3, [r0, #20]
 800ad82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad84:	683f      	ldr	r7, [r7, #0]
 800ad86:	fa07 f70c 	lsl.w	r7, r7, ip
 800ad8a:	433d      	orrs	r5, r7
 800ad8c:	f843 5b04 	str.w	r5, [r3], #4
 800ad90:	f852 5b04 	ldr.w	r5, [r2], #4
 800ad94:	40cd      	lsrs	r5, r1
 800ad96:	e7e5      	b.n	800ad64 <rshift+0x3c>
 800ad98:	4623      	mov	r3, r4
 800ad9a:	e7e9      	b.n	800ad70 <rshift+0x48>

0800ad9c <__hexdig_fun>:
 800ad9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ada0:	2b09      	cmp	r3, #9
 800ada2:	d802      	bhi.n	800adaa <__hexdig_fun+0xe>
 800ada4:	3820      	subs	r0, #32
 800ada6:	b2c0      	uxtb	r0, r0
 800ada8:	4770      	bx	lr
 800adaa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800adae:	2b05      	cmp	r3, #5
 800adb0:	d801      	bhi.n	800adb6 <__hexdig_fun+0x1a>
 800adb2:	3847      	subs	r0, #71	; 0x47
 800adb4:	e7f7      	b.n	800ada6 <__hexdig_fun+0xa>
 800adb6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800adba:	2b05      	cmp	r3, #5
 800adbc:	d801      	bhi.n	800adc2 <__hexdig_fun+0x26>
 800adbe:	3827      	subs	r0, #39	; 0x27
 800adc0:	e7f1      	b.n	800ada6 <__hexdig_fun+0xa>
 800adc2:	2000      	movs	r0, #0
 800adc4:	4770      	bx	lr

0800adc6 <__gethex>:
 800adc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adca:	b08b      	sub	sp, #44	; 0x2c
 800adcc:	468a      	mov	sl, r1
 800adce:	9002      	str	r0, [sp, #8]
 800add0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800add2:	9306      	str	r3, [sp, #24]
 800add4:	4690      	mov	r8, r2
 800add6:	f000 fad0 	bl	800b37a <__localeconv_l>
 800adda:	6803      	ldr	r3, [r0, #0]
 800addc:	9303      	str	r3, [sp, #12]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7f5 fa1e 	bl	8000220 <strlen>
 800ade4:	9b03      	ldr	r3, [sp, #12]
 800ade6:	9001      	str	r0, [sp, #4]
 800ade8:	4403      	add	r3, r0
 800adea:	f04f 0b00 	mov.w	fp, #0
 800adee:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800adf2:	9307      	str	r3, [sp, #28]
 800adf4:	f8da 3000 	ldr.w	r3, [sl]
 800adf8:	3302      	adds	r3, #2
 800adfa:	461f      	mov	r7, r3
 800adfc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ae00:	2830      	cmp	r0, #48	; 0x30
 800ae02:	d06c      	beq.n	800aede <__gethex+0x118>
 800ae04:	f7ff ffca 	bl	800ad9c <__hexdig_fun>
 800ae08:	4604      	mov	r4, r0
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d16a      	bne.n	800aee4 <__gethex+0x11e>
 800ae0e:	9a01      	ldr	r2, [sp, #4]
 800ae10:	9903      	ldr	r1, [sp, #12]
 800ae12:	4638      	mov	r0, r7
 800ae14:	f7fe fa2e 	bl	8009274 <strncmp>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d166      	bne.n	800aeea <__gethex+0x124>
 800ae1c:	9b01      	ldr	r3, [sp, #4]
 800ae1e:	5cf8      	ldrb	r0, [r7, r3]
 800ae20:	18fe      	adds	r6, r7, r3
 800ae22:	f7ff ffbb 	bl	800ad9c <__hexdig_fun>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d062      	beq.n	800aef0 <__gethex+0x12a>
 800ae2a:	4633      	mov	r3, r6
 800ae2c:	7818      	ldrb	r0, [r3, #0]
 800ae2e:	2830      	cmp	r0, #48	; 0x30
 800ae30:	461f      	mov	r7, r3
 800ae32:	f103 0301 	add.w	r3, r3, #1
 800ae36:	d0f9      	beq.n	800ae2c <__gethex+0x66>
 800ae38:	f7ff ffb0 	bl	800ad9c <__hexdig_fun>
 800ae3c:	fab0 f580 	clz	r5, r0
 800ae40:	096d      	lsrs	r5, r5, #5
 800ae42:	4634      	mov	r4, r6
 800ae44:	f04f 0b01 	mov.w	fp, #1
 800ae48:	463a      	mov	r2, r7
 800ae4a:	4616      	mov	r6, r2
 800ae4c:	3201      	adds	r2, #1
 800ae4e:	7830      	ldrb	r0, [r6, #0]
 800ae50:	f7ff ffa4 	bl	800ad9c <__hexdig_fun>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d1f8      	bne.n	800ae4a <__gethex+0x84>
 800ae58:	9a01      	ldr	r2, [sp, #4]
 800ae5a:	9903      	ldr	r1, [sp, #12]
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f7fe fa09 	bl	8009274 <strncmp>
 800ae62:	b950      	cbnz	r0, 800ae7a <__gethex+0xb4>
 800ae64:	b954      	cbnz	r4, 800ae7c <__gethex+0xb6>
 800ae66:	9b01      	ldr	r3, [sp, #4]
 800ae68:	18f4      	adds	r4, r6, r3
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	4616      	mov	r6, r2
 800ae6e:	3201      	adds	r2, #1
 800ae70:	7830      	ldrb	r0, [r6, #0]
 800ae72:	f7ff ff93 	bl	800ad9c <__hexdig_fun>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d1f8      	bne.n	800ae6c <__gethex+0xa6>
 800ae7a:	b10c      	cbz	r4, 800ae80 <__gethex+0xba>
 800ae7c:	1ba4      	subs	r4, r4, r6
 800ae7e:	00a4      	lsls	r4, r4, #2
 800ae80:	7833      	ldrb	r3, [r6, #0]
 800ae82:	2b50      	cmp	r3, #80	; 0x50
 800ae84:	d001      	beq.n	800ae8a <__gethex+0xc4>
 800ae86:	2b70      	cmp	r3, #112	; 0x70
 800ae88:	d140      	bne.n	800af0c <__gethex+0x146>
 800ae8a:	7873      	ldrb	r3, [r6, #1]
 800ae8c:	2b2b      	cmp	r3, #43	; 0x2b
 800ae8e:	d031      	beq.n	800aef4 <__gethex+0x12e>
 800ae90:	2b2d      	cmp	r3, #45	; 0x2d
 800ae92:	d033      	beq.n	800aefc <__gethex+0x136>
 800ae94:	1c71      	adds	r1, r6, #1
 800ae96:	f04f 0900 	mov.w	r9, #0
 800ae9a:	7808      	ldrb	r0, [r1, #0]
 800ae9c:	f7ff ff7e 	bl	800ad9c <__hexdig_fun>
 800aea0:	1e43      	subs	r3, r0, #1
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b18      	cmp	r3, #24
 800aea6:	d831      	bhi.n	800af0c <__gethex+0x146>
 800aea8:	f1a0 0210 	sub.w	r2, r0, #16
 800aeac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aeb0:	f7ff ff74 	bl	800ad9c <__hexdig_fun>
 800aeb4:	1e43      	subs	r3, r0, #1
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	2b18      	cmp	r3, #24
 800aeba:	d922      	bls.n	800af02 <__gethex+0x13c>
 800aebc:	f1b9 0f00 	cmp.w	r9, #0
 800aec0:	d000      	beq.n	800aec4 <__gethex+0xfe>
 800aec2:	4252      	negs	r2, r2
 800aec4:	4414      	add	r4, r2
 800aec6:	f8ca 1000 	str.w	r1, [sl]
 800aeca:	b30d      	cbz	r5, 800af10 <__gethex+0x14a>
 800aecc:	f1bb 0f00 	cmp.w	fp, #0
 800aed0:	bf0c      	ite	eq
 800aed2:	2706      	moveq	r7, #6
 800aed4:	2700      	movne	r7, #0
 800aed6:	4638      	mov	r0, r7
 800aed8:	b00b      	add	sp, #44	; 0x2c
 800aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aede:	f10b 0b01 	add.w	fp, fp, #1
 800aee2:	e78a      	b.n	800adfa <__gethex+0x34>
 800aee4:	2500      	movs	r5, #0
 800aee6:	462c      	mov	r4, r5
 800aee8:	e7ae      	b.n	800ae48 <__gethex+0x82>
 800aeea:	463e      	mov	r6, r7
 800aeec:	2501      	movs	r5, #1
 800aeee:	e7c7      	b.n	800ae80 <__gethex+0xba>
 800aef0:	4604      	mov	r4, r0
 800aef2:	e7fb      	b.n	800aeec <__gethex+0x126>
 800aef4:	f04f 0900 	mov.w	r9, #0
 800aef8:	1cb1      	adds	r1, r6, #2
 800aefa:	e7ce      	b.n	800ae9a <__gethex+0xd4>
 800aefc:	f04f 0901 	mov.w	r9, #1
 800af00:	e7fa      	b.n	800aef8 <__gethex+0x132>
 800af02:	230a      	movs	r3, #10
 800af04:	fb03 0202 	mla	r2, r3, r2, r0
 800af08:	3a10      	subs	r2, #16
 800af0a:	e7cf      	b.n	800aeac <__gethex+0xe6>
 800af0c:	4631      	mov	r1, r6
 800af0e:	e7da      	b.n	800aec6 <__gethex+0x100>
 800af10:	1bf3      	subs	r3, r6, r7
 800af12:	3b01      	subs	r3, #1
 800af14:	4629      	mov	r1, r5
 800af16:	2b07      	cmp	r3, #7
 800af18:	dc49      	bgt.n	800afae <__gethex+0x1e8>
 800af1a:	9802      	ldr	r0, [sp, #8]
 800af1c:	f000 fa58 	bl	800b3d0 <_Balloc>
 800af20:	9b01      	ldr	r3, [sp, #4]
 800af22:	f100 0914 	add.w	r9, r0, #20
 800af26:	f04f 0b00 	mov.w	fp, #0
 800af2a:	f1c3 0301 	rsb	r3, r3, #1
 800af2e:	4605      	mov	r5, r0
 800af30:	f8cd 9010 	str.w	r9, [sp, #16]
 800af34:	46da      	mov	sl, fp
 800af36:	9308      	str	r3, [sp, #32]
 800af38:	42b7      	cmp	r7, r6
 800af3a:	d33b      	bcc.n	800afb4 <__gethex+0x1ee>
 800af3c:	9804      	ldr	r0, [sp, #16]
 800af3e:	f840 ab04 	str.w	sl, [r0], #4
 800af42:	eba0 0009 	sub.w	r0, r0, r9
 800af46:	1080      	asrs	r0, r0, #2
 800af48:	6128      	str	r0, [r5, #16]
 800af4a:	0147      	lsls	r7, r0, #5
 800af4c:	4650      	mov	r0, sl
 800af4e:	f000 fb03 	bl	800b558 <__hi0bits>
 800af52:	f8d8 6000 	ldr.w	r6, [r8]
 800af56:	1a3f      	subs	r7, r7, r0
 800af58:	42b7      	cmp	r7, r6
 800af5a:	dd64      	ble.n	800b026 <__gethex+0x260>
 800af5c:	1bbf      	subs	r7, r7, r6
 800af5e:	4639      	mov	r1, r7
 800af60:	4628      	mov	r0, r5
 800af62:	f000 fe13 	bl	800bb8c <__any_on>
 800af66:	4682      	mov	sl, r0
 800af68:	b178      	cbz	r0, 800af8a <__gethex+0x1c4>
 800af6a:	1e7b      	subs	r3, r7, #1
 800af6c:	1159      	asrs	r1, r3, #5
 800af6e:	f003 021f 	and.w	r2, r3, #31
 800af72:	f04f 0a01 	mov.w	sl, #1
 800af76:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800af7a:	fa0a f202 	lsl.w	r2, sl, r2
 800af7e:	420a      	tst	r2, r1
 800af80:	d003      	beq.n	800af8a <__gethex+0x1c4>
 800af82:	4553      	cmp	r3, sl
 800af84:	dc46      	bgt.n	800b014 <__gethex+0x24e>
 800af86:	f04f 0a02 	mov.w	sl, #2
 800af8a:	4639      	mov	r1, r7
 800af8c:	4628      	mov	r0, r5
 800af8e:	f7ff fecb 	bl	800ad28 <rshift>
 800af92:	443c      	add	r4, r7
 800af94:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af98:	42a3      	cmp	r3, r4
 800af9a:	da52      	bge.n	800b042 <__gethex+0x27c>
 800af9c:	4629      	mov	r1, r5
 800af9e:	9802      	ldr	r0, [sp, #8]
 800afa0:	f000 fa4a 	bl	800b438 <_Bfree>
 800afa4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800afa6:	2300      	movs	r3, #0
 800afa8:	6013      	str	r3, [r2, #0]
 800afaa:	27a3      	movs	r7, #163	; 0xa3
 800afac:	e793      	b.n	800aed6 <__gethex+0x110>
 800afae:	3101      	adds	r1, #1
 800afb0:	105b      	asrs	r3, r3, #1
 800afb2:	e7b0      	b.n	800af16 <__gethex+0x150>
 800afb4:	1e73      	subs	r3, r6, #1
 800afb6:	9305      	str	r3, [sp, #20]
 800afb8:	9a07      	ldr	r2, [sp, #28]
 800afba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d018      	beq.n	800aff4 <__gethex+0x22e>
 800afc2:	f1bb 0f20 	cmp.w	fp, #32
 800afc6:	d107      	bne.n	800afd8 <__gethex+0x212>
 800afc8:	9b04      	ldr	r3, [sp, #16]
 800afca:	f8c3 a000 	str.w	sl, [r3]
 800afce:	3304      	adds	r3, #4
 800afd0:	f04f 0a00 	mov.w	sl, #0
 800afd4:	9304      	str	r3, [sp, #16]
 800afd6:	46d3      	mov	fp, sl
 800afd8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800afdc:	f7ff fede 	bl	800ad9c <__hexdig_fun>
 800afe0:	f000 000f 	and.w	r0, r0, #15
 800afe4:	fa00 f00b 	lsl.w	r0, r0, fp
 800afe8:	ea4a 0a00 	orr.w	sl, sl, r0
 800afec:	f10b 0b04 	add.w	fp, fp, #4
 800aff0:	9b05      	ldr	r3, [sp, #20]
 800aff2:	e00d      	b.n	800b010 <__gethex+0x24a>
 800aff4:	9b05      	ldr	r3, [sp, #20]
 800aff6:	9a08      	ldr	r2, [sp, #32]
 800aff8:	4413      	add	r3, r2
 800affa:	42bb      	cmp	r3, r7
 800affc:	d3e1      	bcc.n	800afc2 <__gethex+0x1fc>
 800affe:	4618      	mov	r0, r3
 800b000:	9a01      	ldr	r2, [sp, #4]
 800b002:	9903      	ldr	r1, [sp, #12]
 800b004:	9309      	str	r3, [sp, #36]	; 0x24
 800b006:	f7fe f935 	bl	8009274 <strncmp>
 800b00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d1d8      	bne.n	800afc2 <__gethex+0x1fc>
 800b010:	461e      	mov	r6, r3
 800b012:	e791      	b.n	800af38 <__gethex+0x172>
 800b014:	1eb9      	subs	r1, r7, #2
 800b016:	4628      	mov	r0, r5
 800b018:	f000 fdb8 	bl	800bb8c <__any_on>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d0b2      	beq.n	800af86 <__gethex+0x1c0>
 800b020:	f04f 0a03 	mov.w	sl, #3
 800b024:	e7b1      	b.n	800af8a <__gethex+0x1c4>
 800b026:	da09      	bge.n	800b03c <__gethex+0x276>
 800b028:	1bf7      	subs	r7, r6, r7
 800b02a:	4629      	mov	r1, r5
 800b02c:	463a      	mov	r2, r7
 800b02e:	9802      	ldr	r0, [sp, #8]
 800b030:	f000 fbce 	bl	800b7d0 <__lshift>
 800b034:	1be4      	subs	r4, r4, r7
 800b036:	4605      	mov	r5, r0
 800b038:	f100 0914 	add.w	r9, r0, #20
 800b03c:	f04f 0a00 	mov.w	sl, #0
 800b040:	e7a8      	b.n	800af94 <__gethex+0x1ce>
 800b042:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b046:	42a0      	cmp	r0, r4
 800b048:	dd6a      	ble.n	800b120 <__gethex+0x35a>
 800b04a:	1b04      	subs	r4, r0, r4
 800b04c:	42a6      	cmp	r6, r4
 800b04e:	dc2e      	bgt.n	800b0ae <__gethex+0x2e8>
 800b050:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b054:	2b02      	cmp	r3, #2
 800b056:	d022      	beq.n	800b09e <__gethex+0x2d8>
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d024      	beq.n	800b0a6 <__gethex+0x2e0>
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d115      	bne.n	800b08c <__gethex+0x2c6>
 800b060:	42a6      	cmp	r6, r4
 800b062:	d113      	bne.n	800b08c <__gethex+0x2c6>
 800b064:	2e01      	cmp	r6, #1
 800b066:	dc0b      	bgt.n	800b080 <__gethex+0x2ba>
 800b068:	9a06      	ldr	r2, [sp, #24]
 800b06a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	2301      	movs	r3, #1
 800b072:	612b      	str	r3, [r5, #16]
 800b074:	f8c9 3000 	str.w	r3, [r9]
 800b078:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b07a:	2762      	movs	r7, #98	; 0x62
 800b07c:	601d      	str	r5, [r3, #0]
 800b07e:	e72a      	b.n	800aed6 <__gethex+0x110>
 800b080:	1e71      	subs	r1, r6, #1
 800b082:	4628      	mov	r0, r5
 800b084:	f000 fd82 	bl	800bb8c <__any_on>
 800b088:	2800      	cmp	r0, #0
 800b08a:	d1ed      	bne.n	800b068 <__gethex+0x2a2>
 800b08c:	4629      	mov	r1, r5
 800b08e:	9802      	ldr	r0, [sp, #8]
 800b090:	f000 f9d2 	bl	800b438 <_Bfree>
 800b094:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b096:	2300      	movs	r3, #0
 800b098:	6013      	str	r3, [r2, #0]
 800b09a:	2750      	movs	r7, #80	; 0x50
 800b09c:	e71b      	b.n	800aed6 <__gethex+0x110>
 800b09e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0e1      	beq.n	800b068 <__gethex+0x2a2>
 800b0a4:	e7f2      	b.n	800b08c <__gethex+0x2c6>
 800b0a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1dd      	bne.n	800b068 <__gethex+0x2a2>
 800b0ac:	e7ee      	b.n	800b08c <__gethex+0x2c6>
 800b0ae:	1e67      	subs	r7, r4, #1
 800b0b0:	f1ba 0f00 	cmp.w	sl, #0
 800b0b4:	d131      	bne.n	800b11a <__gethex+0x354>
 800b0b6:	b127      	cbz	r7, 800b0c2 <__gethex+0x2fc>
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f000 fd66 	bl	800bb8c <__any_on>
 800b0c0:	4682      	mov	sl, r0
 800b0c2:	117a      	asrs	r2, r7, #5
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	f007 071f 	and.w	r7, r7, #31
 800b0ca:	fa03 f707 	lsl.w	r7, r3, r7
 800b0ce:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	421f      	tst	r7, r3
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	bf18      	it	ne
 800b0da:	f04a 0a02 	orrne.w	sl, sl, #2
 800b0de:	1b36      	subs	r6, r6, r4
 800b0e0:	f7ff fe22 	bl	800ad28 <rshift>
 800b0e4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b0e8:	2702      	movs	r7, #2
 800b0ea:	f1ba 0f00 	cmp.w	sl, #0
 800b0ee:	d048      	beq.n	800b182 <__gethex+0x3bc>
 800b0f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d015      	beq.n	800b124 <__gethex+0x35e>
 800b0f8:	2b03      	cmp	r3, #3
 800b0fa:	d017      	beq.n	800b12c <__gethex+0x366>
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d109      	bne.n	800b114 <__gethex+0x34e>
 800b100:	f01a 0f02 	tst.w	sl, #2
 800b104:	d006      	beq.n	800b114 <__gethex+0x34e>
 800b106:	f8d9 3000 	ldr.w	r3, [r9]
 800b10a:	ea4a 0a03 	orr.w	sl, sl, r3
 800b10e:	f01a 0f01 	tst.w	sl, #1
 800b112:	d10e      	bne.n	800b132 <__gethex+0x36c>
 800b114:	f047 0710 	orr.w	r7, r7, #16
 800b118:	e033      	b.n	800b182 <__gethex+0x3bc>
 800b11a:	f04f 0a01 	mov.w	sl, #1
 800b11e:	e7d0      	b.n	800b0c2 <__gethex+0x2fc>
 800b120:	2701      	movs	r7, #1
 800b122:	e7e2      	b.n	800b0ea <__gethex+0x324>
 800b124:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b126:	f1c3 0301 	rsb	r3, r3, #1
 800b12a:	9315      	str	r3, [sp, #84]	; 0x54
 800b12c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0f0      	beq.n	800b114 <__gethex+0x34e>
 800b132:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b136:	f105 0314 	add.w	r3, r5, #20
 800b13a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b13e:	eb03 010a 	add.w	r1, r3, sl
 800b142:	f04f 0c00 	mov.w	ip, #0
 800b146:	4618      	mov	r0, r3
 800b148:	f853 2b04 	ldr.w	r2, [r3], #4
 800b14c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b150:	d01c      	beq.n	800b18c <__gethex+0x3c6>
 800b152:	3201      	adds	r2, #1
 800b154:	6002      	str	r2, [r0, #0]
 800b156:	2f02      	cmp	r7, #2
 800b158:	f105 0314 	add.w	r3, r5, #20
 800b15c:	d138      	bne.n	800b1d0 <__gethex+0x40a>
 800b15e:	f8d8 2000 	ldr.w	r2, [r8]
 800b162:	3a01      	subs	r2, #1
 800b164:	42b2      	cmp	r2, r6
 800b166:	d10a      	bne.n	800b17e <__gethex+0x3b8>
 800b168:	1171      	asrs	r1, r6, #5
 800b16a:	2201      	movs	r2, #1
 800b16c:	f006 061f 	and.w	r6, r6, #31
 800b170:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b174:	fa02 f606 	lsl.w	r6, r2, r6
 800b178:	421e      	tst	r6, r3
 800b17a:	bf18      	it	ne
 800b17c:	4617      	movne	r7, r2
 800b17e:	f047 0720 	orr.w	r7, r7, #32
 800b182:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b184:	601d      	str	r5, [r3, #0]
 800b186:	9b06      	ldr	r3, [sp, #24]
 800b188:	601c      	str	r4, [r3, #0]
 800b18a:	e6a4      	b.n	800aed6 <__gethex+0x110>
 800b18c:	4299      	cmp	r1, r3
 800b18e:	f843 cc04 	str.w	ip, [r3, #-4]
 800b192:	d8d8      	bhi.n	800b146 <__gethex+0x380>
 800b194:	68ab      	ldr	r3, [r5, #8]
 800b196:	4599      	cmp	r9, r3
 800b198:	db12      	blt.n	800b1c0 <__gethex+0x3fa>
 800b19a:	6869      	ldr	r1, [r5, #4]
 800b19c:	9802      	ldr	r0, [sp, #8]
 800b19e:	3101      	adds	r1, #1
 800b1a0:	f000 f916 	bl	800b3d0 <_Balloc>
 800b1a4:	692a      	ldr	r2, [r5, #16]
 800b1a6:	3202      	adds	r2, #2
 800b1a8:	f105 010c 	add.w	r1, r5, #12
 800b1ac:	4683      	mov	fp, r0
 800b1ae:	0092      	lsls	r2, r2, #2
 800b1b0:	300c      	adds	r0, #12
 800b1b2:	f7fd f9e7 	bl	8008584 <memcpy>
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	9802      	ldr	r0, [sp, #8]
 800b1ba:	f000 f93d 	bl	800b438 <_Bfree>
 800b1be:	465d      	mov	r5, fp
 800b1c0:	692b      	ldr	r3, [r5, #16]
 800b1c2:	1c5a      	adds	r2, r3, #1
 800b1c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b1c8:	612a      	str	r2, [r5, #16]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	615a      	str	r2, [r3, #20]
 800b1ce:	e7c2      	b.n	800b156 <__gethex+0x390>
 800b1d0:	692a      	ldr	r2, [r5, #16]
 800b1d2:	454a      	cmp	r2, r9
 800b1d4:	dd0b      	ble.n	800b1ee <__gethex+0x428>
 800b1d6:	2101      	movs	r1, #1
 800b1d8:	4628      	mov	r0, r5
 800b1da:	f7ff fda5 	bl	800ad28 <rshift>
 800b1de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1e2:	3401      	adds	r4, #1
 800b1e4:	42a3      	cmp	r3, r4
 800b1e6:	f6ff aed9 	blt.w	800af9c <__gethex+0x1d6>
 800b1ea:	2701      	movs	r7, #1
 800b1ec:	e7c7      	b.n	800b17e <__gethex+0x3b8>
 800b1ee:	f016 061f 	ands.w	r6, r6, #31
 800b1f2:	d0fa      	beq.n	800b1ea <__gethex+0x424>
 800b1f4:	449a      	add	sl, r3
 800b1f6:	f1c6 0620 	rsb	r6, r6, #32
 800b1fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b1fe:	f000 f9ab 	bl	800b558 <__hi0bits>
 800b202:	42b0      	cmp	r0, r6
 800b204:	dbe7      	blt.n	800b1d6 <__gethex+0x410>
 800b206:	e7f0      	b.n	800b1ea <__gethex+0x424>

0800b208 <L_shift>:
 800b208:	f1c2 0208 	rsb	r2, r2, #8
 800b20c:	0092      	lsls	r2, r2, #2
 800b20e:	b570      	push	{r4, r5, r6, lr}
 800b210:	f1c2 0620 	rsb	r6, r2, #32
 800b214:	6843      	ldr	r3, [r0, #4]
 800b216:	6804      	ldr	r4, [r0, #0]
 800b218:	fa03 f506 	lsl.w	r5, r3, r6
 800b21c:	432c      	orrs	r4, r5
 800b21e:	40d3      	lsrs	r3, r2
 800b220:	6004      	str	r4, [r0, #0]
 800b222:	f840 3f04 	str.w	r3, [r0, #4]!
 800b226:	4288      	cmp	r0, r1
 800b228:	d3f4      	bcc.n	800b214 <L_shift+0xc>
 800b22a:	bd70      	pop	{r4, r5, r6, pc}

0800b22c <__match>:
 800b22c:	b530      	push	{r4, r5, lr}
 800b22e:	6803      	ldr	r3, [r0, #0]
 800b230:	3301      	adds	r3, #1
 800b232:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b236:	b914      	cbnz	r4, 800b23e <__match+0x12>
 800b238:	6003      	str	r3, [r0, #0]
 800b23a:	2001      	movs	r0, #1
 800b23c:	bd30      	pop	{r4, r5, pc}
 800b23e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b242:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b246:	2d19      	cmp	r5, #25
 800b248:	bf98      	it	ls
 800b24a:	3220      	addls	r2, #32
 800b24c:	42a2      	cmp	r2, r4
 800b24e:	d0f0      	beq.n	800b232 <__match+0x6>
 800b250:	2000      	movs	r0, #0
 800b252:	e7f3      	b.n	800b23c <__match+0x10>

0800b254 <__hexnan>:
 800b254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b258:	680b      	ldr	r3, [r1, #0]
 800b25a:	6801      	ldr	r1, [r0, #0]
 800b25c:	115f      	asrs	r7, r3, #5
 800b25e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b262:	f013 031f 	ands.w	r3, r3, #31
 800b266:	b087      	sub	sp, #28
 800b268:	bf18      	it	ne
 800b26a:	3704      	addne	r7, #4
 800b26c:	2500      	movs	r5, #0
 800b26e:	1f3e      	subs	r6, r7, #4
 800b270:	4682      	mov	sl, r0
 800b272:	4690      	mov	r8, r2
 800b274:	9301      	str	r3, [sp, #4]
 800b276:	f847 5c04 	str.w	r5, [r7, #-4]
 800b27a:	46b1      	mov	r9, r6
 800b27c:	4634      	mov	r4, r6
 800b27e:	9502      	str	r5, [sp, #8]
 800b280:	46ab      	mov	fp, r5
 800b282:	784a      	ldrb	r2, [r1, #1]
 800b284:	1c4b      	adds	r3, r1, #1
 800b286:	9303      	str	r3, [sp, #12]
 800b288:	b342      	cbz	r2, 800b2dc <__hexnan+0x88>
 800b28a:	4610      	mov	r0, r2
 800b28c:	9105      	str	r1, [sp, #20]
 800b28e:	9204      	str	r2, [sp, #16]
 800b290:	f7ff fd84 	bl	800ad9c <__hexdig_fun>
 800b294:	2800      	cmp	r0, #0
 800b296:	d143      	bne.n	800b320 <__hexnan+0xcc>
 800b298:	9a04      	ldr	r2, [sp, #16]
 800b29a:	9905      	ldr	r1, [sp, #20]
 800b29c:	2a20      	cmp	r2, #32
 800b29e:	d818      	bhi.n	800b2d2 <__hexnan+0x7e>
 800b2a0:	9b02      	ldr	r3, [sp, #8]
 800b2a2:	459b      	cmp	fp, r3
 800b2a4:	dd13      	ble.n	800b2ce <__hexnan+0x7a>
 800b2a6:	454c      	cmp	r4, r9
 800b2a8:	d206      	bcs.n	800b2b8 <__hexnan+0x64>
 800b2aa:	2d07      	cmp	r5, #7
 800b2ac:	dc04      	bgt.n	800b2b8 <__hexnan+0x64>
 800b2ae:	462a      	mov	r2, r5
 800b2b0:	4649      	mov	r1, r9
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f7ff ffa8 	bl	800b208 <L_shift>
 800b2b8:	4544      	cmp	r4, r8
 800b2ba:	d944      	bls.n	800b346 <__hexnan+0xf2>
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f1a4 0904 	sub.w	r9, r4, #4
 800b2c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2c6:	f8cd b008 	str.w	fp, [sp, #8]
 800b2ca:	464c      	mov	r4, r9
 800b2cc:	461d      	mov	r5, r3
 800b2ce:	9903      	ldr	r1, [sp, #12]
 800b2d0:	e7d7      	b.n	800b282 <__hexnan+0x2e>
 800b2d2:	2a29      	cmp	r2, #41	; 0x29
 800b2d4:	d14a      	bne.n	800b36c <__hexnan+0x118>
 800b2d6:	3102      	adds	r1, #2
 800b2d8:	f8ca 1000 	str.w	r1, [sl]
 800b2dc:	f1bb 0f00 	cmp.w	fp, #0
 800b2e0:	d044      	beq.n	800b36c <__hexnan+0x118>
 800b2e2:	454c      	cmp	r4, r9
 800b2e4:	d206      	bcs.n	800b2f4 <__hexnan+0xa0>
 800b2e6:	2d07      	cmp	r5, #7
 800b2e8:	dc04      	bgt.n	800b2f4 <__hexnan+0xa0>
 800b2ea:	462a      	mov	r2, r5
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f7ff ff8a 	bl	800b208 <L_shift>
 800b2f4:	4544      	cmp	r4, r8
 800b2f6:	d928      	bls.n	800b34a <__hexnan+0xf6>
 800b2f8:	4643      	mov	r3, r8
 800b2fa:	f854 2b04 	ldr.w	r2, [r4], #4
 800b2fe:	f843 2b04 	str.w	r2, [r3], #4
 800b302:	42a6      	cmp	r6, r4
 800b304:	d2f9      	bcs.n	800b2fa <__hexnan+0xa6>
 800b306:	2200      	movs	r2, #0
 800b308:	f843 2b04 	str.w	r2, [r3], #4
 800b30c:	429e      	cmp	r6, r3
 800b30e:	d2fb      	bcs.n	800b308 <__hexnan+0xb4>
 800b310:	6833      	ldr	r3, [r6, #0]
 800b312:	b91b      	cbnz	r3, 800b31c <__hexnan+0xc8>
 800b314:	4546      	cmp	r6, r8
 800b316:	d127      	bne.n	800b368 <__hexnan+0x114>
 800b318:	2301      	movs	r3, #1
 800b31a:	6033      	str	r3, [r6, #0]
 800b31c:	2005      	movs	r0, #5
 800b31e:	e026      	b.n	800b36e <__hexnan+0x11a>
 800b320:	3501      	adds	r5, #1
 800b322:	2d08      	cmp	r5, #8
 800b324:	f10b 0b01 	add.w	fp, fp, #1
 800b328:	dd06      	ble.n	800b338 <__hexnan+0xe4>
 800b32a:	4544      	cmp	r4, r8
 800b32c:	d9cf      	bls.n	800b2ce <__hexnan+0x7a>
 800b32e:	2300      	movs	r3, #0
 800b330:	f844 3c04 	str.w	r3, [r4, #-4]
 800b334:	2501      	movs	r5, #1
 800b336:	3c04      	subs	r4, #4
 800b338:	6822      	ldr	r2, [r4, #0]
 800b33a:	f000 000f 	and.w	r0, r0, #15
 800b33e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b342:	6020      	str	r0, [r4, #0]
 800b344:	e7c3      	b.n	800b2ce <__hexnan+0x7a>
 800b346:	2508      	movs	r5, #8
 800b348:	e7c1      	b.n	800b2ce <__hexnan+0x7a>
 800b34a:	9b01      	ldr	r3, [sp, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d0df      	beq.n	800b310 <__hexnan+0xbc>
 800b350:	f04f 32ff 	mov.w	r2, #4294967295
 800b354:	f1c3 0320 	rsb	r3, r3, #32
 800b358:	fa22 f303 	lsr.w	r3, r2, r3
 800b35c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b360:	401a      	ands	r2, r3
 800b362:	f847 2c04 	str.w	r2, [r7, #-4]
 800b366:	e7d3      	b.n	800b310 <__hexnan+0xbc>
 800b368:	3e04      	subs	r6, #4
 800b36a:	e7d1      	b.n	800b310 <__hexnan+0xbc>
 800b36c:	2004      	movs	r0, #4
 800b36e:	b007      	add	sp, #28
 800b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b374 <__locale_ctype_ptr_l>:
 800b374:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b378:	4770      	bx	lr

0800b37a <__localeconv_l>:
 800b37a:	30f0      	adds	r0, #240	; 0xf0
 800b37c:	4770      	bx	lr
	...

0800b380 <_localeconv_r>:
 800b380:	4b04      	ldr	r3, [pc, #16]	; (800b394 <_localeconv_r+0x14>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	6a18      	ldr	r0, [r3, #32]
 800b386:	4b04      	ldr	r3, [pc, #16]	; (800b398 <_localeconv_r+0x18>)
 800b388:	2800      	cmp	r0, #0
 800b38a:	bf08      	it	eq
 800b38c:	4618      	moveq	r0, r3
 800b38e:	30f0      	adds	r0, #240	; 0xf0
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	2000002c 	.word	0x2000002c
 800b398:	20000090 	.word	0x20000090

0800b39c <malloc>:
 800b39c:	4b02      	ldr	r3, [pc, #8]	; (800b3a8 <malloc+0xc>)
 800b39e:	4601      	mov	r1, r0
 800b3a0:	6818      	ldr	r0, [r3, #0]
 800b3a2:	f000 bc71 	b.w	800bc88 <_malloc_r>
 800b3a6:	bf00      	nop
 800b3a8:	2000002c 	.word	0x2000002c

0800b3ac <__ascii_mbtowc>:
 800b3ac:	b082      	sub	sp, #8
 800b3ae:	b901      	cbnz	r1, 800b3b2 <__ascii_mbtowc+0x6>
 800b3b0:	a901      	add	r1, sp, #4
 800b3b2:	b142      	cbz	r2, 800b3c6 <__ascii_mbtowc+0x1a>
 800b3b4:	b14b      	cbz	r3, 800b3ca <__ascii_mbtowc+0x1e>
 800b3b6:	7813      	ldrb	r3, [r2, #0]
 800b3b8:	600b      	str	r3, [r1, #0]
 800b3ba:	7812      	ldrb	r2, [r2, #0]
 800b3bc:	1c10      	adds	r0, r2, #0
 800b3be:	bf18      	it	ne
 800b3c0:	2001      	movne	r0, #1
 800b3c2:	b002      	add	sp, #8
 800b3c4:	4770      	bx	lr
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	e7fb      	b.n	800b3c2 <__ascii_mbtowc+0x16>
 800b3ca:	f06f 0001 	mvn.w	r0, #1
 800b3ce:	e7f8      	b.n	800b3c2 <__ascii_mbtowc+0x16>

0800b3d0 <_Balloc>:
 800b3d0:	b570      	push	{r4, r5, r6, lr}
 800b3d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	460e      	mov	r6, r1
 800b3d8:	b93d      	cbnz	r5, 800b3ea <_Balloc+0x1a>
 800b3da:	2010      	movs	r0, #16
 800b3dc:	f7ff ffde 	bl	800b39c <malloc>
 800b3e0:	6260      	str	r0, [r4, #36]	; 0x24
 800b3e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b3e6:	6005      	str	r5, [r0, #0]
 800b3e8:	60c5      	str	r5, [r0, #12]
 800b3ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b3ec:	68eb      	ldr	r3, [r5, #12]
 800b3ee:	b183      	cbz	r3, 800b412 <_Balloc+0x42>
 800b3f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b3f8:	b9b8      	cbnz	r0, 800b42a <_Balloc+0x5a>
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	fa01 f506 	lsl.w	r5, r1, r6
 800b400:	1d6a      	adds	r2, r5, #5
 800b402:	0092      	lsls	r2, r2, #2
 800b404:	4620      	mov	r0, r4
 800b406:	f000 fbe2 	bl	800bbce <_calloc_r>
 800b40a:	b160      	cbz	r0, 800b426 <_Balloc+0x56>
 800b40c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b410:	e00e      	b.n	800b430 <_Balloc+0x60>
 800b412:	2221      	movs	r2, #33	; 0x21
 800b414:	2104      	movs	r1, #4
 800b416:	4620      	mov	r0, r4
 800b418:	f000 fbd9 	bl	800bbce <_calloc_r>
 800b41c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b41e:	60e8      	str	r0, [r5, #12]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1e4      	bne.n	800b3f0 <_Balloc+0x20>
 800b426:	2000      	movs	r0, #0
 800b428:	bd70      	pop	{r4, r5, r6, pc}
 800b42a:	6802      	ldr	r2, [r0, #0]
 800b42c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b430:	2300      	movs	r3, #0
 800b432:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b436:	e7f7      	b.n	800b428 <_Balloc+0x58>

0800b438 <_Bfree>:
 800b438:	b570      	push	{r4, r5, r6, lr}
 800b43a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b43c:	4606      	mov	r6, r0
 800b43e:	460d      	mov	r5, r1
 800b440:	b93c      	cbnz	r4, 800b452 <_Bfree+0x1a>
 800b442:	2010      	movs	r0, #16
 800b444:	f7ff ffaa 	bl	800b39c <malloc>
 800b448:	6270      	str	r0, [r6, #36]	; 0x24
 800b44a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b44e:	6004      	str	r4, [r0, #0]
 800b450:	60c4      	str	r4, [r0, #12]
 800b452:	b13d      	cbz	r5, 800b464 <_Bfree+0x2c>
 800b454:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b456:	686a      	ldr	r2, [r5, #4]
 800b458:	68db      	ldr	r3, [r3, #12]
 800b45a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b45e:	6029      	str	r1, [r5, #0]
 800b460:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b464:	bd70      	pop	{r4, r5, r6, pc}

0800b466 <__multadd>:
 800b466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b46a:	690d      	ldr	r5, [r1, #16]
 800b46c:	461f      	mov	r7, r3
 800b46e:	4606      	mov	r6, r0
 800b470:	460c      	mov	r4, r1
 800b472:	f101 0c14 	add.w	ip, r1, #20
 800b476:	2300      	movs	r3, #0
 800b478:	f8dc 0000 	ldr.w	r0, [ip]
 800b47c:	b281      	uxth	r1, r0
 800b47e:	fb02 7101 	mla	r1, r2, r1, r7
 800b482:	0c0f      	lsrs	r7, r1, #16
 800b484:	0c00      	lsrs	r0, r0, #16
 800b486:	fb02 7000 	mla	r0, r2, r0, r7
 800b48a:	b289      	uxth	r1, r1
 800b48c:	3301      	adds	r3, #1
 800b48e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b492:	429d      	cmp	r5, r3
 800b494:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b498:	f84c 1b04 	str.w	r1, [ip], #4
 800b49c:	dcec      	bgt.n	800b478 <__multadd+0x12>
 800b49e:	b1d7      	cbz	r7, 800b4d6 <__multadd+0x70>
 800b4a0:	68a3      	ldr	r3, [r4, #8]
 800b4a2:	42ab      	cmp	r3, r5
 800b4a4:	dc12      	bgt.n	800b4cc <__multadd+0x66>
 800b4a6:	6861      	ldr	r1, [r4, #4]
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	3101      	adds	r1, #1
 800b4ac:	f7ff ff90 	bl	800b3d0 <_Balloc>
 800b4b0:	6922      	ldr	r2, [r4, #16]
 800b4b2:	3202      	adds	r2, #2
 800b4b4:	f104 010c 	add.w	r1, r4, #12
 800b4b8:	4680      	mov	r8, r0
 800b4ba:	0092      	lsls	r2, r2, #2
 800b4bc:	300c      	adds	r0, #12
 800b4be:	f7fd f861 	bl	8008584 <memcpy>
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f7ff ffb7 	bl	800b438 <_Bfree>
 800b4ca:	4644      	mov	r4, r8
 800b4cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4d0:	3501      	adds	r5, #1
 800b4d2:	615f      	str	r7, [r3, #20]
 800b4d4:	6125      	str	r5, [r4, #16]
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b4dc <__s2b>:
 800b4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	4615      	mov	r5, r2
 800b4e4:	461f      	mov	r7, r3
 800b4e6:	2209      	movs	r2, #9
 800b4e8:	3308      	adds	r3, #8
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	db20      	blt.n	800b53a <__s2b+0x5e>
 800b4f8:	4630      	mov	r0, r6
 800b4fa:	f7ff ff69 	bl	800b3d0 <_Balloc>
 800b4fe:	9b08      	ldr	r3, [sp, #32]
 800b500:	6143      	str	r3, [r0, #20]
 800b502:	2d09      	cmp	r5, #9
 800b504:	f04f 0301 	mov.w	r3, #1
 800b508:	6103      	str	r3, [r0, #16]
 800b50a:	dd19      	ble.n	800b540 <__s2b+0x64>
 800b50c:	f104 0809 	add.w	r8, r4, #9
 800b510:	46c1      	mov	r9, r8
 800b512:	442c      	add	r4, r5
 800b514:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b518:	4601      	mov	r1, r0
 800b51a:	3b30      	subs	r3, #48	; 0x30
 800b51c:	220a      	movs	r2, #10
 800b51e:	4630      	mov	r0, r6
 800b520:	f7ff ffa1 	bl	800b466 <__multadd>
 800b524:	45a1      	cmp	r9, r4
 800b526:	d1f5      	bne.n	800b514 <__s2b+0x38>
 800b528:	eb08 0405 	add.w	r4, r8, r5
 800b52c:	3c08      	subs	r4, #8
 800b52e:	1b2d      	subs	r5, r5, r4
 800b530:	1963      	adds	r3, r4, r5
 800b532:	42bb      	cmp	r3, r7
 800b534:	db07      	blt.n	800b546 <__s2b+0x6a>
 800b536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b53a:	0052      	lsls	r2, r2, #1
 800b53c:	3101      	adds	r1, #1
 800b53e:	e7d9      	b.n	800b4f4 <__s2b+0x18>
 800b540:	340a      	adds	r4, #10
 800b542:	2509      	movs	r5, #9
 800b544:	e7f3      	b.n	800b52e <__s2b+0x52>
 800b546:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b54a:	4601      	mov	r1, r0
 800b54c:	3b30      	subs	r3, #48	; 0x30
 800b54e:	220a      	movs	r2, #10
 800b550:	4630      	mov	r0, r6
 800b552:	f7ff ff88 	bl	800b466 <__multadd>
 800b556:	e7eb      	b.n	800b530 <__s2b+0x54>

0800b558 <__hi0bits>:
 800b558:	0c02      	lsrs	r2, r0, #16
 800b55a:	0412      	lsls	r2, r2, #16
 800b55c:	4603      	mov	r3, r0
 800b55e:	b9b2      	cbnz	r2, 800b58e <__hi0bits+0x36>
 800b560:	0403      	lsls	r3, r0, #16
 800b562:	2010      	movs	r0, #16
 800b564:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b568:	bf04      	itt	eq
 800b56a:	021b      	lsleq	r3, r3, #8
 800b56c:	3008      	addeq	r0, #8
 800b56e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b572:	bf04      	itt	eq
 800b574:	011b      	lsleq	r3, r3, #4
 800b576:	3004      	addeq	r0, #4
 800b578:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b57c:	bf04      	itt	eq
 800b57e:	009b      	lsleq	r3, r3, #2
 800b580:	3002      	addeq	r0, #2
 800b582:	2b00      	cmp	r3, #0
 800b584:	db06      	blt.n	800b594 <__hi0bits+0x3c>
 800b586:	005b      	lsls	r3, r3, #1
 800b588:	d503      	bpl.n	800b592 <__hi0bits+0x3a>
 800b58a:	3001      	adds	r0, #1
 800b58c:	4770      	bx	lr
 800b58e:	2000      	movs	r0, #0
 800b590:	e7e8      	b.n	800b564 <__hi0bits+0xc>
 800b592:	2020      	movs	r0, #32
 800b594:	4770      	bx	lr

0800b596 <__lo0bits>:
 800b596:	6803      	ldr	r3, [r0, #0]
 800b598:	f013 0207 	ands.w	r2, r3, #7
 800b59c:	4601      	mov	r1, r0
 800b59e:	d00b      	beq.n	800b5b8 <__lo0bits+0x22>
 800b5a0:	07da      	lsls	r2, r3, #31
 800b5a2:	d423      	bmi.n	800b5ec <__lo0bits+0x56>
 800b5a4:	0798      	lsls	r0, r3, #30
 800b5a6:	bf49      	itett	mi
 800b5a8:	085b      	lsrmi	r3, r3, #1
 800b5aa:	089b      	lsrpl	r3, r3, #2
 800b5ac:	2001      	movmi	r0, #1
 800b5ae:	600b      	strmi	r3, [r1, #0]
 800b5b0:	bf5c      	itt	pl
 800b5b2:	600b      	strpl	r3, [r1, #0]
 800b5b4:	2002      	movpl	r0, #2
 800b5b6:	4770      	bx	lr
 800b5b8:	b298      	uxth	r0, r3
 800b5ba:	b9a8      	cbnz	r0, 800b5e8 <__lo0bits+0x52>
 800b5bc:	0c1b      	lsrs	r3, r3, #16
 800b5be:	2010      	movs	r0, #16
 800b5c0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b5c4:	bf04      	itt	eq
 800b5c6:	0a1b      	lsreq	r3, r3, #8
 800b5c8:	3008      	addeq	r0, #8
 800b5ca:	071a      	lsls	r2, r3, #28
 800b5cc:	bf04      	itt	eq
 800b5ce:	091b      	lsreq	r3, r3, #4
 800b5d0:	3004      	addeq	r0, #4
 800b5d2:	079a      	lsls	r2, r3, #30
 800b5d4:	bf04      	itt	eq
 800b5d6:	089b      	lsreq	r3, r3, #2
 800b5d8:	3002      	addeq	r0, #2
 800b5da:	07da      	lsls	r2, r3, #31
 800b5dc:	d402      	bmi.n	800b5e4 <__lo0bits+0x4e>
 800b5de:	085b      	lsrs	r3, r3, #1
 800b5e0:	d006      	beq.n	800b5f0 <__lo0bits+0x5a>
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	600b      	str	r3, [r1, #0]
 800b5e6:	4770      	bx	lr
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	e7e9      	b.n	800b5c0 <__lo0bits+0x2a>
 800b5ec:	2000      	movs	r0, #0
 800b5ee:	4770      	bx	lr
 800b5f0:	2020      	movs	r0, #32
 800b5f2:	4770      	bx	lr

0800b5f4 <__i2b>:
 800b5f4:	b510      	push	{r4, lr}
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	2101      	movs	r1, #1
 800b5fa:	f7ff fee9 	bl	800b3d0 <_Balloc>
 800b5fe:	2201      	movs	r2, #1
 800b600:	6144      	str	r4, [r0, #20]
 800b602:	6102      	str	r2, [r0, #16]
 800b604:	bd10      	pop	{r4, pc}

0800b606 <__multiply>:
 800b606:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60a:	4614      	mov	r4, r2
 800b60c:	690a      	ldr	r2, [r1, #16]
 800b60e:	6923      	ldr	r3, [r4, #16]
 800b610:	429a      	cmp	r2, r3
 800b612:	bfb8      	it	lt
 800b614:	460b      	movlt	r3, r1
 800b616:	4688      	mov	r8, r1
 800b618:	bfbc      	itt	lt
 800b61a:	46a0      	movlt	r8, r4
 800b61c:	461c      	movlt	r4, r3
 800b61e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b622:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b626:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b62a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b62e:	eb07 0609 	add.w	r6, r7, r9
 800b632:	42b3      	cmp	r3, r6
 800b634:	bfb8      	it	lt
 800b636:	3101      	addlt	r1, #1
 800b638:	f7ff feca 	bl	800b3d0 <_Balloc>
 800b63c:	f100 0514 	add.w	r5, r0, #20
 800b640:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b644:	462b      	mov	r3, r5
 800b646:	2200      	movs	r2, #0
 800b648:	4573      	cmp	r3, lr
 800b64a:	d316      	bcc.n	800b67a <__multiply+0x74>
 800b64c:	f104 0214 	add.w	r2, r4, #20
 800b650:	f108 0114 	add.w	r1, r8, #20
 800b654:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b658:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	9b00      	ldr	r3, [sp, #0]
 800b660:	9201      	str	r2, [sp, #4]
 800b662:	4293      	cmp	r3, r2
 800b664:	d80c      	bhi.n	800b680 <__multiply+0x7a>
 800b666:	2e00      	cmp	r6, #0
 800b668:	dd03      	ble.n	800b672 <__multiply+0x6c>
 800b66a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d05d      	beq.n	800b72e <__multiply+0x128>
 800b672:	6106      	str	r6, [r0, #16]
 800b674:	b003      	add	sp, #12
 800b676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67a:	f843 2b04 	str.w	r2, [r3], #4
 800b67e:	e7e3      	b.n	800b648 <__multiply+0x42>
 800b680:	f8b2 b000 	ldrh.w	fp, [r2]
 800b684:	f1bb 0f00 	cmp.w	fp, #0
 800b688:	d023      	beq.n	800b6d2 <__multiply+0xcc>
 800b68a:	4689      	mov	r9, r1
 800b68c:	46ac      	mov	ip, r5
 800b68e:	f04f 0800 	mov.w	r8, #0
 800b692:	f859 4b04 	ldr.w	r4, [r9], #4
 800b696:	f8dc a000 	ldr.w	sl, [ip]
 800b69a:	b2a3      	uxth	r3, r4
 800b69c:	fa1f fa8a 	uxth.w	sl, sl
 800b6a0:	fb0b a303 	mla	r3, fp, r3, sl
 800b6a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b6a8:	f8dc 4000 	ldr.w	r4, [ip]
 800b6ac:	4443      	add	r3, r8
 800b6ae:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b6b2:	fb0b 840a 	mla	r4, fp, sl, r8
 800b6b6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b6ba:	46e2      	mov	sl, ip
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b6c2:	454f      	cmp	r7, r9
 800b6c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b6c8:	f84a 3b04 	str.w	r3, [sl], #4
 800b6cc:	d82b      	bhi.n	800b726 <__multiply+0x120>
 800b6ce:	f8cc 8004 	str.w	r8, [ip, #4]
 800b6d2:	9b01      	ldr	r3, [sp, #4]
 800b6d4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b6d8:	3204      	adds	r2, #4
 800b6da:	f1ba 0f00 	cmp.w	sl, #0
 800b6de:	d020      	beq.n	800b722 <__multiply+0x11c>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	4689      	mov	r9, r1
 800b6e4:	46a8      	mov	r8, r5
 800b6e6:	f04f 0b00 	mov.w	fp, #0
 800b6ea:	f8b9 c000 	ldrh.w	ip, [r9]
 800b6ee:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b6f2:	fb0a 440c 	mla	r4, sl, ip, r4
 800b6f6:	445c      	add	r4, fp
 800b6f8:	46c4      	mov	ip, r8
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b700:	f84c 3b04 	str.w	r3, [ip], #4
 800b704:	f859 3b04 	ldr.w	r3, [r9], #4
 800b708:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b70c:	0c1b      	lsrs	r3, r3, #16
 800b70e:	fb0a b303 	mla	r3, sl, r3, fp
 800b712:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b716:	454f      	cmp	r7, r9
 800b718:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b71c:	d805      	bhi.n	800b72a <__multiply+0x124>
 800b71e:	f8c8 3004 	str.w	r3, [r8, #4]
 800b722:	3504      	adds	r5, #4
 800b724:	e79b      	b.n	800b65e <__multiply+0x58>
 800b726:	46d4      	mov	ip, sl
 800b728:	e7b3      	b.n	800b692 <__multiply+0x8c>
 800b72a:	46e0      	mov	r8, ip
 800b72c:	e7dd      	b.n	800b6ea <__multiply+0xe4>
 800b72e:	3e01      	subs	r6, #1
 800b730:	e799      	b.n	800b666 <__multiply+0x60>
	...

0800b734 <__pow5mult>:
 800b734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b738:	4615      	mov	r5, r2
 800b73a:	f012 0203 	ands.w	r2, r2, #3
 800b73e:	4606      	mov	r6, r0
 800b740:	460f      	mov	r7, r1
 800b742:	d007      	beq.n	800b754 <__pow5mult+0x20>
 800b744:	3a01      	subs	r2, #1
 800b746:	4c21      	ldr	r4, [pc, #132]	; (800b7cc <__pow5mult+0x98>)
 800b748:	2300      	movs	r3, #0
 800b74a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b74e:	f7ff fe8a 	bl	800b466 <__multadd>
 800b752:	4607      	mov	r7, r0
 800b754:	10ad      	asrs	r5, r5, #2
 800b756:	d035      	beq.n	800b7c4 <__pow5mult+0x90>
 800b758:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b75a:	b93c      	cbnz	r4, 800b76c <__pow5mult+0x38>
 800b75c:	2010      	movs	r0, #16
 800b75e:	f7ff fe1d 	bl	800b39c <malloc>
 800b762:	6270      	str	r0, [r6, #36]	; 0x24
 800b764:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b768:	6004      	str	r4, [r0, #0]
 800b76a:	60c4      	str	r4, [r0, #12]
 800b76c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b770:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b774:	b94c      	cbnz	r4, 800b78a <__pow5mult+0x56>
 800b776:	f240 2171 	movw	r1, #625	; 0x271
 800b77a:	4630      	mov	r0, r6
 800b77c:	f7ff ff3a 	bl	800b5f4 <__i2b>
 800b780:	2300      	movs	r3, #0
 800b782:	f8c8 0008 	str.w	r0, [r8, #8]
 800b786:	4604      	mov	r4, r0
 800b788:	6003      	str	r3, [r0, #0]
 800b78a:	f04f 0800 	mov.w	r8, #0
 800b78e:	07eb      	lsls	r3, r5, #31
 800b790:	d50a      	bpl.n	800b7a8 <__pow5mult+0x74>
 800b792:	4639      	mov	r1, r7
 800b794:	4622      	mov	r2, r4
 800b796:	4630      	mov	r0, r6
 800b798:	f7ff ff35 	bl	800b606 <__multiply>
 800b79c:	4639      	mov	r1, r7
 800b79e:	4681      	mov	r9, r0
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f7ff fe49 	bl	800b438 <_Bfree>
 800b7a6:	464f      	mov	r7, r9
 800b7a8:	106d      	asrs	r5, r5, #1
 800b7aa:	d00b      	beq.n	800b7c4 <__pow5mult+0x90>
 800b7ac:	6820      	ldr	r0, [r4, #0]
 800b7ae:	b938      	cbnz	r0, 800b7c0 <__pow5mult+0x8c>
 800b7b0:	4622      	mov	r2, r4
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	4630      	mov	r0, r6
 800b7b6:	f7ff ff26 	bl	800b606 <__multiply>
 800b7ba:	6020      	str	r0, [r4, #0]
 800b7bc:	f8c0 8000 	str.w	r8, [r0]
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	e7e4      	b.n	800b78e <__pow5mult+0x5a>
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ca:	bf00      	nop
 800b7cc:	0800cbc0 	.word	0x0800cbc0

0800b7d0 <__lshift>:
 800b7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7da:	6923      	ldr	r3, [r4, #16]
 800b7dc:	6849      	ldr	r1, [r1, #4]
 800b7de:	eb0a 0903 	add.w	r9, sl, r3
 800b7e2:	68a3      	ldr	r3, [r4, #8]
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	4616      	mov	r6, r2
 800b7e8:	f109 0501 	add.w	r5, r9, #1
 800b7ec:	42ab      	cmp	r3, r5
 800b7ee:	db32      	blt.n	800b856 <__lshift+0x86>
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	f7ff fded 	bl	800b3d0 <_Balloc>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	4680      	mov	r8, r0
 800b7fa:	f100 0114 	add.w	r1, r0, #20
 800b7fe:	461a      	mov	r2, r3
 800b800:	4553      	cmp	r3, sl
 800b802:	db2b      	blt.n	800b85c <__lshift+0x8c>
 800b804:	6920      	ldr	r0, [r4, #16]
 800b806:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b80a:	f104 0314 	add.w	r3, r4, #20
 800b80e:	f016 021f 	ands.w	r2, r6, #31
 800b812:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b816:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b81a:	d025      	beq.n	800b868 <__lshift+0x98>
 800b81c:	f1c2 0e20 	rsb	lr, r2, #32
 800b820:	2000      	movs	r0, #0
 800b822:	681e      	ldr	r6, [r3, #0]
 800b824:	468a      	mov	sl, r1
 800b826:	4096      	lsls	r6, r2
 800b828:	4330      	orrs	r0, r6
 800b82a:	f84a 0b04 	str.w	r0, [sl], #4
 800b82e:	f853 0b04 	ldr.w	r0, [r3], #4
 800b832:	459c      	cmp	ip, r3
 800b834:	fa20 f00e 	lsr.w	r0, r0, lr
 800b838:	d814      	bhi.n	800b864 <__lshift+0x94>
 800b83a:	6048      	str	r0, [r1, #4]
 800b83c:	b108      	cbz	r0, 800b842 <__lshift+0x72>
 800b83e:	f109 0502 	add.w	r5, r9, #2
 800b842:	3d01      	subs	r5, #1
 800b844:	4638      	mov	r0, r7
 800b846:	f8c8 5010 	str.w	r5, [r8, #16]
 800b84a:	4621      	mov	r1, r4
 800b84c:	f7ff fdf4 	bl	800b438 <_Bfree>
 800b850:	4640      	mov	r0, r8
 800b852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b856:	3101      	adds	r1, #1
 800b858:	005b      	lsls	r3, r3, #1
 800b85a:	e7c7      	b.n	800b7ec <__lshift+0x1c>
 800b85c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b860:	3301      	adds	r3, #1
 800b862:	e7cd      	b.n	800b800 <__lshift+0x30>
 800b864:	4651      	mov	r1, sl
 800b866:	e7dc      	b.n	800b822 <__lshift+0x52>
 800b868:	3904      	subs	r1, #4
 800b86a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b86e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b872:	459c      	cmp	ip, r3
 800b874:	d8f9      	bhi.n	800b86a <__lshift+0x9a>
 800b876:	e7e4      	b.n	800b842 <__lshift+0x72>

0800b878 <__mcmp>:
 800b878:	6903      	ldr	r3, [r0, #16]
 800b87a:	690a      	ldr	r2, [r1, #16]
 800b87c:	1a9b      	subs	r3, r3, r2
 800b87e:	b530      	push	{r4, r5, lr}
 800b880:	d10c      	bne.n	800b89c <__mcmp+0x24>
 800b882:	0092      	lsls	r2, r2, #2
 800b884:	3014      	adds	r0, #20
 800b886:	3114      	adds	r1, #20
 800b888:	1884      	adds	r4, r0, r2
 800b88a:	4411      	add	r1, r2
 800b88c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b890:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b894:	4295      	cmp	r5, r2
 800b896:	d003      	beq.n	800b8a0 <__mcmp+0x28>
 800b898:	d305      	bcc.n	800b8a6 <__mcmp+0x2e>
 800b89a:	2301      	movs	r3, #1
 800b89c:	4618      	mov	r0, r3
 800b89e:	bd30      	pop	{r4, r5, pc}
 800b8a0:	42a0      	cmp	r0, r4
 800b8a2:	d3f3      	bcc.n	800b88c <__mcmp+0x14>
 800b8a4:	e7fa      	b.n	800b89c <__mcmp+0x24>
 800b8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8aa:	e7f7      	b.n	800b89c <__mcmp+0x24>

0800b8ac <__mdiff>:
 800b8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b0:	460d      	mov	r5, r1
 800b8b2:	4607      	mov	r7, r0
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	4614      	mov	r4, r2
 800b8ba:	f7ff ffdd 	bl	800b878 <__mcmp>
 800b8be:	1e06      	subs	r6, r0, #0
 800b8c0:	d108      	bne.n	800b8d4 <__mdiff+0x28>
 800b8c2:	4631      	mov	r1, r6
 800b8c4:	4638      	mov	r0, r7
 800b8c6:	f7ff fd83 	bl	800b3d0 <_Balloc>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b8d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d4:	bfa4      	itt	ge
 800b8d6:	4623      	movge	r3, r4
 800b8d8:	462c      	movge	r4, r5
 800b8da:	4638      	mov	r0, r7
 800b8dc:	6861      	ldr	r1, [r4, #4]
 800b8de:	bfa6      	itte	ge
 800b8e0:	461d      	movge	r5, r3
 800b8e2:	2600      	movge	r6, #0
 800b8e4:	2601      	movlt	r6, #1
 800b8e6:	f7ff fd73 	bl	800b3d0 <_Balloc>
 800b8ea:	692b      	ldr	r3, [r5, #16]
 800b8ec:	60c6      	str	r6, [r0, #12]
 800b8ee:	6926      	ldr	r6, [r4, #16]
 800b8f0:	f105 0914 	add.w	r9, r5, #20
 800b8f4:	f104 0214 	add.w	r2, r4, #20
 800b8f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b8fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b900:	f100 0514 	add.w	r5, r0, #20
 800b904:	f04f 0e00 	mov.w	lr, #0
 800b908:	f852 ab04 	ldr.w	sl, [r2], #4
 800b90c:	f859 4b04 	ldr.w	r4, [r9], #4
 800b910:	fa1e f18a 	uxtah	r1, lr, sl
 800b914:	b2a3      	uxth	r3, r4
 800b916:	1ac9      	subs	r1, r1, r3
 800b918:	0c23      	lsrs	r3, r4, #16
 800b91a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b91e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b922:	b289      	uxth	r1, r1
 800b924:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b928:	45c8      	cmp	r8, r9
 800b92a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b92e:	4694      	mov	ip, r2
 800b930:	f845 3b04 	str.w	r3, [r5], #4
 800b934:	d8e8      	bhi.n	800b908 <__mdiff+0x5c>
 800b936:	45bc      	cmp	ip, r7
 800b938:	d304      	bcc.n	800b944 <__mdiff+0x98>
 800b93a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b93e:	b183      	cbz	r3, 800b962 <__mdiff+0xb6>
 800b940:	6106      	str	r6, [r0, #16]
 800b942:	e7c5      	b.n	800b8d0 <__mdiff+0x24>
 800b944:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b948:	fa1e f381 	uxtah	r3, lr, r1
 800b94c:	141a      	asrs	r2, r3, #16
 800b94e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b952:	b29b      	uxth	r3, r3
 800b954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b958:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b95c:	f845 3b04 	str.w	r3, [r5], #4
 800b960:	e7e9      	b.n	800b936 <__mdiff+0x8a>
 800b962:	3e01      	subs	r6, #1
 800b964:	e7e9      	b.n	800b93a <__mdiff+0x8e>
	...

0800b968 <__ulp>:
 800b968:	4b12      	ldr	r3, [pc, #72]	; (800b9b4 <__ulp+0x4c>)
 800b96a:	ee10 2a90 	vmov	r2, s1
 800b96e:	401a      	ands	r2, r3
 800b970:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b974:	2b00      	cmp	r3, #0
 800b976:	dd04      	ble.n	800b982 <__ulp+0x1a>
 800b978:	2000      	movs	r0, #0
 800b97a:	4619      	mov	r1, r3
 800b97c:	ec41 0b10 	vmov	d0, r0, r1
 800b980:	4770      	bx	lr
 800b982:	425b      	negs	r3, r3
 800b984:	151b      	asrs	r3, r3, #20
 800b986:	2b13      	cmp	r3, #19
 800b988:	f04f 0000 	mov.w	r0, #0
 800b98c:	f04f 0100 	mov.w	r1, #0
 800b990:	dc04      	bgt.n	800b99c <__ulp+0x34>
 800b992:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b996:	fa42 f103 	asr.w	r1, r2, r3
 800b99a:	e7ef      	b.n	800b97c <__ulp+0x14>
 800b99c:	3b14      	subs	r3, #20
 800b99e:	2b1e      	cmp	r3, #30
 800b9a0:	f04f 0201 	mov.w	r2, #1
 800b9a4:	bfda      	itte	le
 800b9a6:	f1c3 031f 	rsble	r3, r3, #31
 800b9aa:	fa02 f303 	lslle.w	r3, r2, r3
 800b9ae:	4613      	movgt	r3, r2
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	e7e3      	b.n	800b97c <__ulp+0x14>
 800b9b4:	7ff00000 	.word	0x7ff00000

0800b9b8 <__b2d>:
 800b9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ba:	6905      	ldr	r5, [r0, #16]
 800b9bc:	f100 0714 	add.w	r7, r0, #20
 800b9c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b9c4:	1f2e      	subs	r6, r5, #4
 800b9c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	f7ff fdc4 	bl	800b558 <__hi0bits>
 800b9d0:	f1c0 0320 	rsb	r3, r0, #32
 800b9d4:	280a      	cmp	r0, #10
 800b9d6:	600b      	str	r3, [r1, #0]
 800b9d8:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ba50 <__b2d+0x98>
 800b9dc:	dc14      	bgt.n	800ba08 <__b2d+0x50>
 800b9de:	f1c0 0e0b 	rsb	lr, r0, #11
 800b9e2:	fa24 f10e 	lsr.w	r1, r4, lr
 800b9e6:	42b7      	cmp	r7, r6
 800b9e8:	ea41 030c 	orr.w	r3, r1, ip
 800b9ec:	bf34      	ite	cc
 800b9ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b9f2:	2100      	movcs	r1, #0
 800b9f4:	3015      	adds	r0, #21
 800b9f6:	fa04 f000 	lsl.w	r0, r4, r0
 800b9fa:	fa21 f10e 	lsr.w	r1, r1, lr
 800b9fe:	ea40 0201 	orr.w	r2, r0, r1
 800ba02:	ec43 2b10 	vmov	d0, r2, r3
 800ba06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba08:	42b7      	cmp	r7, r6
 800ba0a:	bf3a      	itte	cc
 800ba0c:	f1a5 0608 	subcc.w	r6, r5, #8
 800ba10:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba14:	2100      	movcs	r1, #0
 800ba16:	380b      	subs	r0, #11
 800ba18:	d015      	beq.n	800ba46 <__b2d+0x8e>
 800ba1a:	4084      	lsls	r4, r0
 800ba1c:	f1c0 0520 	rsb	r5, r0, #32
 800ba20:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800ba24:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800ba28:	42be      	cmp	r6, r7
 800ba2a:	fa21 fc05 	lsr.w	ip, r1, r5
 800ba2e:	ea44 030c 	orr.w	r3, r4, ip
 800ba32:	bf8c      	ite	hi
 800ba34:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ba38:	2400      	movls	r4, #0
 800ba3a:	fa01 f000 	lsl.w	r0, r1, r0
 800ba3e:	40ec      	lsrs	r4, r5
 800ba40:	ea40 0204 	orr.w	r2, r0, r4
 800ba44:	e7dd      	b.n	800ba02 <__b2d+0x4a>
 800ba46:	ea44 030c 	orr.w	r3, r4, ip
 800ba4a:	460a      	mov	r2, r1
 800ba4c:	e7d9      	b.n	800ba02 <__b2d+0x4a>
 800ba4e:	bf00      	nop
 800ba50:	3ff00000 	.word	0x3ff00000

0800ba54 <__d2b>:
 800ba54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba58:	460e      	mov	r6, r1
 800ba5a:	2101      	movs	r1, #1
 800ba5c:	ec59 8b10 	vmov	r8, r9, d0
 800ba60:	4615      	mov	r5, r2
 800ba62:	f7ff fcb5 	bl	800b3d0 <_Balloc>
 800ba66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ba6a:	4607      	mov	r7, r0
 800ba6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba70:	bb34      	cbnz	r4, 800bac0 <__d2b+0x6c>
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	f1b8 0300 	subs.w	r3, r8, #0
 800ba78:	d027      	beq.n	800baca <__d2b+0x76>
 800ba7a:	a802      	add	r0, sp, #8
 800ba7c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ba80:	f7ff fd89 	bl	800b596 <__lo0bits>
 800ba84:	9900      	ldr	r1, [sp, #0]
 800ba86:	b1f0      	cbz	r0, 800bac6 <__d2b+0x72>
 800ba88:	9a01      	ldr	r2, [sp, #4]
 800ba8a:	f1c0 0320 	rsb	r3, r0, #32
 800ba8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba92:	430b      	orrs	r3, r1
 800ba94:	40c2      	lsrs	r2, r0
 800ba96:	617b      	str	r3, [r7, #20]
 800ba98:	9201      	str	r2, [sp, #4]
 800ba9a:	9b01      	ldr	r3, [sp, #4]
 800ba9c:	61bb      	str	r3, [r7, #24]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	bf14      	ite	ne
 800baa2:	2102      	movne	r1, #2
 800baa4:	2101      	moveq	r1, #1
 800baa6:	6139      	str	r1, [r7, #16]
 800baa8:	b1c4      	cbz	r4, 800badc <__d2b+0x88>
 800baaa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800baae:	4404      	add	r4, r0
 800bab0:	6034      	str	r4, [r6, #0]
 800bab2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bab6:	6028      	str	r0, [r5, #0]
 800bab8:	4638      	mov	r0, r7
 800baba:	b003      	add	sp, #12
 800babc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bac4:	e7d5      	b.n	800ba72 <__d2b+0x1e>
 800bac6:	6179      	str	r1, [r7, #20]
 800bac8:	e7e7      	b.n	800ba9a <__d2b+0x46>
 800baca:	a801      	add	r0, sp, #4
 800bacc:	f7ff fd63 	bl	800b596 <__lo0bits>
 800bad0:	9b01      	ldr	r3, [sp, #4]
 800bad2:	617b      	str	r3, [r7, #20]
 800bad4:	2101      	movs	r1, #1
 800bad6:	6139      	str	r1, [r7, #16]
 800bad8:	3020      	adds	r0, #32
 800bada:	e7e5      	b.n	800baa8 <__d2b+0x54>
 800badc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bae0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bae4:	6030      	str	r0, [r6, #0]
 800bae6:	6918      	ldr	r0, [r3, #16]
 800bae8:	f7ff fd36 	bl	800b558 <__hi0bits>
 800baec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800baf0:	e7e1      	b.n	800bab6 <__d2b+0x62>

0800baf2 <__ratio>:
 800baf2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf6:	4688      	mov	r8, r1
 800baf8:	4669      	mov	r1, sp
 800bafa:	4681      	mov	r9, r0
 800bafc:	f7ff ff5c 	bl	800b9b8 <__b2d>
 800bb00:	a901      	add	r1, sp, #4
 800bb02:	4640      	mov	r0, r8
 800bb04:	ec57 6b10 	vmov	r6, r7, d0
 800bb08:	f7ff ff56 	bl	800b9b8 <__b2d>
 800bb0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb10:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bb14:	eba3 0c02 	sub.w	ip, r3, r2
 800bb18:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb1c:	1a9b      	subs	r3, r3, r2
 800bb1e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bb22:	ec5b ab10 	vmov	sl, fp, d0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	bfce      	itee	gt
 800bb2a:	463a      	movgt	r2, r7
 800bb2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bb30:	465a      	movle	r2, fp
 800bb32:	4659      	mov	r1, fp
 800bb34:	463d      	mov	r5, r7
 800bb36:	bfd4      	ite	le
 800bb38:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800bb3c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800bb40:	4630      	mov	r0, r6
 800bb42:	ee10 2a10 	vmov	r2, s0
 800bb46:	460b      	mov	r3, r1
 800bb48:	4629      	mov	r1, r5
 800bb4a:	f7f4 fea7 	bl	800089c <__aeabi_ddiv>
 800bb4e:	ec41 0b10 	vmov	d0, r0, r1
 800bb52:	b003      	add	sp, #12
 800bb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb58 <__copybits>:
 800bb58:	3901      	subs	r1, #1
 800bb5a:	b510      	push	{r4, lr}
 800bb5c:	1149      	asrs	r1, r1, #5
 800bb5e:	6914      	ldr	r4, [r2, #16]
 800bb60:	3101      	adds	r1, #1
 800bb62:	f102 0314 	add.w	r3, r2, #20
 800bb66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bb6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb6e:	42a3      	cmp	r3, r4
 800bb70:	4602      	mov	r2, r0
 800bb72:	d303      	bcc.n	800bb7c <__copybits+0x24>
 800bb74:	2300      	movs	r3, #0
 800bb76:	428a      	cmp	r2, r1
 800bb78:	d305      	bcc.n	800bb86 <__copybits+0x2e>
 800bb7a:	bd10      	pop	{r4, pc}
 800bb7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb80:	f840 2b04 	str.w	r2, [r0], #4
 800bb84:	e7f3      	b.n	800bb6e <__copybits+0x16>
 800bb86:	f842 3b04 	str.w	r3, [r2], #4
 800bb8a:	e7f4      	b.n	800bb76 <__copybits+0x1e>

0800bb8c <__any_on>:
 800bb8c:	f100 0214 	add.w	r2, r0, #20
 800bb90:	6900      	ldr	r0, [r0, #16]
 800bb92:	114b      	asrs	r3, r1, #5
 800bb94:	4298      	cmp	r0, r3
 800bb96:	b510      	push	{r4, lr}
 800bb98:	db11      	blt.n	800bbbe <__any_on+0x32>
 800bb9a:	dd0a      	ble.n	800bbb2 <__any_on+0x26>
 800bb9c:	f011 011f 	ands.w	r1, r1, #31
 800bba0:	d007      	beq.n	800bbb2 <__any_on+0x26>
 800bba2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bba6:	fa24 f001 	lsr.w	r0, r4, r1
 800bbaa:	fa00 f101 	lsl.w	r1, r0, r1
 800bbae:	428c      	cmp	r4, r1
 800bbb0:	d10b      	bne.n	800bbca <__any_on+0x3e>
 800bbb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d803      	bhi.n	800bbc2 <__any_on+0x36>
 800bbba:	2000      	movs	r0, #0
 800bbbc:	bd10      	pop	{r4, pc}
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	e7f7      	b.n	800bbb2 <__any_on+0x26>
 800bbc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbc6:	2900      	cmp	r1, #0
 800bbc8:	d0f5      	beq.n	800bbb6 <__any_on+0x2a>
 800bbca:	2001      	movs	r0, #1
 800bbcc:	e7f6      	b.n	800bbbc <__any_on+0x30>

0800bbce <_calloc_r>:
 800bbce:	b538      	push	{r3, r4, r5, lr}
 800bbd0:	fb02 f401 	mul.w	r4, r2, r1
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	f000 f857 	bl	800bc88 <_malloc_r>
 800bbda:	4605      	mov	r5, r0
 800bbdc:	b118      	cbz	r0, 800bbe6 <_calloc_r+0x18>
 800bbde:	4622      	mov	r2, r4
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	f7fc fcda 	bl	800859a <memset>
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bbec <_free_r>:
 800bbec:	b538      	push	{r3, r4, r5, lr}
 800bbee:	4605      	mov	r5, r0
 800bbf0:	2900      	cmp	r1, #0
 800bbf2:	d045      	beq.n	800bc80 <_free_r+0x94>
 800bbf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbf8:	1f0c      	subs	r4, r1, #4
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	bfb8      	it	lt
 800bbfe:	18e4      	addlt	r4, r4, r3
 800bc00:	f000 fa24 	bl	800c04c <__malloc_lock>
 800bc04:	4a1f      	ldr	r2, [pc, #124]	; (800bc84 <_free_r+0x98>)
 800bc06:	6813      	ldr	r3, [r2, #0]
 800bc08:	4610      	mov	r0, r2
 800bc0a:	b933      	cbnz	r3, 800bc1a <_free_r+0x2e>
 800bc0c:	6063      	str	r3, [r4, #4]
 800bc0e:	6014      	str	r4, [r2, #0]
 800bc10:	4628      	mov	r0, r5
 800bc12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc16:	f000 ba1a 	b.w	800c04e <__malloc_unlock>
 800bc1a:	42a3      	cmp	r3, r4
 800bc1c:	d90c      	bls.n	800bc38 <_free_r+0x4c>
 800bc1e:	6821      	ldr	r1, [r4, #0]
 800bc20:	1862      	adds	r2, r4, r1
 800bc22:	4293      	cmp	r3, r2
 800bc24:	bf04      	itt	eq
 800bc26:	681a      	ldreq	r2, [r3, #0]
 800bc28:	685b      	ldreq	r3, [r3, #4]
 800bc2a:	6063      	str	r3, [r4, #4]
 800bc2c:	bf04      	itt	eq
 800bc2e:	1852      	addeq	r2, r2, r1
 800bc30:	6022      	streq	r2, [r4, #0]
 800bc32:	6004      	str	r4, [r0, #0]
 800bc34:	e7ec      	b.n	800bc10 <_free_r+0x24>
 800bc36:	4613      	mov	r3, r2
 800bc38:	685a      	ldr	r2, [r3, #4]
 800bc3a:	b10a      	cbz	r2, 800bc40 <_free_r+0x54>
 800bc3c:	42a2      	cmp	r2, r4
 800bc3e:	d9fa      	bls.n	800bc36 <_free_r+0x4a>
 800bc40:	6819      	ldr	r1, [r3, #0]
 800bc42:	1858      	adds	r0, r3, r1
 800bc44:	42a0      	cmp	r0, r4
 800bc46:	d10b      	bne.n	800bc60 <_free_r+0x74>
 800bc48:	6820      	ldr	r0, [r4, #0]
 800bc4a:	4401      	add	r1, r0
 800bc4c:	1858      	adds	r0, r3, r1
 800bc4e:	4282      	cmp	r2, r0
 800bc50:	6019      	str	r1, [r3, #0]
 800bc52:	d1dd      	bne.n	800bc10 <_free_r+0x24>
 800bc54:	6810      	ldr	r0, [r2, #0]
 800bc56:	6852      	ldr	r2, [r2, #4]
 800bc58:	605a      	str	r2, [r3, #4]
 800bc5a:	4401      	add	r1, r0
 800bc5c:	6019      	str	r1, [r3, #0]
 800bc5e:	e7d7      	b.n	800bc10 <_free_r+0x24>
 800bc60:	d902      	bls.n	800bc68 <_free_r+0x7c>
 800bc62:	230c      	movs	r3, #12
 800bc64:	602b      	str	r3, [r5, #0]
 800bc66:	e7d3      	b.n	800bc10 <_free_r+0x24>
 800bc68:	6820      	ldr	r0, [r4, #0]
 800bc6a:	1821      	adds	r1, r4, r0
 800bc6c:	428a      	cmp	r2, r1
 800bc6e:	bf04      	itt	eq
 800bc70:	6811      	ldreq	r1, [r2, #0]
 800bc72:	6852      	ldreq	r2, [r2, #4]
 800bc74:	6062      	str	r2, [r4, #4]
 800bc76:	bf04      	itt	eq
 800bc78:	1809      	addeq	r1, r1, r0
 800bc7a:	6021      	streq	r1, [r4, #0]
 800bc7c:	605c      	str	r4, [r3, #4]
 800bc7e:	e7c7      	b.n	800bc10 <_free_r+0x24>
 800bc80:	bd38      	pop	{r3, r4, r5, pc}
 800bc82:	bf00      	nop
 800bc84:	2000025c 	.word	0x2000025c

0800bc88 <_malloc_r>:
 800bc88:	b570      	push	{r4, r5, r6, lr}
 800bc8a:	1ccd      	adds	r5, r1, #3
 800bc8c:	f025 0503 	bic.w	r5, r5, #3
 800bc90:	3508      	adds	r5, #8
 800bc92:	2d0c      	cmp	r5, #12
 800bc94:	bf38      	it	cc
 800bc96:	250c      	movcc	r5, #12
 800bc98:	2d00      	cmp	r5, #0
 800bc9a:	4606      	mov	r6, r0
 800bc9c:	db01      	blt.n	800bca2 <_malloc_r+0x1a>
 800bc9e:	42a9      	cmp	r1, r5
 800bca0:	d903      	bls.n	800bcaa <_malloc_r+0x22>
 800bca2:	230c      	movs	r3, #12
 800bca4:	6033      	str	r3, [r6, #0]
 800bca6:	2000      	movs	r0, #0
 800bca8:	bd70      	pop	{r4, r5, r6, pc}
 800bcaa:	f000 f9cf 	bl	800c04c <__malloc_lock>
 800bcae:	4a21      	ldr	r2, [pc, #132]	; (800bd34 <_malloc_r+0xac>)
 800bcb0:	6814      	ldr	r4, [r2, #0]
 800bcb2:	4621      	mov	r1, r4
 800bcb4:	b991      	cbnz	r1, 800bcdc <_malloc_r+0x54>
 800bcb6:	4c20      	ldr	r4, [pc, #128]	; (800bd38 <_malloc_r+0xb0>)
 800bcb8:	6823      	ldr	r3, [r4, #0]
 800bcba:	b91b      	cbnz	r3, 800bcc4 <_malloc_r+0x3c>
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	f000 f98f 	bl	800bfe0 <_sbrk_r>
 800bcc2:	6020      	str	r0, [r4, #0]
 800bcc4:	4629      	mov	r1, r5
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	f000 f98a 	bl	800bfe0 <_sbrk_r>
 800bccc:	1c43      	adds	r3, r0, #1
 800bcce:	d124      	bne.n	800bd1a <_malloc_r+0x92>
 800bcd0:	230c      	movs	r3, #12
 800bcd2:	6033      	str	r3, [r6, #0]
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	f000 f9ba 	bl	800c04e <__malloc_unlock>
 800bcda:	e7e4      	b.n	800bca6 <_malloc_r+0x1e>
 800bcdc:	680b      	ldr	r3, [r1, #0]
 800bcde:	1b5b      	subs	r3, r3, r5
 800bce0:	d418      	bmi.n	800bd14 <_malloc_r+0x8c>
 800bce2:	2b0b      	cmp	r3, #11
 800bce4:	d90f      	bls.n	800bd06 <_malloc_r+0x7e>
 800bce6:	600b      	str	r3, [r1, #0]
 800bce8:	50cd      	str	r5, [r1, r3]
 800bcea:	18cc      	adds	r4, r1, r3
 800bcec:	4630      	mov	r0, r6
 800bcee:	f000 f9ae 	bl	800c04e <__malloc_unlock>
 800bcf2:	f104 000b 	add.w	r0, r4, #11
 800bcf6:	1d23      	adds	r3, r4, #4
 800bcf8:	f020 0007 	bic.w	r0, r0, #7
 800bcfc:	1ac3      	subs	r3, r0, r3
 800bcfe:	d0d3      	beq.n	800bca8 <_malloc_r+0x20>
 800bd00:	425a      	negs	r2, r3
 800bd02:	50e2      	str	r2, [r4, r3]
 800bd04:	e7d0      	b.n	800bca8 <_malloc_r+0x20>
 800bd06:	428c      	cmp	r4, r1
 800bd08:	684b      	ldr	r3, [r1, #4]
 800bd0a:	bf16      	itet	ne
 800bd0c:	6063      	strne	r3, [r4, #4]
 800bd0e:	6013      	streq	r3, [r2, #0]
 800bd10:	460c      	movne	r4, r1
 800bd12:	e7eb      	b.n	800bcec <_malloc_r+0x64>
 800bd14:	460c      	mov	r4, r1
 800bd16:	6849      	ldr	r1, [r1, #4]
 800bd18:	e7cc      	b.n	800bcb4 <_malloc_r+0x2c>
 800bd1a:	1cc4      	adds	r4, r0, #3
 800bd1c:	f024 0403 	bic.w	r4, r4, #3
 800bd20:	42a0      	cmp	r0, r4
 800bd22:	d005      	beq.n	800bd30 <_malloc_r+0xa8>
 800bd24:	1a21      	subs	r1, r4, r0
 800bd26:	4630      	mov	r0, r6
 800bd28:	f000 f95a 	bl	800bfe0 <_sbrk_r>
 800bd2c:	3001      	adds	r0, #1
 800bd2e:	d0cf      	beq.n	800bcd0 <_malloc_r+0x48>
 800bd30:	6025      	str	r5, [r4, #0]
 800bd32:	e7db      	b.n	800bcec <_malloc_r+0x64>
 800bd34:	2000025c 	.word	0x2000025c
 800bd38:	20000260 	.word	0x20000260

0800bd3c <__ssputs_r>:
 800bd3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd40:	688e      	ldr	r6, [r1, #8]
 800bd42:	429e      	cmp	r6, r3
 800bd44:	4682      	mov	sl, r0
 800bd46:	460c      	mov	r4, r1
 800bd48:	4690      	mov	r8, r2
 800bd4a:	4699      	mov	r9, r3
 800bd4c:	d837      	bhi.n	800bdbe <__ssputs_r+0x82>
 800bd4e:	898a      	ldrh	r2, [r1, #12]
 800bd50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd54:	d031      	beq.n	800bdba <__ssputs_r+0x7e>
 800bd56:	6825      	ldr	r5, [r4, #0]
 800bd58:	6909      	ldr	r1, [r1, #16]
 800bd5a:	1a6f      	subs	r7, r5, r1
 800bd5c:	6965      	ldr	r5, [r4, #20]
 800bd5e:	2302      	movs	r3, #2
 800bd60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd64:	fb95 f5f3 	sdiv	r5, r5, r3
 800bd68:	f109 0301 	add.w	r3, r9, #1
 800bd6c:	443b      	add	r3, r7
 800bd6e:	429d      	cmp	r5, r3
 800bd70:	bf38      	it	cc
 800bd72:	461d      	movcc	r5, r3
 800bd74:	0553      	lsls	r3, r2, #21
 800bd76:	d530      	bpl.n	800bdda <__ssputs_r+0x9e>
 800bd78:	4629      	mov	r1, r5
 800bd7a:	f7ff ff85 	bl	800bc88 <_malloc_r>
 800bd7e:	4606      	mov	r6, r0
 800bd80:	b950      	cbnz	r0, 800bd98 <__ssputs_r+0x5c>
 800bd82:	230c      	movs	r3, #12
 800bd84:	f8ca 3000 	str.w	r3, [sl]
 800bd88:	89a3      	ldrh	r3, [r4, #12]
 800bd8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd8e:	81a3      	strh	r3, [r4, #12]
 800bd90:	f04f 30ff 	mov.w	r0, #4294967295
 800bd94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd98:	463a      	mov	r2, r7
 800bd9a:	6921      	ldr	r1, [r4, #16]
 800bd9c:	f7fc fbf2 	bl	8008584 <memcpy>
 800bda0:	89a3      	ldrh	r3, [r4, #12]
 800bda2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bda6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdaa:	81a3      	strh	r3, [r4, #12]
 800bdac:	6126      	str	r6, [r4, #16]
 800bdae:	6165      	str	r5, [r4, #20]
 800bdb0:	443e      	add	r6, r7
 800bdb2:	1bed      	subs	r5, r5, r7
 800bdb4:	6026      	str	r6, [r4, #0]
 800bdb6:	60a5      	str	r5, [r4, #8]
 800bdb8:	464e      	mov	r6, r9
 800bdba:	454e      	cmp	r6, r9
 800bdbc:	d900      	bls.n	800bdc0 <__ssputs_r+0x84>
 800bdbe:	464e      	mov	r6, r9
 800bdc0:	4632      	mov	r2, r6
 800bdc2:	4641      	mov	r1, r8
 800bdc4:	6820      	ldr	r0, [r4, #0]
 800bdc6:	f000 f928 	bl	800c01a <memmove>
 800bdca:	68a3      	ldr	r3, [r4, #8]
 800bdcc:	1b9b      	subs	r3, r3, r6
 800bdce:	60a3      	str	r3, [r4, #8]
 800bdd0:	6823      	ldr	r3, [r4, #0]
 800bdd2:	441e      	add	r6, r3
 800bdd4:	6026      	str	r6, [r4, #0]
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	e7dc      	b.n	800bd94 <__ssputs_r+0x58>
 800bdda:	462a      	mov	r2, r5
 800bddc:	f000 f938 	bl	800c050 <_realloc_r>
 800bde0:	4606      	mov	r6, r0
 800bde2:	2800      	cmp	r0, #0
 800bde4:	d1e2      	bne.n	800bdac <__ssputs_r+0x70>
 800bde6:	6921      	ldr	r1, [r4, #16]
 800bde8:	4650      	mov	r0, sl
 800bdea:	f7ff feff 	bl	800bbec <_free_r>
 800bdee:	e7c8      	b.n	800bd82 <__ssputs_r+0x46>

0800bdf0 <_svfiprintf_r>:
 800bdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf4:	461d      	mov	r5, r3
 800bdf6:	898b      	ldrh	r3, [r1, #12]
 800bdf8:	061f      	lsls	r7, r3, #24
 800bdfa:	b09d      	sub	sp, #116	; 0x74
 800bdfc:	4680      	mov	r8, r0
 800bdfe:	460c      	mov	r4, r1
 800be00:	4616      	mov	r6, r2
 800be02:	d50f      	bpl.n	800be24 <_svfiprintf_r+0x34>
 800be04:	690b      	ldr	r3, [r1, #16]
 800be06:	b96b      	cbnz	r3, 800be24 <_svfiprintf_r+0x34>
 800be08:	2140      	movs	r1, #64	; 0x40
 800be0a:	f7ff ff3d 	bl	800bc88 <_malloc_r>
 800be0e:	6020      	str	r0, [r4, #0]
 800be10:	6120      	str	r0, [r4, #16]
 800be12:	b928      	cbnz	r0, 800be20 <_svfiprintf_r+0x30>
 800be14:	230c      	movs	r3, #12
 800be16:	f8c8 3000 	str.w	r3, [r8]
 800be1a:	f04f 30ff 	mov.w	r0, #4294967295
 800be1e:	e0c8      	b.n	800bfb2 <_svfiprintf_r+0x1c2>
 800be20:	2340      	movs	r3, #64	; 0x40
 800be22:	6163      	str	r3, [r4, #20]
 800be24:	2300      	movs	r3, #0
 800be26:	9309      	str	r3, [sp, #36]	; 0x24
 800be28:	2320      	movs	r3, #32
 800be2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be2e:	2330      	movs	r3, #48	; 0x30
 800be30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be34:	9503      	str	r5, [sp, #12]
 800be36:	f04f 0b01 	mov.w	fp, #1
 800be3a:	4637      	mov	r7, r6
 800be3c:	463d      	mov	r5, r7
 800be3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be42:	b10b      	cbz	r3, 800be48 <_svfiprintf_r+0x58>
 800be44:	2b25      	cmp	r3, #37	; 0x25
 800be46:	d13e      	bne.n	800bec6 <_svfiprintf_r+0xd6>
 800be48:	ebb7 0a06 	subs.w	sl, r7, r6
 800be4c:	d00b      	beq.n	800be66 <_svfiprintf_r+0x76>
 800be4e:	4653      	mov	r3, sl
 800be50:	4632      	mov	r2, r6
 800be52:	4621      	mov	r1, r4
 800be54:	4640      	mov	r0, r8
 800be56:	f7ff ff71 	bl	800bd3c <__ssputs_r>
 800be5a:	3001      	adds	r0, #1
 800be5c:	f000 80a4 	beq.w	800bfa8 <_svfiprintf_r+0x1b8>
 800be60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be62:	4453      	add	r3, sl
 800be64:	9309      	str	r3, [sp, #36]	; 0x24
 800be66:	783b      	ldrb	r3, [r7, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 809d 	beq.w	800bfa8 <_svfiprintf_r+0x1b8>
 800be6e:	2300      	movs	r3, #0
 800be70:	f04f 32ff 	mov.w	r2, #4294967295
 800be74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be78:	9304      	str	r3, [sp, #16]
 800be7a:	9307      	str	r3, [sp, #28]
 800be7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be80:	931a      	str	r3, [sp, #104]	; 0x68
 800be82:	462f      	mov	r7, r5
 800be84:	2205      	movs	r2, #5
 800be86:	f817 1b01 	ldrb.w	r1, [r7], #1
 800be8a:	4850      	ldr	r0, [pc, #320]	; (800bfcc <_svfiprintf_r+0x1dc>)
 800be8c:	f7f4 f9d0 	bl	8000230 <memchr>
 800be90:	9b04      	ldr	r3, [sp, #16]
 800be92:	b9d0      	cbnz	r0, 800beca <_svfiprintf_r+0xda>
 800be94:	06d9      	lsls	r1, r3, #27
 800be96:	bf44      	itt	mi
 800be98:	2220      	movmi	r2, #32
 800be9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be9e:	071a      	lsls	r2, r3, #28
 800bea0:	bf44      	itt	mi
 800bea2:	222b      	movmi	r2, #43	; 0x2b
 800bea4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bea8:	782a      	ldrb	r2, [r5, #0]
 800beaa:	2a2a      	cmp	r2, #42	; 0x2a
 800beac:	d015      	beq.n	800beda <_svfiprintf_r+0xea>
 800beae:	9a07      	ldr	r2, [sp, #28]
 800beb0:	462f      	mov	r7, r5
 800beb2:	2000      	movs	r0, #0
 800beb4:	250a      	movs	r5, #10
 800beb6:	4639      	mov	r1, r7
 800beb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bebc:	3b30      	subs	r3, #48	; 0x30
 800bebe:	2b09      	cmp	r3, #9
 800bec0:	d94d      	bls.n	800bf5e <_svfiprintf_r+0x16e>
 800bec2:	b1b8      	cbz	r0, 800bef4 <_svfiprintf_r+0x104>
 800bec4:	e00f      	b.n	800bee6 <_svfiprintf_r+0xf6>
 800bec6:	462f      	mov	r7, r5
 800bec8:	e7b8      	b.n	800be3c <_svfiprintf_r+0x4c>
 800beca:	4a40      	ldr	r2, [pc, #256]	; (800bfcc <_svfiprintf_r+0x1dc>)
 800becc:	1a80      	subs	r0, r0, r2
 800bece:	fa0b f000 	lsl.w	r0, fp, r0
 800bed2:	4318      	orrs	r0, r3
 800bed4:	9004      	str	r0, [sp, #16]
 800bed6:	463d      	mov	r5, r7
 800bed8:	e7d3      	b.n	800be82 <_svfiprintf_r+0x92>
 800beda:	9a03      	ldr	r2, [sp, #12]
 800bedc:	1d11      	adds	r1, r2, #4
 800bede:	6812      	ldr	r2, [r2, #0]
 800bee0:	9103      	str	r1, [sp, #12]
 800bee2:	2a00      	cmp	r2, #0
 800bee4:	db01      	blt.n	800beea <_svfiprintf_r+0xfa>
 800bee6:	9207      	str	r2, [sp, #28]
 800bee8:	e004      	b.n	800bef4 <_svfiprintf_r+0x104>
 800beea:	4252      	negs	r2, r2
 800beec:	f043 0302 	orr.w	r3, r3, #2
 800bef0:	9207      	str	r2, [sp, #28]
 800bef2:	9304      	str	r3, [sp, #16]
 800bef4:	783b      	ldrb	r3, [r7, #0]
 800bef6:	2b2e      	cmp	r3, #46	; 0x2e
 800bef8:	d10c      	bne.n	800bf14 <_svfiprintf_r+0x124>
 800befa:	787b      	ldrb	r3, [r7, #1]
 800befc:	2b2a      	cmp	r3, #42	; 0x2a
 800befe:	d133      	bne.n	800bf68 <_svfiprintf_r+0x178>
 800bf00:	9b03      	ldr	r3, [sp, #12]
 800bf02:	1d1a      	adds	r2, r3, #4
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	9203      	str	r2, [sp, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	bfb8      	it	lt
 800bf0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf10:	3702      	adds	r7, #2
 800bf12:	9305      	str	r3, [sp, #20]
 800bf14:	4d2e      	ldr	r5, [pc, #184]	; (800bfd0 <_svfiprintf_r+0x1e0>)
 800bf16:	7839      	ldrb	r1, [r7, #0]
 800bf18:	2203      	movs	r2, #3
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	f7f4 f988 	bl	8000230 <memchr>
 800bf20:	b138      	cbz	r0, 800bf32 <_svfiprintf_r+0x142>
 800bf22:	2340      	movs	r3, #64	; 0x40
 800bf24:	1b40      	subs	r0, r0, r5
 800bf26:	fa03 f000 	lsl.w	r0, r3, r0
 800bf2a:	9b04      	ldr	r3, [sp, #16]
 800bf2c:	4303      	orrs	r3, r0
 800bf2e:	3701      	adds	r7, #1
 800bf30:	9304      	str	r3, [sp, #16]
 800bf32:	7839      	ldrb	r1, [r7, #0]
 800bf34:	4827      	ldr	r0, [pc, #156]	; (800bfd4 <_svfiprintf_r+0x1e4>)
 800bf36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf3a:	2206      	movs	r2, #6
 800bf3c:	1c7e      	adds	r6, r7, #1
 800bf3e:	f7f4 f977 	bl	8000230 <memchr>
 800bf42:	2800      	cmp	r0, #0
 800bf44:	d038      	beq.n	800bfb8 <_svfiprintf_r+0x1c8>
 800bf46:	4b24      	ldr	r3, [pc, #144]	; (800bfd8 <_svfiprintf_r+0x1e8>)
 800bf48:	bb13      	cbnz	r3, 800bf90 <_svfiprintf_r+0x1a0>
 800bf4a:	9b03      	ldr	r3, [sp, #12]
 800bf4c:	3307      	adds	r3, #7
 800bf4e:	f023 0307 	bic.w	r3, r3, #7
 800bf52:	3308      	adds	r3, #8
 800bf54:	9303      	str	r3, [sp, #12]
 800bf56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf58:	444b      	add	r3, r9
 800bf5a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf5c:	e76d      	b.n	800be3a <_svfiprintf_r+0x4a>
 800bf5e:	fb05 3202 	mla	r2, r5, r2, r3
 800bf62:	2001      	movs	r0, #1
 800bf64:	460f      	mov	r7, r1
 800bf66:	e7a6      	b.n	800beb6 <_svfiprintf_r+0xc6>
 800bf68:	2300      	movs	r3, #0
 800bf6a:	3701      	adds	r7, #1
 800bf6c:	9305      	str	r3, [sp, #20]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	250a      	movs	r5, #10
 800bf72:	4638      	mov	r0, r7
 800bf74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf78:	3a30      	subs	r2, #48	; 0x30
 800bf7a:	2a09      	cmp	r2, #9
 800bf7c:	d903      	bls.n	800bf86 <_svfiprintf_r+0x196>
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0c8      	beq.n	800bf14 <_svfiprintf_r+0x124>
 800bf82:	9105      	str	r1, [sp, #20]
 800bf84:	e7c6      	b.n	800bf14 <_svfiprintf_r+0x124>
 800bf86:	fb05 2101 	mla	r1, r5, r1, r2
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	4607      	mov	r7, r0
 800bf8e:	e7f0      	b.n	800bf72 <_svfiprintf_r+0x182>
 800bf90:	ab03      	add	r3, sp, #12
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	4622      	mov	r2, r4
 800bf96:	4b11      	ldr	r3, [pc, #68]	; (800bfdc <_svfiprintf_r+0x1ec>)
 800bf98:	a904      	add	r1, sp, #16
 800bf9a:	4640      	mov	r0, r8
 800bf9c:	f7fc fb9a 	bl	80086d4 <_printf_float>
 800bfa0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bfa4:	4681      	mov	r9, r0
 800bfa6:	d1d6      	bne.n	800bf56 <_svfiprintf_r+0x166>
 800bfa8:	89a3      	ldrh	r3, [r4, #12]
 800bfaa:	065b      	lsls	r3, r3, #25
 800bfac:	f53f af35 	bmi.w	800be1a <_svfiprintf_r+0x2a>
 800bfb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfb2:	b01d      	add	sp, #116	; 0x74
 800bfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb8:	ab03      	add	r3, sp, #12
 800bfba:	9300      	str	r3, [sp, #0]
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	4b07      	ldr	r3, [pc, #28]	; (800bfdc <_svfiprintf_r+0x1ec>)
 800bfc0:	a904      	add	r1, sp, #16
 800bfc2:	4640      	mov	r0, r8
 800bfc4:	f7fc fe3c 	bl	8008c40 <_printf_i>
 800bfc8:	e7ea      	b.n	800bfa0 <_svfiprintf_r+0x1b0>
 800bfca:	bf00      	nop
 800bfcc:	0800cbcc 	.word	0x0800cbcc
 800bfd0:	0800cbd2 	.word	0x0800cbd2
 800bfd4:	0800cbd6 	.word	0x0800cbd6
 800bfd8:	080086d5 	.word	0x080086d5
 800bfdc:	0800bd3d 	.word	0x0800bd3d

0800bfe0 <_sbrk_r>:
 800bfe0:	b538      	push	{r3, r4, r5, lr}
 800bfe2:	4c06      	ldr	r4, [pc, #24]	; (800bffc <_sbrk_r+0x1c>)
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	4605      	mov	r5, r0
 800bfe8:	4608      	mov	r0, r1
 800bfea:	6023      	str	r3, [r4, #0]
 800bfec:	f7f6 fc8e 	bl	800290c <_sbrk>
 800bff0:	1c43      	adds	r3, r0, #1
 800bff2:	d102      	bne.n	800bffa <_sbrk_r+0x1a>
 800bff4:	6823      	ldr	r3, [r4, #0]
 800bff6:	b103      	cbz	r3, 800bffa <_sbrk_r+0x1a>
 800bff8:	602b      	str	r3, [r5, #0]
 800bffa:	bd38      	pop	{r3, r4, r5, pc}
 800bffc:	200004c8 	.word	0x200004c8

0800c000 <__ascii_wctomb>:
 800c000:	b149      	cbz	r1, 800c016 <__ascii_wctomb+0x16>
 800c002:	2aff      	cmp	r2, #255	; 0xff
 800c004:	bf85      	ittet	hi
 800c006:	238a      	movhi	r3, #138	; 0x8a
 800c008:	6003      	strhi	r3, [r0, #0]
 800c00a:	700a      	strbls	r2, [r1, #0]
 800c00c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c010:	bf98      	it	ls
 800c012:	2001      	movls	r0, #1
 800c014:	4770      	bx	lr
 800c016:	4608      	mov	r0, r1
 800c018:	4770      	bx	lr

0800c01a <memmove>:
 800c01a:	4288      	cmp	r0, r1
 800c01c:	b510      	push	{r4, lr}
 800c01e:	eb01 0302 	add.w	r3, r1, r2
 800c022:	d807      	bhi.n	800c034 <memmove+0x1a>
 800c024:	1e42      	subs	r2, r0, #1
 800c026:	4299      	cmp	r1, r3
 800c028:	d00a      	beq.n	800c040 <memmove+0x26>
 800c02a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c02e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c032:	e7f8      	b.n	800c026 <memmove+0xc>
 800c034:	4283      	cmp	r3, r0
 800c036:	d9f5      	bls.n	800c024 <memmove+0xa>
 800c038:	1881      	adds	r1, r0, r2
 800c03a:	1ad2      	subs	r2, r2, r3
 800c03c:	42d3      	cmn	r3, r2
 800c03e:	d100      	bne.n	800c042 <memmove+0x28>
 800c040:	bd10      	pop	{r4, pc}
 800c042:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c046:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c04a:	e7f7      	b.n	800c03c <memmove+0x22>

0800c04c <__malloc_lock>:
 800c04c:	4770      	bx	lr

0800c04e <__malloc_unlock>:
 800c04e:	4770      	bx	lr

0800c050 <_realloc_r>:
 800c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c052:	4607      	mov	r7, r0
 800c054:	4614      	mov	r4, r2
 800c056:	460e      	mov	r6, r1
 800c058:	b921      	cbnz	r1, 800c064 <_realloc_r+0x14>
 800c05a:	4611      	mov	r1, r2
 800c05c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c060:	f7ff be12 	b.w	800bc88 <_malloc_r>
 800c064:	b922      	cbnz	r2, 800c070 <_realloc_r+0x20>
 800c066:	f7ff fdc1 	bl	800bbec <_free_r>
 800c06a:	4625      	mov	r5, r4
 800c06c:	4628      	mov	r0, r5
 800c06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c070:	f000 f814 	bl	800c09c <_malloc_usable_size_r>
 800c074:	42a0      	cmp	r0, r4
 800c076:	d20f      	bcs.n	800c098 <_realloc_r+0x48>
 800c078:	4621      	mov	r1, r4
 800c07a:	4638      	mov	r0, r7
 800c07c:	f7ff fe04 	bl	800bc88 <_malloc_r>
 800c080:	4605      	mov	r5, r0
 800c082:	2800      	cmp	r0, #0
 800c084:	d0f2      	beq.n	800c06c <_realloc_r+0x1c>
 800c086:	4631      	mov	r1, r6
 800c088:	4622      	mov	r2, r4
 800c08a:	f7fc fa7b 	bl	8008584 <memcpy>
 800c08e:	4631      	mov	r1, r6
 800c090:	4638      	mov	r0, r7
 800c092:	f7ff fdab 	bl	800bbec <_free_r>
 800c096:	e7e9      	b.n	800c06c <_realloc_r+0x1c>
 800c098:	4635      	mov	r5, r6
 800c09a:	e7e7      	b.n	800c06c <_realloc_r+0x1c>

0800c09c <_malloc_usable_size_r>:
 800c09c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0a0:	1f18      	subs	r0, r3, #4
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	bfbc      	itt	lt
 800c0a6:	580b      	ldrlt	r3, [r1, r0]
 800c0a8:	18c0      	addlt	r0, r0, r3
 800c0aa:	4770      	bx	lr

0800c0ac <log>:
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	ed2d 8b02 	vpush	{d8}
 800c0b2:	b08a      	sub	sp, #40	; 0x28
 800c0b4:	ec55 4b10 	vmov	r4, r5, d0
 800c0b8:	f000 f87a 	bl	800c1b0 <__ieee754_log>
 800c0bc:	4b36      	ldr	r3, [pc, #216]	; (800c198 <log+0xec>)
 800c0be:	eeb0 8a40 	vmov.f32	s16, s0
 800c0c2:	eef0 8a60 	vmov.f32	s17, s1
 800c0c6:	f993 6000 	ldrsb.w	r6, [r3]
 800c0ca:	1c73      	adds	r3, r6, #1
 800c0cc:	d05b      	beq.n	800c186 <log+0xda>
 800c0ce:	4622      	mov	r2, r4
 800c0d0:	462b      	mov	r3, r5
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	f7f4 fd51 	bl	8000b7c <__aeabi_dcmpun>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d153      	bne.n	800c186 <log+0xda>
 800c0de:	2200      	movs	r2, #0
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	f7f4 fd3f 	bl	8000b68 <__aeabi_dcmpgt>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d14b      	bne.n	800c186 <log+0xda>
 800c0ee:	4b2b      	ldr	r3, [pc, #172]	; (800c19c <log+0xf0>)
 800c0f0:	9301      	str	r3, [sp, #4]
 800c0f2:	9008      	str	r0, [sp, #32]
 800c0f4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c0f8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c0fc:	b9a6      	cbnz	r6, 800c128 <log+0x7c>
 800c0fe:	4b28      	ldr	r3, [pc, #160]	; (800c1a0 <log+0xf4>)
 800c100:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c104:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c108:	4620      	mov	r0, r4
 800c10a:	2200      	movs	r2, #0
 800c10c:	2300      	movs	r3, #0
 800c10e:	4629      	mov	r1, r5
 800c110:	f7f4 fd02 	bl	8000b18 <__aeabi_dcmpeq>
 800c114:	bb40      	cbnz	r0, 800c168 <log+0xbc>
 800c116:	2301      	movs	r3, #1
 800c118:	2e02      	cmp	r6, #2
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	d119      	bne.n	800c152 <log+0xa6>
 800c11e:	f7fc fa07 	bl	8008530 <__errno>
 800c122:	2321      	movs	r3, #33	; 0x21
 800c124:	6003      	str	r3, [r0, #0]
 800c126:	e019      	b.n	800c15c <log+0xb0>
 800c128:	4b1e      	ldr	r3, [pc, #120]	; (800c1a4 <log+0xf8>)
 800c12a:	2200      	movs	r2, #0
 800c12c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c130:	4620      	mov	r0, r4
 800c132:	2200      	movs	r2, #0
 800c134:	2300      	movs	r3, #0
 800c136:	4629      	mov	r1, r5
 800c138:	f7f4 fcee 	bl	8000b18 <__aeabi_dcmpeq>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d0ea      	beq.n	800c116 <log+0x6a>
 800c140:	2302      	movs	r3, #2
 800c142:	429e      	cmp	r6, r3
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	d111      	bne.n	800c16c <log+0xc0>
 800c148:	f7fc f9f2 	bl	8008530 <__errno>
 800c14c:	2322      	movs	r3, #34	; 0x22
 800c14e:	6003      	str	r3, [r0, #0]
 800c150:	e011      	b.n	800c176 <log+0xca>
 800c152:	4668      	mov	r0, sp
 800c154:	f000 f9de 	bl	800c514 <matherr>
 800c158:	2800      	cmp	r0, #0
 800c15a:	d0e0      	beq.n	800c11e <log+0x72>
 800c15c:	4812      	ldr	r0, [pc, #72]	; (800c1a8 <log+0xfc>)
 800c15e:	f000 f9db 	bl	800c518 <nan>
 800c162:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c166:	e006      	b.n	800c176 <log+0xca>
 800c168:	2302      	movs	r3, #2
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	4668      	mov	r0, sp
 800c16e:	f000 f9d1 	bl	800c514 <matherr>
 800c172:	2800      	cmp	r0, #0
 800c174:	d0e8      	beq.n	800c148 <log+0x9c>
 800c176:	9b08      	ldr	r3, [sp, #32]
 800c178:	b11b      	cbz	r3, 800c182 <log+0xd6>
 800c17a:	f7fc f9d9 	bl	8008530 <__errno>
 800c17e:	9b08      	ldr	r3, [sp, #32]
 800c180:	6003      	str	r3, [r0, #0]
 800c182:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c186:	eeb0 0a48 	vmov.f32	s0, s16
 800c18a:	eef0 0a68 	vmov.f32	s1, s17
 800c18e:	b00a      	add	sp, #40	; 0x28
 800c190:	ecbd 8b02 	vpop	{d8}
 800c194:	bd70      	pop	{r4, r5, r6, pc}
 800c196:	bf00      	nop
 800c198:	200001fc 	.word	0x200001fc
 800c19c:	0800ccde 	.word	0x0800ccde
 800c1a0:	c7efffff 	.word	0xc7efffff
 800c1a4:	fff00000 	.word	0xfff00000
 800c1a8:	0800cbd1 	.word	0x0800cbd1
 800c1ac:	00000000 	.word	0x00000000

0800c1b0 <__ieee754_log>:
 800c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b4:	ec51 0b10 	vmov	r0, r1, d0
 800c1b8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c1bc:	b087      	sub	sp, #28
 800c1be:	460d      	mov	r5, r1
 800c1c0:	da27      	bge.n	800c212 <__ieee754_log+0x62>
 800c1c2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c1c6:	4303      	orrs	r3, r0
 800c1c8:	ee10 2a10 	vmov	r2, s0
 800c1cc:	d10a      	bne.n	800c1e4 <__ieee754_log+0x34>
 800c1ce:	49cc      	ldr	r1, [pc, #816]	; (800c500 <__ieee754_log+0x350>)
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	f7f4 fb61 	bl	800089c <__aeabi_ddiv>
 800c1da:	ec41 0b10 	vmov	d0, r0, r1
 800c1de:	b007      	add	sp, #28
 800c1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e4:	2900      	cmp	r1, #0
 800c1e6:	da05      	bge.n	800c1f4 <__ieee754_log+0x44>
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	f7f4 f875 	bl	80002d8 <__aeabi_dsub>
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	e7f0      	b.n	800c1d6 <__ieee754_log+0x26>
 800c1f4:	4bc3      	ldr	r3, [pc, #780]	; (800c504 <__ieee754_log+0x354>)
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f7f4 fa26 	bl	8000648 <__aeabi_dmul>
 800c1fc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c200:	460d      	mov	r5, r1
 800c202:	4ac1      	ldr	r2, [pc, #772]	; (800c508 <__ieee754_log+0x358>)
 800c204:	4295      	cmp	r5, r2
 800c206:	dd06      	ble.n	800c216 <__ieee754_log+0x66>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	f7f4 f866 	bl	80002dc <__adddf3>
 800c210:	e7e3      	b.n	800c1da <__ieee754_log+0x2a>
 800c212:	2300      	movs	r3, #0
 800c214:	e7f5      	b.n	800c202 <__ieee754_log+0x52>
 800c216:	152c      	asrs	r4, r5, #20
 800c218:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c21c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c220:	441c      	add	r4, r3
 800c222:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c226:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c22a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c22e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c232:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c236:	ea42 0105 	orr.w	r1, r2, r5
 800c23a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c23e:	2200      	movs	r2, #0
 800c240:	4bb2      	ldr	r3, [pc, #712]	; (800c50c <__ieee754_log+0x35c>)
 800c242:	f7f4 f849 	bl	80002d8 <__aeabi_dsub>
 800c246:	1cab      	adds	r3, r5, #2
 800c248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c24c:	2b02      	cmp	r3, #2
 800c24e:	4682      	mov	sl, r0
 800c250:	468b      	mov	fp, r1
 800c252:	f04f 0200 	mov.w	r2, #0
 800c256:	dc53      	bgt.n	800c300 <__ieee754_log+0x150>
 800c258:	2300      	movs	r3, #0
 800c25a:	f7f4 fc5d 	bl	8000b18 <__aeabi_dcmpeq>
 800c25e:	b1d0      	cbz	r0, 800c296 <__ieee754_log+0xe6>
 800c260:	2c00      	cmp	r4, #0
 800c262:	f000 8120 	beq.w	800c4a6 <__ieee754_log+0x2f6>
 800c266:	4620      	mov	r0, r4
 800c268:	f7f4 f984 	bl	8000574 <__aeabi_i2d>
 800c26c:	a390      	add	r3, pc, #576	; (adr r3, 800c4b0 <__ieee754_log+0x300>)
 800c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c272:	4606      	mov	r6, r0
 800c274:	460f      	mov	r7, r1
 800c276:	f7f4 f9e7 	bl	8000648 <__aeabi_dmul>
 800c27a:	a38f      	add	r3, pc, #572	; (adr r3, 800c4b8 <__ieee754_log+0x308>)
 800c27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c280:	4604      	mov	r4, r0
 800c282:	460d      	mov	r5, r1
 800c284:	4630      	mov	r0, r6
 800c286:	4639      	mov	r1, r7
 800c288:	f7f4 f9de 	bl	8000648 <__aeabi_dmul>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	4620      	mov	r0, r4
 800c292:	4629      	mov	r1, r5
 800c294:	e7ba      	b.n	800c20c <__ieee754_log+0x5c>
 800c296:	a38a      	add	r3, pc, #552	; (adr r3, 800c4c0 <__ieee754_log+0x310>)
 800c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29c:	4650      	mov	r0, sl
 800c29e:	4659      	mov	r1, fp
 800c2a0:	f7f4 f9d2 	bl	8000648 <__aeabi_dmul>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	4999      	ldr	r1, [pc, #612]	; (800c510 <__ieee754_log+0x360>)
 800c2ac:	f7f4 f814 	bl	80002d8 <__aeabi_dsub>
 800c2b0:	4652      	mov	r2, sl
 800c2b2:	4606      	mov	r6, r0
 800c2b4:	460f      	mov	r7, r1
 800c2b6:	465b      	mov	r3, fp
 800c2b8:	4650      	mov	r0, sl
 800c2ba:	4659      	mov	r1, fp
 800c2bc:	f7f4 f9c4 	bl	8000648 <__aeabi_dmul>
 800c2c0:	4602      	mov	r2, r0
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	4639      	mov	r1, r7
 800c2c8:	f7f4 f9be 	bl	8000648 <__aeabi_dmul>
 800c2cc:	4606      	mov	r6, r0
 800c2ce:	460f      	mov	r7, r1
 800c2d0:	b914      	cbnz	r4, 800c2d8 <__ieee754_log+0x128>
 800c2d2:	4632      	mov	r2, r6
 800c2d4:	463b      	mov	r3, r7
 800c2d6:	e0a0      	b.n	800c41a <__ieee754_log+0x26a>
 800c2d8:	4620      	mov	r0, r4
 800c2da:	f7f4 f94b 	bl	8000574 <__aeabi_i2d>
 800c2de:	a374      	add	r3, pc, #464	; (adr r3, 800c4b0 <__ieee754_log+0x300>)
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	4680      	mov	r8, r0
 800c2e6:	4689      	mov	r9, r1
 800c2e8:	f7f4 f9ae 	bl	8000648 <__aeabi_dmul>
 800c2ec:	a372      	add	r3, pc, #456	; (adr r3, 800c4b8 <__ieee754_log+0x308>)
 800c2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	460d      	mov	r5, r1
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	4649      	mov	r1, r9
 800c2fa:	f7f4 f9a5 	bl	8000648 <__aeabi_dmul>
 800c2fe:	e0a5      	b.n	800c44c <__ieee754_log+0x29c>
 800c300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c304:	f7f3 ffea 	bl	80002dc <__adddf3>
 800c308:	4602      	mov	r2, r0
 800c30a:	460b      	mov	r3, r1
 800c30c:	4650      	mov	r0, sl
 800c30e:	4659      	mov	r1, fp
 800c310:	f7f4 fac4 	bl	800089c <__aeabi_ddiv>
 800c314:	e9cd 0100 	strd	r0, r1, [sp]
 800c318:	4620      	mov	r0, r4
 800c31a:	f7f4 f92b 	bl	8000574 <__aeabi_i2d>
 800c31e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c326:	4610      	mov	r0, r2
 800c328:	4619      	mov	r1, r3
 800c32a:	f7f4 f98d 	bl	8000648 <__aeabi_dmul>
 800c32e:	4602      	mov	r2, r0
 800c330:	460b      	mov	r3, r1
 800c332:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c336:	f7f4 f987 	bl	8000648 <__aeabi_dmul>
 800c33a:	a363      	add	r3, pc, #396	; (adr r3, 800c4c8 <__ieee754_log+0x318>)
 800c33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c340:	4680      	mov	r8, r0
 800c342:	4689      	mov	r9, r1
 800c344:	f7f4 f980 	bl	8000648 <__aeabi_dmul>
 800c348:	a361      	add	r3, pc, #388	; (adr r3, 800c4d0 <__ieee754_log+0x320>)
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	f7f3 ffc5 	bl	80002dc <__adddf3>
 800c352:	4642      	mov	r2, r8
 800c354:	464b      	mov	r3, r9
 800c356:	f7f4 f977 	bl	8000648 <__aeabi_dmul>
 800c35a:	a35f      	add	r3, pc, #380	; (adr r3, 800c4d8 <__ieee754_log+0x328>)
 800c35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c360:	f7f3 ffbc 	bl	80002dc <__adddf3>
 800c364:	4642      	mov	r2, r8
 800c366:	464b      	mov	r3, r9
 800c368:	f7f4 f96e 	bl	8000648 <__aeabi_dmul>
 800c36c:	a35c      	add	r3, pc, #368	; (adr r3, 800c4e0 <__ieee754_log+0x330>)
 800c36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c372:	f7f3 ffb3 	bl	80002dc <__adddf3>
 800c376:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c37a:	f7f4 f965 	bl	8000648 <__aeabi_dmul>
 800c37e:	a35a      	add	r3, pc, #360	; (adr r3, 800c4e8 <__ieee754_log+0x338>)
 800c380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c388:	4640      	mov	r0, r8
 800c38a:	4649      	mov	r1, r9
 800c38c:	f7f4 f95c 	bl	8000648 <__aeabi_dmul>
 800c390:	a357      	add	r3, pc, #348	; (adr r3, 800c4f0 <__ieee754_log+0x340>)
 800c392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c396:	f7f3 ffa1 	bl	80002dc <__adddf3>
 800c39a:	4642      	mov	r2, r8
 800c39c:	464b      	mov	r3, r9
 800c39e:	f7f4 f953 	bl	8000648 <__aeabi_dmul>
 800c3a2:	a355      	add	r3, pc, #340	; (adr r3, 800c4f8 <__ieee754_log+0x348>)
 800c3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a8:	f7f3 ff98 	bl	80002dc <__adddf3>
 800c3ac:	4642      	mov	r2, r8
 800c3ae:	464b      	mov	r3, r9
 800c3b0:	f7f4 f94a 	bl	8000648 <__aeabi_dmul>
 800c3b4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c3c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c4:	f7f3 ff8a 	bl	80002dc <__adddf3>
 800c3c8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800c3cc:	3551      	adds	r5, #81	; 0x51
 800c3ce:	4335      	orrs	r5, r6
 800c3d0:	2d00      	cmp	r5, #0
 800c3d2:	4680      	mov	r8, r0
 800c3d4:	4689      	mov	r9, r1
 800c3d6:	dd48      	ble.n	800c46a <__ieee754_log+0x2ba>
 800c3d8:	2200      	movs	r2, #0
 800c3da:	4b4d      	ldr	r3, [pc, #308]	; (800c510 <__ieee754_log+0x360>)
 800c3dc:	4650      	mov	r0, sl
 800c3de:	4659      	mov	r1, fp
 800c3e0:	f7f4 f932 	bl	8000648 <__aeabi_dmul>
 800c3e4:	4652      	mov	r2, sl
 800c3e6:	465b      	mov	r3, fp
 800c3e8:	f7f4 f92e 	bl	8000648 <__aeabi_dmul>
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	4606      	mov	r6, r0
 800c3f2:	460f      	mov	r7, r1
 800c3f4:	4640      	mov	r0, r8
 800c3f6:	4649      	mov	r1, r9
 800c3f8:	f7f3 ff70 	bl	80002dc <__adddf3>
 800c3fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c400:	f7f4 f922 	bl	8000648 <__aeabi_dmul>
 800c404:	4680      	mov	r8, r0
 800c406:	4689      	mov	r9, r1
 800c408:	b964      	cbnz	r4, 800c424 <__ieee754_log+0x274>
 800c40a:	4602      	mov	r2, r0
 800c40c:	460b      	mov	r3, r1
 800c40e:	4630      	mov	r0, r6
 800c410:	4639      	mov	r1, r7
 800c412:	f7f3 ff61 	bl	80002d8 <__aeabi_dsub>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	4650      	mov	r0, sl
 800c41c:	4659      	mov	r1, fp
 800c41e:	f7f3 ff5b 	bl	80002d8 <__aeabi_dsub>
 800c422:	e6da      	b.n	800c1da <__ieee754_log+0x2a>
 800c424:	a322      	add	r3, pc, #136	; (adr r3, 800c4b0 <__ieee754_log+0x300>)
 800c426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c42e:	f7f4 f90b 	bl	8000648 <__aeabi_dmul>
 800c432:	a321      	add	r3, pc, #132	; (adr r3, 800c4b8 <__ieee754_log+0x308>)
 800c434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c438:	4604      	mov	r4, r0
 800c43a:	460d      	mov	r5, r1
 800c43c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c440:	f7f4 f902 	bl	8000648 <__aeabi_dmul>
 800c444:	4642      	mov	r2, r8
 800c446:	464b      	mov	r3, r9
 800c448:	f7f3 ff48 	bl	80002dc <__adddf3>
 800c44c:	4602      	mov	r2, r0
 800c44e:	460b      	mov	r3, r1
 800c450:	4630      	mov	r0, r6
 800c452:	4639      	mov	r1, r7
 800c454:	f7f3 ff40 	bl	80002d8 <__aeabi_dsub>
 800c458:	4652      	mov	r2, sl
 800c45a:	465b      	mov	r3, fp
 800c45c:	f7f3 ff3c 	bl	80002d8 <__aeabi_dsub>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4620      	mov	r0, r4
 800c466:	4629      	mov	r1, r5
 800c468:	e7d9      	b.n	800c41e <__ieee754_log+0x26e>
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
 800c46e:	4650      	mov	r0, sl
 800c470:	4659      	mov	r1, fp
 800c472:	f7f3 ff31 	bl	80002d8 <__aeabi_dsub>
 800c476:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c47a:	f7f4 f8e5 	bl	8000648 <__aeabi_dmul>
 800c47e:	4606      	mov	r6, r0
 800c480:	460f      	mov	r7, r1
 800c482:	2c00      	cmp	r4, #0
 800c484:	f43f af25 	beq.w	800c2d2 <__ieee754_log+0x122>
 800c488:	a309      	add	r3, pc, #36	; (adr r3, 800c4b0 <__ieee754_log+0x300>)
 800c48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c492:	f7f4 f8d9 	bl	8000648 <__aeabi_dmul>
 800c496:	a308      	add	r3, pc, #32	; (adr r3, 800c4b8 <__ieee754_log+0x308>)
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	4604      	mov	r4, r0
 800c49e:	460d      	mov	r5, r1
 800c4a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4a4:	e729      	b.n	800c2fa <__ieee754_log+0x14a>
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	e696      	b.n	800c1da <__ieee754_log+0x2a>
 800c4ac:	f3af 8000 	nop.w
 800c4b0:	fee00000 	.word	0xfee00000
 800c4b4:	3fe62e42 	.word	0x3fe62e42
 800c4b8:	35793c76 	.word	0x35793c76
 800c4bc:	3dea39ef 	.word	0x3dea39ef
 800c4c0:	55555555 	.word	0x55555555
 800c4c4:	3fd55555 	.word	0x3fd55555
 800c4c8:	df3e5244 	.word	0xdf3e5244
 800c4cc:	3fc2f112 	.word	0x3fc2f112
 800c4d0:	96cb03de 	.word	0x96cb03de
 800c4d4:	3fc74664 	.word	0x3fc74664
 800c4d8:	94229359 	.word	0x94229359
 800c4dc:	3fd24924 	.word	0x3fd24924
 800c4e0:	55555593 	.word	0x55555593
 800c4e4:	3fe55555 	.word	0x3fe55555
 800c4e8:	d078c69f 	.word	0xd078c69f
 800c4ec:	3fc39a09 	.word	0x3fc39a09
 800c4f0:	1d8e78af 	.word	0x1d8e78af
 800c4f4:	3fcc71c5 	.word	0x3fcc71c5
 800c4f8:	9997fa04 	.word	0x9997fa04
 800c4fc:	3fd99999 	.word	0x3fd99999
 800c500:	c3500000 	.word	0xc3500000
 800c504:	43500000 	.word	0x43500000
 800c508:	7fefffff 	.word	0x7fefffff
 800c50c:	3ff00000 	.word	0x3ff00000
 800c510:	3fe00000 	.word	0x3fe00000

0800c514 <matherr>:
 800c514:	2000      	movs	r0, #0
 800c516:	4770      	bx	lr

0800c518 <nan>:
 800c518:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c520 <nan+0x8>
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	00000000 	.word	0x00000000
 800c524:	7ff80000 	.word	0x7ff80000

0800c528 <_init>:
 800c528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52a:	bf00      	nop
 800c52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52e:	bc08      	pop	{r3}
 800c530:	469e      	mov	lr, r3
 800c532:	4770      	bx	lr

0800c534 <_fini>:
 800c534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c536:	bf00      	nop
 800c538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c53a:	bc08      	pop	{r3}
 800c53c:	469e      	mov	lr, r3
 800c53e:	4770      	bx	lr
